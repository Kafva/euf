; SMT 2
(set-info :source "Generated by CBMC 5.59.0 (cbmc-5.59.0)")
(set-option :produce-models true)
(set-option :produce-proofs true)
(set-logic AUFBV)

; set_to true (equal)
(define-fun |__CPROVER_alloca_object#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_dead_object#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_deallocated#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_malloc_is_new_array#1| () Bool false)

; set_to true (equal)
(define-fun |__CPROVER_max_malloc_size#1| () (_ BitVec 64) (_ bv36028797018963968 64))

; set_to true (equal)
(define-fun |__CPROVER_memory_leak#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_new_object#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_next_thread_id#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_next_thread_key!0#1| () (_ BitVec 64) (_ bv0 64))

; set_to true (equal)
(define-fun |__CPROVER_pipe_count#1| () (_ BitVec 32) (_ bv0 32))

; set_to true (equal)
(define-fun |__CPROVER_rounding_mode!0#1| () (_ BitVec 32) (_ bv0 32))

; set_to true (equal)
(define-fun |__CPROVER_thread_id!0#1| () (_ BitVec 64) (_ bv0 64))

; the following is a substitute for lambda i. x
(declare-fun array_of.0 () (Array (_ BitVec 64) (_ BitVec 64)))
(assert (forall ((i (_ BitVec 64))) (= (select array_of.0 i) (_ bv0 64))))
; set_to true (equal)
(define-fun |__CPROVER_thread_key_dtors!0#1| () (Array (_ BitVec 64) (_ BitVec 64)) array_of.0)

; the following is a substitute for lambda i. x
(declare-fun array_of.1 () (Array (_ BitVec 64) (_ BitVec 64)))
(assert (forall ((i (_ BitVec 64))) (= (select array_of.1 i) (_ bv0 64))))
; set_to true (equal)
(define-fun |__CPROVER_thread_keys!0#1| () (Array (_ BitVec 64) (_ BitVec 64)) array_of.1)

; the following is a substitute for lambda i. x
(declare-fun array_of.2 () (Array (_ BitVec 64) (_ BitVec 1)))
(assert (forall ((i (_ BitVec 64))) (= (select array_of.2 i) (ite false #b1 #b0))))
; set_to true (equal)
(define-fun |__CPROVER_threads_exited#1| () (Array (_ BitVec 64) (_ BitVec 1)) array_of.2)

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ BitVec 32))
; set_to true (equal)
(define-fun |euf_main::$tmp::return_value_nondet_int!0@1#2| () (_ BitVec 32) |nondet_symex::nondet0|)

; set_to true (equal)
(define-fun |euf_main::1::x!0@1#2| () (_ BitVec 32) |euf_main::$tmp::return_value_nondet_int!0@1#2|)

; find_symbols
(declare-fun |nondet_symex::nondet1| () (_ BitVec 32))
; set_to true (equal)
(define-fun |euf_main::$tmp::return_value_nondet_int$0!0@1#2| () (_ BitVec 32) |nondet_symex::nondet1|)

; set_to true (equal)
(define-fun |euf_main::1::y!0@1#2| () (_ BitVec 32) |euf_main::$tmp::return_value_nondet_int$0!0@1#2|)

; set_to true (equal)
(define-fun |sum::a!0@1#1| () (_ BitVec 32) |euf_main::1::x!0@1#2|)

; set_to true (equal)
(define-fun |sum::b!0@1#1| () (_ BitVec 32) |euf_main::1::y!0@1#2|)

; set_to true (equal)
(define-fun |goto_symex::return_value::sum!0#1| () (_ BitVec 32) (bvadd |sum::a!0@1#1| |sum::b!0@1#1|))

; set_to true (equal)
(define-fun |euf_main::$tmp::return_value_sum!0@1#2| () (_ BitVec 32) |goto_symex::return_value::sum!0#1|)

; find_symbols
(declare-fun |euf_main::1::x!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 0 with expr ID of =
(define-fun |B0| () Bool (= |euf_main::1::x!0@1#1| |euf_main::1::x!0@1#1|))

; convert
; Converting var_no 1 with expr ID of =
(define-fun |B1| () Bool (= |euf_main::1::x!0@1#1| |euf_main::1::x!0@1#1|))

; find_symbols
(declare-fun |euf_main::$tmp::return_value_nondet_int!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 2 with expr ID of =
(define-fun |B2| () Bool (= |euf_main::$tmp::return_value_nondet_int!0@1#1| |euf_main::$tmp::return_value_nondet_int!0@1#1|))

; convert
; Converting var_no 3 with expr ID of =
(define-fun |B3| () Bool (= |euf_main::$tmp::return_value_nondet_int!0@1#1| |euf_main::$tmp::return_value_nondet_int!0@1#1|))

; find_symbols
(declare-fun |euf_main::1::y!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 4 with expr ID of =
(define-fun |B4| () Bool (= |euf_main::1::y!0@1#1| |euf_main::1::y!0@1#1|))

; convert
; Converting var_no 5 with expr ID of =
(define-fun |B5| () Bool (= |euf_main::1::y!0@1#1| |euf_main::1::y!0@1#1|))

; find_symbols
(declare-fun |euf_main::$tmp::return_value_nondet_int$0!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 6 with expr ID of =
(define-fun |B6| () Bool (= |euf_main::$tmp::return_value_nondet_int$0!0@1#1| |euf_main::$tmp::return_value_nondet_int$0!0@1#1|))

; convert
; Converting var_no 7 with expr ID of =
(define-fun |B7| () Bool (= |euf_main::$tmp::return_value_nondet_int$0!0@1#1| |euf_main::$tmp::return_value_nondet_int$0!0@1#1|))

; find_symbols
(declare-fun |euf_main::$tmp::return_value_sum!0@1#1| () (_ BitVec 32))
; convert
; Converting var_no 8 with expr ID of =
(define-fun |B8| () Bool (= |euf_main::$tmp::return_value_sum!0@1#1| |euf_main::$tmp::return_value_sum!0@1#1|))

; convert
; Converting var_no 9 with expr ID of =
(define-fun |B9| () Bool (= |euf_main::$tmp::return_value_sum!0@1#1| |euf_main::$tmp::return_value_sum!0@1#1|))

; find_symbols
(declare-fun |symex::args::0| () (_ BitVec 32))
; set_to true
(assert (= |euf_main::1::x!0@1#2| |symex::args::0|))

; find_symbols
(declare-fun |symex::args::1| () (_ BitVec 32))
; set_to true
(assert (= |euf_main::1::y!0@1#2| |symex::args::1|))

; set_to false
(assert (not (= |euf_main::$tmp::return_value_sum!0@1#2| (bvadd |euf_main::1::x!0@1#2| |euf_main::1::y!0@1#2|))))

; convert
; Converting var_no 10 with expr ID of not
(define-fun |B10| () Bool (not false))

; set_to true
(assert |B10|)

(check-sat)
(get-proof)

;(get-value (|B0|))
;(get-value (|B1|))
;(get-value (|B10|))
;(get-value (|B2|))
;(get-value (|B3|))
;(get-value (|B4|))
;(get-value (|B5|))
;(get-value (|B6|))
;(get-value (|B7|))
;(get-value (|B8|))
;(get-value (|B9|))
;(get-value (|__CPROVER_alloca_object#1|))
;(get-value (|__CPROVER_dead_object#1|))
;(get-value (|__CPROVER_deallocated#1|))
;(get-value (|__CPROVER_malloc_is_new_array#1|))
;(get-value (|__CPROVER_max_malloc_size#1|))
;(get-value (|__CPROVER_memory_leak#1|))
;(get-value (|__CPROVER_new_object#1|))
;(get-value (|__CPROVER_next_thread_id#1|))
;(get-value (|__CPROVER_next_thread_key!0#1|))
;(get-value (|__CPROVER_pipe_count#1|))
;(get-value (|__CPROVER_rounding_mode!0#1|))
;(get-value (|__CPROVER_thread_id!0#1|))
;(get-value (|__CPROVER_thread_key_dtors!0#1|))
;(get-value (|__CPROVER_thread_keys!0#1|))
;(get-value (|__CPROVER_threads_exited#1|))
;(get-value (|euf_main::$tmp::return_value_nondet_int!0@1#1|))
;(get-value (|euf_main::$tmp::return_value_nondet_int!0@1#2|))
;(get-value (|euf_main::$tmp::return_value_nondet_int$0!0@1#1|))
;(get-value (|euf_main::$tmp::return_value_nondet_int$0!0@1#2|))
;(get-value (|euf_main::$tmp::return_value_sum!0@1#1|))
;(get-value (|euf_main::$tmp::return_value_sum!0@1#2|))
;(get-value (|euf_main::1::x!0@1#1|))
;(get-value (|euf_main::1::x!0@1#2|))
;(get-value (|euf_main::1::y!0@1#1|))
;(get-value (|euf_main::1::y!0@1#2|))
;(get-value (|goto_symex::return_value::sum!0#1|))
;(get-value (|nondet_symex::nondet0|))
;(get-value (|nondet_symex::nondet1|))
;(get-value (|sum::a!0@1#1|))
;(get-value (|sum::b!0@1#1|))
;(get-value (|symex::args::0|))
;(get-value (|symex::args::1|))

(exit)
; end of SMT2 file
