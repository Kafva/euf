; ModuleID = 'src/builtin.c'
source_filename = "src/builtin.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.cfunction = type { void (...)*, i8*, i32 }
%struct.OnigEncodingTypeST = type { i32 (i8*)*, i8*, i32, i32, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i32)*, i32 (i32, i8*)*, i32 (i32, i8**, i8*, i8*)*, i32 (i32, i32 (i32, i32*, i32, i8*)*, i8*)*, i32 (i32, i8*, i8*, %struct.OnigCaseFoldCodeItem*)*, i32 (%struct.OnigEncodingTypeST*, i8*, i8*)*, i32 (i32, i32)*, i32 (i32, i32*, i32**)*, i8* (i8*, i8*)*, i32 (i8*, i8*)*, i32 ()*, i32 ()*, i32 (i8*, i8*)* }
%struct.OnigCaseFoldCodeItem = type { i32, i32, [3 x i32] }
%struct.OnigSyntaxType = type { i32, i32, i32, i32, %struct.OnigMetaCharTableType }
%struct.OnigMetaCharTableType = type { i32, i32, i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.jq_state = type opaque
%struct.block = type { %struct.inst*, %struct.inst* }
%struct.inst = type opaque
%struct.locfile = type { %struct.jv, i8*, i32, i32*, i32, i8*, %struct.jq_state*, i32 }
%struct.jv = type { i8, i8, i16, i32, %union.anon }
%union.anon = type { %struct.jv_refcnt* }
%struct.jv_refcnt = type opaque
%struct.re_pattern_buffer = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.OnigRepeatRange*, %struct.OnigEncodingTypeST*, i32, %struct.OnigSyntaxType*, i32, i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, [256 x i8], i32*, i32*, i32, i32, %struct.re_pattern_buffer* }
%struct.OnigRepeatRange = type { i32, i32 }
%struct.OnigErrorInfo = type { %struct.OnigEncodingTypeST*, i8*, i8* }
%struct.re_registers = type { i32, i32, i32*, i32*, %struct.OnigCaptureTreeNodeStruct* }
%struct.OnigCaptureTreeNodeStruct = type { i32, i32, i32, i32, i32, %struct.OnigCaptureTreeNodeStruct** }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.timeval = type { i64, i64 }

@.str = private unnamed_addr constant [10 x i8] c"<builtin>\00", align 1
@jq_builtins = internal constant [11423 x i8] c"def halt_error: halt_error(5);\0Adef error(msg): msg|error;\0Adef map(f): [.[] | f];\0Adef select(f): if f then . else empty end;\0Adef sort_by(f): _sort_by_impl(map([f]));\0Adef group_by(f): _group_by_impl(map([f]));\0Adef unique: group_by(.) | map(.[0]);\0Adef unique_by(f): group_by(f) | map(.[0]);\0Adef max_by(f): _max_by_impl(map([f]));\0Adef min_by(f): _min_by_impl(map([f]));\0Adef add: reduce .[] as $x (null; . + $x);\0Adef del(f): delpaths([path(f)]);\0Adef _assign(paths; $value): reduce path(paths) as $p (.; setpath($p; $value));\0Adef _modify(paths; update):\0A    reduce path(paths) as $p (.;\0A        . as $dot\0A      | null\0A      | label $out\0A      | ($dot | getpath($p)) as $v\0A      | (\0A          (   $$$$v\0A            | update\0A            | (., break $out) as $v\0A            | $$$$dot\0A            | setpath($p; $v)\0A          ),\0A          (\0A              $$$$dot\0A            | delpaths([$p])\0A          )\0A        )\0A    );\0Adef map_values(f): .[] |= f;\0A\0A# recurse\0Adef recurse(f): def r: ., (f | r); r;\0Adef recurse(f; cond): def r: ., (f | select(cond) | r); r;\0Adef recurse: recurse(.[]?);\0Adef recurse_down: recurse;\0A\0Adef to_entries: [keys_unsorted[] as $k | {key: $k, value: .[$k]}];\0Adef from_entries: map({(.key // .Key // .name // .Name): (if has(\22value\22) then .value else .Value end)}) | add | .//={};\0Adef with_entries(f): to_entries | map(f) | from_entries;\0Adef reverse: [.[length - 1 - range(0;length)]];\0Adef indices($i): if type == \22array\22 and ($i|type) == \22array\22 then .[$i]\0A  elif type == \22array\22 then .[[$i]]\0A  elif type == \22string\22 and ($i|type) == \22string\22 then _strindices($i)\0A  else .[$i] end;\0Adef index($i):   indices($i) | .[0];       # TODO: optimize\0Adef rindex($i):  indices($i) | .[-1:][0];  # TODO: optimize\0Adef paths: path(recurse(if (type|. == \22array\22 or . == \22object\22) then .[] else empty end))|select(length > 0);\0Adef paths(node_filter): . as $dot|paths|select(. as $p|$dot|getpath($p)|node_filter);\0Adef isfinite: type == \22number\22 and (isinfinite | not);\0Adef arrays: select(type == \22array\22);\0Adef objects: select(type == \22object\22);\0Adef iterables: select(type|. == \22array\22 or . == \22object\22);\0Adef booleans: select(type == \22boolean\22);\0Adef numbers: select(type == \22number\22);\0Adef normals: select(isnormal);\0Adef finites: select(isfinite);\0Adef strings: select(type == \22string\22);\0Adef nulls: select(. == null);\0Adef values: select(. != null);\0Adef scalars: select(type|. != \22array\22 and . != \22object\22);\0Adef leaf_paths: paths(scalars);\0Adef join($x): reduce .[] as $i (null;\0A            (if .==null then \22\22 else .+$x end) +\0A            ($i | if type==\22boolean\22 or type==\22number\22 then tostring else .//\22\22 end)\0A        ) // \22\22;\0Adef _flatten($x): reduce .[] as $i ([]; if $i | type == \22array\22 and $x != 0 then . + ($i | _flatten($x-1)) else . + [$i] end);\0Adef flatten($x): if $x < 0 then error(\22flatten depth must not be negative\22) else _flatten($x) end;\0Adef flatten: _flatten(-1);\0Adef range($x): range(0;$x);\0Adef fromdateiso8601: strptime(\22%Y-%m-%dT%H:%M:%SZ\22)|mktime;\0Adef todateiso8601: strftime(\22%Y-%m-%dT%H:%M:%SZ\22);\0Adef fromdate: fromdateiso8601;\0Adef todate: todateiso8601;\0Adef match(re; mode): _match_impl(re; mode; false)|.[];\0Adef match($val): ($val|type) as $vt | if $vt == \22string\22 then match($val; null)\0A   elif $vt == \22array\22 and ($val | length) > 1 then match($val[0]; $val[1])\0A   elif $vt == \22array\22 and ($val | length) > 0 then match($val[0]; null)\0A   else error( $vt + \22 not a string or array\22) end;\0Adef test(re; mode): _match_impl(re; mode; true);\0Adef test($val): ($val|type) as $vt | if $vt == \22string\22 then test($val; null)\0A   elif $vt == \22array\22 and ($val | length) > 1 then test($val[0]; $val[1])\0A   elif $vt == \22array\22 and ($val | length) > 0 then test($val[0]; null)\0A   else error( $vt + \22 not a string or array\22) end;\0Adef capture(re; mods): match(re; mods) | reduce ( .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair ({}; . + $pair);\0Adef capture($val): ($val|type) as $vt | if $vt == \22string\22 then capture($val; null)\0A   elif $vt == \22array\22 and ($val | length) > 1 then capture($val[0]; $val[1])\0A   elif $vt == \22array\22 and ($val | length) > 0 then capture($val[0]; null)\0A   else error( $vt + \22 not a string or array\22) end;\0Adef scan(re):\0A  match(re; \22g\22)\0A  |  if (.captures|length > 0)\0A      then [ .captures | .[] | .string ]\0A      else .string\0A      end ;\0A#\0A# If input is an array, then emit a stream of successive subarrays of length n (or less),\0A# and similarly for strings.\0Adef _nwise(a; $n): if a|length <= $n then a else a[0:$n] , _nwise(a[$n:]; $n) end;\0Adef _nwise($n): _nwise(.; $n);\0A#\0A# splits/1 produces a stream; split/1 is retained for backward compatibility.\0Adef splits($re; flags): . as $s\0A#  # multiple occurrences of \22g\22 are acceptable\0A  | [ match($re; \22g\22 + flags) | (.offset, .offset + .length) ]\0A  | [0] + . +[$s|length]\0A  | _nwise(2)\0A  | $s[.[0]:.[1] ] ;\0Adef splits($re): splits($re; null);\0A#\0A# split emits an array for backward compatibility\0Adef split($re; flags): [ splits($re; flags) ];\0A#\0A# If s contains capture variables, then create a capture object and pipe it to s\0Adef sub($re; s):\0A  . as $in\0A  | [match($re)]\0A  | if length == 0 then $in\0A    else .[0]\0A    | . as $r\0A#  # create the \22capture\22 object:\0A    | reduce ( $r | .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair\0A        ({}; . + $pair)\0A    | $in[0:$r.offset] + s + $in[$r.offset+$r.length:]\0A    end ;\0A#\0A# If s contains capture variables, then create a capture object and pipe it to s\0Adef sub($re; s; flags):\0A  def subg: [explode[] | select(. != 103)] | implode;\0A  # \22fla\22 should be flags with all occurrences of g removed; gs should be non-nil if flags has a g\0A  def sub1(fla; gs):\0A    def mysub:\0A      . as $in\0A      | [match($re; fla)]\0A      | if length == 0 then $in\0A        else .[0] as $edit\0A        | ($edit | .offset + .length) as $len\0A        # create the \22capture\22 object:\0A        | reduce ( $edit | .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair\0A            ({}; . + $pair)\0A        | $in[0:$edit.offset]\0A          + s\0A          + ($in[$len:] | if length > 0 and gs then mysub else . end)\0A        end ;\0A    mysub ;\0A    (flags | index(\22g\22)) as $gs\0A    | (flags | if $gs then subg else . end) as $fla\0A    | sub1($fla; $gs);\0A#\0Adef sub($re; s): sub($re; s; \22\22);\0A# repeated substitution of re (which may contain named captures)\0Adef gsub($re; s; flags): sub($re; s; flags + \22g\22);\0Adef gsub($re; s): sub($re; s; \22g\22);\0A\0A########################################################################\0A# generic iterator/generator\0Adef while(cond; update):\0A     def _while:\0A         if cond then ., (update | _while) else empty end;\0A     _while;\0Adef until(cond; next):\0A     def _until:\0A         if cond then . else (next|_until) end;\0A     _until;\0Adef limit($n; exp):\0A    if $n > 0 then label $out | foreach exp as $item ($n; .-1; $item, if . <= 0 then break $out else empty end)\0A    elif $n == 0 then empty\0A    else exp end;\0A# range/3, with a `by` expression argument\0Adef range($init; $upto; $by):\0A    if $by > 0 then $init|while(. < $upto; . + $by)\0A  elif $by < 0 then $init|while(. > $upto; . + $by)\0A  else empty end;\0Adef first(g): label $out | g | ., break $out;\0Adef isempty(g): first((g|false), true);\0Adef all(generator; condition): isempty(generator|condition and empty);\0Adef any(generator; condition): isempty(generator|condition or empty)|not;\0Adef all(condition): all(.[]; condition);\0Adef any(condition): any(.[]; condition);\0Adef all: all(.[]; .);\0Adef any: any(.[]; .);\0Adef last(g): reduce g as $item (null; $item);\0Adef nth($n; g): if $n < 0 then error(\22nth doesn't support negative indices\22) else last(limit($n + 1; g)) end;\0Adef first: .[0];\0Adef last: .[-1];\0Adef nth($n): .[$n];\0Adef combinations:\0A    if length == 0 then [] else\0A        .[0][] as $x\0A          | (.[1:] | combinations) as $y\0A          | [$x] + $y\0A    end;\0Adef combinations(n):\0A    . as $dot\0A      | [range(n) | $dot]\0A      | combinations;\0A# transpose a possibly jagged matrix, quickly;\0A# rows are padded with nulls so the result is always rectangular.\0Adef transpose:\0A  if . == [] then []\0A  else . as $in\0A  | (map(length) | max) as $max\0A  | length as $length\0A  | reduce range(0; $max) as $j\0A      ([]; . + [reduce range(0;$length) as $i ([]; . + [ $in[$i][$j] ] )] )\0A\09        end;\0Adef in(xs): . as $x | xs | has($x);\0Adef inside(xs): . as $x | xs | contains($x);\0Adef repeat(exp):\0A     def _repeat:\0A         exp, _repeat;\0A     _repeat;\0Adef inputs: try repeat(input) catch if .==\22break\22 then empty else error end;\0A# like ruby's downcase - only characters A to Z are affected\0Adef ascii_downcase:\0A  explode | map( if 65 <= . and . <= 90 then . + 32  else . end) | implode;\0A# like ruby's upcase - only characters a to z are affected\0Adef ascii_upcase:\0A  explode | map( if 97 <= . and . <= 122 then . - 32  else . end) | implode;\0A\0A# Streaming utilities\0Adef truncate_stream(stream):\0A  . as $n | null | stream | . as $input | if (.[0]|length) > $n then setpath([0];$input[0][$n:]) else empty end;\0Adef fromstream(i): {x: null, e: false} as $init |\0A  # .x = object being built; .e = emit and reset state\0A  foreach i as $i ($init\0A  ; if .e then $init else . end\0A  | if $i|length == 2\0A    then setpath([\22e\22]; $i[0]|length==0) | setpath([\22x\22]+$i[0]; $i[1])\0A    else setpath([\22e\22]; $i[0]|length==1) end\0A  ; if .e then .x else empty end);\0Adef tostream:\0A  path(def r: (.[]?|r), .; r) as $p |\0A  getpath($p) |\0A  reduce path(.[]?) as $q ([$p, .]; [$p+$q]);\0A\0A\0A# Assuming the input array is sorted, bsearch/1 returns\0A# the index of the target if the target is in the input array; and otherwise\0A#  (-1 - ix), where ix is the insertion point that would leave the array sorted.\0A# If the input is not sorted, bsearch will terminate but with irrelevant results.\0Adef bsearch($target):\0A  if length == 0 then -1\0A  elif length == 1 then\0A     if $target == .[0] then 0 elif $target < .[0] then -1 else -2 end\0A  else . as $in\0A    # state variable: [start, end, answer]\0A    # where start and end are the upper and lower offsets to use.\0A    | [0, length-1, null]\0A    | until( .[0] > .[1] ;\0A             if .[2] != null then (.[1] = -1)               # i.e. break\0A             else\0A               ( ( (.[1] + .[0]) / 2 ) | floor ) as $mid\0A               | $in[$mid] as $monkey\0A               | if $monkey == $target  then (.[2] = $mid)   # success\0A                 elif .[0] == .[1]     then (.[1] = -1)     # failure\0A                 elif $monkey < $target then (.[0] = ($mid + 1))\0A                 else (.[1] = ($mid - 1))\0A                 end\0A             end )\0A    | if .[2] == null then          # compute the insertion point\0A         if $in[ .[0] ] < $target then (-2 -.[0])\0A         else (-1 -.[0])\0A         end\0A      else .[2]\0A      end\0A  end;\0A\0A# Apply f to composite entities recursively, and to atoms\0Adef walk(f):\0A  . as $in\0A  | if type == \22object\22 then\0A      reduce keys_unsorted[] as $key\0A        ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f\0A  elif type == \22array\22 then map( walk(f) ) | f\0A  else f\0A  end;\0A\0A# SQL-ish operators here:\0Adef INDEX(stream; idx_expr):\0A  reduce stream as $row ({}; .[$row|idx_expr|tostring] = $row);\0Adef INDEX(idx_expr): INDEX(.[]; idx_expr);\0Adef JOIN($idx; idx_expr):\0A  [.[] | [., $idx[idx_expr]]];\0Adef JOIN($idx; stream; idx_expr):\0A  stream | [., $idx[idx_expr]];\0Adef JOIN($idx; stream; idx_expr; join_expr):\0A  stream | [., $idx[idx_expr]] | join_expr;\0Adef IN(s): any(s == .; .);\0Adef IN(src; s): any(src == s; .);\0Adef pow10: \22Error: pow10/0 not found at build time\22|error;\00", align 16, !dbg !0
@.str.1 = private unnamed_addr constant [9 x i8] c"!nerrors\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"src/builtin.c\00", align 1
@__PRETTY_FUNCTION__.builtins_bind = private unnamed_addr constant [39 x i8] c"int builtins_bind(jq_state *, block *)\00", align 1
@function_list = internal constant [129 x %struct.cfunction] [%struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_acos to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_acosh to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_asin to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_asinh to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_atan to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_atan2 to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_atanh to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_cbrt to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_cos to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_cosh to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_exp to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_exp2 to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_floor to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_hypot to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_j0 to void (...)*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_j1 to void (...)*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_log to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_log10 to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_log2 to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_pow to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_remainder to void (...)*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_sin to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_sinh to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_sqrt to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_tan to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_tanh to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_tgamma to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_y0 to void (...)*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_y1 to void (...)*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_jn to void (...)*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_yn to void (...)*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_ceil to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_copysign to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_drem to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_erf to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.46, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_erfc to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_exp10 to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_expm1 to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_fabs to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_fdim to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*, %struct.jv*)* @f_fma to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52, i32 0, i32 0), i32 4 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_fmax to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_fmin to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_fmod to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_gamma to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_lgamma to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_log1p to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_logb to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_nearbyint to void (...)*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.60, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_nextafter to void (...)*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.61, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_nexttoward to void (...)*), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.62, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_rint to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_round to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.64, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_scalb to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_scalbln to void (...)*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.66, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_significand to void (...)*), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.67, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_trunc to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_ldexp to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_frexp to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_modf to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.71, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_lgamma_r to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_plus to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_negate to void (...)*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.74, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_minus to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_multiply to void (...)*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_divide to void (...)*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_mod to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_dump to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.79, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_json_parse to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.80, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_tonumber to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.81, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_tostring to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.82, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_keys to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_keys_unsorted to void (...)*), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.84, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_startswith to void (...)*), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.85, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_endswith to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_ltrimstr to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.87, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_rtrimstr to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_string_split to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_string_explode to void (...)*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_string_implode to void (...)*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.91, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_string_indexes to void (...)*), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.92, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_setpath to void (...)*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.93, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_getpath to void (...)*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.94, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_delpaths to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.95, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_has to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.96, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_equal to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_notequal to void (...)*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_less to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_greater to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.100, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_lesseq to void (...)*), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.101, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*)* @f_greatereq to void (...)*), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.102, i32 0, i32 0), i32 3 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_contains to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.103, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_length to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_utf8bytelength to void (...)*), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.105, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_type to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.106, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_isinfinite to void (...)*), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.107, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_isnan to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_isnormal to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_infinite to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_nan to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.111, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_sort to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.112, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_sort_by_impl to void (...)*), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.113, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_group_by_impl to void (...)*), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.114, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_min to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.115, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_max to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.116, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_min_by_impl to void (...)*), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_max_by_impl to void (...)*), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.118, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_error to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.119, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_format to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.120, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_env to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.121, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_halt to void (...)*), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_halt_error to void (...)*), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_get_search_list to void (...)*), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_get_prog_origin to void (...)*), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.125, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_get_jq_origin to void (...)*), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.126, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv*, %struct.jv*)* @f_match to void (...)*), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.127, i32 0, i32 0), i32 4 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_modulemeta to void (...)*), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_input to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.129, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_debug to void (...)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.130, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_stderr to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.131, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_strptime to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_strftime to void (...)*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.133, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*)* @f_strflocaltime to void (...)*), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.134, i32 0, i32 0), i32 2 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_mktime to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.135, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_gmtime to void (...)*), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.136, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_localtime to void (...)*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.137, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_now to void (...)*), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.138, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_current_filename to void (...)*), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.139, i32 0, i32 0), i32 1 }, %struct.cfunction { void (...)* bitcast ({ i64, %struct.jv_refcnt* } (%struct.jq_state*, i64, %struct.jv_refcnt*)* @f_current_line to void (...)*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.140, i32 0, i32 0), i32 1 }], align 16, !dbg !132
@.str.3 = private unnamed_addr constant [6 x i8] c"empty\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"not\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"path\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"arg\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"rangevar\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"rangestart\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"start\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"range\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"acos\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"acosh\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"asin\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"asinh\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"atan\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"atan2\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"atanh\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"cbrt\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"cos\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"cosh\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"exp\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"exp2\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c"floor\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"hypot\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"j0\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"j1\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"log\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"log10\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"log2\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"pow\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"remainder\00", align 1
@.str.33 = private unnamed_addr constant [4 x i8] c"sin\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"sinh\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"sqrt\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"tan\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"tanh\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c"tgamma\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"y0\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"y1\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"jn\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"yn\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"ceil\00", align 1
@.str.44 = private unnamed_addr constant [9 x i8] c"copysign\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"drem\00", align 1
@.str.46 = private unnamed_addr constant [4 x i8] c"erf\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"erfc\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"exp10\00", align 1
@.str.49 = private unnamed_addr constant [6 x i8] c"expm1\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"fabs\00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c"fdim\00", align 1
@.str.52 = private unnamed_addr constant [4 x i8] c"fma\00", align 1
@.str.53 = private unnamed_addr constant [5 x i8] c"fmax\00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c"fmin\00", align 1
@.str.55 = private unnamed_addr constant [5 x i8] c"fmod\00", align 1
@.str.56 = private unnamed_addr constant [6 x i8] c"gamma\00", align 1
@.str.57 = private unnamed_addr constant [7 x i8] c"lgamma\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"log1p\00", align 1
@.str.59 = private unnamed_addr constant [5 x i8] c"logb\00", align 1
@.str.60 = private unnamed_addr constant [10 x i8] c"nearbyint\00", align 1
@.str.61 = private unnamed_addr constant [10 x i8] c"nextafter\00", align 1
@.str.62 = private unnamed_addr constant [11 x i8] c"nexttoward\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"rint\00", align 1
@.str.64 = private unnamed_addr constant [6 x i8] c"round\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"scalb\00", align 1
@.str.66 = private unnamed_addr constant [8 x i8] c"scalbln\00", align 1
@.str.67 = private unnamed_addr constant [12 x i8] c"significand\00", align 1
@.str.68 = private unnamed_addr constant [6 x i8] c"trunc\00", align 1
@.str.69 = private unnamed_addr constant [6 x i8] c"ldexp\00", align 1
@.str.70 = private unnamed_addr constant [6 x i8] c"frexp\00", align 1
@.str.71 = private unnamed_addr constant [5 x i8] c"modf\00", align 1
@.str.72 = private unnamed_addr constant [9 x i8] c"lgamma_r\00", align 1
@.str.73 = private unnamed_addr constant [6 x i8] c"_plus\00", align 1
@.str.74 = private unnamed_addr constant [8 x i8] c"_negate\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"_minus\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"_multiply\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"_divide\00", align 1
@.str.78 = private unnamed_addr constant [5 x i8] c"_mod\00", align 1
@.str.79 = private unnamed_addr constant [7 x i8] c"tojson\00", align 1
@.str.80 = private unnamed_addr constant [9 x i8] c"fromjson\00", align 1
@.str.81 = private unnamed_addr constant [9 x i8] c"tonumber\00", align 1
@.str.82 = private unnamed_addr constant [9 x i8] c"tostring\00", align 1
@.str.83 = private unnamed_addr constant [5 x i8] c"keys\00", align 1
@.str.84 = private unnamed_addr constant [14 x i8] c"keys_unsorted\00", align 1
@.str.85 = private unnamed_addr constant [11 x i8] c"startswith\00", align 1
@.str.86 = private unnamed_addr constant [9 x i8] c"endswith\00", align 1
@.str.87 = private unnamed_addr constant [9 x i8] c"ltrimstr\00", align 1
@.str.88 = private unnamed_addr constant [9 x i8] c"rtrimstr\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"split\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"explode\00", align 1
@.str.91 = private unnamed_addr constant [8 x i8] c"implode\00", align 1
@.str.92 = private unnamed_addr constant [12 x i8] c"_strindices\00", align 1
@.str.93 = private unnamed_addr constant [8 x i8] c"setpath\00", align 1
@.str.94 = private unnamed_addr constant [8 x i8] c"getpath\00", align 1
@.str.95 = private unnamed_addr constant [9 x i8] c"delpaths\00", align 1
@.str.96 = private unnamed_addr constant [4 x i8] c"has\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"_equal\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"_notequal\00", align 1
@.str.99 = private unnamed_addr constant [6 x i8] c"_less\00", align 1
@.str.100 = private unnamed_addr constant [9 x i8] c"_greater\00", align 1
@.str.101 = private unnamed_addr constant [8 x i8] c"_lesseq\00", align 1
@.str.102 = private unnamed_addr constant [11 x i8] c"_greatereq\00", align 1
@.str.103 = private unnamed_addr constant [9 x i8] c"contains\00", align 1
@.str.104 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str.105 = private unnamed_addr constant [15 x i8] c"utf8bytelength\00", align 1
@.str.106 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.107 = private unnamed_addr constant [11 x i8] c"isinfinite\00", align 1
@.str.108 = private unnamed_addr constant [6 x i8] c"isnan\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"isnormal\00", align 1
@.str.110 = private unnamed_addr constant [9 x i8] c"infinite\00", align 1
@.str.111 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.112 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@.str.113 = private unnamed_addr constant [14 x i8] c"_sort_by_impl\00", align 1
@.str.114 = private unnamed_addr constant [15 x i8] c"_group_by_impl\00", align 1
@.str.115 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@.str.116 = private unnamed_addr constant [4 x i8] c"max\00", align 1
@.str.117 = private unnamed_addr constant [13 x i8] c"_min_by_impl\00", align 1
@.str.118 = private unnamed_addr constant [13 x i8] c"_max_by_impl\00", align 1
@.str.119 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.120 = private unnamed_addr constant [7 x i8] c"format\00", align 1
@.str.121 = private unnamed_addr constant [4 x i8] c"env\00", align 1
@.str.122 = private unnamed_addr constant [5 x i8] c"halt\00", align 1
@.str.123 = private unnamed_addr constant [11 x i8] c"halt_error\00", align 1
@.str.124 = private unnamed_addr constant [16 x i8] c"get_search_list\00", align 1
@.str.125 = private unnamed_addr constant [16 x i8] c"get_prog_origin\00", align 1
@.str.126 = private unnamed_addr constant [14 x i8] c"get_jq_origin\00", align 1
@.str.127 = private unnamed_addr constant [12 x i8] c"_match_impl\00", align 1
@.str.128 = private unnamed_addr constant [11 x i8] c"modulemeta\00", align 1
@.str.129 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.130 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.131 = private unnamed_addr constant [7 x i8] c"stderr\00", align 1
@.str.132 = private unnamed_addr constant [9 x i8] c"strptime\00", align 1
@.str.133 = private unnamed_addr constant [9 x i8] c"strftime\00", align 1
@.str.134 = private unnamed_addr constant [14 x i8] c"strflocaltime\00", align 1
@.str.135 = private unnamed_addr constant [7 x i8] c"mktime\00", align 1
@.str.136 = private unnamed_addr constant [7 x i8] c"gmtime\00", align 1
@.str.137 = private unnamed_addr constant [10 x i8] c"localtime\00", align 1
@.str.138 = private unnamed_addr constant [4 x i8] c"now\00", align 1
@.str.139 = private unnamed_addr constant [15 x i8] c"input_filename\00", align 1
@.str.140 = private unnamed_addr constant [18 x i8] c"input_line_number\00", align 1
@.str.141 = private unnamed_addr constant [16 x i8] c"number required\00", align 1
@.str.142 = private unnamed_addr constant [11 x i8] c"%s (%s) %s\00", align 1
@.str.143 = private unnamed_addr constant [16 x i8] c"cannot be added\00", align 1
@.str.144 = private unnamed_addr constant [23 x i8] c"%s (%s) and %s (%s) %s\00", align 1
@.str.145 = private unnamed_addr constant [18 x i8] c"cannot be negated\00", align 1
@.str.146 = private unnamed_addr constant [21 x i8] c"cannot be subtracted\00", align 1
@.str.147 = private unnamed_addr constant [21 x i8] c"cannot be multiplied\00", align 1
@.str.148 = private unnamed_addr constant [46 x i8] c"cannot be divided because the divisor is zero\00", align 1
@.str.149 = private unnamed_addr constant [18 x i8] c"cannot be divided\00", align 1
@.str.150 = private unnamed_addr constant [58 x i8] c"cannot be divided (remainder) because the divisor is zero\00", align 1
@.str.151 = private unnamed_addr constant [30 x i8] c"cannot be divided (remainder)\00", align 1
@.str.152 = private unnamed_addr constant [27 x i8] c"only strings can be parsed\00", align 1
@.str.153 = private unnamed_addr constant [29 x i8] c"cannot be parsed as a number\00", align 1
@.str.154 = private unnamed_addr constant [12 x i8] c"has no keys\00", align 1
@.str.155 = private unnamed_addr constant [36 x i8] c"startswith() requires string inputs\00", align 1
@.str.156 = private unnamed_addr constant [34 x i8] c"endswith() requires string inputs\00", align 1
@.str.157 = private unnamed_addr constant [42 x i8] c"split input and separator must be strings\00", align 1
@.str.158 = private unnamed_addr constant [31 x i8] c"explode input must be a string\00", align 1
@.str.159 = private unnamed_addr constant [31 x i8] c"implode input must be an array\00", align 1
@.str.160 = private unnamed_addr constant [38 x i8] c"cannot have their containment checked\00", align 1
@.str.161 = private unnamed_addr constant [14 x i8] c"has no length\00", align 1
@.str.162 = private unnamed_addr constant [36 x i8] c"only strings have UTF-8 byte length\00", align 1
@.str.163 = private unnamed_addr constant [40 x i8] c"cannot be sorted, as it is not an array\00", align 1
@.str.164 = private unnamed_addr constant [46 x i8] c"cannot be sorted, as they are not both arrays\00", align 1
@.str.165 = private unnamed_addr constant [24 x i8] c"cannot be iterated over\00", align 1
@.str.166 = private unnamed_addr constant [18 x i8] c"have wrong length\00", align 1
@.str.167 = private unnamed_addr constant [22 x i8] c"is not a valid format\00", align 1
@.str.168 = private unnamed_addr constant [5 x i8] c"json\00", align 1
@.str.169 = private unnamed_addr constant [5 x i8] c"text\00", align 1
@.str.170 = private unnamed_addr constant [4 x i8] c"csv\00", align 1
@.str.171 = private unnamed_addr constant [4 x i8] c"tsv\00", align 1
@.str.172 = private unnamed_addr constant [36 x i8] c"cannot be csv-formatted, only array\00", align 1
@.str.173 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.174 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.175 = private unnamed_addr constant [5 x i8] c"\22\22\22\00\00", align 1
@.str.176 = private unnamed_addr constant [36 x i8] c"cannot be tsv-formatted, only array\00", align 1
@.str.178 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.179 = private unnamed_addr constant [2 x i8] c"\09\00", align 1
@.str.180 = private unnamed_addr constant [17 x i8] c"\09\\t\00\0D\\r\00\0A\\n\00\\\\\\\00\00", align 1
@.str.181 = private unnamed_addr constant [26 x i8] c"is not valid in a csv row\00", align 1
@.str.182 = private unnamed_addr constant [5 x i8] c"html\00", align 1
@.str.183 = private unnamed_addr constant [36 x i8] c"&&amp;\00<&lt;\00>&gt;\00'&apos;\00\22&quot;\00\00", align 1
@.str.184 = private unnamed_addr constant [4 x i8] c"uri\00", align 1
@.str.185 = private unnamed_addr constant [72 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.!~*'()\00", align 1
@.str.186 = private unnamed_addr constant [7 x i8] c"%%%02X\00", align 1
@.str.187 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str.188 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.189 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.190 = private unnamed_addr constant [7 x i8] c"''\\''\00\00", align 1
@.str.191 = private unnamed_addr constant [29 x i8] c"can not be escaped for shell\00", align 1
@.str.192 = private unnamed_addr constant [7 x i8] c"base64\00", align 1
@BASE64_ENCODE_TABLE = internal unnamed_addr constant [65 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\00", align 16, !dbg !149
@.str.193 = private unnamed_addr constant [8 x i8] c"base64d\00", align 1
@BASE64_DECODE_TABLE = internal unnamed_addr constant [255 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF>\FF\FF\FF?456789:;<=\FF\FF\FFcalign 16, !dbg !154
@.str.194 = private unnamed_addr constant [25 x i8] c"is not valid base64 data\00", align 1
@.str.195 = private unnamed_addr constant [27 x i8] c"trailing base64 byte found\00", align 1
@.str.196 = private unnamed_addr constant [23 x i8] c" is not a valid format\00", align 1
@.str.197 = private unnamed_addr constant [37 x i8] c"jv_get_kind(input) == JV_KIND_STRING\00", align 1
@__PRETTY_FUNCTION__.escape_string = private unnamed_addr constant [35 x i8] c"jv escape_string(jv, const char *)\00", align 1
@.str.198 = private unnamed_addr constant [3 x i8] c"\\0\00", align 1
@environ = external local_unnamed_addr global i8**, align 8
@.str.199 = private unnamed_addr constant [30 x i8] c"halt_error/1: number required\00", align 1
@.str.200 = private unnamed_addr constant [41 x i8] c"cannot be matched, as it is not a string\00", align 1
@.str.201 = private unnamed_addr constant [16 x i8] c"is not a string\00", align 1
@.str.202 = private unnamed_addr constant [32 x i8] c" is not a valid modifier string\00", align 1
@OnigEncodingUTF8 = external global %struct.OnigEncodingTypeST, align 8
@OnigSyntaxPerl_NG = external global %struct.OnigSyntaxType, align 4
@.str.203 = private unnamed_addr constant [16 x i8] c"Regex failure: \00", align 1
@.str.204 = private unnamed_addr constant [7 x i8] c"offset\00", align 1
@.str.205 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@.str.206 = private unnamed_addr constant [9 x i8] c"captures\00", align 1
@.str.207 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.208 = private unnamed_addr constant [46 x i8] c"modulemeta input module name must be a string\00", align 1
@.str.209 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.210 = private unnamed_addr constant [48 x i8] c"strptime/1 requires string inputs and arguments\00", align 1
@.str.211 = private unnamed_addr constant [37 x i8] c"date \22%s\22 does not match format \22%s\22\00", align 1
@set_tm_yday.d = internal unnamed_addr constant [12 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334], align 16, !dbg !159
@.str.212 = private unnamed_addr constant [42 x i8] c"yday == tm->tm_yday || tm->tm_yday == 367\00", align 1
@__PRETTY_FUNCTION__.set_tm_yday = private unnamed_addr constant [30 x i8] c"void set_tm_yday(struct tm *)\00", align 1
@.str.213 = private unnamed_addr constant [43 x i8] c"strftime/1 requires parsed datetime inputs\00", align 1
@.str.214 = private unnamed_addr constant [36 x i8] c"strftime/1 requires a string format\00", align 1
@.str.215 = private unnamed_addr constant [35 x i8] c"strftime/1: unknown system failure\00", align 1
@.str.216 = private unnamed_addr constant [48 x i8] c"strflocaltime/1 requires parsed datetime inputs\00", align 1
@.str.217 = private unnamed_addr constant [41 x i8] c"strflocaltime/1 requires a string format\00", align 1
@.str.218 = private unnamed_addr constant [40 x i8] c"strflocaltime/1: unknown system failure\00", align 1
@.str.219 = private unnamed_addr constant [29 x i8] c"mktime requires array inputs\00", align 1
@.str.220 = private unnamed_addr constant [39 x i8] c"mktime requires parsed datetime inputs\00", align 1
@.str.221 = private unnamed_addr constant [30 x i8] c"invalid gmtime representation\00", align 1
@.str.222 = private unnamed_addr constant [38 x i8] c"mktime not supported on this platform\00", align 1
@.str.223 = private unnamed_addr constant [33 x i8] c"gmtime() requires numeric inputs\00", align 1
@.str.224 = private unnamed_addr constant [59 x i8] c"error converting number of seconds since epoch to datetime\00", align 1
@.str.225 = private unnamed_addr constant [36 x i8] c"localtime() requires numeric inputs\00", align 1
@.str.226 = private unnamed_addr constant [11 x i8] c"builtins/0\00", align 1
@.str.227 = private unnamed_addr constant [9 x i8] c"builtins\00", align 1

; Function Attrs: nounwind sspstrong uwtable
define i32 @builtins_bind(%struct.jq_state* %0, %struct.block* nocapture %1) local_unnamed_addr #0 !dbg !198 {
  %3 = alloca %struct.block, align 8
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !216, metadata !DIExpression()), !dbg !234
  call void @llvm.dbg.value(metadata %struct.block* %1, metadata !217, metadata !DIExpression()), !dbg !234
  %4 = bitcast %struct.block* %3 to i8*, !dbg !235
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #15, !dbg !235
  call void @llvm.dbg.declare(metadata %struct.block* %3, metadata !218, metadata !DIExpression()), !dbg !236
  %5 = tail call %struct.locfile* @locfile_init(%struct.jq_state* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11423 x i8], [11423 x i8]* @jq_builtins, i64 0, i64 0), i32 11422) #15, !dbg !237
  call void @llvm.dbg.value(metadata %struct.locfile* %5, metadata !219, metadata !DIExpression()), !dbg !234
  %6 = call i32 @jq_parse_library(%struct.locfile* %5, %struct.block* nonnull %3) #15, !dbg !238
  call void @llvm.dbg.value(metadata i32 %6, metadata !233, metadata !DIExpression()), !dbg !234
  %7 = icmp eq i32 %6, 0, !dbg !239
  br i1 %7, label %9, label %8, !dbg !242

8:                                                ; preds = %2
  call void @__assert_fail(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1847, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @__PRETTY_FUNCTION__.builtins_bind, i64 0, i64 0)) #16, !dbg !239
  unreachable, !dbg !239

9:                                                ; preds = %2
  call void @locfile_free(%struct.locfile* %5) #15, !dbg !243
  %10 = getelementptr inbounds %struct.block, %struct.block* %3, i64 0, i32 0, !dbg !244
  %11 = load %struct.inst*, %struct.inst** %10, align 8, !dbg !244
  %12 = getelementptr inbounds %struct.block, %struct.block* %3, i64 0, i32 1, !dbg !244
  %13 = load %struct.inst*, %struct.inst** %12, align 8, !dbg !244
  call void @llvm.dbg.value(metadata %struct.inst* %11, metadata !245, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* %13, metadata !245, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  %14 = call { %struct.inst*, %struct.inst* } (...) @gen_noop() #15, !dbg !275
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), metadata !251, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !276
  %15 = call { %struct.inst*, %struct.inst* } @gen_op_simple(i32 18) #15, !dbg !277
  %16 = extractvalue { %struct.inst*, %struct.inst* } %15, 0, !dbg !277
  call void @llvm.dbg.value(metadata %struct.inst* %16, metadata !251, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !276
  %17 = extractvalue { %struct.inst*, %struct.inst* } %15, 1, !dbg !277
  call void @llvm.dbg.value(metadata %struct.inst* %17, metadata !251, metadata !DIExpression(DW_OP_LLVM_fragment, 128, 64)) #15, !dbg !276
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), metadata !251, metadata !DIExpression(DW_OP_LLVM_fragment, 192, 64)) #15, !dbg !276
  %18 = call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !278
  %19 = extractvalue { i64, %struct.jv_refcnt* } %18, 0, !dbg !278
  %20 = extractvalue { i64, %struct.jv_refcnt* } %18, 1, !dbg !278
  %21 = call { %struct.inst*, %struct.inst* } @gen_const(i64 %19, %struct.jv_refcnt* %20) #15, !dbg !279
  %22 = extractvalue { %struct.inst*, %struct.inst* } %21, 0, !dbg !279
  %23 = extractvalue { %struct.inst*, %struct.inst* } %21, 1, !dbg !279
  %24 = call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !280
  %25 = extractvalue { i64, %struct.jv_refcnt* } %24, 0, !dbg !280
  %26 = extractvalue { i64, %struct.jv_refcnt* } %24, 1, !dbg !280
  %27 = call { %struct.inst*, %struct.inst* } @gen_const(i64 %25, %struct.jv_refcnt* %26) #15, !dbg !281
  %28 = extractvalue { %struct.inst*, %struct.inst* } %27, 0, !dbg !281
  %29 = extractvalue { %struct.inst*, %struct.inst* } %27, 1, !dbg !281
  %30 = call { %struct.inst*, %struct.inst* } @gen_condbranch(%struct.inst* %22, %struct.inst* %23, %struct.inst* %28, %struct.inst* %29) #15, !dbg !282
  %31 = extractvalue { %struct.inst*, %struct.inst* } %30, 0, !dbg !282
  call void @llvm.dbg.value(metadata %struct.inst* %31, metadata !251, metadata !DIExpression(DW_OP_LLVM_fragment, 256, 64)) #15, !dbg !276
  %32 = extractvalue { %struct.inst*, %struct.inst* } %30, 1, !dbg !282
  call void @llvm.dbg.value(metadata %struct.inst* %32, metadata !251, metadata !DIExpression(DW_OP_LLVM_fragment, 320, 64)) #15, !dbg !276
  call void @llvm.dbg.value(metadata i32 0, metadata !260, metadata !DIExpression()) #15, !dbg !283
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  %33 = extractvalue { %struct.inst*, %struct.inst* } %14, 1, !dbg !273
  %34 = extractvalue { %struct.inst*, %struct.inst* } %14, 0, !dbg !273
  call void @llvm.dbg.value(metadata i64 0, metadata !260, metadata !DIExpression()) #15, !dbg !283
  %35 = call { %struct.inst*, %struct.inst* } (...) @gen_noop() #15, !dbg !284
  %36 = extractvalue { %struct.inst*, %struct.inst* } %35, 0, !dbg !284
  %37 = extractvalue { %struct.inst*, %struct.inst* } %35, 1, !dbg !284
  %38 = call { %struct.inst*, %struct.inst* } @gen_function(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), %struct.inst* %36, %struct.inst* %37, %struct.inst* %16, %struct.inst* %17) #15, !dbg !284
  %39 = extractvalue { %struct.inst*, %struct.inst* } %38, 0, !dbg !284
  %40 = extractvalue { %struct.inst*, %struct.inst* } %38, 1, !dbg !284
  %41 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %34, %struct.inst* %33, %struct.inst* %39, %struct.inst* %40) #15, !dbg !284
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata i64 1, metadata !260, metadata !DIExpression()) #15, !dbg !283
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  %42 = extractvalue { %struct.inst*, %struct.inst* } %41, 1, !dbg !273
  %43 = extractvalue { %struct.inst*, %struct.inst* } %41, 0, !dbg !273
  call void @llvm.dbg.value(metadata i64 1, metadata !260, metadata !DIExpression()) #15, !dbg !283
  %44 = call { %struct.inst*, %struct.inst* } (...) @gen_noop() #15, !dbg !284
  %45 = extractvalue { %struct.inst*, %struct.inst* } %44, 0, !dbg !284
  %46 = extractvalue { %struct.inst*, %struct.inst* } %44, 1, !dbg !284
  %47 = call { %struct.inst*, %struct.inst* } @gen_function(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), %struct.inst* %45, %struct.inst* %46, %struct.inst* %31, %struct.inst* %32) #15, !dbg !284
  %48 = extractvalue { %struct.inst*, %struct.inst* } %47, 0, !dbg !284
  %49 = extractvalue { %struct.inst*, %struct.inst* } %47, 1, !dbg !284
  %50 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %43, %struct.inst* %42, %struct.inst* %48, %struct.inst* %49) #15, !dbg !284
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata i64 2, metadata !260, metadata !DIExpression()) #15, !dbg !283
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  %51 = extractvalue { %struct.inst*, %struct.inst* } %50, 1, !dbg !273
  %52 = extractvalue { %struct.inst*, %struct.inst* } %50, 0, !dbg !273
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), metadata !262, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !287
  %53 = call { %struct.inst*, %struct.inst* } @gen_op_simple(i32 24) #15, !dbg !288
  %54 = extractvalue { %struct.inst*, %struct.inst* } %53, 0, !dbg !288
  %55 = extractvalue { %struct.inst*, %struct.inst* } %53, 1, !dbg !288
  %56 = call { %struct.inst*, %struct.inst* } (...) @gen_noop() #15, !dbg !288
  %57 = extractvalue { %struct.inst*, %struct.inst* } %56, 0, !dbg !288
  %58 = extractvalue { %struct.inst*, %struct.inst* } %56, 1, !dbg !288
  %59 = call { %struct.inst*, %struct.inst* } @gen_call(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), %struct.inst* %57, %struct.inst* %58) #15, !dbg !288
  %60 = extractvalue { %struct.inst*, %struct.inst* } %59, 0, !dbg !288
  %61 = extractvalue { %struct.inst*, %struct.inst* } %59, 1, !dbg !288
  %62 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %54, %struct.inst* %55, %struct.inst* %60, %struct.inst* %61) #15, !dbg !288
  %63 = extractvalue { %struct.inst*, %struct.inst* } %62, 0, !dbg !288
  %64 = extractvalue { %struct.inst*, %struct.inst* } %62, 1, !dbg !288
  %65 = call { %struct.inst*, %struct.inst* } @gen_op_simple(i32 25) #15, !dbg !288
  %66 = extractvalue { %struct.inst*, %struct.inst* } %65, 0, !dbg !288
  %67 = extractvalue { %struct.inst*, %struct.inst* } %65, 1, !dbg !288
  %68 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %63, %struct.inst* %64, %struct.inst* %66, %struct.inst* %67) #15, !dbg !288
  %69 = extractvalue { %struct.inst*, %struct.inst* } %68, 0, !dbg !288
  call void @llvm.dbg.value(metadata %struct.inst* %69, metadata !262, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !287
  %70 = extractvalue { %struct.inst*, %struct.inst* } %68, 1, !dbg !288
  call void @llvm.dbg.value(metadata %struct.inst* %70, metadata !262, metadata !DIExpression(DW_OP_LLVM_fragment, 128, 64)) #15, !dbg !287
  call void @llvm.dbg.value(metadata i32 0, metadata !267, metadata !DIExpression()) #15, !dbg !289
  call void @llvm.dbg.value(metadata %struct.inst* %51, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* %52, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata i32 undef, metadata !267, metadata !DIExpression()) #15, !dbg !289
  call void @llvm.dbg.value(metadata %struct.inst* %51, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* %52, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  %71 = call { %struct.inst*, %struct.inst* } @gen_param(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0)) #15, !dbg !290
  %72 = extractvalue { %struct.inst*, %struct.inst* } %71, 0, !dbg !290
  %73 = extractvalue { %struct.inst*, %struct.inst* } %71, 1, !dbg !290
  %74 = call { %struct.inst*, %struct.inst* } @gen_function(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), %struct.inst* %72, %struct.inst* %73, %struct.inst* %69, %struct.inst* %70) #15, !dbg !290
  %75 = extractvalue { %struct.inst*, %struct.inst* } %74, 0, !dbg !290
  %76 = extractvalue { %struct.inst*, %struct.inst* } %74, 1, !dbg !290
  %77 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %52, %struct.inst* %51, %struct.inst* %75, %struct.inst* %76) #15, !dbg !290
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* undef, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata i32 undef, metadata !267, metadata !DIExpression()) #15, !dbg !289
  %78 = extractvalue { %struct.inst*, %struct.inst* } %77, 0, !dbg !290
  %79 = extractvalue { %struct.inst*, %struct.inst* } %77, 1, !dbg !290
  %80 = call { %struct.inst*, %struct.inst* } @gen_op_var_fresh(i32 8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0)) #15, !dbg !293
  %81 = extractvalue { %struct.inst*, %struct.inst* } %80, 0, !dbg !293
  call void @llvm.dbg.value(metadata %struct.inst* %81, metadata !269, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !294
  %82 = extractvalue { %struct.inst*, %struct.inst* } %80, 1, !dbg !293
  call void @llvm.dbg.value(metadata %struct.inst* %82, metadata !269, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !294
  %83 = call { %struct.inst*, %struct.inst* } @gen_op_var_fresh(i32 8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0)) #15, !dbg !295
  %84 = extractvalue { %struct.inst*, %struct.inst* } %83, 0, !dbg !295
  call void @llvm.dbg.value(metadata %struct.inst* %84, metadata !271, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !294
  %85 = extractvalue { %struct.inst*, %struct.inst* } %83, 1, !dbg !295
  call void @llvm.dbg.value(metadata %struct.inst* %85, metadata !271, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !294
  %86 = call { %struct.inst*, %struct.inst* } @gen_op_simple(i32 1) #15, !dbg !296
  %87 = extractvalue { %struct.inst*, %struct.inst* } %86, 0, !dbg !296
  %88 = extractvalue { %struct.inst*, %struct.inst* } %86, 1, !dbg !296
  %89 = call { %struct.inst*, %struct.inst* } (...) @gen_noop() #15, !dbg !296
  %90 = extractvalue { %struct.inst*, %struct.inst* } %89, 0, !dbg !296
  %91 = extractvalue { %struct.inst*, %struct.inst* } %89, 1, !dbg !296
  %92 = call { %struct.inst*, %struct.inst* } @gen_call(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), %struct.inst* %90, %struct.inst* %91) #15, !dbg !296
  %93 = extractvalue { %struct.inst*, %struct.inst* } %92, 0, !dbg !296
  %94 = extractvalue { %struct.inst*, %struct.inst* } %92, 1, !dbg !296
  %95 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %87, %struct.inst* %88, %struct.inst* %93, %struct.inst* %94) #15, !dbg !296
  %96 = extractvalue { %struct.inst*, %struct.inst* } %95, 0, !dbg !296
  %97 = extractvalue { %struct.inst*, %struct.inst* } %95, 1, !dbg !296
  %98 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %96, %struct.inst* %97, %struct.inst* %84, %struct.inst* %85) #15, !dbg !296
  %99 = extractvalue { %struct.inst*, %struct.inst* } %98, 0, !dbg !296
  %100 = extractvalue { %struct.inst*, %struct.inst* } %98, 1, !dbg !296
  %101 = call { %struct.inst*, %struct.inst* } (...) @gen_noop() #15, !dbg !296
  %102 = extractvalue { %struct.inst*, %struct.inst* } %101, 0, !dbg !296
  %103 = extractvalue { %struct.inst*, %struct.inst* } %101, 1, !dbg !296
  %104 = call { %struct.inst*, %struct.inst* } @gen_call(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), %struct.inst* %102, %struct.inst* %103) #15, !dbg !296
  %105 = extractvalue { %struct.inst*, %struct.inst* } %104, 0, !dbg !296
  %106 = extractvalue { %struct.inst*, %struct.inst* } %104, 1, !dbg !296
  %107 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %99, %struct.inst* %100, %struct.inst* %105, %struct.inst* %106) #15, !dbg !296
  %108 = extractvalue { %struct.inst*, %struct.inst* } %107, 0, !dbg !296
  %109 = extractvalue { %struct.inst*, %struct.inst* } %107, 1, !dbg !296
  %110 = call { %struct.inst*, %struct.inst* } @gen_op_simple(i32 1) #15, !dbg !296
  %111 = extractvalue { %struct.inst*, %struct.inst* } %110, 0, !dbg !296
  %112 = extractvalue { %struct.inst*, %struct.inst* } %110, 1, !dbg !296
  %113 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %108, %struct.inst* %109, %struct.inst* %111, %struct.inst* %112) #15, !dbg !296
  %114 = extractvalue { %struct.inst*, %struct.inst* } %113, 0, !dbg !296
  %115 = extractvalue { %struct.inst*, %struct.inst* } %113, 1, !dbg !296
  %116 = call { %struct.inst*, %struct.inst* } @gen_op_bound(i32 6, %struct.inst* %84, %struct.inst* %85) #15, !dbg !296
  %117 = extractvalue { %struct.inst*, %struct.inst* } %116, 0, !dbg !296
  %118 = extractvalue { %struct.inst*, %struct.inst* } %116, 1, !dbg !296
  %119 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %114, %struct.inst* %115, %struct.inst* %117, %struct.inst* %118) #15, !dbg !296
  %120 = extractvalue { %struct.inst*, %struct.inst* } %119, 0, !dbg !296
  %121 = extractvalue { %struct.inst*, %struct.inst* } %119, 1, !dbg !296
  %122 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %120, %struct.inst* %121, %struct.inst* %81, %struct.inst* %82) #15, !dbg !296
  %123 = extractvalue { %struct.inst*, %struct.inst* } %122, 0, !dbg !296
  %124 = extractvalue { %struct.inst*, %struct.inst* } %122, 1, !dbg !296
  %125 = call { %struct.inst*, %struct.inst* } @gen_op_bound(i32 21, %struct.inst* %81, %struct.inst* %82) #15, !dbg !296
  %126 = extractvalue { %struct.inst*, %struct.inst* } %125, 0, !dbg !296
  %127 = extractvalue { %struct.inst*, %struct.inst* } %125, 1, !dbg !296
  %128 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %123, %struct.inst* %124, %struct.inst* %126, %struct.inst* %127) #15, !dbg !296
  %129 = extractvalue { %struct.inst*, %struct.inst* } %128, 0, !dbg !296
  call void @llvm.dbg.value(metadata %struct.inst* %129, metadata !272, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !294
  %130 = extractvalue { %struct.inst*, %struct.inst* } %128, 1, !dbg !296
  call void @llvm.dbg.value(metadata %struct.inst* %130, metadata !272, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !294
  %131 = call { %struct.inst*, %struct.inst* } @gen_param(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)) #15, !dbg !297
  %132 = extractvalue { %struct.inst*, %struct.inst* } %131, 0, !dbg !297
  %133 = extractvalue { %struct.inst*, %struct.inst* } %131, 1, !dbg !297
  %134 = call { %struct.inst*, %struct.inst* } @gen_param(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0)) #15, !dbg !297
  %135 = extractvalue { %struct.inst*, %struct.inst* } %134, 0, !dbg !297
  %136 = extractvalue { %struct.inst*, %struct.inst* } %134, 1, !dbg !297
  %137 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %132, %struct.inst* %133, %struct.inst* %135, %struct.inst* %136) #15, !dbg !297
  %138 = extractvalue { %struct.inst*, %struct.inst* } %137, 0, !dbg !297
  %139 = extractvalue { %struct.inst*, %struct.inst* } %137, 1, !dbg !297
  %140 = call { %struct.inst*, %struct.inst* } @gen_function(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), %struct.inst* %138, %struct.inst* %139, %struct.inst* %129, %struct.inst* %130) #15, !dbg !297
  %141 = extractvalue { %struct.inst*, %struct.inst* } %140, 0, !dbg !297
  %142 = extractvalue { %struct.inst*, %struct.inst* } %140, 1, !dbg !297
  %143 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %78, %struct.inst* %79, %struct.inst* %141, %struct.inst* %142) #15, !dbg !297
  %144 = extractvalue { %struct.inst*, %struct.inst* } %143, 0, !dbg !297
  %145 = extractvalue { %struct.inst*, %struct.inst* } %143, 1, !dbg !297
  call void @llvm.dbg.value(metadata %struct.inst* %144, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !273
  call void @llvm.dbg.value(metadata %struct.inst* %145, metadata !250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !273
  %146 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %144, %struct.inst* %145, %struct.inst* %11, %struct.inst* %13) #15, !dbg !298
  %147 = extractvalue { %struct.inst*, %struct.inst* } %146, 0, !dbg !244
  %148 = extractvalue { %struct.inst*, %struct.inst* } %146, 1, !dbg !244
  store %struct.inst* %147, %struct.inst** %10, align 8, !dbg !244, !tbaa.struct !299
  store %struct.inst* %148, %struct.inst** %12, align 8, !dbg !244, !tbaa.struct !304
  %149 = call { %struct.inst*, %struct.inst* } @gen_cbinding(%struct.cfunction* getelementptr inbounds ([129 x %struct.cfunction], [129 x %struct.cfunction]* @function_list, i64 0, i64 0), i32 129, %struct.inst* %147, %struct.inst* %148) #15, !dbg !305
  %150 = extractvalue { %struct.inst*, %struct.inst* } %149, 0, !dbg !305
  %151 = extractvalue { %struct.inst*, %struct.inst* } %149, 1, !dbg !305
  store %struct.inst* %150, %struct.inst** %10, align 8, !dbg !305, !tbaa.struct !299
  store %struct.inst* %151, %struct.inst** %12, align 8, !dbg !305, !tbaa.struct !304
  call void @llvm.dbg.value(metadata %struct.inst* %150, metadata !306, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !310
  call void @llvm.dbg.value(metadata %struct.inst* %151, metadata !306, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !310
  %152 = call { i64, %struct.jv_refcnt* } @block_list_funcs(%struct.inst* %150, %struct.inst* %151, i32 1) #15, !dbg !312
  %153 = extractvalue { i64, %struct.jv_refcnt* } %152, 0, !dbg !312
  %154 = extractvalue { i64, %struct.jv_refcnt* } %152, 1, !dbg !312
  %155 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.226, i64 0, i64 0)) #15, !dbg !313
  %156 = extractvalue { i64, %struct.jv_refcnt* } %155, 0, !dbg !313
  %157 = extractvalue { i64, %struct.jv_refcnt* } %155, 1, !dbg !313
  %158 = call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %153, %struct.jv_refcnt* %154, i64 %156, %struct.jv_refcnt* %157) #15, !dbg !314
  %159 = extractvalue { i64, %struct.jv_refcnt* } %158, 0, !dbg !314
  call void @llvm.dbg.value(metadata i64 %159, metadata !309, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !310
  %160 = extractvalue { i64, %struct.jv_refcnt* } %158, 1, !dbg !314
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %160, metadata !309, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !310
  %161 = call { %struct.inst*, %struct.inst* } (...) @gen_noop() #15, !dbg !315
  %162 = extractvalue { %struct.inst*, %struct.inst* } %161, 0, !dbg !315
  %163 = extractvalue { %struct.inst*, %struct.inst* } %161, 1, !dbg !315
  %164 = call { %struct.inst*, %struct.inst* } @gen_const(i64 %159, %struct.jv_refcnt* %160) #15, !dbg !315
  %165 = extractvalue { %struct.inst*, %struct.inst* } %164, 0, !dbg !315
  %166 = extractvalue { %struct.inst*, %struct.inst* } %164, 1, !dbg !315
  %167 = call { %struct.inst*, %struct.inst* } @gen_function(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.227, i64 0, i64 0), %struct.inst* %162, %struct.inst* %163, %struct.inst* %165, %struct.inst* %166) #15, !dbg !315
  %168 = extractvalue { %struct.inst*, %struct.inst* } %167, 0, !dbg !315
  %169 = extractvalue { %struct.inst*, %struct.inst* } %167, 1, !dbg !315
  %170 = call { %struct.inst*, %struct.inst* } @block_join(%struct.inst* %150, %struct.inst* %151, %struct.inst* %168, %struct.inst* %169) #15, !dbg !315
  %171 = extractvalue { %struct.inst*, %struct.inst* } %170, 0, !dbg !316
  %172 = extractvalue { %struct.inst*, %struct.inst* } %170, 1, !dbg !316
  store %struct.inst* %171, %struct.inst** %10, align 8, !dbg !316, !tbaa.struct !299
  store %struct.inst* %172, %struct.inst** %12, align 8, !dbg !316, !tbaa.struct !304
  %173 = getelementptr %struct.block, %struct.block* %1, i64 0, i32 0, !dbg !317
  %174 = load %struct.inst*, %struct.inst** %173, align 8, !dbg !317
  %175 = getelementptr inbounds %struct.block, %struct.block* %1, i64 0, i32 1, !dbg !317
  %176 = load %struct.inst*, %struct.inst** %175, align 8, !dbg !317
  %177 = call { %struct.inst*, %struct.inst* } @block_bind_referenced(%struct.inst* %171, %struct.inst* %172, %struct.inst* %174, %struct.inst* %176, i32 128) #15, !dbg !317
  %178 = extractvalue { %struct.inst*, %struct.inst* } %177, 0, !dbg !317
  %179 = extractvalue { %struct.inst*, %struct.inst* } %177, 1, !dbg !317
  store %struct.inst* %178, %struct.inst** %173, align 8, !dbg !317, !tbaa.struct !299
  store %struct.inst* %179, %struct.inst** %175, align 8, !dbg !317, !tbaa.struct !304
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #15, !dbg !318
  ret i32 0, !dbg !319
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare !dbg !320 %struct.locfile* @locfile_init(%struct.jq_state*, i8*, i8*, i32) local_unnamed_addr #3

declare !dbg !325 i32 @jq_parse_library(%struct.locfile*, %struct.block*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #4

declare !dbg !330 void @locfile_free(%struct.locfile*) local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare !dbg !333 { %struct.inst*, %struct.inst* } @gen_cbinding(%struct.cfunction*, i32, %struct.inst*, %struct.inst*) local_unnamed_addr #3

declare !dbg !337 { %struct.inst*, %struct.inst* } @block_bind_referenced(%struct.inst*, %struct.inst*, %struct.inst*, %struct.inst*, i32) local_unnamed_addr #3

declare !dbg !340 { %struct.inst*, %struct.inst* } @gen_noop(...) local_unnamed_addr #3

declare !dbg !343 { %struct.inst*, %struct.inst* } @gen_op_simple(i32) local_unnamed_addr #3

declare !dbg !346 { %struct.inst*, %struct.inst* } @gen_condbranch(%struct.inst*, %struct.inst*, %struct.inst*, %struct.inst*) local_unnamed_addr #3

declare !dbg !349 { %struct.inst*, %struct.inst* } @gen_const(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !352 { i64, %struct.jv_refcnt* } @jv_false() local_unnamed_addr #3

declare !dbg !355 { i64, %struct.jv_refcnt* } @jv_true() local_unnamed_addr #3

declare !dbg !356 { %struct.inst*, %struct.inst* } @block_join(%struct.inst*, %struct.inst*, %struct.inst*, %struct.inst*) local_unnamed_addr #3

declare !dbg !357 { %struct.inst*, %struct.inst* } @gen_function(i8*, %struct.inst*, %struct.inst*, %struct.inst*, %struct.inst*) local_unnamed_addr #3

declare !dbg !360 { %struct.inst*, %struct.inst* } @gen_call(i8*, %struct.inst*, %struct.inst*) local_unnamed_addr #3

declare !dbg !363 { %struct.inst*, %struct.inst* } @gen_param(i8*) local_unnamed_addr #3

declare !dbg !366 { %struct.inst*, %struct.inst* } @gen_op_var_fresh(i32, i8*) local_unnamed_addr #3

declare !dbg !369 { %struct.inst*, %struct.inst* } @gen_op_bound(i32, %struct.inst*, %struct.inst*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_acos(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !372 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !378, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !380
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !378, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !380
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !377, metadata !DIExpression()), !dbg !380
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !381
  %6 = icmp eq i32 %5, 4, !dbg !381
  br i1 %6, label %19, label %7, !dbg !383

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !395
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !395
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !395
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !398
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !398
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !399
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !400
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !401
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !402
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !402
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !402
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !403
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !404
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !404
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !404
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !405
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !395
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !395
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !406
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !407
  br label %23, !dbg !408

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !383
  %21 = tail call double @acos(double %20) #15, !dbg !383
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !383
  call void @llvm.dbg.value(metadata i64 undef, metadata !379, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !380
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !379, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !380
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !383
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !383
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_acosh(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !409 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !412, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !414
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !412, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !414
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !411, metadata !DIExpression()), !dbg !414
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !415
  %6 = icmp eq i32 %5, 4, !dbg !415
  br i1 %6, label %19, label %7, !dbg !417

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !418
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !418
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !418
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !421
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !421
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !422
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !423
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !424
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !425
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !425
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !425
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !426
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !427
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !427
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !427
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !428
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !418
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !418
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !429
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !430
  br label %23, !dbg !431

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !417
  %21 = tail call double @acosh(double %20) #15, !dbg !417
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !417
  call void @llvm.dbg.value(metadata i64 undef, metadata !413, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !414
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !413, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !414
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !417
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !417
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_asin(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !432 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !435, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !437
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !435, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !437
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !434, metadata !DIExpression()), !dbg !437
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !438
  %6 = icmp eq i32 %5, 4, !dbg !438
  br i1 %6, label %19, label %7, !dbg !440

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !441
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !441
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !441
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !444
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !444
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !445
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !446
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !447
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !448
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !448
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !448
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !449
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !450
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !450
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !450
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !451
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !441
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !441
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !452
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !453
  br label %23, !dbg !454

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !440
  %21 = tail call double @asin(double %20) #15, !dbg !440
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !440
  call void @llvm.dbg.value(metadata i64 undef, metadata !436, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !437
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !436, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !437
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !440
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !440
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_asinh(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !455 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !458, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !460
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !458, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !460
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !457, metadata !DIExpression()), !dbg !460
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !461
  %6 = icmp eq i32 %5, 4, !dbg !461
  br i1 %6, label %19, label %7, !dbg !463

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !464
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !464
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !464
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !467
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !467
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !468
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !469
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !470
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !471
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !471
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !471
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !472
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !473
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !473
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !473
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !474
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !464
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !464
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !475
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !476
  br label %23, !dbg !477

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !463
  %21 = tail call double @asinh(double %20) #15, !dbg !463
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !463
  call void @llvm.dbg.value(metadata i64 undef, metadata !459, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !460
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !459, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !460
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !463
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !463
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_atan(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !478 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !481, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !483
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !481, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !483
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !480, metadata !DIExpression()), !dbg !483
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !484
  %6 = icmp eq i32 %5, 4, !dbg !484
  br i1 %6, label %19, label %7, !dbg !486

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !487
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !487
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !487
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !490
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !490
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !491
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !492
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !493
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !494
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !494
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !494
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !495
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !496
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !496
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !496
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !497
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !487
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !487
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !498
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !499
  br label %23, !dbg !500

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !486
  %21 = tail call double @atan(double %20) #15, !dbg !486
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !486
  call void @llvm.dbg.value(metadata i64 undef, metadata !482, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !483
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !482, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !483
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !486
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !486
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_atan2(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !501 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !506, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !510
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !506, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !510
  call void @llvm.dbg.value(metadata i64 %3, metadata !507, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !510
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !507, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !510
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !505, metadata !DIExpression()), !dbg !510
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !508, metadata !DIExpression()), !dbg !511
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !511
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !512
  %10 = icmp eq i32 %9, 4, !dbg !512
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !510
  %12 = load i64, i64* %11, align 8, !dbg !510
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !510
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !510
  br i1 %10, label %27, label %15, !dbg !511

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !514
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !516
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !516
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !516
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !518
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !518
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !519
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !520
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !521
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !522
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !522
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !522
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !523
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !524
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !524
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !524
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !525
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !516
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !516
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !526
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !527
  br label %47, !dbg !514

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !528
  %29 = icmp eq i32 %28, 4, !dbg !528
  br i1 %29, label %42, label %30, !dbg !511

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !530
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !532
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !532
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !532
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !534
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !534
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !535
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !536
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !537
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !538
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !538
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !538
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !539
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !540
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !540
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !540
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !541
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !532
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !532
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !542
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !543
  br label %47, !dbg !530

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !511
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !511
  %45 = tail call double @atan2(double %43, double %44) #15, !dbg !511
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !511
  call void @llvm.dbg.value(metadata i64 undef, metadata !509, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !510
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !509, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !510
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !511
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !511
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !511
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_atanh(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !544 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !547, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !549
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !547, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !549
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !546, metadata !DIExpression()), !dbg !549
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !550
  %6 = icmp eq i32 %5, 4, !dbg !550
  br i1 %6, label %19, label %7, !dbg !552

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !553
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !553
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !553
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !556
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !556
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !557
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !558
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !559
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !560
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !560
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !560
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !561
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !562
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !562
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !562
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !563
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !553
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !553
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !564
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !565
  br label %23, !dbg !566

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !552
  %21 = tail call double @atanh(double %20) #15, !dbg !552
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !552
  call void @llvm.dbg.value(metadata i64 undef, metadata !548, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !549
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !548, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !549
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !552
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !552
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_cbrt(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !567 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !570, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !572
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !570, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !572
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !569, metadata !DIExpression()), !dbg !572
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !573
  %6 = icmp eq i32 %5, 4, !dbg !573
  br i1 %6, label %19, label %7, !dbg !575

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !576
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !576
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !576
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !579
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !579
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !580
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !581
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !582
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !583
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !583
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !583
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !584
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !585
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !585
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !585
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !586
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !576
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !576
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !587
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !588
  br label %23, !dbg !589

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !575
  %21 = tail call double @cbrt(double %20) #17, !dbg !575
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !575
  call void @llvm.dbg.value(metadata i64 undef, metadata !571, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !572
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !571, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !572
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !575
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !575
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_cos(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !590 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !593, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !595
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !593, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !595
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !592, metadata !DIExpression()), !dbg !595
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !596
  %6 = icmp eq i32 %5, 4, !dbg !596
  br i1 %6, label %19, label %7, !dbg !598

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !599
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !599
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !599
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !602
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !602
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !603
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !604
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !605
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !606
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !606
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !606
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !607
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !608
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !608
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !608
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !609
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !599
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !599
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !610
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !611
  br label %23, !dbg !612

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !598
  %21 = tail call double @cos(double %20) #15, !dbg !598
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !598
  call void @llvm.dbg.value(metadata i64 undef, metadata !594, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !595
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !594, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !595
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !598
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !598
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_cosh(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !613 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !616, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !618
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !616, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !618
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !615, metadata !DIExpression()), !dbg !618
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !619
  %6 = icmp eq i32 %5, 4, !dbg !619
  br i1 %6, label %19, label %7, !dbg !621

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !622
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !622
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !622
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !625
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !625
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !626
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !627
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !628
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !629
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !629
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !629
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !630
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !631
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !631
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !631
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !632
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !622
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !622
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !633
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !634
  br label %23, !dbg !635

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !621
  %21 = tail call double @cosh(double %20) #15, !dbg !621
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !621
  call void @llvm.dbg.value(metadata i64 undef, metadata !617, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !618
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !617, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !618
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !621
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !621
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_exp(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !636 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !639, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !641
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !639, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !641
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !638, metadata !DIExpression()), !dbg !641
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !642
  %6 = icmp eq i32 %5, 4, !dbg !642
  br i1 %6, label %19, label %7, !dbg !644

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !645
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !645
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !645
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !648
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !648
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !649
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !650
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !651
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !652
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !652
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !652
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !653
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !654
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !654
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !654
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !655
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !645
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !645
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !656
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !657
  br label %23, !dbg !658

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !644
  %21 = tail call double @exp(double %20) #15, !dbg !644
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !644
  call void @llvm.dbg.value(metadata i64 undef, metadata !640, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !641
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !640, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !641
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !644
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !644
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_exp2(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !659 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !662, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !664
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !662, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !664
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !661, metadata !DIExpression()), !dbg !664
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !665
  %6 = icmp eq i32 %5, 4, !dbg !665
  br i1 %6, label %19, label %7, !dbg !667

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !668
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !668
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !668
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !671
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !671
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !672
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !673
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !674
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !675
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !675
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !675
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !676
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !677
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !677
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !677
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !678
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !668
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !668
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !679
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !680
  br label %23, !dbg !681

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !667
  %21 = tail call double @exp2(double %20) #15, !dbg !667
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !667
  call void @llvm.dbg.value(metadata i64 undef, metadata !663, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !664
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !663, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !664
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !667
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !667
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_floor(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !682 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !685, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !687
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !685, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !687
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !684, metadata !DIExpression()), !dbg !687
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !688
  %6 = icmp eq i32 %5, 4, !dbg !688
  br i1 %6, label %19, label %7, !dbg !690

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !691
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !691
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !691
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !694
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !694
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !695
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !696
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !697
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !698
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !698
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !698
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !699
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !700
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !700
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !700
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !701
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !691
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !691
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !702
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !703
  br label %23, !dbg !704

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !690
  %21 = tail call double @llvm.floor.f64(double %20), !dbg !690
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !690
  call void @llvm.dbg.value(metadata i64 undef, metadata !686, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !687
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !686, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !687
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !690
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !690
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_hypot(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !705 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !708, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !712
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !708, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !712
  call void @llvm.dbg.value(metadata i64 %3, metadata !709, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !712
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !709, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !712
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !707, metadata !DIExpression()), !dbg !712
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !710, metadata !DIExpression()), !dbg !713
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !713
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !714
  %10 = icmp eq i32 %9, 4, !dbg !714
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !712
  %12 = load i64, i64* %11, align 8, !dbg !712
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !712
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !712
  br i1 %10, label %27, label %15, !dbg !713

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !716
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !718
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !718
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !718
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !720
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !720
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !721
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !722
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !723
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !724
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !724
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !724
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !725
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !726
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !726
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !726
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !727
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !718
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !718
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !728
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !729
  br label %47, !dbg !716

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !730
  %29 = icmp eq i32 %28, 4, !dbg !730
  br i1 %29, label %42, label %30, !dbg !713

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !732
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !734
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !734
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !734
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !736
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !736
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !737
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !738
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !739
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !740
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !740
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !740
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !741
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !742
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !742
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !742
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !743
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !734
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !734
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !744
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !745
  br label %47, !dbg !732

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !713
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !713
  %45 = tail call double @hypot(double %43, double %44) #15, !dbg !713
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !713
  call void @llvm.dbg.value(metadata i64 undef, metadata !711, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !712
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !711, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !712
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !713
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !713
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !713
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_j0(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !746 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !749, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !751
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !749, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !751
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !748, metadata !DIExpression()), !dbg !751
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !752
  %6 = icmp eq i32 %5, 4, !dbg !752
  br i1 %6, label %19, label %7, !dbg !754

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !755
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !755
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !755
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !758
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !758
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !759
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !760
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !761
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !762
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !762
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !762
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !763
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !764
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !764
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !764
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !765
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !755
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !755
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !766
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !767
  br label %23, !dbg !768

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !754
  %21 = tail call double @j0(double %20) #15, !dbg !754
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !754
  call void @llvm.dbg.value(metadata i64 undef, metadata !750, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !751
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !750, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !751
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !754
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !754
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_j1(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !769 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !772, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !774
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !772, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !774
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !771, metadata !DIExpression()), !dbg !774
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !775
  %6 = icmp eq i32 %5, 4, !dbg !775
  br i1 %6, label %19, label %7, !dbg !777

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !778
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !778
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !778
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !781
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !781
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !782
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !783
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !784
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !785
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !785
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !785
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !786
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !787
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !787
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !787
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !788
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !778
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !778
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !789
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !790
  br label %23, !dbg !791

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !777
  %21 = tail call double @j1(double %20) #15, !dbg !777
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !777
  call void @llvm.dbg.value(metadata i64 undef, metadata !773, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !774
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !773, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !774
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !777
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !777
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_log(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !792 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !795, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !797
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !795, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !797
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !794, metadata !DIExpression()), !dbg !797
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !798
  %6 = icmp eq i32 %5, 4, !dbg !798
  br i1 %6, label %19, label %7, !dbg !800

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !801
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !801
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !801
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !804
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !804
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !805
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !806
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !807
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !808
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !808
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !808
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !809
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !810
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !810
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !810
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !811
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !801
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !801
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !812
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !813
  br label %23, !dbg !814

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !800
  %21 = tail call double @log(double %20) #15, !dbg !800
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !800
  call void @llvm.dbg.value(metadata i64 undef, metadata !796, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !797
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !796, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !797
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !800
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !800
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_log10(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !815 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !818, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !820
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !818, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !820
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !817, metadata !DIExpression()), !dbg !820
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !821
  %6 = icmp eq i32 %5, 4, !dbg !821
  br i1 %6, label %19, label %7, !dbg !823

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !824
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !824
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !824
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !827
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !827
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !828
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !829
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !830
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !831
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !831
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !831
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !832
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !833
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !833
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !833
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !834
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !824
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !824
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !835
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !836
  br label %23, !dbg !837

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !823
  %21 = tail call double @log10(double %20) #15, !dbg !823
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !823
  call void @llvm.dbg.value(metadata i64 undef, metadata !819, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !820
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !819, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !820
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !823
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !823
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_log2(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !838 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !841, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !843
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !841, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !843
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !840, metadata !DIExpression()), !dbg !843
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !844
  %6 = icmp eq i32 %5, 4, !dbg !844
  br i1 %6, label %19, label %7, !dbg !846

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !847
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !847
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !847
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !850
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !850
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !851
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !852
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !853
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !854
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !854
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !854
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !855
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !856
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !856
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !856
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !857
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !847
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !847
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !858
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !859
  br label %23, !dbg !860

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !846
  %21 = tail call double @log2(double %20) #15, !dbg !846
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !846
  call void @llvm.dbg.value(metadata i64 undef, metadata !842, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !843
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !842, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !843
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !846
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !846
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_pow(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !861 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !864, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !868
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !864, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !868
  call void @llvm.dbg.value(metadata i64 %3, metadata !865, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !868
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !865, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !868
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !863, metadata !DIExpression()), !dbg !868
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !866, metadata !DIExpression()), !dbg !869
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !869
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !870
  %10 = icmp eq i32 %9, 4, !dbg !870
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !868
  %12 = load i64, i64* %11, align 8, !dbg !868
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !868
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !868
  br i1 %10, label %27, label %15, !dbg !869

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !872
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !874
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !874
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !874
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !876
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !876
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !877
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !878
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !879
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !880
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !880
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !880
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !881
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !882
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !882
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !882
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !883
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !874
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !874
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !884
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !885
  br label %47, !dbg !872

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !886
  %29 = icmp eq i32 %28, 4, !dbg !886
  br i1 %29, label %42, label %30, !dbg !869

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !888
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !890
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !890
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !890
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !892
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !892
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !893
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !894
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !895
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !896
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !896
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !896
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !897
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !898
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !898
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !898
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !899
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !890
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !890
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !900
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !901
  br label %47, !dbg !888

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !869
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !869
  %45 = tail call double @pow(double %43, double %44) #15, !dbg !869
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !869
  call void @llvm.dbg.value(metadata i64 undef, metadata !867, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !868
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !867, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !868
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !869
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !869
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !869
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_remainder(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !902 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !905, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !909
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !905, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !909
  call void @llvm.dbg.value(metadata i64 %3, metadata !906, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !909
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !906, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !909
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !904, metadata !DIExpression()), !dbg !909
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !907, metadata !DIExpression()), !dbg !910
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !910
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !911
  %10 = icmp eq i32 %9, 4, !dbg !911
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !909
  %12 = load i64, i64* %11, align 8, !dbg !909
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !909
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !909
  br i1 %10, label %27, label %15, !dbg !910

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !913
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !915
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !915
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !915
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !917
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !917
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !918
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !919
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !920
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !921
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !921
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !921
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !922
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !923
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !923
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !923
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !924
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !915
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !915
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !925
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !926
  br label %47, !dbg !913

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !927
  %29 = icmp eq i32 %28, 4, !dbg !927
  br i1 %29, label %42, label %30, !dbg !910

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !929
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !931
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !931
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !931
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !933
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !933
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !934
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !935
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !936
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !937
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !937
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !937
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !938
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !939
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !939
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !939
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !940
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !931
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !931
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !941
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !942
  br label %47, !dbg !929

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !910
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !910
  %45 = tail call double @remainder(double %43, double %44) #15, !dbg !910
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !910
  call void @llvm.dbg.value(metadata i64 undef, metadata !908, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !909
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !908, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !909
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !910
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !910
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !910
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_sin(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !943 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !946, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !948
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !946, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !948
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !945, metadata !DIExpression()), !dbg !948
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !949
  %6 = icmp eq i32 %5, 4, !dbg !949
  br i1 %6, label %19, label %7, !dbg !951

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !952
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !952
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !952
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !955
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !955
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !956
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !957
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !958
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !959
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !959
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !959
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !960
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !961
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !961
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !961
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !962
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !952
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !952
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !963
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !964
  br label %23, !dbg !965

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !951
  %21 = tail call double @sin(double %20) #15, !dbg !951
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !951
  call void @llvm.dbg.value(metadata i64 undef, metadata !947, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !948
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !947, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !948
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !951
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !951
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_sinh(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !966 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !969, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !971
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !969, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !971
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !968, metadata !DIExpression()), !dbg !971
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !972
  %6 = icmp eq i32 %5, 4, !dbg !972
  br i1 %6, label %19, label %7, !dbg !974

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !975
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !975
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !975
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !978
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !978
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !979
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !980
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !981
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !982
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !982
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !982
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !983
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !984
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !984
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !984
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !985
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !975
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !975
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !986
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !987
  br label %23, !dbg !988

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !974
  %21 = tail call double @sinh(double %20) #15, !dbg !974
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !974
  call void @llvm.dbg.value(metadata i64 undef, metadata !970, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !971
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !970, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !971
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !974
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !974
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_sqrt(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !989 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !992, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !994
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !992, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !994
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !991, metadata !DIExpression()), !dbg !994
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !995
  %6 = icmp eq i32 %5, 4, !dbg !995
  br i1 %6, label %19, label %7, !dbg !997

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !998
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !998
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !998
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1001
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1001
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1002
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1003
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1004
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1005
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1005
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1005
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1006
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1007
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1007
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1007
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1008
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !998
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !998
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1009
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1010
  br label %23, !dbg !1011

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !997
  %21 = tail call double @sqrt(double %20) #15, !dbg !997
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !997
  call void @llvm.dbg.value(metadata i64 undef, metadata !993, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !994
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !993, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !994
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !997
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !997
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_tan(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1012 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1015, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1017
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1015, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1017
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1014, metadata !DIExpression()), !dbg !1017
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1018
  %6 = icmp eq i32 %5, 4, !dbg !1018
  br i1 %6, label %19, label %7, !dbg !1020

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1021
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1021
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1021
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1024
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1024
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1025
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1026
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1027
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1028
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1028
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1028
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1029
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1030
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1030
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1030
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1031
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1021
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1021
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1032
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1033
  br label %23, !dbg !1034

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1020
  %21 = tail call double @tan(double %20) #15, !dbg !1020
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1020
  call void @llvm.dbg.value(metadata i64 undef, metadata !1016, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1017
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1016, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1017
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1020
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1020
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_tanh(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1035 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1038, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1040
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1038, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1040
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1037, metadata !DIExpression()), !dbg !1040
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1041
  %6 = icmp eq i32 %5, 4, !dbg !1041
  br i1 %6, label %19, label %7, !dbg !1043

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1044
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1044
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1044
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1047
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1047
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1048
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1049
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1050
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1051
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1051
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1051
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1052
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1053
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1053
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1053
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1054
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1044
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1044
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1055
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1056
  br label %23, !dbg !1057

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1043
  %21 = tail call double @tanh(double %20) #15, !dbg !1043
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1043
  call void @llvm.dbg.value(metadata i64 undef, metadata !1039, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1040
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1039, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1040
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1043
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1043
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_tgamma(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1058 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1061, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1063
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1061, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1063
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1060, metadata !DIExpression()), !dbg !1063
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1064
  %6 = icmp eq i32 %5, 4, !dbg !1064
  br i1 %6, label %19, label %7, !dbg !1066

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1067
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1067
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1067
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1070
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1070
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1071
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1072
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1073
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1074
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1074
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1074
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1075
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1076
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1076
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1076
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1077
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1067
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1067
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1078
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1079
  br label %23, !dbg !1080

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1066
  %21 = tail call double @tgamma(double %20) #15, !dbg !1066
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1066
  call void @llvm.dbg.value(metadata i64 undef, metadata !1062, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1063
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1062, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1063
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1066
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1066
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_y0(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1081 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1084, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1086
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1084, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1086
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1083, metadata !DIExpression()), !dbg !1086
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1087
  %6 = icmp eq i32 %5, 4, !dbg !1087
  br i1 %6, label %19, label %7, !dbg !1089

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1090
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1090
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1090
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1093
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1093
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1094
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1095
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1096
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1097
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1097
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1097
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1098
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1099
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1099
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1099
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1100
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1090
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1090
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1101
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1102
  br label %23, !dbg !1103

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1089
  %21 = tail call double @y0(double %20) #15, !dbg !1089
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1089
  call void @llvm.dbg.value(metadata i64 undef, metadata !1085, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1086
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1085, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1086
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1089
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1089
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_y1(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1104 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1107, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1109
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1107, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1109
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1106, metadata !DIExpression()), !dbg !1109
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1110
  %6 = icmp eq i32 %5, 4, !dbg !1110
  br i1 %6, label %19, label %7, !dbg !1112

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1113
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1113
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1113
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1116
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1116
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1117
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1118
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1119
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1120
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1120
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1120
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1121
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1122
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1122
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1122
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1123
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1113
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1113
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1124
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1125
  br label %23, !dbg !1126

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1112
  %21 = tail call double @y1(double %20) #15, !dbg !1112
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1112
  call void @llvm.dbg.value(metadata i64 undef, metadata !1108, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1109
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1108, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1109
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1112
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1112
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_jn(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1127 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1130, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1134
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1130, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1134
  call void @llvm.dbg.value(metadata i64 %3, metadata !1131, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1134
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1131, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1134
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1129, metadata !DIExpression()), !dbg !1134
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1132, metadata !DIExpression()), !dbg !1135
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1135
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1136
  %10 = icmp eq i32 %9, 4, !dbg !1136
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1134
  %12 = load i64, i64* %11, align 8, !dbg !1134
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1134
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1134
  br i1 %10, label %27, label %15, !dbg !1135

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1138
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1140
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1140
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1140
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1142
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1142
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1143
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1144
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1145
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1146
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1146
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1146
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1147
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1148
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1148
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1148
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1149
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1140
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1140
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1150
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1151
  br label %48, !dbg !1138

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1152
  %29 = icmp eq i32 %28, 4, !dbg !1152
  br i1 %29, label %42, label %30, !dbg !1135

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1154
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1156
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1156
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1156
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1158
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1158
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1159
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1160
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1161
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1162
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1162
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1162
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1163
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1164
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1164
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1164
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1165
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1156
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1156
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1166
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1167
  br label %48, !dbg !1154

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1135
  %44 = fptosi double %43 to i32, !dbg !1135
  %45 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1135
  %46 = tail call double @jn(i32 %44, double %45) #15, !dbg !1135
  %47 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %46) #15, !dbg !1135
  call void @llvm.dbg.value(metadata i64 undef, metadata !1133, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1134
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1133, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1134
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1135
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1135
  br label %48

48:                                               ; preds = %42, %30, %15
  %49 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %47, %42 ]
  ret { i64, %struct.jv_refcnt* } %49, !dbg !1135
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_yn(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1168 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1175
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1175
  call void @llvm.dbg.value(metadata i64 %3, metadata !1172, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1175
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1172, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1175
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1170, metadata !DIExpression()), !dbg !1175
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1173, metadata !DIExpression()), !dbg !1176
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1176
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1177
  %10 = icmp eq i32 %9, 4, !dbg !1177
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1175
  %12 = load i64, i64* %11, align 8, !dbg !1175
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1175
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1175
  br i1 %10, label %27, label %15, !dbg !1176

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1179
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1181
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1181
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1181
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1183
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1183
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1184
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1185
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1186
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1187
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1187
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1187
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1188
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1189
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1189
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1189
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1190
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1181
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1181
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1191
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1192
  br label %48, !dbg !1179

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1193
  %29 = icmp eq i32 %28, 4, !dbg !1193
  br i1 %29, label %42, label %30, !dbg !1176

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1195
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1197
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1197
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1197
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1199
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1199
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1200
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1201
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1202
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1203
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1203
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1203
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1204
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1205
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1205
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1205
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1206
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1197
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1197
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1207
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1208
  br label %48, !dbg !1195

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1176
  %44 = fptosi double %43 to i32, !dbg !1176
  %45 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1176
  %46 = tail call double @yn(i32 %44, double %45) #15, !dbg !1176
  %47 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %46) #15, !dbg !1176
  call void @llvm.dbg.value(metadata i64 undef, metadata !1174, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1175
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1174, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1175
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1176
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1176
  br label %48

48:                                               ; preds = %42, %30, %15
  %49 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %47, %42 ]
  ret { i64, %struct.jv_refcnt* } %49, !dbg !1176
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_ceil(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1209 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1212, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1214
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1212, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1214
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1211, metadata !DIExpression()), !dbg !1214
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1215
  %6 = icmp eq i32 %5, 4, !dbg !1215
  br i1 %6, label %19, label %7, !dbg !1217

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1218
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1218
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1218
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1221
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1221
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1222
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1223
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1224
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1225
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1225
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1225
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1226
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1227
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1227
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1227
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1228
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1218
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1218
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1229
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1230
  br label %23, !dbg !1231

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1217
  %21 = tail call double @llvm.ceil.f64(double %20), !dbg !1217
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1217
  call void @llvm.dbg.value(metadata i64 undef, metadata !1213, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1214
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1213, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1214
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1217
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1217
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_copysign(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1232 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1235, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1239
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1235, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1239
  call void @llvm.dbg.value(metadata i64 %3, metadata !1236, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1239
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1236, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1239
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1234, metadata !DIExpression()), !dbg !1239
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1237, metadata !DIExpression()), !dbg !1240
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1240
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1241
  %10 = icmp eq i32 %9, 4, !dbg !1241
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1239
  %12 = load i64, i64* %11, align 8, !dbg !1239
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1239
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1239
  br i1 %10, label %27, label %15, !dbg !1240

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1243
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1245
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1245
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1245
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1247
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1247
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1248
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1249
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1250
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1251
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1251
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1251
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1252
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1253
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1253
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1253
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1254
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1245
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1245
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1255
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1256
  br label %47, !dbg !1243

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1257
  %29 = icmp eq i32 %28, 4, !dbg !1257
  br i1 %29, label %42, label %30, !dbg !1240

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1259
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1261
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1261
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1261
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1263
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1263
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1264
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1265
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1266
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1267
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1267
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1267
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1268
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1269
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1269
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1269
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1270
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1261
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1261
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1271
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1272
  br label %47, !dbg !1259

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1240
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1240
  %45 = tail call double @llvm.copysign.f64(double %43, double %44), !dbg !1240
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !1240
  call void @llvm.dbg.value(metadata i64 undef, metadata !1238, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1239
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1238, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1239
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1240
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1240
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !1240
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_drem(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1273 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1276, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1280
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1276, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1280
  call void @llvm.dbg.value(metadata i64 %3, metadata !1277, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1280
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1277, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1280
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1275, metadata !DIExpression()), !dbg !1280
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1278, metadata !DIExpression()), !dbg !1281
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1281
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1282
  %10 = icmp eq i32 %9, 4, !dbg !1282
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1280
  %12 = load i64, i64* %11, align 8, !dbg !1280
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1280
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1280
  br i1 %10, label %27, label %15, !dbg !1281

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1284
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1286
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1286
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1286
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1288
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1288
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1289
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1290
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1291
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1292
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1292
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1292
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1293
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1294
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1294
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1294
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1295
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1286
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1286
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1296
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1297
  br label %47, !dbg !1284

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1298
  %29 = icmp eq i32 %28, 4, !dbg !1298
  br i1 %29, label %42, label %30, !dbg !1281

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1300
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1302
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1302
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1302
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1304
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1304
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1305
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1306
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1307
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1308
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1308
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1308
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1309
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1310
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1310
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1310
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1311
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1302
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1302
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1312
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1313
  br label %47, !dbg !1300

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1281
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1281
  %45 = tail call double @drem(double %43, double %44) #15, !dbg !1281
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !1281
  call void @llvm.dbg.value(metadata i64 undef, metadata !1279, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1280
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1279, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1280
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1281
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1281
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !1281
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_erf(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1314 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1317, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1319
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1317, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1319
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1316, metadata !DIExpression()), !dbg !1319
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1320
  %6 = icmp eq i32 %5, 4, !dbg !1320
  br i1 %6, label %19, label %7, !dbg !1322

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1323
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1323
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1323
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1326
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1326
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1327
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1328
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1329
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1330
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1330
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1330
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1331
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1332
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1332
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1332
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1333
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1323
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1323
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1334
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1335
  br label %23, !dbg !1336

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1322
  %21 = tail call double @erf(double %20) #15, !dbg !1322
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1322
  call void @llvm.dbg.value(metadata i64 undef, metadata !1318, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1319
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1318, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1319
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1322
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1322
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_erfc(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1337 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1340, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1342
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1340, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1342
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1339, metadata !DIExpression()), !dbg !1342
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1343
  %6 = icmp eq i32 %5, 4, !dbg !1343
  br i1 %6, label %19, label %7, !dbg !1345

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1346
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1346
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1346
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1349
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1349
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1350
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1351
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1352
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1353
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1353
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1353
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1354
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1355
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1355
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1355
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1356
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1346
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1346
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1357
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1358
  br label %23, !dbg !1359

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1345
  %21 = tail call double @erfc(double %20) #15, !dbg !1345
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1345
  call void @llvm.dbg.value(metadata i64 undef, metadata !1341, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1342
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1341, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1342
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1345
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1345
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_exp10(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1360 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1363, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1365
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1363, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1365
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1362, metadata !DIExpression()), !dbg !1365
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1366
  %6 = icmp eq i32 %5, 4, !dbg !1366
  br i1 %6, label %19, label %7, !dbg !1368

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1369
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1369
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1369
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1372
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1372
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1373
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1374
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1375
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1376
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1376
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1376
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1377
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1378
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1378
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1378
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1379
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1369
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1369
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1380
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1381
  br label %23, !dbg !1382

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1368
  %21 = tail call double @exp10(double %20) #15, !dbg !1368
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1368
  call void @llvm.dbg.value(metadata i64 undef, metadata !1364, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1365
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1364, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1365
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1368
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1368
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_expm1(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1383 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1386, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1388
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1386, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1388
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1385, metadata !DIExpression()), !dbg !1388
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1389
  %6 = icmp eq i32 %5, 4, !dbg !1389
  br i1 %6, label %19, label %7, !dbg !1391

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1392
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1392
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1392
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1395
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1395
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1396
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1397
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1398
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1399
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1399
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1399
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1400
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1401
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1401
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1401
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1402
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1392
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1392
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1403
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1404
  br label %23, !dbg !1405

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1391
  %21 = tail call double @expm1(double %20) #15, !dbg !1391
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1391
  call void @llvm.dbg.value(metadata i64 undef, metadata !1387, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1388
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1387, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1388
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1391
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1391
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_fabs(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1406 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1409, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1411
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1409, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1411
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1408, metadata !DIExpression()), !dbg !1411
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1412
  %6 = icmp eq i32 %5, 4, !dbg !1412
  br i1 %6, label %19, label %7, !dbg !1414

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1415
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1415
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1415
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1418
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1418
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1419
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1420
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1421
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1422
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1422
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1422
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1423
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1424
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1424
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1424
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1425
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1415
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1415
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1426
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1427
  br label %23, !dbg !1428

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1414
  %21 = tail call double @llvm.fabs.f64(double %20), !dbg !1414
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1414
  call void @llvm.dbg.value(metadata i64 undef, metadata !1410, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1411
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1410, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1411
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1414
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1414
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_fdim(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1429 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1432, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1436
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1432, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1436
  call void @llvm.dbg.value(metadata i64 %3, metadata !1433, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1436
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1433, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1436
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1431, metadata !DIExpression()), !dbg !1436
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1434, metadata !DIExpression()), !dbg !1437
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1437
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1438
  %10 = icmp eq i32 %9, 4, !dbg !1438
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1436
  %12 = load i64, i64* %11, align 8, !dbg !1436
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1436
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1436
  br i1 %10, label %27, label %15, !dbg !1437

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1440
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1442
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1442
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1442
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1444
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1444
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1445
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1446
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1447
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1448
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1448
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1448
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1449
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1450
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1450
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1450
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1451
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1442
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1442
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1452
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1453
  br label %47, !dbg !1440

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1454
  %29 = icmp eq i32 %28, 4, !dbg !1454
  br i1 %29, label %42, label %30, !dbg !1437

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1456
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1458
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1458
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1458
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1460
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1460
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1461
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1462
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1463
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1464
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1464
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1464
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1465
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1466
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1466
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1466
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1467
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1458
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1458
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1468
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1469
  br label %47, !dbg !1456

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1437
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1437
  %45 = tail call double @fdim(double %43, double %44) #15, !dbg !1437
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !1437
  call void @llvm.dbg.value(metadata i64 undef, metadata !1435, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1436
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1435, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1436
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1437
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1437
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !1437
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_fma(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %6) #0 !dbg !1470 {
  %8 = alloca [15 x i8], align 1
  %9 = alloca [15 x i8], align 1
  %10 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1475, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1480
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1475, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1480
  call void @llvm.dbg.value(metadata i64 %3, metadata !1476, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1480
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1476, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1480
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1474, metadata !DIExpression()), !dbg !1480
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1477, metadata !DIExpression()), !dbg !1481
  call void @llvm.dbg.declare(metadata %struct.jv* %6, metadata !1478, metadata !DIExpression()), !dbg !1481
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1481
  %11 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1482
  %12 = icmp eq i32 %11, 4, !dbg !1482
  %13 = bitcast %struct.jv* %5 to i64*, !dbg !1480
  %14 = load i64, i64* %13, align 8, !dbg !1480
  %15 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1480
  %16 = load %struct.jv_refcnt*, %struct.jv_refcnt** %15, align 8, !dbg !1480
  br i1 %12, label %33, label %17, !dbg !1481

17:                                               ; preds = %7
  tail call void @jv_free(i64 %14, %struct.jv_refcnt* %16) #15, !dbg !1484
  %18 = bitcast %struct.jv* %6 to i64*, !dbg !1484
  %19 = load i64, i64* %18, align 8, !dbg !1484
  %20 = getelementptr inbounds %struct.jv, %struct.jv* %6, i64 0, i32 4, i32 0, !dbg !1484
  %21 = load %struct.jv_refcnt*, %struct.jv_refcnt** %20, align 8, !dbg !1484
  tail call void @jv_free(i64 %19, %struct.jv_refcnt* %21) #15, !dbg !1484
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1486
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1486
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1486
  %22 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i64 0, i64 0, !dbg !1488
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %22) #15, !dbg !1488
  call void @llvm.dbg.declare(metadata [15 x i8]* %10, metadata !390, metadata !DIExpression()) #15, !dbg !1489
  %23 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1490
  %24 = tail call i8* @jv_kind_name(i32 %23) #15, !dbg !1491
  %25 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1492
  %26 = extractvalue { i64, %struct.jv_refcnt* } %25, 0, !dbg !1492
  %27 = extractvalue { i64, %struct.jv_refcnt* } %25, 1, !dbg !1492
  %28 = call i8* @jv_dump_string_trunc(i64 %26, %struct.jv_refcnt* %27, i8* nonnull %22, i64 15) #15, !dbg !1493
  %29 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %24, i8* %28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1494
  %30 = extractvalue { i64, %struct.jv_refcnt* } %29, 0, !dbg !1494
  %31 = extractvalue { i64, %struct.jv_refcnt* } %29, 1, !dbg !1494
  %32 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %30, %struct.jv_refcnt* %31) #15, !dbg !1495
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1486
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1486
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1496
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %22) #15, !dbg !1497
  br label %77, !dbg !1484

33:                                               ; preds = %7
  %34 = tail call i32 @jv_get_kind(i64 %14, %struct.jv_refcnt* %16) #15, !dbg !1498
  %35 = icmp eq i32 %34, 4, !dbg !1498
  br i1 %35, label %52, label %36, !dbg !1481

36:                                               ; preds = %33
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1500
  %37 = bitcast %struct.jv* %6 to i64*, !dbg !1500
  %38 = load i64, i64* %37, align 8, !dbg !1500
  %39 = getelementptr inbounds %struct.jv, %struct.jv* %6, i64 0, i32 4, i32 0, !dbg !1500
  %40 = load %struct.jv_refcnt*, %struct.jv_refcnt** %39, align 8, !dbg !1500
  tail call void @jv_free(i64 %38, %struct.jv_refcnt* %40) #15, !dbg !1500
  call void @llvm.dbg.value(metadata i64 %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1502
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %16, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1502
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1502
  %41 = getelementptr inbounds [15 x i8], [15 x i8]* %9, i64 0, i64 0, !dbg !1504
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %41) #15, !dbg !1504
  call void @llvm.dbg.declare(metadata [15 x i8]* %9, metadata !390, metadata !DIExpression()) #15, !dbg !1505
  %42 = tail call i32 @jv_get_kind(i64 %14, %struct.jv_refcnt* %16) #15, !dbg !1506
  %43 = tail call i8* @jv_kind_name(i32 %42) #15, !dbg !1507
  %44 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %14, %struct.jv_refcnt* %16) #15, !dbg !1508
  %45 = extractvalue { i64, %struct.jv_refcnt* } %44, 0, !dbg !1508
  %46 = extractvalue { i64, %struct.jv_refcnt* } %44, 1, !dbg !1508
  %47 = call i8* @jv_dump_string_trunc(i64 %45, %struct.jv_refcnt* %46, i8* nonnull %41, i64 15) #15, !dbg !1509
  %48 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %43, i8* %47, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1510
  %49 = extractvalue { i64, %struct.jv_refcnt* } %48, 0, !dbg !1510
  %50 = extractvalue { i64, %struct.jv_refcnt* } %48, 1, !dbg !1510
  %51 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %49, %struct.jv_refcnt* %50) #15, !dbg !1511
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1502
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1502
  call void @jv_free(i64 %14, %struct.jv_refcnt* %16) #15, !dbg !1512
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %41) #15, !dbg !1513
  br label %77, !dbg !1500

52:                                               ; preds = %33
  %53 = bitcast %struct.jv* %6 to i64*, !dbg !1514
  %54 = load i64, i64* %53, align 8, !dbg !1514
  %55 = getelementptr inbounds %struct.jv, %struct.jv* %6, i64 0, i32 4, i32 0, !dbg !1514
  %56 = load %struct.jv_refcnt*, %struct.jv_refcnt** %55, align 8, !dbg !1514
  %57 = tail call i32 @jv_get_kind(i64 %54, %struct.jv_refcnt* %56) #15, !dbg !1514
  %58 = icmp eq i32 %57, 4, !dbg !1514
  br i1 %58, label %71, label %59, !dbg !1481

59:                                               ; preds = %52
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1516
  tail call void @jv_free(i64 %14, %struct.jv_refcnt* %16) #15, !dbg !1516
  call void @llvm.dbg.value(metadata i64 %54, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1518
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %56, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1518
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1518
  %60 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1520
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %60) #15, !dbg !1520
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1521
  %61 = tail call i32 @jv_get_kind(i64 %54, %struct.jv_refcnt* %56) #15, !dbg !1522
  %62 = tail call i8* @jv_kind_name(i32 %61) #15, !dbg !1523
  %63 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %54, %struct.jv_refcnt* %56) #15, !dbg !1524
  %64 = extractvalue { i64, %struct.jv_refcnt* } %63, 0, !dbg !1524
  %65 = extractvalue { i64, %struct.jv_refcnt* } %63, 1, !dbg !1524
  %66 = call i8* @jv_dump_string_trunc(i64 %64, %struct.jv_refcnt* %65, i8* nonnull %60, i64 15) #15, !dbg !1525
  %67 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %62, i8* %66, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1526
  %68 = extractvalue { i64, %struct.jv_refcnt* } %67, 0, !dbg !1526
  %69 = extractvalue { i64, %struct.jv_refcnt* } %67, 1, !dbg !1526
  %70 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %68, %struct.jv_refcnt* %69) #15, !dbg !1527
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1518
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1518
  call void @jv_free(i64 %54, %struct.jv_refcnt* %56) #15, !dbg !1528
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %60) #15, !dbg !1529
  br label %77, !dbg !1516

71:                                               ; preds = %52
  %72 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1481
  %73 = tail call double @jv_number_value(i64 %14, %struct.jv_refcnt* %16) #15, !dbg !1481
  %74 = tail call double @jv_number_value(i64 %54, %struct.jv_refcnt* %56) #15, !dbg !1481
  %75 = tail call double @llvm.fma.f64(double %72, double %73, double %74), !dbg !1481
  %76 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %75) #15, !dbg !1481
  call void @llvm.dbg.value(metadata i64 undef, metadata !1479, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1480
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1479, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1480
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1481
  tail call void @jv_free(i64 %14, %struct.jv_refcnt* %16) #15, !dbg !1481
  tail call void @jv_free(i64 %54, %struct.jv_refcnt* %56) #15, !dbg !1481
  br label %77

77:                                               ; preds = %71, %59, %36, %17
  %78 = phi { i64, %struct.jv_refcnt* } [ %32, %17 ], [ %51, %36 ], [ %70, %59 ], [ %76, %71 ]
  ret { i64, %struct.jv_refcnt* } %78, !dbg !1481
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_fmax(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1530 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1533, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1537
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1533, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1537
  call void @llvm.dbg.value(metadata i64 %3, metadata !1534, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1537
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1534, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1537
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1532, metadata !DIExpression()), !dbg !1537
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1535, metadata !DIExpression()), !dbg !1538
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1538
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1539
  %10 = icmp eq i32 %9, 4, !dbg !1539
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1537
  %12 = load i64, i64* %11, align 8, !dbg !1537
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1537
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1537
  br i1 %10, label %27, label %15, !dbg !1538

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1541
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1543
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1543
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1543
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1545
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1545
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1546
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1547
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1548
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1549
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1549
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1549
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1550
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1551
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1551
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1551
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1552
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1543
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1543
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1553
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1554
  br label %47, !dbg !1541

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1555
  %29 = icmp eq i32 %28, 4, !dbg !1555
  br i1 %29, label %42, label %30, !dbg !1538

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1557
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1559
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1559
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1559
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1561
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1561
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1562
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1563
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1564
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1565
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1565
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1565
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1566
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1567
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1567
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1567
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1568
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1559
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1559
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1569
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1570
  br label %47, !dbg !1557

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1538
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1538
  %45 = tail call double @llvm.maxnum.f64(double %43, double %44), !dbg !1538
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !1538
  call void @llvm.dbg.value(metadata i64 undef, metadata !1536, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1537
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1536, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1537
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1538
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1538
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !1538
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_fmin(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1571 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1574, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1578
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1574, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1578
  call void @llvm.dbg.value(metadata i64 %3, metadata !1575, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1578
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1575, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1578
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1573, metadata !DIExpression()), !dbg !1578
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1576, metadata !DIExpression()), !dbg !1579
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1579
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1580
  %10 = icmp eq i32 %9, 4, !dbg !1580
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1578
  %12 = load i64, i64* %11, align 8, !dbg !1578
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1578
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1578
  br i1 %10, label %27, label %15, !dbg !1579

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1582
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1584
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1584
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1584
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1586
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1586
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1587
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1588
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1589
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1590
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1590
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1590
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1591
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1592
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1592
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1592
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1593
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1584
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1584
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1594
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1595
  br label %47, !dbg !1582

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1596
  %29 = icmp eq i32 %28, 4, !dbg !1596
  br i1 %29, label %42, label %30, !dbg !1579

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1598
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1600
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1600
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1600
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1602
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1602
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1603
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1604
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1605
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1606
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1606
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1606
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1607
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1608
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1608
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1608
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1609
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1600
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1600
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1610
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1611
  br label %47, !dbg !1598

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1579
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1579
  %45 = tail call double @llvm.minnum.f64(double %43, double %44), !dbg !1579
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !1579
  call void @llvm.dbg.value(metadata i64 undef, metadata !1577, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1578
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1577, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1578
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1579
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1579
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !1579
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_fmod(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1612 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1615, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1619
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1615, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1619
  call void @llvm.dbg.value(metadata i64 %3, metadata !1616, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1619
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1616, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1619
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1614, metadata !DIExpression()), !dbg !1619
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1617, metadata !DIExpression()), !dbg !1620
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1620
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1621
  %10 = icmp eq i32 %9, 4, !dbg !1621
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1619
  %12 = load i64, i64* %11, align 8, !dbg !1619
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1619
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1619
  br i1 %10, label %27, label %15, !dbg !1620

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1623
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1625
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1625
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1625
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1627
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1627
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1628
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1629
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1630
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1631
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1631
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1631
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1632
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1633
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1633
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1633
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1634
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1625
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1625
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1635
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1636
  br label %47, !dbg !1623

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1637
  %29 = icmp eq i32 %28, 4, !dbg !1637
  br i1 %29, label %42, label %30, !dbg !1620

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1639
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1641
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1641
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1641
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1643
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1643
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1644
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1645
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1646
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1647
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1647
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1647
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1648
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1649
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1649
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1649
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1650
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1641
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1641
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1651
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1652
  br label %47, !dbg !1639

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1620
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1620
  %45 = tail call double @fmod(double %43, double %44) #15, !dbg !1620
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !1620
  call void @llvm.dbg.value(metadata i64 undef, metadata !1618, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1619
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1618, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1619
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1620
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1620
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !1620
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_gamma(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1653 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1656, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1658
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1656, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1658
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1655, metadata !DIExpression()), !dbg !1658
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1659
  %6 = icmp eq i32 %5, 4, !dbg !1659
  br i1 %6, label %19, label %7, !dbg !1661

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1662
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1662
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1662
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1665
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1665
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1666
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1667
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1668
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1669
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1669
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1669
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1670
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1671
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1671
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1671
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1672
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1662
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1662
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1673
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1674
  br label %23, !dbg !1675

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1661
  %21 = tail call double @gamma(double %20) #15, !dbg !1661
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1661
  call void @llvm.dbg.value(metadata i64 undef, metadata !1657, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1658
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1657, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1658
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1661
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1661
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_lgamma(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1676 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1679, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1681
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1679, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1681
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1678, metadata !DIExpression()), !dbg !1681
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1682
  %6 = icmp eq i32 %5, 4, !dbg !1682
  br i1 %6, label %19, label %7, !dbg !1684

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1685
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1685
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1685
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1688
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1688
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1689
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1690
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1691
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1692
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1692
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1692
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1693
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1694
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1694
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1694
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1695
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1685
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1685
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1696
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1697
  br label %23, !dbg !1698

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1684
  %21 = tail call double @lgamma(double %20) #15, !dbg !1684
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1684
  call void @llvm.dbg.value(metadata i64 undef, metadata !1680, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1681
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1680, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1681
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1684
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1684
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_log1p(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1699 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1702, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1704
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1702, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1704
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1701, metadata !DIExpression()), !dbg !1704
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1705
  %6 = icmp eq i32 %5, 4, !dbg !1705
  br i1 %6, label %19, label %7, !dbg !1707

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1708
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1708
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1708
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1711
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1711
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1712
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1713
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1714
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1715
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1715
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1715
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1716
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1717
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1717
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1717
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1718
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1708
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1708
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1719
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1720
  br label %23, !dbg !1721

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1707
  %21 = tail call double @log1p(double %20) #15, !dbg !1707
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1707
  call void @llvm.dbg.value(metadata i64 undef, metadata !1703, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1704
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1703, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1704
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1707
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1707
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_logb(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1722 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1725, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1727
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1725, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1727
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1724, metadata !DIExpression()), !dbg !1727
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1728
  %6 = icmp eq i32 %5, 4, !dbg !1728
  br i1 %6, label %19, label %7, !dbg !1730

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1731
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1731
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1731
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1734
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1734
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1735
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1736
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1737
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1738
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1738
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1738
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1739
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1740
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1740
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1740
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1741
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1731
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1731
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1742
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1743
  br label %23, !dbg !1744

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1730
  %21 = tail call double @logb(double %20) #15, !dbg !1730
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1730
  call void @llvm.dbg.value(metadata i64 undef, metadata !1726, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1727
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1726, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1727
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1730
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1730
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_nearbyint(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1745 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1748, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1750
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1748, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1750
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1747, metadata !DIExpression()), !dbg !1750
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1751
  %6 = icmp eq i32 %5, 4, !dbg !1751
  br i1 %6, label %19, label %7, !dbg !1753

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1754
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1754
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1754
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1757
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1757
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1758
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1759
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1760
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1761
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1761
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1761
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1762
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1763
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1763
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1763
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1764
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1754
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1754
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1765
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1766
  br label %23, !dbg !1767

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1753
  %21 = tail call double @llvm.nearbyint.f64(double %20), !dbg !1753
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1753
  call void @llvm.dbg.value(metadata i64 undef, metadata !1749, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1750
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1749, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1750
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1753
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1753
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_nextafter(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1768 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1771, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1775
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1771, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1775
  call void @llvm.dbg.value(metadata i64 %3, metadata !1772, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1775
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1772, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1775
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1770, metadata !DIExpression()), !dbg !1775
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1773, metadata !DIExpression()), !dbg !1776
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1776
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1777
  %10 = icmp eq i32 %9, 4, !dbg !1777
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1775
  %12 = load i64, i64* %11, align 8, !dbg !1775
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1775
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1775
  br i1 %10, label %27, label %15, !dbg !1776

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1779
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1781
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1781
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1781
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1783
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1783
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1784
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1785
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1786
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1787
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1787
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1787
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1788
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1789
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1789
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1789
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1790
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1781
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1781
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1791
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1792
  br label %47, !dbg !1779

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1793
  %29 = icmp eq i32 %28, 4, !dbg !1793
  br i1 %29, label %42, label %30, !dbg !1776

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1795
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1797
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1797
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1797
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1799
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1799
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1800
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1801
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1802
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1803
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1803
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1803
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1804
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1805
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1805
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1805
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1806
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1797
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1797
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1807
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1808
  br label %47, !dbg !1795

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1776
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1776
  %45 = tail call double @nextafter(double %43, double %44) #15, !dbg !1776
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !1776
  call void @llvm.dbg.value(metadata i64 undef, metadata !1774, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1775
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1774, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1775
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1776
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1776
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !1776
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_nexttoward(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1809 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1816
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1816
  call void @llvm.dbg.value(metadata i64 %3, metadata !1813, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1816
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1813, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1816
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1811, metadata !DIExpression()), !dbg !1816
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1814, metadata !DIExpression()), !dbg !1817
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1817
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1818
  %10 = icmp eq i32 %9, 4, !dbg !1818
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1816
  %12 = load i64, i64* %11, align 8, !dbg !1816
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1816
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1816
  br i1 %10, label %27, label %15, !dbg !1817

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1820
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1822
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1822
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1822
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1824
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1824
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1825
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1826
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1827
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1828
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1828
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1828
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1829
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1830
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1830
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1830
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1831
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1822
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1822
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1832
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1833
  br label %48, !dbg !1820

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1834
  %29 = icmp eq i32 %28, 4, !dbg !1834
  br i1 %29, label %42, label %30, !dbg !1817

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1836
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1838
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1838
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1838
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1840
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1840
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1841
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1842
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1843
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1844
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1844
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1844
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1845
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1846
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1846
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1846
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1847
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1838
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1838
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1848
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1849
  br label %48, !dbg !1836

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1817
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1817
  %45 = fpext double %44 to x86_fp80, !dbg !1817
  %46 = tail call double @nexttoward(double %43, x86_fp80 %45) #15, !dbg !1817
  %47 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %46) #15, !dbg !1817
  call void @llvm.dbg.value(metadata i64 undef, metadata !1815, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1816
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1815, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1816
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1817
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1817
  br label %48

48:                                               ; preds = %42, %30, %15
  %49 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %47, %42 ]
  ret { i64, %struct.jv_refcnt* } %49, !dbg !1817
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_rint(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1850 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1853, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1855
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1853, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1855
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1852, metadata !DIExpression()), !dbg !1855
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1856
  %6 = icmp eq i32 %5, 4, !dbg !1856
  br i1 %6, label %19, label %7, !dbg !1858

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1859
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1859
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1859
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1862
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1862
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1863
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1864
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1865
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1866
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1866
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1866
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1867
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1868
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1868
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1868
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1869
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1859
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1859
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1870
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1871
  br label %23, !dbg !1872

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1858
  %21 = tail call double @llvm.rint.f64(double %20), !dbg !1858
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1858
  call void @llvm.dbg.value(metadata i64 undef, metadata !1854, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1855
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1854, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1855
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1858
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1858
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_round(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1873 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1876, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1878
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1876, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1878
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1875, metadata !DIExpression()), !dbg !1878
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1879
  %6 = icmp eq i32 %5, 4, !dbg !1879
  br i1 %6, label %19, label %7, !dbg !1881

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1882
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1882
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1882
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1885
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1885
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1886
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1887
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1888
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1889
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1889
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1889
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1890
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1891
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1891
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1891
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1892
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1882
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1882
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1893
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1894
  br label %23, !dbg !1895

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1881
  %21 = tail call double @llvm.round.f64(double %20), !dbg !1881
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1881
  call void @llvm.dbg.value(metadata i64 undef, metadata !1877, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1878
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1877, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1878
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1881
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1881
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_scalb(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1896 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1899, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1903
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1899, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1903
  call void @llvm.dbg.value(metadata i64 %3, metadata !1900, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1903
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1900, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1903
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1898, metadata !DIExpression()), !dbg !1903
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1901, metadata !DIExpression()), !dbg !1904
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1904
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1905
  %10 = icmp eq i32 %9, 4, !dbg !1905
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1903
  %12 = load i64, i64* %11, align 8, !dbg !1903
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1903
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1903
  br i1 %10, label %27, label %15, !dbg !1904

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1907
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1909
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1909
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1909
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1911
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1911
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1912
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1913
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1914
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1915
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1915
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1915
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1916
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1917
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1917
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1917
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1918
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1909
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1909
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1919
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1920
  br label %47, !dbg !1907

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1921
  %29 = icmp eq i32 %28, 4, !dbg !1921
  br i1 %29, label %42, label %30, !dbg !1904

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1923
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1925
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1925
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1925
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1927
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1927
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1928
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1929
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1930
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1931
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1931
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1931
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1932
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1933
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1933
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1933
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1934
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1925
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1925
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1935
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1936
  br label %47, !dbg !1923

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1904
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1904
  %45 = tail call double @scalb(double %43, double %44) #15, !dbg !1904
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !1904
  call void @llvm.dbg.value(metadata i64 undef, metadata !1902, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1903
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1902, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1903
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1904
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1904
  br label %47

47:                                               ; preds = %42, %30, %15
  %48 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %46, %42 ]
  ret { i64, %struct.jv_refcnt* } %48, !dbg !1904
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_scalbln(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !1937 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1940, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1944
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1940, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1944
  call void @llvm.dbg.value(metadata i64 %3, metadata !1941, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1944
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !1941, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1944
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1939, metadata !DIExpression()), !dbg !1944
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !1942, metadata !DIExpression()), !dbg !1945
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1945
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1946
  %10 = icmp eq i32 %9, 4, !dbg !1946
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !1944
  %12 = load i64, i64* %11, align 8, !dbg !1944
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !1944
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !1944
  br i1 %10, label %27, label %15, !dbg !1945

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1948
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1950
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1950
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1950
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !1952
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1952
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !1953
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1954
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !1955
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1956
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !1956
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !1956
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !1957
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1958
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !1958
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !1958
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !1959
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1950
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1950
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1960
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !1961
  br label %48, !dbg !1948

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1962
  %29 = icmp eq i32 %28, 4, !dbg !1962
  br i1 %29, label %42, label %30, !dbg !1945

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1964
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1966
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1966
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1966
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !1968
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1968
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !1969
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1970
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !1971
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1972
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !1972
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !1972
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !1973
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1974
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !1974
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !1974
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !1975
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1966
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1966
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1976
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !1977
  br label %48, !dbg !1964

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1945
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1945
  %45 = fptosi double %44 to i64, !dbg !1945
  %46 = tail call double @scalbln(double %43, i64 %45) #15, !dbg !1945
  %47 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %46) #15, !dbg !1945
  call void @llvm.dbg.value(metadata i64 undef, metadata !1943, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1944
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1943, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1944
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !1945
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !1945
  br label %48

48:                                               ; preds = %42, %30, %15
  %49 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %47, %42 ]
  ret { i64, %struct.jv_refcnt* } %49, !dbg !1945
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_significand(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !1978 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !1981, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1983
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !1981, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1983
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !1980, metadata !DIExpression()), !dbg !1983
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1984
  %6 = icmp eq i32 %5, 4, !dbg !1984
  br i1 %6, label %19, label %7, !dbg !1986

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1987
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1987
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !1987
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !1990
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1990
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !1991
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1992
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !1993
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1994
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !1994
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !1994
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !1995
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !1996
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !1996
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !1996
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !1997
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !1987
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !1987
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1998
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !1999
  br label %23, !dbg !2000

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1986
  %21 = tail call double @significand(double %20) #15, !dbg !1986
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !1986
  call void @llvm.dbg.value(metadata i64 undef, metadata !1982, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !1983
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !1982, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !1983
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !1986
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !1986
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_trunc(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2001 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !2004, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2006
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2004, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2006
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2003, metadata !DIExpression()), !dbg !2006
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2007
  %6 = icmp eq i32 %5, 4, !dbg !2007
  br i1 %6, label %19, label %7, !dbg !2009

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2010
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2010
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2010
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2013
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !2013
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2014
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2015
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !2016
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2017
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !2017
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !2017
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !2018
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !2019
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !2019
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !2019
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !2020
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2010
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2010
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2021
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !2022
  br label %23, !dbg !2023

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2009
  %21 = tail call double @llvm.trunc.f64(double %20), !dbg !2009
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !2009
  call void @llvm.dbg.value(metadata i64 undef, metadata !2005, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2006
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2005, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2006
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2009
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !2009
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_ldexp(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2024 {
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !2027, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2031
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2027, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2031
  call void @llvm.dbg.value(metadata i64 %3, metadata !2028, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2031
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2028, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2031
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2026, metadata !DIExpression()), !dbg !2031
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2029, metadata !DIExpression()), !dbg !2032
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2032
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2033
  %10 = icmp eq i32 %9, 4, !dbg !2033
  %11 = bitcast %struct.jv* %5 to i64*, !dbg !2031
  %12 = load i64, i64* %11, align 8, !dbg !2031
  %13 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2031
  %14 = load %struct.jv_refcnt*, %struct.jv_refcnt** %13, align 8, !dbg !2031
  br i1 %10, label %27, label %15, !dbg !2032

15:                                               ; preds = %6
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !2035
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2037
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2037
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2037
  %16 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !2039
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %16) #15, !dbg !2039
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !2040
  %17 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2041
  %18 = tail call i8* @jv_kind_name(i32 %17) #15, !dbg !2042
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2043
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !2043
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !2043
  %22 = call i8* @jv_dump_string_trunc(i64 %20, %struct.jv_refcnt* %21, i8* nonnull %16, i64 15) #15, !dbg !2044
  %23 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %18, i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !2045
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !2045
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !2045
  %26 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !2046
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2037
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2037
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2047
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %16) #15, !dbg !2048
  br label %48, !dbg !2035

27:                                               ; preds = %6
  %28 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !2049
  %29 = icmp eq i32 %28, 4, !dbg !2049
  br i1 %29, label %42, label %30, !dbg !2032

30:                                               ; preds = %27
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2051
  call void @llvm.dbg.value(metadata i64 %12, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2053
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2053
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2053
  %31 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !2055
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %31) #15, !dbg !2055
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !2056
  %32 = tail call i32 @jv_get_kind(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !2057
  %33 = tail call i8* @jv_kind_name(i32 %32) #15, !dbg !2058
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !2059
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !2059
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !2059
  %37 = call i8* @jv_dump_string_trunc(i64 %35, %struct.jv_refcnt* %36, i8* nonnull %31, i64 15) #15, !dbg !2060
  %38 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %33, i8* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !2061
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !2061
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !2061
  %41 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %39, %struct.jv_refcnt* %40) #15, !dbg !2062
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2053
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2053
  call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !2063
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %31) #15, !dbg !2064
  br label %48, !dbg !2051

42:                                               ; preds = %27
  %43 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2032
  %44 = tail call double @jv_number_value(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !2032
  %45 = fptosi double %44 to i32, !dbg !2032
  %46 = tail call double @ldexp(double %43, i32 %45) #15, !dbg !2032
  %47 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %46) #15, !dbg !2032
  call void @llvm.dbg.value(metadata i64 undef, metadata !2030, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2031
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2030, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2031
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2032
  tail call void @jv_free(i64 %12, %struct.jv_refcnt* %14) #15, !dbg !2032
  br label %48

48:                                               ; preds = %42, %30, %15
  %49 = phi { i64, %struct.jv_refcnt* } [ %26, %15 ], [ %41, %30 ], [ %47, %42 ]
  ret { i64, %struct.jv_refcnt* } %49, !dbg !2032
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_frexp(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2065 {
  %4 = alloca [15 x i8], align 1
  %5 = alloca i32, align 4
  call void @llvm.dbg.value(metadata i64 %1, metadata !2068, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2072
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2068, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2072
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2067, metadata !DIExpression()), !dbg !2072
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2073
  %7 = icmp eq i32 %6, 4, !dbg !2075
  br i1 %7, label %20, label %8, !dbg !2076

8:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2077
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2077
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2077
  %9 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2080
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %9) #15, !dbg !2080
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2081
  %10 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2082
  %11 = tail call i8* @jv_kind_name(i32 %10) #15, !dbg !2083
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2084
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2084
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2084
  %15 = call i8* @jv_dump_string_trunc(i64 %13, %struct.jv_refcnt* %14, i8* nonnull %9, i64 15) #15, !dbg !2085
  %16 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %11, i8* %15, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !2086
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !2086
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !2086
  %19 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %17, %struct.jv_refcnt* %18) #15, !dbg !2087
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2077
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2077
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2088
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %9) #15, !dbg !2089
  br label %39, !dbg !2090

20:                                               ; preds = %3
  %21 = bitcast i32* %5 to i8*, !dbg !2091
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #15, !dbg !2091
  %22 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2092
  call void @llvm.dbg.value(metadata i32* %5, metadata !2069, metadata !DIExpression(DW_OP_deref)), !dbg !2072
  %23 = call double @frexp(double %22, i32* nonnull %5) #15, !dbg !2093
  call void @llvm.dbg.value(metadata double %23, metadata !2070, metadata !DIExpression()), !dbg !2072
  %24 = tail call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !2094
  %25 = extractvalue { i64, %struct.jv_refcnt* } %24, 0, !dbg !2094
  %26 = extractvalue { i64, %struct.jv_refcnt* } %24, 1, !dbg !2094
  %27 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %23) #15, !dbg !2094
  %28 = extractvalue { i64, %struct.jv_refcnt* } %27, 0, !dbg !2094
  %29 = extractvalue { i64, %struct.jv_refcnt* } %27, 1, !dbg !2094
  %30 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %25, %struct.jv_refcnt* %26, i64 %28, %struct.jv_refcnt* %29) #15, !dbg !2094
  %31 = extractvalue { i64, %struct.jv_refcnt* } %30, 0, !dbg !2094
  %32 = extractvalue { i64, %struct.jv_refcnt* } %30, 1, !dbg !2094
  %33 = load i32, i32* %5, align 4, !dbg !2094, !tbaa !2095
  call void @llvm.dbg.value(metadata i32 %33, metadata !2069, metadata !DIExpression()), !dbg !2072
  %34 = sitofp i32 %33 to double, !dbg !2094
  %35 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %34) #15, !dbg !2094
  %36 = extractvalue { i64, %struct.jv_refcnt* } %35, 0, !dbg !2094
  %37 = extractvalue { i64, %struct.jv_refcnt* } %35, 1, !dbg !2094
  %38 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %31, %struct.jv_refcnt* %32, i64 %36, %struct.jv_refcnt* %37) #15, !dbg !2094
  call void @llvm.dbg.value(metadata i64 undef, metadata !2071, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2072
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2071, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2072
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2097
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #15, !dbg !2098
  br label %39

39:                                               ; preds = %20, %8
  %40 = phi { i64, %struct.jv_refcnt* } [ %19, %8 ], [ %38, %20 ]
  ret { i64, %struct.jv_refcnt* } %40, !dbg !2098
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_modf(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2099 {
  %4 = alloca [15 x i8], align 1
  %5 = alloca double, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !2102, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2105
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2102, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2105
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2101, metadata !DIExpression()), !dbg !2105
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2106
  %7 = icmp eq i32 %6, 4, !dbg !2108
  br i1 %7, label %20, label %8, !dbg !2109

8:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2110
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2110
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2110
  %9 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2113
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %9) #15, !dbg !2113
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2114
  %10 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2115
  %11 = tail call i8* @jv_kind_name(i32 %10) #15, !dbg !2116
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2117
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2117
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2117
  %15 = call i8* @jv_dump_string_trunc(i64 %13, %struct.jv_refcnt* %14, i8* nonnull %9, i64 15) #15, !dbg !2118
  %16 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %11, i8* %15, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !2119
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !2119
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !2119
  %19 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %17, %struct.jv_refcnt* %18) #15, !dbg !2120
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2110
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2110
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %9) #15, !dbg !2122
  br label %38, !dbg !2123

20:                                               ; preds = %3
  %21 = bitcast double* %5 to i8*, !dbg !2124
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #15, !dbg !2124
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !2125
  %23 = extractvalue { i64, %struct.jv_refcnt* } %22, 0, !dbg !2125
  %24 = extractvalue { i64, %struct.jv_refcnt* } %22, 1, !dbg !2125
  %25 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2125
  call void @llvm.dbg.value(metadata double* %5, metadata !2103, metadata !DIExpression(DW_OP_deref)), !dbg !2105
  %26 = call double @modf(double %25, double* nonnull %5) #15, !dbg !2125
  %27 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %26) #15, !dbg !2125
  %28 = extractvalue { i64, %struct.jv_refcnt* } %27, 0, !dbg !2125
  %29 = extractvalue { i64, %struct.jv_refcnt* } %27, 1, !dbg !2125
  %30 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %23, %struct.jv_refcnt* %24, i64 %28, %struct.jv_refcnt* %29) #15, !dbg !2125
  %31 = extractvalue { i64, %struct.jv_refcnt* } %30, 0, !dbg !2125
  call void @llvm.dbg.value(metadata i64 %31, metadata !2104, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2105
  %32 = extractvalue { i64, %struct.jv_refcnt* } %30, 1, !dbg !2125
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %32, metadata !2104, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2105
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2126
  %33 = load double, double* %5, align 8, !dbg !2127, !tbaa !2128
  call void @llvm.dbg.value(metadata double %33, metadata !2103, metadata !DIExpression()), !dbg !2105
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %33) #15, !dbg !2130
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !2130
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !2130
  %37 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %31, %struct.jv_refcnt* %32, i64 %35, %struct.jv_refcnt* %36) #15, !dbg !2131
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #15, !dbg !2132
  br label %38

38:                                               ; preds = %20, %8
  %39 = phi { i64, %struct.jv_refcnt* } [ %19, %8 ], [ %37, %20 ]
  ret { i64, %struct.jv_refcnt* } %39, !dbg !2132
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_lgamma_r(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2133 {
  %4 = alloca [15 x i8], align 1
  %5 = alloca i32, align 4
  call void @llvm.dbg.value(metadata i64 %1, metadata !2136, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2139
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2136, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2139
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2135, metadata !DIExpression()), !dbg !2139
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2140
  %7 = icmp eq i32 %6, 4, !dbg !2142
  br i1 %7, label %20, label %8, !dbg !2143

8:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2144
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2144
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2144
  %9 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2147
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %9) #15, !dbg !2147
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2148
  %10 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2149
  %11 = tail call i8* @jv_kind_name(i32 %10) #15, !dbg !2150
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2151
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2151
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2151
  %15 = call i8* @jv_dump_string_trunc(i64 %13, %struct.jv_refcnt* %14, i8* nonnull %9, i64 15) #15, !dbg !2152
  %16 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %11, i8* %15, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.141, i64 0, i64 0)) #15, !dbg !2153
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !2153
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !2153
  %19 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %17, %struct.jv_refcnt* %18) #15, !dbg !2154
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2144
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2144
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2155
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %9) #15, !dbg !2156
  br label %39, !dbg !2157

20:                                               ; preds = %3
  %21 = bitcast i32* %5 to i8*, !dbg !2158
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #15, !dbg !2158
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !2159
  %23 = extractvalue { i64, %struct.jv_refcnt* } %22, 0, !dbg !2159
  %24 = extractvalue { i64, %struct.jv_refcnt* } %22, 1, !dbg !2159
  %25 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2159
  call void @llvm.dbg.value(metadata i32* %5, metadata !2137, metadata !DIExpression(DW_OP_deref)), !dbg !2139
  %26 = call double @lgamma_r(double %25, i32* nonnull %5) #15, !dbg !2159
  %27 = call { i64, %struct.jv_refcnt* } @jv_number(double %26) #15, !dbg !2159
  %28 = extractvalue { i64, %struct.jv_refcnt* } %27, 0, !dbg !2159
  %29 = extractvalue { i64, %struct.jv_refcnt* } %27, 1, !dbg !2159
  %30 = call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %23, %struct.jv_refcnt* %24, i64 %28, %struct.jv_refcnt* %29) #15, !dbg !2159
  %31 = extractvalue { i64, %struct.jv_refcnt* } %30, 0, !dbg !2159
  call void @llvm.dbg.value(metadata i64 %31, metadata !2138, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2139
  %32 = extractvalue { i64, %struct.jv_refcnt* } %30, 1, !dbg !2159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %32, metadata !2138, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2139
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2160
  %33 = load i32, i32* %5, align 4, !dbg !2161, !tbaa !2095
  call void @llvm.dbg.value(metadata i32 %33, metadata !2137, metadata !DIExpression()), !dbg !2139
  %34 = sitofp i32 %33 to double, !dbg !2161
  %35 = call { i64, %struct.jv_refcnt* } @jv_number(double %34) #15, !dbg !2162
  %36 = extractvalue { i64, %struct.jv_refcnt* } %35, 0, !dbg !2162
  %37 = extractvalue { i64, %struct.jv_refcnt* } %35, 1, !dbg !2162
  %38 = call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %31, %struct.jv_refcnt* %32, i64 %36, %struct.jv_refcnt* %37) #15, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #15, !dbg !2164
  br label %39

39:                                               ; preds = %20, %8
  %40 = phi { i64, %struct.jv_refcnt* } [ %19, %8 ], [ %38, %20 ]
  ret { i64, %struct.jv_refcnt* } %40, !dbg !2164
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_plus(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2165 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2168, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2176
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2168, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2176
  call void @llvm.dbg.value(metadata i64 %3, metadata !2169, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2176
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2169, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2176
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2167, metadata !DIExpression()), !dbg !2176
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2170, metadata !DIExpression()), !dbg !2177
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2178
  %7 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2179
  %8 = icmp eq i32 %7, 1, !dbg !2180
  br i1 %8, label %9, label %14, !dbg !2181

9:                                                ; preds = %6
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2182
  %10 = bitcast %struct.jv* %5 to i64*, !dbg !2184
  %11 = load i64, i64* %10, align 8, !dbg !2184, !tbaa.struct !2185
  call void @llvm.dbg.value(metadata i64 %11, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2189
  %12 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2184
  %13 = load %struct.jv_refcnt*, %struct.jv_refcnt** %12, align 8, !dbg !2184, !tbaa.struct !2190
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %13, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2189
  br label %69, !dbg !2191

14:                                               ; preds = %6
  %15 = bitcast %struct.jv* %5 to i64*, !dbg !2192
  %16 = load i64, i64* %15, align 8, !dbg !2192
  %17 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2192
  %18 = load %struct.jv_refcnt*, %struct.jv_refcnt** %17, align 8, !dbg !2192
  %19 = tail call i32 @jv_get_kind(i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2192
  %20 = icmp eq i32 %19, 1, !dbg !2193
  br i1 %20, label %21, label %22, !dbg !2194

21:                                               ; preds = %14
  tail call void @jv_free(i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2195
  call void @llvm.dbg.value(metadata i64 %3, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2189
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2189
  br label %69, !dbg !2197

22:                                               ; preds = %14
  %23 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2198
  %24 = icmp eq i32 %23, 4, !dbg !2199
  br i1 %24, label %25, label %35, !dbg !2200

25:                                               ; preds = %22
  %26 = tail call i32 @jv_get_kind(i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2201
  %27 = icmp eq i32 %26, 4, !dbg !2202
  br i1 %27, label %28, label %35, !dbg !2203

28:                                               ; preds = %25
  %29 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2204
  %30 = tail call double @jv_number_value(i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2205
  %31 = fadd double %29, %30, !dbg !2206
  %32 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %31) #15, !dbg !2207
  %33 = extractvalue { i64, %struct.jv_refcnt* } %32, 0, !dbg !2207
  call void @llvm.dbg.value(metadata i64 %33, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2189
  %34 = extractvalue { i64, %struct.jv_refcnt* } %32, 1, !dbg !2207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %34, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2189
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2208
  tail call void @jv_free(i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2209
  br label %69, !dbg !2210

35:                                               ; preds = %25, %22
  %36 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2211
  %37 = icmp eq i32 %36, 5, !dbg !2213
  br i1 %37, label %38, label %45, !dbg !2214

38:                                               ; preds = %35
  %39 = tail call i32 @jv_get_kind(i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2215
  %40 = icmp eq i32 %39, 5, !dbg !2216
  br i1 %40, label %41, label %45, !dbg !2217

41:                                               ; preds = %38
  %42 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %3, %struct.jv_refcnt* %4, i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2218
  %43 = extractvalue { i64, %struct.jv_refcnt* } %42, 0, !dbg !2218
  call void @llvm.dbg.value(metadata i64 %43, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2189
  %44 = extractvalue { i64, %struct.jv_refcnt* } %42, 1, !dbg !2218
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %44, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2189
  br label %69, !dbg !2220

45:                                               ; preds = %38, %35
  %46 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2221
  %47 = icmp eq i32 %46, 6, !dbg !2223
  br i1 %47, label %48, label %55, !dbg !2224

48:                                               ; preds = %45
  %49 = tail call i32 @jv_get_kind(i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2225
  %50 = icmp eq i32 %49, 6, !dbg !2226
  br i1 %50, label %51, label %55, !dbg !2227

51:                                               ; preds = %48
  %52 = tail call { i64, %struct.jv_refcnt* } @jv_array_concat(i64 %3, %struct.jv_refcnt* %4, i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2228
  %53 = extractvalue { i64, %struct.jv_refcnt* } %52, 0, !dbg !2228
  call void @llvm.dbg.value(metadata i64 %53, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2189
  %54 = extractvalue { i64, %struct.jv_refcnt* } %52, 1, !dbg !2228
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %54, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2189
  br label %69, !dbg !2230

55:                                               ; preds = %48, %45
  %56 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2231
  %57 = icmp eq i32 %56, 7, !dbg !2233
  br i1 %57, label %58, label %65, !dbg !2234

58:                                               ; preds = %55
  %59 = tail call i32 @jv_get_kind(i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2235
  %60 = icmp eq i32 %59, 7, !dbg !2236
  br i1 %60, label %61, label %65, !dbg !2237

61:                                               ; preds = %58
  %62 = tail call { i64, %struct.jv_refcnt* } @jv_object_merge(i64 %3, %struct.jv_refcnt* %4, i64 %16, %struct.jv_refcnt* %18) #15, !dbg !2238
  %63 = extractvalue { i64, %struct.jv_refcnt* } %62, 0, !dbg !2238
  call void @llvm.dbg.value(metadata i64 %63, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2189
  %64 = extractvalue { i64, %struct.jv_refcnt* } %62, 1, !dbg !2238
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %64, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2189
  br label %69, !dbg !2240

65:                                               ; preds = %58, %55
  %66 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %3, %struct.jv_refcnt* %4, i64 %16, %struct.jv_refcnt* %18, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.143, i64 0, i64 0)), !dbg !2241
  %67 = extractvalue { i64, %struct.jv_refcnt* } %66, 0, !dbg !2241
  call void @llvm.dbg.value(metadata i64 %67, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2189
  %68 = extractvalue { i64, %struct.jv_refcnt* } %66, 1, !dbg !2241
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %68, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2189
  br label %69, !dbg !2243

69:                                               ; preds = %65, %61, %51, %41, %28, %21, %9
  %70 = phi i64 [ %11, %9 ], [ %3, %21 ], [ %33, %28 ], [ %43, %41 ], [ %53, %51 ], [ %63, %61 ], [ %67, %65 ], !dbg !2244
  %71 = phi %struct.jv_refcnt* [ %13, %9 ], [ %4, %21 ], [ %34, %28 ], [ %44, %41 ], [ %54, %51 ], [ %64, %61 ], [ %68, %65 ], !dbg !2244
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %71, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2189
  call void @llvm.dbg.value(metadata i64 %70, metadata !2171, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2189
  %72 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %70, 0, !dbg !2245
  %73 = insertvalue { i64, %struct.jv_refcnt* } %72, %struct.jv_refcnt* %71, 1, !dbg !2245
  ret { i64, %struct.jv_refcnt* } %73, !dbg !2245
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_negate(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2246 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !2249, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2251
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2249, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2251
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2248, metadata !DIExpression()), !dbg !2251
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2252
  %6 = icmp eq i32 %5, 4, !dbg !2254
  br i1 %6, label %19, label %7, !dbg !2255

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2256
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2256
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.145, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2256
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2259
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !2259
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2260
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2261
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !2262
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2263
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !2263
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !2263
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !2264
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.145, i64 0, i64 0)) #15, !dbg !2265
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !2265
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !2265
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !2266
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2256
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2256
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2267
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !2268
  br label %23, !dbg !2269

19:                                               ; preds = %3
  %20 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2270
  %21 = fneg double %20, !dbg !2271
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !2272
  call void @llvm.dbg.value(metadata i64 undef, metadata !2250, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2251
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2250, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2251
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2273
  br label %23

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !2274
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_minus(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2275 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2278, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2304
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2278, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2304
  call void @llvm.dbg.value(metadata i64 %3, metadata !2279, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2304
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2279, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2304
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2277, metadata !DIExpression()), !dbg !2304
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2280, metadata !DIExpression()), !dbg !2305
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2306
  %7 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2307
  %8 = icmp eq i32 %7, 4, !dbg !2308
  br i1 %8, label %9, label %23, !dbg !2309

9:                                                ; preds = %6
  %10 = bitcast %struct.jv* %5 to i64*, !dbg !2310
  %11 = load i64, i64* %10, align 8, !dbg !2310
  %12 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2310
  %13 = load %struct.jv_refcnt*, %struct.jv_refcnt** %12, align 8, !dbg !2310
  %14 = tail call i32 @jv_get_kind(i64 %11, %struct.jv_refcnt* %13) #15, !dbg !2310
  %15 = icmp eq i32 %14, 4, !dbg !2311
  br i1 %15, label %16, label %23, !dbg !2312

16:                                               ; preds = %9
  %17 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2313
  %18 = tail call double @jv_number_value(i64 %11, %struct.jv_refcnt* %13) #15, !dbg !2314
  %19 = fsub double %17, %18, !dbg !2315
  %20 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %19) #15, !dbg !2316
  %21 = extractvalue { i64, %struct.jv_refcnt* } %20, 0, !dbg !2316
  call void @llvm.dbg.value(metadata i64 %21, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %21, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  %22 = extractvalue { i64, %struct.jv_refcnt* } %20, 1, !dbg !2316
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %22, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %22, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2319
  tail call void @jv_free(i64 %11, %struct.jv_refcnt* %13) #15, !dbg !2320
  br label %92, !dbg !2321

23:                                               ; preds = %9, %6
  %24 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2322
  %25 = icmp eq i32 %24, 6, !dbg !2323
  %26 = bitcast %struct.jv* %5 to i64*
  %27 = load i64, i64* %26, align 8, !dbg !2324
  %28 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0
  %29 = load %struct.jv_refcnt*, %struct.jv_refcnt** %28, align 8, !dbg !2324
  br i1 %25, label %30, label %88, !dbg !2325

30:                                               ; preds = %23
  %31 = tail call i32 @jv_get_kind(i64 %27, %struct.jv_refcnt* %29) #15, !dbg !2326
  %32 = icmp eq i32 %31, 6, !dbg !2327
  br i1 %32, label %33, label %88, !dbg !2328

33:                                               ; preds = %30
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !2329
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !2329
  call void @llvm.dbg.value(metadata i64 %35, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %35, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !2329
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %36, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %36, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  %37 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2330
  %38 = extractvalue { i64, %struct.jv_refcnt* } %37, 0, !dbg !2330
  %39 = extractvalue { i64, %struct.jv_refcnt* } %37, 1, !dbg !2330
  %40 = tail call i32 @jv_array_length(i64 %38, %struct.jv_refcnt* %39) #15, !dbg !2330
  call void @llvm.dbg.value(metadata i32 %40, metadata !2287, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata i32 0, metadata !2289, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata i32 1, metadata !2290, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %36, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %36, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %35, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i64 %35, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i32 undef, metadata !2290, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* poison, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 poison, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %36, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i64 %35, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i32 0, metadata !2289, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata i64 undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %36, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %36, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %35, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i64 %35, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i32 0, metadata !2289, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 undef, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  %41 = icmp sgt i32 %40, 0, !dbg !2334
  br i1 %41, label %45, label %42, !dbg !2334

42:                                               ; preds = %83, %33
  %43 = phi i64 [ %35, %33 ], [ %84, %83 ], !dbg !2329
  %44 = phi %struct.jv_refcnt* [ %36, %33 ], [ %85, %83 ], !dbg !2329
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %44, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %44, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %43, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i64 %43, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i32 undef, metadata !2289, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata i32 undef, metadata !2290, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* poison, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 poison, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2335
  tail call void @jv_free(i64 %27, %struct.jv_refcnt* %29) #15, !dbg !2336
  br label %92, !dbg !2337

45:                                               ; preds = %33, %83
  %46 = phi %struct.jv_refcnt* [ %85, %83 ], [ %36, %33 ]
  %47 = phi i64 [ %84, %83 ], [ %35, %33 ]
  %48 = phi i32 [ %86, %83 ], [ 0, %33 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %46, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i64 %47, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i32 %48, metadata !2289, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata i64 poison, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* poison, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  %49 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2334
  %50 = extractvalue { i64, %struct.jv_refcnt* } %49, 0, !dbg !2334
  %51 = extractvalue { i64, %struct.jv_refcnt* } %49, 1, !dbg !2334
  %52 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %50, %struct.jv_refcnt* %51, i32 %48) #15, !dbg !2334
  %53 = extractvalue { i64, %struct.jv_refcnt* } %52, 0, !dbg !2334
  %54 = extractvalue { i64, %struct.jv_refcnt* } %52, 1, !dbg !2334
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 undef, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i32 1, metadata !2294, metadata !DIExpression()), !dbg !2338
  %55 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %27, %struct.jv_refcnt* %29) #15, !dbg !2339
  %56 = extractvalue { i64, %struct.jv_refcnt* } %55, 0, !dbg !2339
  %57 = extractvalue { i64, %struct.jv_refcnt* } %55, 1, !dbg !2339
  %58 = tail call i32 @jv_array_length(i64 %56, %struct.jv_refcnt* %57) #15, !dbg !2339
  call void @llvm.dbg.value(metadata i32 %58, metadata !2297, metadata !DIExpression()), !dbg !2340
  call void @llvm.dbg.value(metadata i32 undef, metadata !2300, metadata !DIExpression()), !dbg !2340
  call void @llvm.dbg.value(metadata i32 0, metadata !2299, metadata !DIExpression()), !dbg !2340
  call void @llvm.dbg.value(metadata i64 poison, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* poison, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  %59 = icmp sgt i32 %58, 0, !dbg !2341
  br i1 %59, label %60, label %76, !dbg !2341

60:                                               ; preds = %45, %73
  %61 = phi i32 [ %74, %73 ], [ 0, %45 ]
  call void @llvm.dbg.value(metadata i32 %61, metadata !2299, metadata !DIExpression()), !dbg !2340
  %62 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %27, %struct.jv_refcnt* %29) #15, !dbg !2341
  %63 = extractvalue { i64, %struct.jv_refcnt* } %62, 0, !dbg !2341
  %64 = extractvalue { i64, %struct.jv_refcnt* } %62, 1, !dbg !2341
  %65 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %63, %struct.jv_refcnt* %64, i32 %61) #15, !dbg !2341
  %66 = extractvalue { i64, %struct.jv_refcnt* } %65, 0, !dbg !2341
  %67 = extractvalue { i64, %struct.jv_refcnt* } %65, 1, !dbg !2341
  call void @llvm.dbg.value(metadata i64 undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  %68 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %53, %struct.jv_refcnt* %54) #15, !dbg !2343
  %69 = extractvalue { i64, %struct.jv_refcnt* } %68, 0, !dbg !2343
  %70 = extractvalue { i64, %struct.jv_refcnt* } %68, 1, !dbg !2343
  %71 = tail call i32 @jv_equal(i64 %69, %struct.jv_refcnt* %70, i64 %66, %struct.jv_refcnt* %67) #15, !dbg !2346
  %72 = icmp eq i32 %71, 0, !dbg !2346
  br i1 %72, label %73, label %83, !dbg !2347

73:                                               ; preds = %60
  %74 = add nuw nsw i32 %61, 1, !dbg !2341
  call void @llvm.dbg.value(metadata i32 %74, metadata !2299, metadata !DIExpression()), !dbg !2340
  call void @llvm.dbg.value(metadata i64 %66, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %67, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  %75 = icmp eq i32 %74, %58, !dbg !2341
  br i1 %75, label %76, label %60, !dbg !2341, !llvm.loop !2348

76:                                               ; preds = %73, %45
  call void @llvm.dbg.value(metadata i32 undef, metadata !2294, metadata !DIExpression()), !dbg !2338
  call void @llvm.dbg.value(metadata i32 undef, metadata !2299, metadata !DIExpression()), !dbg !2340
  call void @llvm.dbg.value(metadata i64 undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata i32 undef, metadata !2300, metadata !DIExpression()), !dbg !2340
  %77 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %53, %struct.jv_refcnt* %54) #15, !dbg !2352
  %78 = extractvalue { i64, %struct.jv_refcnt* } %77, 0, !dbg !2352
  %79 = extractvalue { i64, %struct.jv_refcnt* } %77, 1, !dbg !2352
  %80 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %47, %struct.jv_refcnt* %46, i64 %78, %struct.jv_refcnt* %79) #15, !dbg !2354
  %81 = extractvalue { i64, %struct.jv_refcnt* } %80, 0, !dbg !2354
  %82 = extractvalue { i64, %struct.jv_refcnt* } %80, 1, !dbg !2354
  call void @llvm.dbg.value(metadata i64 %81, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %81, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %82, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %82, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  br label %83, !dbg !2355

83:                                               ; preds = %60, %76
  %84 = phi i64 [ %81, %76 ], [ %47, %60 ], !dbg !2318
  %85 = phi %struct.jv_refcnt* [ %82, %76 ], [ %46, %60 ], !dbg !2318
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %85, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %85, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %84, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i64 %84, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  tail call void @jv_free(i64 %53, %struct.jv_refcnt* %54) #15, !dbg !2356
  %86 = add nuw nsw i32 %48, 1, !dbg !2334
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %85, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %85, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %84, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i64 %84, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i32 %86, metadata !2289, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 undef, metadata !2291, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2332
  call void @llvm.dbg.value(metadata i64 undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2301, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2333
  %87 = icmp eq i32 %86, %40, !dbg !2334
  br i1 %87, label %42, label %45, !dbg !2334, !llvm.loop !2357

88:                                               ; preds = %23, %30
  %89 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %3, %struct.jv_refcnt* %4, i64 %27, %struct.jv_refcnt* %29, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.146, i64 0, i64 0)), !dbg !2360
  %90 = extractvalue { i64, %struct.jv_refcnt* } %89, 0, !dbg !2360
  call void @llvm.dbg.value(metadata i64 %90, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %90, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  %91 = extractvalue { i64, %struct.jv_refcnt* } %89, 1, !dbg !2360
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %91, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %91, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  br label %92, !dbg !2362

92:                                               ; preds = %88, %42, %16
  %93 = phi i64 [ %21, %16 ], [ %43, %42 ], [ %90, %88 ], !dbg !2363
  %94 = phi %struct.jv_refcnt* [ %22, %16 ], [ %44, %42 ], [ %91, %88 ], !dbg !2363
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %94, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %94, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2317
  call void @llvm.dbg.value(metadata i64 %93, metadata !2284, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2318
  call void @llvm.dbg.value(metadata i64 %93, metadata !2281, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2317
  %95 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %93, 0, !dbg !2364
  %96 = insertvalue { i64, %struct.jv_refcnt* } %95, %struct.jv_refcnt* %94, 1, !dbg !2364
  ret { i64, %struct.jv_refcnt* } %96, !dbg !2364
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_multiply(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2365 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2368, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2389
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2368, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2389
  call void @llvm.dbg.value(metadata i64 %3, metadata !2369, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2389
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2369, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2389
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2367, metadata !DIExpression()), !dbg !2389
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2370, metadata !DIExpression()), !dbg !2390
  %7 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2391
  call void @llvm.dbg.value(metadata i32 %7, metadata !2371, metadata !DIExpression()), !dbg !2389
  %8 = bitcast %struct.jv* %5 to i64*, !dbg !2392
  %9 = load i64, i64* %8, align 8, !dbg !2392
  %10 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2392
  %11 = load %struct.jv_refcnt*, %struct.jv_refcnt** %10, align 8, !dbg !2392
  %12 = tail call i32 @jv_get_kind(i64 %9, %struct.jv_refcnt* %11) #15, !dbg !2392
  call void @llvm.dbg.value(metadata i32 %12, metadata !2373, metadata !DIExpression()), !dbg !2389
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2393
  %13 = icmp eq i32 %7, 4, !dbg !2394
  %14 = icmp eq i32 %12, 4
  %15 = select i1 %13, i1 %14, i1 false, !dbg !2395
  br i1 %15, label %16, label %21, !dbg !2395

16:                                               ; preds = %6
  %17 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2396
  %18 = tail call double @jv_number_value(i64 %9, %struct.jv_refcnt* %11) #15, !dbg !2397
  %19 = fmul double %17, %18, !dbg !2398
  %20 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %19) #15, !dbg !2399
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2402
  tail call void @jv_free(i64 %9, %struct.jv_refcnt* %11) #15, !dbg !2403
  br label %64, !dbg !2404

21:                                               ; preds = %6
  %22 = icmp eq i32 %7, 5, !dbg !2405
  %23 = select i1 %22, i1 %14, i1 false, !dbg !2406
  br i1 %23, label %27, label %24, !dbg !2406

24:                                               ; preds = %21
  %25 = icmp eq i32 %12, 5
  %26 = select i1 %13, i1 %25, i1 false, !dbg !2407
  br i1 %26, label %27, label %56, !dbg !2407

27:                                               ; preds = %24, %21
  call void @llvm.dbg.value(metadata i64 %3, metadata !2377, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2377, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata i64 %9, metadata !2380, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %11, metadata !2380, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  br i1 %13, label %28, label %29, !dbg !2408

28:                                               ; preds = %27
  call void @llvm.dbg.value(metadata i64 %9, metadata !2377, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %11, metadata !2377, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata i64 %3, metadata !2380, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2380, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  br label %29, !dbg !2409

29:                                               ; preds = %28, %27
  %30 = phi i64 [ %3, %28 ], [ %9, %27 ], !dbg !2401
  %31 = phi %struct.jv_refcnt* [ %4, %28 ], [ %11, %27 ], !dbg !2401
  %32 = phi i64 [ %9, %28 ], [ %3, %27 ], !dbg !2401
  %33 = phi %struct.jv_refcnt* [ %11, %28 ], [ %4, %27 ], !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %33, metadata !2377, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata i64 %32, metadata !2377, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %31, metadata !2380, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata i64 %30, metadata !2380, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_null() #15, !dbg !2412
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  %35 = tail call double @jv_number_value(i64 %30, %struct.jv_refcnt* %31) #15, !dbg !2413
  %36 = fptosi double %35 to i32, !dbg !2413
  call void @llvm.dbg.value(metadata i32 %36, metadata !2382, metadata !DIExpression()), !dbg !2401
  %37 = icmp sgt i32 %36, 0, !dbg !2414
  br i1 %37, label %38, label %54, !dbg !2415

38:                                               ; preds = %29
  %39 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %32, %struct.jv_refcnt* %33) #15, !dbg !2416
  %40 = extractvalue { i64, %struct.jv_refcnt* } %39, 0, !dbg !2416
  %41 = extractvalue { i64, %struct.jv_refcnt* } %39, 1, !dbg !2416
  %42 = tail call i32 @jv_string_length_bytes(i64 %40, %struct.jv_refcnt* %41) #15, !dbg !2417
  call void @llvm.dbg.value(metadata i32 %42, metadata !2383, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_stack_value)), !dbg !2418
  %43 = mul i32 %42, %36, !dbg !2419
  %44 = tail call { i64, %struct.jv_refcnt* } @jv_string_empty(i32 %43) #15, !dbg !2420
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i32 %36, metadata !2382, metadata !DIExpression()), !dbg !2401
  br label %45, !dbg !2421

45:                                               ; preds = %38, %45
  %46 = phi { i64, %struct.jv_refcnt* } [ %44, %38 ], [ %51, %45 ]
  %47 = phi i32 [ %36, %38 ], [ %52, %45 ]
  %48 = extractvalue { i64, %struct.jv_refcnt* } %46, 1, !dbg !2418
  %49 = extractvalue { i64, %struct.jv_refcnt* } %46, 0, !dbg !2418
  call void @llvm.dbg.value(metadata i32 %47, metadata !2382, metadata !DIExpression()), !dbg !2401
  %50 = tail call i8* @jv_string_value(i64 %32, %struct.jv_refcnt* %33) #15, !dbg !2423
  %51 = tail call { i64, %struct.jv_refcnt* } @jv_string_append_buf(i64 %49, %struct.jv_refcnt* %48, i8* %50, i32 %42) #15, !dbg !2426
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  %52 = add nsw i32 %47, -1, !dbg !2427
  call void @llvm.dbg.value(metadata i32 %52, metadata !2382, metadata !DIExpression()), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  %53 = icmp sgt i32 %47, 1, !dbg !2428
  br i1 %53, label %45, label %54, !dbg !2421, !llvm.loop !2429

54:                                               ; preds = %45, %29
  %55 = phi { i64, %struct.jv_refcnt* } [ %34, %29 ], [ %51, %45 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  tail call void @jv_free(i64 %32, %struct.jv_refcnt* %33) #15, !dbg !2431
  tail call void @jv_free(i64 %30, %struct.jv_refcnt* %31) #15, !dbg !2432
  br label %64

56:                                               ; preds = %24
  %57 = icmp eq i32 %7, 7, !dbg !2433
  %58 = icmp eq i32 %12, 7
  %59 = select i1 %57, i1 %58, i1 false, !dbg !2435
  br i1 %59, label %60, label %62, !dbg !2435

60:                                               ; preds = %56
  %61 = tail call { i64, %struct.jv_refcnt* } @jv_object_merge_recursive(i64 %3, %struct.jv_refcnt* %4, i64 %9, %struct.jv_refcnt* %11) #15, !dbg !2436
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  br label %64, !dbg !2438

62:                                               ; preds = %56
  %63 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %3, %struct.jv_refcnt* %4, i64 %9, %struct.jv_refcnt* %11, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.147, i64 0, i64 0)), !dbg !2439
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  br label %64, !dbg !2441

64:                                               ; preds = %62, %60, %54, %16
  %65 = phi { i64, %struct.jv_refcnt* } [ %20, %16 ], [ %55, %54 ], [ %61, %60 ], [ %63, %62 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2400
  call void @llvm.dbg.value(metadata i64 undef, metadata !2381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2401
  call void @llvm.dbg.value(metadata i64 undef, metadata !2374, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2400
  ret { i64, %struct.jv_refcnt* } %65, !dbg !2442
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_divide(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2443 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2446, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2452
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2446, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2452
  call void @llvm.dbg.value(metadata i64 %3, metadata !2447, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2452
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2447, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2452
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2445, metadata !DIExpression()), !dbg !2452
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2448, metadata !DIExpression()), !dbg !2453
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2454
  %7 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2455
  %8 = icmp eq i32 %7, 4, !dbg !2456
  br i1 %8, label %9, label %26, !dbg !2457

9:                                                ; preds = %6
  %10 = bitcast %struct.jv* %5 to i64*, !dbg !2458
  %11 = load i64, i64* %10, align 8, !dbg !2458
  %12 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2458
  %13 = load %struct.jv_refcnt*, %struct.jv_refcnt** %12, align 8, !dbg !2458
  %14 = tail call i32 @jv_get_kind(i64 %11, %struct.jv_refcnt* %13) #15, !dbg !2458
  %15 = icmp eq i32 %14, 4, !dbg !2459
  br i1 %15, label %16, label %26, !dbg !2460

16:                                               ; preds = %9
  %17 = tail call double @jv_number_value(i64 %11, %struct.jv_refcnt* %13) #15, !dbg !2461
  %18 = fcmp oeq double %17, 0.000000e+00, !dbg !2463
  br i1 %18, label %19, label %21, !dbg !2464

19:                                               ; preds = %16
  %20 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %3, %struct.jv_refcnt* %4, i64 %11, %struct.jv_refcnt* %13, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.148, i64 0, i64 0)), !dbg !2465
  br label %40, !dbg !2466

21:                                               ; preds = %16
  %22 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2467
  %23 = tail call double @jv_number_value(i64 %11, %struct.jv_refcnt* %13) #15, !dbg !2468
  %24 = fdiv double %22, %23, !dbg !2469
  %25 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %24) #15, !dbg !2470
  call void @llvm.dbg.value(metadata i64 undef, metadata !2449, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2471
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2449, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2471
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2472
  tail call void @jv_free(i64 %11, %struct.jv_refcnt* %13) #15, !dbg !2473
  br label %40

26:                                               ; preds = %9, %6
  %27 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2474
  %28 = icmp eq i32 %27, 5, !dbg !2476
  %29 = bitcast %struct.jv* %5 to i64*
  %30 = load i64, i64* %29, align 8, !dbg !2477
  %31 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0
  %32 = load %struct.jv_refcnt*, %struct.jv_refcnt** %31, align 8, !dbg !2477
  br i1 %28, label %33, label %38, !dbg !2478

33:                                               ; preds = %26
  %34 = tail call i32 @jv_get_kind(i64 %30, %struct.jv_refcnt* %32) #15, !dbg !2479
  %35 = icmp eq i32 %34, 5, !dbg !2480
  br i1 %35, label %36, label %38, !dbg !2481

36:                                               ; preds = %33
  %37 = tail call { i64, %struct.jv_refcnt* } @jv_string_split(i64 %3, %struct.jv_refcnt* %4, i64 %30, %struct.jv_refcnt* %32) #15, !dbg !2482
  br label %40, !dbg !2484

38:                                               ; preds = %26, %33
  %39 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %3, %struct.jv_refcnt* %4, i64 %30, %struct.jv_refcnt* %32, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.149, i64 0, i64 0)), !dbg !2485
  br label %40, !dbg !2487

40:                                               ; preds = %38, %36, %21, %19
  %41 = phi { i64, %struct.jv_refcnt* } [ %20, %19 ], [ %25, %21 ], [ %37, %36 ], [ %39, %38 ]
  ret { i64, %struct.jv_refcnt* } %41, !dbg !2488
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_mod(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2489 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2492, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2498
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2492, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2498
  call void @llvm.dbg.value(metadata i64 %3, metadata !2493, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2498
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2493, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2498
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2491, metadata !DIExpression()), !dbg !2498
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2494, metadata !DIExpression()), !dbg !2499
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2500
  %7 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2501
  %8 = icmp eq i32 %7, 4, !dbg !2502
  %9 = bitcast %struct.jv* %5 to i64*
  %10 = load i64, i64* %9, align 8, !dbg !2503
  %11 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0
  %12 = load %struct.jv_refcnt*, %struct.jv_refcnt** %11, align 8, !dbg !2503
  br i1 %8, label %13, label %30, !dbg !2504

13:                                               ; preds = %6
  %14 = tail call i32 @jv_get_kind(i64 %10, %struct.jv_refcnt* %12) #15, !dbg !2505
  %15 = icmp eq i32 %14, 4, !dbg !2506
  br i1 %15, label %16, label %30, !dbg !2507

16:                                               ; preds = %13
  %17 = tail call double @jv_number_value(i64 %10, %struct.jv_refcnt* %12) #15, !dbg !2508
  %18 = fptosi double %17 to i64, !dbg !2510
  %19 = icmp eq i64 %18, 0, !dbg !2511
  br i1 %19, label %20, label %22, !dbg !2512

20:                                               ; preds = %16
  %21 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %3, %struct.jv_refcnt* %4, i64 %10, %struct.jv_refcnt* %12, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.150, i64 0, i64 0)), !dbg !2513
  br label %32, !dbg !2514

22:                                               ; preds = %16
  %23 = tail call double @jv_number_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2515
  %24 = fptosi double %23 to i64, !dbg !2516
  %25 = tail call double @jv_number_value(i64 %10, %struct.jv_refcnt* %12) #15, !dbg !2517
  %26 = fptosi double %25 to i64, !dbg !2518
  %27 = srem i64 %24, %26, !dbg !2519
  %28 = sitofp i64 %27 to double, !dbg !2516
  %29 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %28) #15, !dbg !2520
  call void @llvm.dbg.value(metadata i64 undef, metadata !2495, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2521
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2495, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2521
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2522
  tail call void @jv_free(i64 %10, %struct.jv_refcnt* %12) #15, !dbg !2523
  br label %32

30:                                               ; preds = %6, %13
  %31 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %3, %struct.jv_refcnt* %4, i64 %10, %struct.jv_refcnt* %12, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.151, i64 0, i64 0)), !dbg !2524
  br label %32, !dbg !2526

32:                                               ; preds = %30, %22, %20
  %33 = phi { i64, %struct.jv_refcnt* } [ %21, %20 ], [ %29, %22 ], [ %31, %30 ]
  ret { i64, %struct.jv_refcnt* } %33, !dbg !2527
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_dump(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2528 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2531, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2532
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2531, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2532
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2530, metadata !DIExpression()), !dbg !2532
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_dump_string(i64 %1, %struct.jv_refcnt* %2, i32 0) #15, !dbg !2533
  ret { i64, %struct.jv_refcnt* } %4, !dbg !2534
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_json_parse(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2535 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !2538, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2540
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2538, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2540
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2537, metadata !DIExpression()), !dbg !2540
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2541
  %6 = icmp eq i32 %5, 5, !dbg !2543
  br i1 %6, label %19, label %7, !dbg !2544

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2545
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2545
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.152, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2545
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2547
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !2547
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2548
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2549
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !2550
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2551
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !2551
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !2551
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !2552
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.152, i64 0, i64 0)) #15, !dbg !2553
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !2553
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !2553
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !2554
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2545
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2545
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2555
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !2556
  br label %26, !dbg !2557

19:                                               ; preds = %3
  %20 = tail call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2558
  %21 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2559
  %22 = extractvalue { i64, %struct.jv_refcnt* } %21, 0, !dbg !2559
  %23 = extractvalue { i64, %struct.jv_refcnt* } %21, 1, !dbg !2559
  %24 = tail call i32 @jv_string_length_bytes(i64 %22, %struct.jv_refcnt* %23) #15, !dbg !2560
  %25 = tail call { i64, %struct.jv_refcnt* } @jv_parse_sized(i8* %20, i32 %24) #15, !dbg !2561
  call void @llvm.dbg.value(metadata i64 undef, metadata !2539, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2540
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2539, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2540
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2562
  br label %26

26:                                               ; preds = %19, %7
  %27 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %25, %19 ]
  ret { i64, %struct.jv_refcnt* } %27, !dbg !2563
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_tonumber(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2564 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !2567, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2571
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2567, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2571
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2566, metadata !DIExpression()), !dbg !2571
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2572
  %6 = icmp eq i32 %5, 4, !dbg !2574
  br i1 %6, label %35, label %7, !dbg !2575

7:                                                ; preds = %3
  %8 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2576
  %9 = icmp eq i32 %8, 5, !dbg !2577
  br i1 %9, label %10, label %21, !dbg !2578

10:                                               ; preds = %7
  %11 = tail call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2579
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_parse(i8* %11) #15, !dbg !2580
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2580
  call void @llvm.dbg.value(metadata i64 %13, metadata !2568, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2581
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2580
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !2568, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2581
  call void @llvm.dbg.value(metadata i64 %13, metadata !2582, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2587
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !2582, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2587
  %15 = tail call i32 @jv_get_kind(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !2590
  %16 = icmp eq i32 %15, 0, !dbg !2591
  br i1 %16, label %20, label %17, !dbg !2592

17:                                               ; preds = %10
  %18 = tail call i32 @jv_get_kind(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !2593
  %19 = icmp eq i32 %18, 4, !dbg !2594
  br i1 %19, label %20, label %21, !dbg !2595

20:                                               ; preds = %17, %10
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2596
  br label %35, !dbg !2598

21:                                               ; preds = %17, %7
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2599
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2599
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.153, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2599
  %22 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2601
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %22) #15, !dbg !2601
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2602
  %23 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2603
  %24 = tail call i8* @jv_kind_name(i32 %23) #15, !dbg !2604
  %25 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2605
  %26 = extractvalue { i64, %struct.jv_refcnt* } %25, 0, !dbg !2605
  %27 = extractvalue { i64, %struct.jv_refcnt* } %25, 1, !dbg !2605
  %28 = call i8* @jv_dump_string_trunc(i64 %26, %struct.jv_refcnt* %27, i8* nonnull %22, i64 15) #15, !dbg !2606
  %29 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %24, i8* %28, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.153, i64 0, i64 0)) #15, !dbg !2607
  %30 = extractvalue { i64, %struct.jv_refcnt* } %29, 0, !dbg !2607
  %31 = extractvalue { i64, %struct.jv_refcnt* } %29, 1, !dbg !2607
  %32 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %30, %struct.jv_refcnt* %31) #15, !dbg !2608
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2599
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2599
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2609
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %22) #15, !dbg !2610
  %33 = extractvalue { i64, %struct.jv_refcnt* } %32, 0, !dbg !2611
  call void @llvm.dbg.value(metadata i64 %33, metadata !2568, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2581
  %34 = extractvalue { i64, %struct.jv_refcnt* } %32, 1, !dbg !2611
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %34, metadata !2568, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2581
  br label %35, !dbg !2612

35:                                               ; preds = %3, %21, %20
  %36 = phi i64 [ %13, %20 ], [ %33, %21 ], [ %1, %3 ], !dbg !2571
  %37 = phi %struct.jv_refcnt* [ %14, %20 ], [ %34, %21 ], [ %2, %3 ], !dbg !2571
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %37, metadata !2568, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2581
  call void @llvm.dbg.value(metadata i64 %36, metadata !2568, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2581
  %38 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %36, 0, !dbg !2613
  %39 = insertvalue { i64, %struct.jv_refcnt* } %38, %struct.jv_refcnt* %37, 1, !dbg !2613
  ret { i64, %struct.jv_refcnt* } %39, !dbg !2613
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_tostring(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2614 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2617, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2618
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2617, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2618
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2616, metadata !DIExpression()), !dbg !2618
  %4 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2619
  %5 = icmp eq i32 %4, 5, !dbg !2621
  br i1 %5, label %10, label %6, !dbg !2622

6:                                                ; preds = %3
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_dump_string(i64 %1, %struct.jv_refcnt* %2, i32 0) #15, !dbg !2623
  %8 = extractvalue { i64, %struct.jv_refcnt* } %7, 0, !dbg !2623
  %9 = extractvalue { i64, %struct.jv_refcnt* } %7, 1, !dbg !2623
  br label %10, !dbg !2625

10:                                               ; preds = %3, %6
  %11 = phi i64 [ %8, %6 ], [ %1, %3 ], !dbg !2626
  %12 = phi %struct.jv_refcnt* [ %9, %6 ], [ %2, %3 ], !dbg !2626
  %13 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %11, 0, !dbg !2627
  %14 = insertvalue { i64, %struct.jv_refcnt* } %13, %struct.jv_refcnt* %12, 1, !dbg !2627
  ret { i64, %struct.jv_refcnt* } %14, !dbg !2627
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_keys(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2628 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !2631, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2632
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2631, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2632
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2630, metadata !DIExpression()), !dbg !2632
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2633
  %6 = icmp eq i32 %5, 7, !dbg !2635
  br i1 %6, label %10, label %7, !dbg !2636

7:                                                ; preds = %3
  %8 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2637
  %9 = icmp eq i32 %8, 6, !dbg !2638
  br i1 %9, label %10, label %12, !dbg !2639

10:                                               ; preds = %7, %3
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_keys(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2640
  br label %24, !dbg !2642

12:                                               ; preds = %7
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2643
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2643
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.154, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2643
  %13 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2646
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %13) #15, !dbg !2646
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2647
  %14 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2648
  %15 = tail call i8* @jv_kind_name(i32 %14) #15, !dbg !2649
  %16 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2650
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !2650
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !2650
  %19 = call i8* @jv_dump_string_trunc(i64 %17, %struct.jv_refcnt* %18, i8* nonnull %13, i64 15) #15, !dbg !2651
  %20 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %15, i8* %19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.154, i64 0, i64 0)) #15, !dbg !2652
  %21 = extractvalue { i64, %struct.jv_refcnt* } %20, 0, !dbg !2652
  %22 = extractvalue { i64, %struct.jv_refcnt* } %20, 1, !dbg !2652
  %23 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %21, %struct.jv_refcnt* %22) #15, !dbg !2653
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2643
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2643
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2654
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %13) #15, !dbg !2655
  br label %24, !dbg !2656

24:                                               ; preds = %12, %10
  %25 = phi { i64, %struct.jv_refcnt* } [ %11, %10 ], [ %23, %12 ]
  ret { i64, %struct.jv_refcnt* } %25, !dbg !2657
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_keys_unsorted(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2658 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !2661, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2662
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2661, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2662
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2660, metadata !DIExpression()), !dbg !2662
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2663
  %6 = icmp eq i32 %5, 7, !dbg !2665
  br i1 %6, label %10, label %7, !dbg !2666

7:                                                ; preds = %3
  %8 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2667
  %9 = icmp eq i32 %8, 6, !dbg !2668
  br i1 %9, label %10, label %12, !dbg !2669

10:                                               ; preds = %7, %3
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_keys_unsorted(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2670
  br label %24, !dbg !2672

12:                                               ; preds = %7
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2673
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2673
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.154, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !2673
  %13 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !2676
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %13) #15, !dbg !2676
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !2677
  %14 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2678
  %15 = tail call i8* @jv_kind_name(i32 %14) #15, !dbg !2679
  %16 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2680
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !2680
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !2680
  %19 = call i8* @jv_dump_string_trunc(i64 %17, %struct.jv_refcnt* %18, i8* nonnull %13, i64 15) #15, !dbg !2681
  %20 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %15, i8* %19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.154, i64 0, i64 0)) #15, !dbg !2682
  %21 = extractvalue { i64, %struct.jv_refcnt* } %20, 0, !dbg !2682
  %22 = extractvalue { i64, %struct.jv_refcnt* } %20, 1, !dbg !2682
  %23 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %21, %struct.jv_refcnt* %22) #15, !dbg !2683
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2673
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2673
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2684
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %13) #15, !dbg !2685
  br label %24, !dbg !2686

24:                                               ; preds = %12, %10
  %25 = phi { i64, %struct.jv_refcnt* } [ %11, %10 ], [ %23, %12 ]
  ret { i64, %struct.jv_refcnt* } %25, !dbg !2687
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_startswith(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2688 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2693, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2698
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2693, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2698
  call void @llvm.dbg.value(metadata i64 %3, metadata !2694, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2698
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2694, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2698
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2692, metadata !DIExpression()), !dbg !2698
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2699
  %7 = icmp eq i32 %6, 5, !dbg !2701
  br i1 %7, label %8, label %11, !dbg !2702

8:                                                ; preds = %5
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2703
  %10 = icmp eq i32 %9, 5, !dbg !2704
  br i1 %10, label %16, label %11, !dbg !2705

11:                                               ; preds = %8, %5
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.155, i64 0, i64 0)) #15, !dbg !2706
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2706
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2706
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2714
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2714
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2714
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2714
  call void @llvm.dbg.value(metadata i64 %13, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2714
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2714
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2716
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2717
  %15 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !2718
  br label %38, !dbg !2719

16:                                               ; preds = %8
  %17 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2720
  %18 = extractvalue { i64, %struct.jv_refcnt* } %17, 0, !dbg !2720
  %19 = extractvalue { i64, %struct.jv_refcnt* } %17, 1, !dbg !2720
  %20 = tail call i32 @jv_string_length_bytes(i64 %18, %struct.jv_refcnt* %19) #15, !dbg !2721
  call void @llvm.dbg.value(metadata i32 %20, metadata !2695, metadata !DIExpression()), !dbg !2698
  %21 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2722
  %22 = extractvalue { i64, %struct.jv_refcnt* } %21, 0, !dbg !2722
  %23 = extractvalue { i64, %struct.jv_refcnt* } %21, 1, !dbg !2722
  %24 = tail call i32 @jv_string_length_bytes(i64 %22, %struct.jv_refcnt* %23) #15, !dbg !2723
  call void @llvm.dbg.value(metadata i32 %24, metadata !2696, metadata !DIExpression()), !dbg !2698
  %25 = icmp sgt i32 %24, %20, !dbg !2724
  br i1 %25, label %34, label %26, !dbg !2726

26:                                               ; preds = %16
  %27 = tail call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2727
  %28 = tail call i8* @jv_string_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2728
  %29 = sext i32 %24 to i64, !dbg !2729
  %30 = tail call i32 @bcmp(i8* %27, i8* %28, i64 %29), !dbg !2730
  %31 = icmp eq i32 %30, 0, !dbg !2731
  br i1 %31, label %32, label %34, !dbg !2732

32:                                               ; preds = %26
  %33 = tail call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !2733
  call void @llvm.dbg.value(metadata i64 undef, metadata !2697, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2698
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2697, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2698
  br label %36, !dbg !2734

34:                                               ; preds = %26, %16
  %35 = tail call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !2735
  call void @llvm.dbg.value(metadata i64 undef, metadata !2697, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2698
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2697, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2698
  br label %36

36:                                               ; preds = %34, %32
  %37 = phi { i64, %struct.jv_refcnt* } [ %33, %32 ], [ %35, %34 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2697, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2698
  call void @llvm.dbg.value(metadata i64 undef, metadata !2697, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2698
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2736
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2737
  br label %38

38:                                               ; preds = %36, %11
  %39 = phi { i64, %struct.jv_refcnt* } [ %15, %11 ], [ %37, %36 ]
  ret { i64, %struct.jv_refcnt* } %39, !dbg !2738
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_endswith(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2739 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2742, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2749
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2742, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2749
  call void @llvm.dbg.value(metadata i64 %3, metadata !2743, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2749
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2743, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2749
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2741, metadata !DIExpression()), !dbg !2749
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2750
  %7 = icmp eq i32 %6, 5, !dbg !2752
  br i1 %7, label %8, label %11, !dbg !2753

8:                                                ; preds = %5
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2754
  %10 = icmp eq i32 %9, 5, !dbg !2755
  br i1 %10, label %16, label %11, !dbg !2756

11:                                               ; preds = %8, %5
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.156, i64 0, i64 0)) #15, !dbg !2757
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2757
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2757
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2758
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2758
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2758
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2758
  call void @llvm.dbg.value(metadata i64 %13, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2758
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2758
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2760
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2761
  %15 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !2762
  br label %41, !dbg !2763

16:                                               ; preds = %8
  %17 = tail call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2764
  call void @llvm.dbg.value(metadata i8* %17, metadata !2744, metadata !DIExpression()), !dbg !2749
  %18 = tail call i8* @jv_string_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2765
  call void @llvm.dbg.value(metadata i8* %18, metadata !2745, metadata !DIExpression()), !dbg !2749
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2766
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !2766
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !2766
  %22 = tail call i32 @jv_string_length_bytes(i64 %20, %struct.jv_refcnt* %21) #15, !dbg !2767
  call void @llvm.dbg.value(metadata i32 %22, metadata !2746, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_stack_value)), !dbg !2749
  %23 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2768
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !2768
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !2768
  %26 = tail call i32 @jv_string_length_bytes(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !2769
  %27 = sext i32 %26 to i64, !dbg !2769
  call void @llvm.dbg.value(metadata i64 %27, metadata !2747, metadata !DIExpression()), !dbg !2749
  %28 = icmp ult i32 %22, %26, !dbg !2770
  br i1 %28, label %35, label %29, !dbg !2772

29:                                               ; preds = %16
  %30 = sext i32 %22 to i64, !dbg !2767
  call void @llvm.dbg.value(metadata i64 %30, metadata !2746, metadata !DIExpression()), !dbg !2749
  %31 = sub nsw i64 %30, %27, !dbg !2773
  %32 = getelementptr inbounds i8, i8* %17, i64 %31, !dbg !2774
  %33 = tail call i32 @bcmp(i8* %32, i8* %18, i64 %27), !dbg !2775
  %34 = icmp eq i32 %33, 0, !dbg !2776
  br i1 %34, label %37, label %35, !dbg !2777

35:                                               ; preds = %29, %16
  %36 = tail call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !2778
  call void @llvm.dbg.value(metadata i64 undef, metadata !2748, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2749
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2748, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2749
  br label %39, !dbg !2779

37:                                               ; preds = %29
  %38 = tail call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !2780
  call void @llvm.dbg.value(metadata i64 undef, metadata !2748, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2749
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2748, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2749
  br label %39

39:                                               ; preds = %37, %35
  %40 = phi { i64, %struct.jv_refcnt* } [ %36, %35 ], [ %38, %37 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !2748, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2749
  call void @llvm.dbg.value(metadata i64 undef, metadata !2748, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2749
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2781
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2782
  br label %41

41:                                               ; preds = %39, %11
  %42 = phi { i64, %struct.jv_refcnt* } [ %15, %11 ], [ %40, %39 ]
  ret { i64, %struct.jv_refcnt* } %42, !dbg !2783
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_ltrimstr(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2784 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2787, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2791
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2787, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2791
  call void @llvm.dbg.value(metadata i64 %3, metadata !2788, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2791
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2788, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2791
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2786, metadata !DIExpression()), !dbg !2791
  %6 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2792
  %7 = extractvalue { i64, %struct.jv_refcnt* } %6, 0, !dbg !2792
  %8 = extractvalue { i64, %struct.jv_refcnt* } %6, 1, !dbg !2792
  %9 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2794
  %10 = extractvalue { i64, %struct.jv_refcnt* } %9, 0, !dbg !2794
  %11 = extractvalue { i64, %struct.jv_refcnt* } %9, 1, !dbg !2794
  %12 = tail call { i64, %struct.jv_refcnt* } @f_startswith(%struct.jq_state* %0, i64 %7, %struct.jv_refcnt* %8, i64 %10, %struct.jv_refcnt* %11), !dbg !2795
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2795
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2795
  %15 = tail call i32 @jv_get_kind(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !2796
  %16 = icmp eq i32 %15, 3, !dbg !2797
  br i1 %16, label %18, label %17, !dbg !2798

17:                                               ; preds = %5
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2799
  br label %31, !dbg !2801

18:                                               ; preds = %5
  %19 = tail call i32 @jv_string_length_bytes(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2802
  call void @llvm.dbg.value(metadata i32 %19, metadata !2789, metadata !DIExpression()), !dbg !2791
  %20 = tail call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2803
  %21 = sext i32 %19 to i64, !dbg !2804
  %22 = getelementptr inbounds i8, i8* %20, i64 %21, !dbg !2804
  %23 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2805
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !2805
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !2805
  %26 = tail call i32 @jv_string_length_bytes(i64 %24, %struct.jv_refcnt* %25) #15, !dbg !2806
  %27 = sub nsw i32 %26, %19, !dbg !2807
  %28 = tail call { i64, %struct.jv_refcnt* } @jv_string_sized(i8* %22, i32 %27) #15, !dbg !2808
  %29 = extractvalue { i64, %struct.jv_refcnt* } %28, 0, !dbg !2808
  call void @llvm.dbg.value(metadata i64 %29, metadata !2790, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2791
  %30 = extractvalue { i64, %struct.jv_refcnt* } %28, 1, !dbg !2808
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %30, metadata !2790, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2791
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2809
  br label %31

31:                                               ; preds = %18, %17
  %32 = phi i64 [ %1, %17 ], [ %29, %18 ], !dbg !2791
  %33 = phi %struct.jv_refcnt* [ %2, %17 ], [ %30, %18 ], !dbg !2791
  %34 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %32, 0, !dbg !2810
  %35 = insertvalue { i64, %struct.jv_refcnt* } %34, %struct.jv_refcnt* %33, 1, !dbg !2810
  ret { i64, %struct.jv_refcnt* } %35, !dbg !2810
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_rtrimstr(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2811 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2814, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2819
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2814, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2819
  call void @llvm.dbg.value(metadata i64 %3, metadata !2815, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2819
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2815, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2819
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2813, metadata !DIExpression()), !dbg !2819
  %6 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2820
  %7 = extractvalue { i64, %struct.jv_refcnt* } %6, 0, !dbg !2820
  %8 = extractvalue { i64, %struct.jv_refcnt* } %6, 1, !dbg !2820
  %9 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2821
  %10 = extractvalue { i64, %struct.jv_refcnt* } %9, 0, !dbg !2821
  %11 = extractvalue { i64, %struct.jv_refcnt* } %9, 1, !dbg !2821
  %12 = tail call { i64, %struct.jv_refcnt* } @f_endswith(%struct.jq_state* %0, i64 %7, %struct.jv_refcnt* %8, i64 %10, %struct.jv_refcnt* %11), !dbg !2822
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2822
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2822
  %15 = tail call i32 @jv_get_kind(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !2823
  %16 = icmp eq i32 %15, 3, !dbg !2824
  br i1 %16, label %17, label %28, !dbg !2825

17:                                               ; preds = %5
  %18 = tail call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2826
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2827
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !2827
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !2827
  %22 = tail call i32 @jv_string_length_bytes(i64 %20, %struct.jv_refcnt* %21) #15, !dbg !2828
  %23 = tail call i32 @jv_string_length_bytes(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2829
  %24 = sub nsw i32 %22, %23, !dbg !2830
  %25 = tail call { i64, %struct.jv_refcnt* } @jv_string_sized(i8* %18, i32 %24) #15, !dbg !2831
  %26 = extractvalue { i64, %struct.jv_refcnt* } %25, 0, !dbg !2831
  call void @llvm.dbg.value(metadata i64 %26, metadata !2816, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2832
  %27 = extractvalue { i64, %struct.jv_refcnt* } %25, 1, !dbg !2831
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %27, metadata !2816, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2832
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2833
  br label %29, !dbg !2834

28:                                               ; preds = %5
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2835
  call void @llvm.dbg.value(metadata i64 %1, metadata !2816, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2832
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2816, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2832
  br label %29, !dbg !2836

29:                                               ; preds = %28, %17
  %30 = phi i64 [ %26, %17 ], [ %1, %28 ], !dbg !2819
  %31 = phi %struct.jv_refcnt* [ %27, %17 ], [ %2, %28 ], !dbg !2819
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %31, metadata !2816, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2832
  call void @llvm.dbg.value(metadata i64 %30, metadata !2816, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2832
  %32 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %30, 0, !dbg !2837
  %33 = insertvalue { i64, %struct.jv_refcnt* } %32, %struct.jv_refcnt* %31, 1, !dbg !2837
  ret { i64, %struct.jv_refcnt* } %33, !dbg !2837
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_string_split(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2838 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2841, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2843
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2841, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2843
  call void @llvm.dbg.value(metadata i64 %3, metadata !2842, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2843
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2842, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2843
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2840, metadata !DIExpression()), !dbg !2843
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2844
  %7 = icmp eq i32 %6, 5, !dbg !2846
  br i1 %7, label %8, label %11, !dbg !2847

8:                                                ; preds = %5
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2848
  %10 = icmp eq i32 %9, 5, !dbg !2849
  br i1 %10, label %16, label %11, !dbg !2850

11:                                               ; preds = %8, %5
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.157, i64 0, i64 0)) #15, !dbg !2851
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !2851
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !2851
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2853
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2853
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2853
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2853
  call void @llvm.dbg.value(metadata i64 %13, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2853
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2853
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2855
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2856
  %15 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !2857
  br label %18, !dbg !2858

16:                                               ; preds = %8
  %17 = tail call { i64, %struct.jv_refcnt* } @jv_string_split(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2859
  br label %18, !dbg !2860

18:                                               ; preds = %16, %11
  %19 = phi { i64, %struct.jv_refcnt* } [ %15, %11 ], [ %17, %16 ]
  ret { i64, %struct.jv_refcnt* } %19, !dbg !2861
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_string_explode(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2862 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2865, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2866
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2865, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2866
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2864, metadata !DIExpression()), !dbg !2866
  %4 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2867
  %5 = icmp eq i32 %4, 5, !dbg !2869
  br i1 %5, label %11, label %6, !dbg !2870

6:                                                ; preds = %3
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.158, i64 0, i64 0)) #15, !dbg !2871
  %8 = extractvalue { i64, %struct.jv_refcnt* } %7, 0, !dbg !2871
  %9 = extractvalue { i64, %struct.jv_refcnt* } %7, 1, !dbg !2871
  call void @llvm.dbg.value(metadata i64 %1, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2879
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2879
  call void @llvm.dbg.value(metadata i64 %8, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2879
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %9, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2879
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2881
  %10 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %8, %struct.jv_refcnt* %9) #15, !dbg !2882
  br label %13, !dbg !2883

11:                                               ; preds = %3
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_string_explode(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2884
  br label %13, !dbg !2885

13:                                               ; preds = %11, %6
  %14 = phi { i64, %struct.jv_refcnt* } [ %10, %6 ], [ %12, %11 ]
  ret { i64, %struct.jv_refcnt* } %14, !dbg !2886
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_string_implode(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !2887 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2890, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2891
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2890, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2891
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2889, metadata !DIExpression()), !dbg !2891
  %4 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2892
  %5 = icmp eq i32 %4, 6, !dbg !2894
  br i1 %5, label %11, label %6, !dbg !2895

6:                                                ; preds = %3
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.159, i64 0, i64 0)) #15, !dbg !2896
  %8 = extractvalue { i64, %struct.jv_refcnt* } %7, 0, !dbg !2896
  %9 = extractvalue { i64, %struct.jv_refcnt* } %7, 1, !dbg !2896
  call void @llvm.dbg.value(metadata i64 %1, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2898
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2898
  call void @llvm.dbg.value(metadata i64 %8, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2898
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %9, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2898
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2900
  %10 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %8, %struct.jv_refcnt* %9) #15, !dbg !2901
  br label %13, !dbg !2902

11:                                               ; preds = %3
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_string_implode(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2903
  br label %13, !dbg !2904

13:                                               ; preds = %11, %6
  %14 = phi { i64, %struct.jv_refcnt* } [ %10, %6 ], [ %12, %11 ]
  ret { i64, %struct.jv_refcnt* } %14, !dbg !2905
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_string_indexes(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2906 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2909, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2911
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2909, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2911
  call void @llvm.dbg.value(metadata i64 %3, metadata !2910, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2911
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2910, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2911
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2908, metadata !DIExpression()), !dbg !2911
  %6 = tail call { i64, %struct.jv_refcnt* } @jv_string_indexes(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2912
  ret { i64, %struct.jv_refcnt* } %6, !dbg !2913
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_setpath(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2914 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2917, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2920
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2917, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2920
  call void @llvm.dbg.value(metadata i64 %3, metadata !2918, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2920
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2918, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2920
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2916, metadata !DIExpression()), !dbg !2920
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2919, metadata !DIExpression()), !dbg !2921
  %7 = bitcast %struct.jv* %5 to i64*, !dbg !2922
  %8 = load i64, i64* %7, align 8, !dbg !2922
  %9 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2922
  %10 = load %struct.jv_refcnt*, %struct.jv_refcnt** %9, align 8, !dbg !2922
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_setpath(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, i64 %8, %struct.jv_refcnt* %10) #15, !dbg !2922
  ret { i64, %struct.jv_refcnt* } %11, !dbg !2923
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_getpath(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2924 {
  %6 = alloca %struct.jv, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !2927, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2929
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2927, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2929
  call void @llvm.dbg.value(metadata i64 %3, metadata !2928, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2929
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2928, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2929
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2926, metadata !DIExpression()), !dbg !2929
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2930
  %8 = extractvalue { i64, %struct.jv_refcnt* } %7, 0, !dbg !2930
  %9 = extractvalue { i64, %struct.jv_refcnt* } %7, 1, !dbg !2930
  %10 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2931
  %11 = extractvalue { i64, %struct.jv_refcnt* } %10, 0, !dbg !2931
  %12 = extractvalue { i64, %struct.jv_refcnt* } %10, 1, !dbg !2931
  %13 = tail call { i64, %struct.jv_refcnt* } @jv_getpath(i64 %8, %struct.jv_refcnt* %9, i64 %11, %struct.jv_refcnt* %12) #15, !dbg !2932
  %14 = bitcast %struct.jv* %6 to i64*, !dbg !2932
  %15 = extractvalue { i64, %struct.jv_refcnt* } %13, 0, !dbg !2932
  store i64 %15, i64* %14, align 8, !dbg !2932
  %16 = getelementptr inbounds %struct.jv, %struct.jv* %6, i64 0, i32 4, i32 0, !dbg !2932
  %17 = extractvalue { i64, %struct.jv_refcnt* } %13, 1, !dbg !2932
  store %struct.jv_refcnt* %17, %struct.jv_refcnt** %16, align 8, !dbg !2932
  %18 = tail call { i64, %struct.jv_refcnt* } @_jq_path_append(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nonnull byval(%struct.jv) align 8 %6) #15, !dbg !2933
  ret { i64, %struct.jv_refcnt* } %18, !dbg !2934
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_delpaths(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2935 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2938, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2940
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2938, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2940
  call void @llvm.dbg.value(metadata i64 %3, metadata !2939, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2940
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2939, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2940
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2937, metadata !DIExpression()), !dbg !2940
  %6 = tail call { i64, %struct.jv_refcnt* } @jv_delpaths(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2941
  ret { i64, %struct.jv_refcnt* } %6, !dbg !2942
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_has(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !2943 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2946, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2948
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2946, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2948
  call void @llvm.dbg.value(metadata i64 %3, metadata !2947, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2948
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2947, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2948
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2945, metadata !DIExpression()), !dbg !2948
  %6 = tail call { i64, %struct.jv_refcnt* } @jv_has(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #15, !dbg !2949
  ret { i64, %struct.jv_refcnt* } %6, !dbg !2950
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_equal(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2951 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2954, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2957
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2954, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2957
  call void @llvm.dbg.value(metadata i64 %3, metadata !2955, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2957
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2955, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2957
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2953, metadata !DIExpression()), !dbg !2957
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2956, metadata !DIExpression()), !dbg !2958
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2959
  %7 = bitcast %struct.jv* %5 to i64*, !dbg !2960
  %8 = load i64, i64* %7, align 8, !dbg !2960
  %9 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2960
  %10 = load %struct.jv_refcnt*, %struct.jv_refcnt** %9, align 8, !dbg !2960
  %11 = tail call i32 @jv_equal(i64 %3, %struct.jv_refcnt* %4, i64 %8, %struct.jv_refcnt* %10) #15, !dbg !2960
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_bool(i32 %11) #15, !dbg !2961
  ret { i64, %struct.jv_refcnt* } %12, !dbg !2962
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_notequal(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2963 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2966, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2969
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2966, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2969
  call void @llvm.dbg.value(metadata i64 %3, metadata !2967, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2969
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2967, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2969
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2965, metadata !DIExpression()), !dbg !2969
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2968, metadata !DIExpression()), !dbg !2970
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2971
  %7 = bitcast %struct.jv* %5 to i64*, !dbg !2972
  %8 = load i64, i64* %7, align 8, !dbg !2972
  %9 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2972
  %10 = load %struct.jv_refcnt*, %struct.jv_refcnt** %9, align 8, !dbg !2972
  %11 = tail call i32 @jv_equal(i64 %3, %struct.jv_refcnt* %4, i64 %8, %struct.jv_refcnt* %10) #15, !dbg !2972
  %12 = icmp eq i32 %11, 0, !dbg !2973
  %13 = zext i1 %12 to i32, !dbg !2973
  %14 = tail call { i64, %struct.jv_refcnt* } @jv_bool(i32 %13) #15, !dbg !2974
  ret { i64, %struct.jv_refcnt* } %14, !dbg !2975
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_less(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !2976 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !2979, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2982
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2979, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2982
  call void @llvm.dbg.value(metadata i64 %3, metadata !2980, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !2982
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2980, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !2982
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2978, metadata !DIExpression()), !dbg !2982
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !2981, metadata !DIExpression()), !dbg !2983
  %7 = bitcast %struct.jv* %5 to i64*, !dbg !2984
  %8 = load i64, i64* %7, align 8, !dbg !2984
  %9 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !2984
  %10 = load %struct.jv_refcnt*, %struct.jv_refcnt** %9, align 8, !dbg !2984
  call void @llvm.dbg.value(metadata i64 %1, metadata !2985, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2994
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2985, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2994
  call void @llvm.dbg.value(metadata i64 %3, metadata !2990, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2994
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2990, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2994
  call void @llvm.dbg.value(metadata i64 %8, metadata !2991, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !2994
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %10, metadata !2991, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !2994
  call void @llvm.dbg.value(metadata i32 0, metadata !2992, metadata !DIExpression()) #15, !dbg !2994
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !2996
  %11 = tail call i32 @jv_cmp(i64 %3, %struct.jv_refcnt* %4, i64 %8, %struct.jv_refcnt* %10) #15, !dbg !2997
  call void @llvm.dbg.value(metadata i32 %11, metadata !2993, metadata !DIExpression()) #15, !dbg !2994
  %12 = lshr i32 %11, 31, !dbg !2998
  %13 = tail call { i64, %struct.jv_refcnt* } @jv_bool(i32 %12) #15, !dbg !2999
  ret { i64, %struct.jv_refcnt* } %13, !dbg !3000
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_greater(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !3001 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3004, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3007
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3004, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3007
  call void @llvm.dbg.value(metadata i64 %3, metadata !3005, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3007
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3005, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3007
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3003, metadata !DIExpression()), !dbg !3007
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !3006, metadata !DIExpression()), !dbg !3008
  %7 = bitcast %struct.jv* %5 to i64*, !dbg !3009
  %8 = load i64, i64* %7, align 8, !dbg !3009
  %9 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !3009
  %10 = load %struct.jv_refcnt*, %struct.jv_refcnt** %9, align 8, !dbg !3009
  call void @llvm.dbg.value(metadata i64 %1, metadata !2985, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3010
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2985, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3010
  call void @llvm.dbg.value(metadata i64 %3, metadata !2990, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3010
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2990, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3010
  call void @llvm.dbg.value(metadata i64 %8, metadata !2991, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3010
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %10, metadata !2991, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3010
  call void @llvm.dbg.value(metadata i32 1, metadata !2992, metadata !DIExpression()) #15, !dbg !3010
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3012
  %11 = tail call i32 @jv_cmp(i64 %3, %struct.jv_refcnt* %4, i64 %8, %struct.jv_refcnt* %10) #15, !dbg !3013
  call void @llvm.dbg.value(metadata i32 %11, metadata !2993, metadata !DIExpression()) #15, !dbg !3010
  %12 = icmp sgt i32 %11, 0, !dbg !3014
  %13 = zext i1 %12 to i32, !dbg !3014
  %14 = tail call { i64, %struct.jv_refcnt* } @jv_bool(i32 %13) #15, !dbg !3015
  ret { i64, %struct.jv_refcnt* } %14, !dbg !3016
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_lesseq(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !3017 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3020, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3023
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3020, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3023
  call void @llvm.dbg.value(metadata i64 %3, metadata !3021, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3023
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3021, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3023
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3019, metadata !DIExpression()), !dbg !3023
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !3022, metadata !DIExpression()), !dbg !3024
  %7 = bitcast %struct.jv* %5 to i64*, !dbg !3025
  %8 = load i64, i64* %7, align 8, !dbg !3025
  %9 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !3025
  %10 = load %struct.jv_refcnt*, %struct.jv_refcnt** %9, align 8, !dbg !3025
  call void @llvm.dbg.value(metadata i64 %1, metadata !2985, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3026
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2985, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3026
  call void @llvm.dbg.value(metadata i64 %3, metadata !2990, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3026
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2990, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3026
  call void @llvm.dbg.value(metadata i64 %8, metadata !2991, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3026
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %10, metadata !2991, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3026
  call void @llvm.dbg.value(metadata i32 2, metadata !2992, metadata !DIExpression()) #15, !dbg !3026
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3028
  %11 = tail call i32 @jv_cmp(i64 %3, %struct.jv_refcnt* %4, i64 %8, %struct.jv_refcnt* %10) #15, !dbg !3029
  call void @llvm.dbg.value(metadata i32 %11, metadata !2993, metadata !DIExpression()) #15, !dbg !3026
  %12 = icmp slt i32 %11, 1
  %13 = zext i1 %12 to i32, !dbg !3030
  %14 = tail call { i64, %struct.jv_refcnt* } @jv_bool(i32 %13) #15, !dbg !3031
  ret { i64, %struct.jv_refcnt* } %14, !dbg !3032
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_greatereq(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5) #0 !dbg !3033 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3036, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3039
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3036, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3039
  call void @llvm.dbg.value(metadata i64 %3, metadata !3037, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3039
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3037, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3039
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3035, metadata !DIExpression()), !dbg !3039
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !3038, metadata !DIExpression()), !dbg !3040
  %7 = bitcast %struct.jv* %5 to i64*, !dbg !3041
  %8 = load i64, i64* %7, align 8, !dbg !3041
  %9 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !3041
  %10 = load %struct.jv_refcnt*, %struct.jv_refcnt** %9, align 8, !dbg !3041
  call void @llvm.dbg.value(metadata i64 %1, metadata !2985, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3042
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2985, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3042
  call void @llvm.dbg.value(metadata i64 %3, metadata !2990, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3042
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2990, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3042
  call void @llvm.dbg.value(metadata i64 %8, metadata !2991, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3042
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %10, metadata !2991, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3042
  call void @llvm.dbg.value(metadata i32 3, metadata !2992, metadata !DIExpression()) #15, !dbg !3042
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3044
  %11 = tail call i32 @jv_cmp(i64 %3, %struct.jv_refcnt* %4, i64 %8, %struct.jv_refcnt* %10) #15, !dbg !3045
  call void @llvm.dbg.value(metadata i32 %11, metadata !2993, metadata !DIExpression()) #15, !dbg !3042
  %12 = xor i32 %11, -1, !dbg !3046
  %13 = lshr i32 %12, 31, !dbg !3046
  %14 = tail call { i64, %struct.jv_refcnt* } @jv_bool(i32 %13) #15, !dbg !3047
  ret { i64, %struct.jv_refcnt* } %14, !dbg !3048
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_contains(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !3049 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3052, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3054
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3052, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3054
  call void @llvm.dbg.value(metadata i64 %3, metadata !3053, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3054
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3053, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3054
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3051, metadata !DIExpression()), !dbg !3054
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3055
  %7 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3057
  %8 = icmp eq i32 %6, %7, !dbg !3058
  br i1 %8, label %9, label %12, !dbg !3059

9:                                                ; preds = %5
  %10 = tail call i32 @jv_contains(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3060
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_bool(i32 %10) #15, !dbg !3062
  br label %14, !dbg !3063

12:                                               ; preds = %5
  %13 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.160, i64 0, i64 0)), !dbg !3064
  br label %14, !dbg !3066

14:                                               ; preds = %12, %9
  %15 = phi { i64, %struct.jv_refcnt* } [ %11, %9 ], [ %13, %12 ]
  ret { i64, %struct.jv_refcnt* } %15, !dbg !3067
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_length(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3068 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !3071, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3078
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3071, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3078
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3070, metadata !DIExpression()), !dbg !3078
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3079
  %6 = icmp eq i32 %5, 6, !dbg !3080
  br i1 %6, label %7, label %11, !dbg !3081

7:                                                ; preds = %3
  %8 = tail call i32 @jv_array_length(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3082
  %9 = sitofp i32 %8 to double, !dbg !3082
  %10 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %9) #15, !dbg !3084
  call void @llvm.dbg.value(metadata i64 undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3085
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3085
  br label %49, !dbg !3086

11:                                               ; preds = %3
  %12 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3087
  %13 = icmp eq i32 %12, 7, !dbg !3088
  br i1 %13, label %14, label %18, !dbg !3089

14:                                               ; preds = %11
  %15 = tail call i32 @jv_object_length(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3090
  %16 = sitofp i32 %15 to double, !dbg !3090
  %17 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %16) #15, !dbg !3092
  call void @llvm.dbg.value(metadata i64 undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3085
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3085
  br label %49, !dbg !3093

18:                                               ; preds = %11
  %19 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3094
  %20 = icmp eq i32 %19, 5, !dbg !3095
  br i1 %20, label %21, label %25, !dbg !3096

21:                                               ; preds = %18
  %22 = tail call i32 @jv_string_length_codepoints(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3097
  %23 = sitofp i32 %22 to double, !dbg !3097
  %24 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %23) #15, !dbg !3099
  call void @llvm.dbg.value(metadata i64 undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3085
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3085
  br label %49, !dbg !3100

25:                                               ; preds = %18
  %26 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3101
  %27 = icmp eq i32 %26, 4, !dbg !3102
  br i1 %27, label %28, label %32, !dbg !3103

28:                                               ; preds = %25
  %29 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3104
  %30 = tail call double @llvm.fabs.f64(double %29), !dbg !3105
  %31 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %30) #15, !dbg !3106
  call void @llvm.dbg.value(metadata i64 undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3085
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3085
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3107
  br label %49, !dbg !3108

32:                                               ; preds = %25
  %33 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3109
  %34 = icmp eq i32 %33, 1, !dbg !3111
  br i1 %34, label %35, label %37, !dbg !3112

35:                                               ; preds = %32
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3113
  %36 = tail call { i64, %struct.jv_refcnt* } @jv_number(double 0.000000e+00) #15, !dbg !3115
  call void @llvm.dbg.value(metadata i64 undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3085
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3085
  br label %49, !dbg !3116

37:                                               ; preds = %32
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3117
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3117
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.161, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !3117
  %38 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !3120
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %38) #15, !dbg !3120
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !3121
  %39 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3122
  %40 = tail call i8* @jv_kind_name(i32 %39) #15, !dbg !3123
  %41 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3124
  %42 = extractvalue { i64, %struct.jv_refcnt* } %41, 0, !dbg !3124
  %43 = extractvalue { i64, %struct.jv_refcnt* } %41, 1, !dbg !3124
  %44 = call i8* @jv_dump_string_trunc(i64 %42, %struct.jv_refcnt* %43, i8* nonnull %38, i64 15) #15, !dbg !3125
  %45 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %40, i8* %44, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.161, i64 0, i64 0)) #15, !dbg !3126
  %46 = extractvalue { i64, %struct.jv_refcnt* } %45, 0, !dbg !3126
  %47 = extractvalue { i64, %struct.jv_refcnt* } %45, 1, !dbg !3126
  %48 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %46, %struct.jv_refcnt* %47) #15, !dbg !3127
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3117
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3117
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3128
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %38) #15, !dbg !3129
  call void @llvm.dbg.value(metadata i64 undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3085
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3085
  br label %49, !dbg !3130

49:                                               ; preds = %37, %35, %28, %21, %14, %7
  %50 = phi { i64, %struct.jv_refcnt* } [ %10, %7 ], [ %17, %14 ], [ %24, %21 ], [ %31, %28 ], [ %36, %35 ], [ %48, %37 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3085
  call void @llvm.dbg.value(metadata i64 undef, metadata !3072, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3085
  ret { i64, %struct.jv_refcnt* } %50, !dbg !3131
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_utf8bytelength(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3132 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !3135, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3136
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3135, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3136
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3134, metadata !DIExpression()), !dbg !3136
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3137
  %6 = icmp eq i32 %5, 5, !dbg !3139
  br i1 %6, label %19, label %7, !dbg !3140

7:                                                ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3141
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3141
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.162, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !3141
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !3143
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !3143
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !3144
  %9 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3145
  %10 = tail call i8* @jv_kind_name(i32 %9) #15, !dbg !3146
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3147
  %12 = extractvalue { i64, %struct.jv_refcnt* } %11, 0, !dbg !3147
  %13 = extractvalue { i64, %struct.jv_refcnt* } %11, 1, !dbg !3147
  %14 = call i8* @jv_dump_string_trunc(i64 %12, %struct.jv_refcnt* %13, i8* nonnull %8, i64 15) #15, !dbg !3148
  %15 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %10, i8* %14, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.162, i64 0, i64 0)) #15, !dbg !3149
  %16 = extractvalue { i64, %struct.jv_refcnt* } %15, 0, !dbg !3149
  %17 = extractvalue { i64, %struct.jv_refcnt* } %15, 1, !dbg !3149
  %18 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %16, %struct.jv_refcnt* %17) #15, !dbg !3150
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3141
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3141
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3151
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !3152
  br label %23, !dbg !3153

19:                                               ; preds = %3
  %20 = tail call i32 @jv_string_length_bytes(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3154
  %21 = sitofp i32 %20 to double, !dbg !3154
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !3155
  br label %23, !dbg !3156

23:                                               ; preds = %19, %7
  %24 = phi { i64, %struct.jv_refcnt* } [ %18, %7 ], [ %22, %19 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !3157
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_type(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3158 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3161, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3163
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3161, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3163
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3160, metadata !DIExpression()), !dbg !3163
  %4 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3164
  %5 = tail call i8* @jv_kind_name(i32 %4) #15, !dbg !3165
  %6 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* %5) #15, !dbg !3166
  call void @llvm.dbg.value(metadata i64 undef, metadata !3162, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3163
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3162, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3163
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3167
  ret { i64, %struct.jv_refcnt* } %6, !dbg !3168
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_isinfinite(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3169 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3172, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3175
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3172, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3175
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3171, metadata !DIExpression()), !dbg !3175
  %4 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3176
  call void @llvm.dbg.value(metadata i32 %4, metadata !3173, metadata !DIExpression()), !dbg !3175
  %5 = icmp eq i32 %4, 4, !dbg !3177
  br i1 %5, label %8, label %6, !dbg !3179

6:                                                ; preds = %3
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3180
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !3182
  br label %16, !dbg !3183

8:                                                ; preds = %3
  %9 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3184
  call void @llvm.dbg.value(metadata double %9, metadata !3174, metadata !DIExpression()), !dbg !3175
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3185
  %10 = tail call double @llvm.fabs.f64(double %9) #18, !dbg !3186
  %11 = fcmp oeq double %10, 0x7FF0000000000000, !dbg !3186
  br i1 %11, label %12, label %14, !dbg !3186

12:                                               ; preds = %8
  %13 = tail call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !3187
  br label %16, !dbg !3186

14:                                               ; preds = %8
  %15 = tail call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !3188
  br label %16, !dbg !3186

16:                                               ; preds = %12, %14, %6
  %17 = phi { i64, %struct.jv_refcnt* } [ %7, %6 ], [ %13, %12 ], [ %15, %14 ]
  ret { i64, %struct.jv_refcnt* } %17, !dbg !3189
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_isnan(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3190 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3193, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3196
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3193, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3196
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3192, metadata !DIExpression()), !dbg !3196
  %4 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3197
  call void @llvm.dbg.value(metadata i32 %4, metadata !3194, metadata !DIExpression()), !dbg !3196
  %5 = icmp eq i32 %4, 4, !dbg !3198
  br i1 %5, label %8, label %6, !dbg !3200

6:                                                ; preds = %3
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3201
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !3203
  br label %15, !dbg !3204

8:                                                ; preds = %3
  %9 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3205
  call void @llvm.dbg.value(metadata double %9, metadata !3195, metadata !DIExpression()), !dbg !3196
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3206
  %10 = fcmp uno double %9, 0.000000e+00, !dbg !3207
  br i1 %10, label %11, label %13, !dbg !3207

11:                                               ; preds = %8
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !3208
  br label %15, !dbg !3207

13:                                               ; preds = %8
  %14 = tail call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !3209
  br label %15, !dbg !3207

15:                                               ; preds = %11, %13, %6
  %16 = phi { i64, %struct.jv_refcnt* } [ %7, %6 ], [ %12, %11 ], [ %14, %13 ]
  ret { i64, %struct.jv_refcnt* } %16, !dbg !3210
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_isnormal(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3211 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3214, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3217
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3214, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3217
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3213, metadata !DIExpression()), !dbg !3217
  %4 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3218
  call void @llvm.dbg.value(metadata i32 %4, metadata !3215, metadata !DIExpression()), !dbg !3217
  %5 = icmp eq i32 %4, 4, !dbg !3219
  br i1 %5, label %8, label %6, !dbg !3221

6:                                                ; preds = %3
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3222
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !3224
  br label %20, !dbg !3225

8:                                                ; preds = %3
  %9 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3226
  call void @llvm.dbg.value(metadata double %9, metadata !3216, metadata !DIExpression()), !dbg !3217
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3227
  %10 = fcmp ord double %9, 0.000000e+00, !dbg !3228
  %11 = tail call double @llvm.fabs.f64(double %9) #18, !dbg !3228
  %12 = fcmp ult double %11, 0x7FF0000000000000, !dbg !3228
  %13 = fcmp uge double %11, 0x10000000000000, !dbg !3228
  %14 = and i1 %10, %12, !dbg !3228
  %15 = and i1 %13, %14, !dbg !3228
  br i1 %15, label %16, label %18, !dbg !3228

16:                                               ; preds = %8
  %17 = tail call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !3229
  br label %20, !dbg !3228

18:                                               ; preds = %8
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !3230
  br label %20, !dbg !3228

20:                                               ; preds = %16, %18, %6
  %21 = phi { i64, %struct.jv_refcnt* } [ %7, %6 ], [ %17, %16 ], [ %19, %18 ]
  ret { i64, %struct.jv_refcnt* } %21, !dbg !3231
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_infinite(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3232 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3235, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3236
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3235, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3236
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3234, metadata !DIExpression()), !dbg !3236
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3237
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_number(double 0x7FF0000000000000) #15, !dbg !3238
  ret { i64, %struct.jv_refcnt* } %4, !dbg !3239
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_nan(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3240 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3243, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3244
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3243, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3244
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3242, metadata !DIExpression()), !dbg !3244
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3245
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_number(double 0x7FF8000000000000) #15, !dbg !3246
  ret { i64, %struct.jv_refcnt* } %4, !dbg !3247
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_sort(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3248 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !3251, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3252
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3251, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3252
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3250, metadata !DIExpression()), !dbg !3252
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3253
  %6 = icmp eq i32 %5, 6, !dbg !3255
  br i1 %6, label %7, label %12, !dbg !3256

7:                                                ; preds = %3
  %8 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3257
  %9 = extractvalue { i64, %struct.jv_refcnt* } %8, 0, !dbg !3257
  %10 = extractvalue { i64, %struct.jv_refcnt* } %8, 1, !dbg !3257
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_sort(i64 %1, %struct.jv_refcnt* %2, i64 %9, %struct.jv_refcnt* %10) #15, !dbg !3259
  br label %24, !dbg !3260

12:                                               ; preds = %3
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3261
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3261
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.163, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !3261
  %13 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !3264
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %13) #15, !dbg !3264
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()) #15, !dbg !3265
  %14 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3266
  %15 = tail call i8* @jv_kind_name(i32 %14) #15, !dbg !3267
  %16 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3268
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !3268
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !3268
  %19 = call i8* @jv_dump_string_trunc(i64 %17, %struct.jv_refcnt* %18, i8* nonnull %13, i64 15) #15, !dbg !3269
  %20 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %15, i8* %19, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.163, i64 0, i64 0)) #15, !dbg !3270
  %21 = extractvalue { i64, %struct.jv_refcnt* } %20, 0, !dbg !3270
  %22 = extractvalue { i64, %struct.jv_refcnt* } %20, 1, !dbg !3270
  %23 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %21, %struct.jv_refcnt* %22) #15, !dbg !3271
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3261
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3261
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3272
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %13) #15, !dbg !3273
  br label %24, !dbg !3274

24:                                               ; preds = %12, %7
  %25 = phi { i64, %struct.jv_refcnt* } [ %11, %7 ], [ %23, %12 ]
  ret { i64, %struct.jv_refcnt* } %25, !dbg !3275
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_sort_by_impl(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !3276 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3279, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3281
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3279, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3281
  call void @llvm.dbg.value(metadata i64 %3, metadata !3280, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3281
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3280, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3281
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3278, metadata !DIExpression()), !dbg !3281
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3282
  %7 = icmp eq i32 %6, 6, !dbg !3284
  br i1 %7, label %8, label %23, !dbg !3285

8:                                                ; preds = %5
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3286
  %10 = icmp eq i32 %9, 6, !dbg !3287
  br i1 %10, label %11, label %23, !dbg !3288

11:                                               ; preds = %8
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3289
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !3289
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !3289
  %15 = tail call i32 @jv_array_length(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !3290
  %16 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3291
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !3291
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !3291
  %19 = tail call i32 @jv_array_length(i64 %17, %struct.jv_refcnt* %18) #15, !dbg !3292
  %20 = icmp eq i32 %15, %19, !dbg !3293
  br i1 %20, label %21, label %23, !dbg !3294

21:                                               ; preds = %11
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_sort(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3295
  br label %25, !dbg !3297

23:                                               ; preds = %11, %8, %5
  %24 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.164, i64 0, i64 0)), !dbg !3298
  br label %25, !dbg !3300

25:                                               ; preds = %23, %21
  %26 = phi { i64, %struct.jv_refcnt* } [ %22, %21 ], [ %24, %23 ]
  ret { i64, %struct.jv_refcnt* } %26, !dbg !3301
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_group_by_impl(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !3302 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3305, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3307
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3305, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3307
  call void @llvm.dbg.value(metadata i64 %3, metadata !3306, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3307
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3306, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3307
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3304, metadata !DIExpression()), !dbg !3307
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3308
  %7 = icmp eq i32 %6, 6, !dbg !3310
  br i1 %7, label %8, label %23, !dbg !3311

8:                                                ; preds = %5
  %9 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3312
  %10 = icmp eq i32 %9, 6, !dbg !3313
  br i1 %10, label %11, label %23, !dbg !3314

11:                                               ; preds = %8
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3315
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !3315
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !3315
  %15 = tail call i32 @jv_array_length(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !3316
  %16 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3317
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !3317
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !3317
  %19 = tail call i32 @jv_array_length(i64 %17, %struct.jv_refcnt* %18) #15, !dbg !3318
  %20 = icmp eq i32 %15, %19, !dbg !3319
  br i1 %20, label %21, label %23, !dbg !3320

21:                                               ; preds = %11
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_group(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3321
  br label %25, !dbg !3323

23:                                               ; preds = %11, %8, %5
  %24 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.164, i64 0, i64 0)), !dbg !3324
  br label %25, !dbg !3326

25:                                               ; preds = %23, %21
  %26 = phi { i64, %struct.jv_refcnt* } [ %22, %21 ], [ %24, %23 ]
  ret { i64, %struct.jv_refcnt* } %26, !dbg !3327
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_min(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3328 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3331, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3332
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3331, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3332
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3330, metadata !DIExpression()), !dbg !3332
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3333
  %5 = extractvalue { i64, %struct.jv_refcnt* } %4, 0, !dbg !3333
  %6 = extractvalue { i64, %struct.jv_refcnt* } %4, 1, !dbg !3333
  %7 = tail call fastcc { i64, %struct.jv_refcnt* } @minmax_by(i64 %1, %struct.jv_refcnt* %2, i64 %5, %struct.jv_refcnt* %6, i32 1), !dbg !3334
  ret { i64, %struct.jv_refcnt* } %7, !dbg !3335
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_max(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3336 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3339, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3340
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3339, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3340
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3338, metadata !DIExpression()), !dbg !3340
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3341
  %5 = extractvalue { i64, %struct.jv_refcnt* } %4, 0, !dbg !3341
  %6 = extractvalue { i64, %struct.jv_refcnt* } %4, 1, !dbg !3341
  %7 = tail call fastcc { i64, %struct.jv_refcnt* } @minmax_by(i64 %1, %struct.jv_refcnt* %2, i64 %5, %struct.jv_refcnt* %6, i32 0), !dbg !3342
  ret { i64, %struct.jv_refcnt* } %7, !dbg !3343
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_min_by_impl(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !3344 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3347, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3349
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3347, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3349
  call void @llvm.dbg.value(metadata i64 %3, metadata !3348, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3349
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3348, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3349
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3346, metadata !DIExpression()), !dbg !3349
  %6 = tail call fastcc { i64, %struct.jv_refcnt* } @minmax_by(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, i32 1), !dbg !3350
  ret { i64, %struct.jv_refcnt* } %6, !dbg !3351
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_max_by_impl(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !3352 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3355, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3357
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3355, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3357
  call void @llvm.dbg.value(metadata i64 %3, metadata !3356, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3357
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3356, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3357
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3354, metadata !DIExpression()), !dbg !3357
  %6 = tail call fastcc { i64, %struct.jv_refcnt* } @minmax_by(i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, i32 0), !dbg !3358
  ret { i64, %struct.jv_refcnt* } %6, !dbg !3359
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_error(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3360 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3363, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3364
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3363, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3364
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3362, metadata !DIExpression()), !dbg !3364
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3365
  ret { i64, %struct.jv_refcnt* } %4, !dbg !3366
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_format(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !3367 {
  %6 = alloca [15 x i8], align 1
  %7 = alloca [15 x i8], align 1
  %8 = alloca [15 x i8], align 1
  %9 = alloca [15 x i8], align 1
  %10 = alloca [128 x i32], align 16
  %11 = alloca [4 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata i64 %3, metadata !3371, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3371, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3369, metadata !DIExpression()), !dbg !3448
  %12 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3449
  %13 = icmp eq i32 %12, 5, !dbg !3451
  br i1 %13, label %28, label %14, !dbg !3452

14:                                               ; preds = %5
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3453
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3455
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3455
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.167, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !3455
  %15 = getelementptr inbounds [15 x i8], [15 x i8]* %9, i64 0, i64 0, !dbg !3457
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %15) #15, !dbg !3457
  call void @llvm.dbg.declare(metadata [15 x i8]* %9, metadata !390, metadata !DIExpression()) #15, !dbg !3458
  %16 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3459
  %17 = tail call i8* @jv_kind_name(i32 %16) #15, !dbg !3460
  %18 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3461
  %19 = extractvalue { i64, %struct.jv_refcnt* } %18, 0, !dbg !3461
  %20 = extractvalue { i64, %struct.jv_refcnt* } %18, 1, !dbg !3461
  %21 = call i8* @jv_dump_string_trunc(i64 %19, %struct.jv_refcnt* %20, i8* nonnull %15, i64 15) #15, !dbg !3462
  %22 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %17, i8* %21, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.167, i64 0, i64 0)) #15, !dbg !3463
  %23 = extractvalue { i64, %struct.jv_refcnt* } %22, 0, !dbg !3463
  %24 = extractvalue { i64, %struct.jv_refcnt* } %22, 1, !dbg !3463
  %25 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %23, %struct.jv_refcnt* %24) #15, !dbg !3464
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3455
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3455
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3465
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %15) #15, !dbg !3466
  %26 = extractvalue { i64, %struct.jv_refcnt* } %25, 0, !dbg !3467
  call void @llvm.dbg.value(metadata i64 %26, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %26, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %27 = extractvalue { i64, %struct.jv_refcnt* } %25, 1, !dbg !3467
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %27, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %27, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474, !dbg !3470

28:                                               ; preds = %5
  %29 = tail call i8* @jv_string_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3471
  call void @llvm.dbg.value(metadata i8* %29, metadata !3372, metadata !DIExpression()), !dbg !3448
  %30 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.168, i64 0, i64 0)) #19, !dbg !3472
  %31 = icmp eq i32 %30, 0, !dbg !3472
  br i1 %31, label %32, label %36, !dbg !3473

32:                                               ; preds = %28
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3474
  %33 = tail call { i64, %struct.jv_refcnt* } @jv_dump_string(i64 %1, %struct.jv_refcnt* %2, i32 0) #15, !dbg !3476
  %34 = extractvalue { i64, %struct.jv_refcnt* } %33, 0, !dbg !3476
  call void @llvm.dbg.value(metadata i64 %34, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %34, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %35 = extractvalue { i64, %struct.jv_refcnt* } %33, 1, !dbg !3476
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %35, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %35, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474, !dbg !3477

36:                                               ; preds = %28
  %37 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i64 0, i64 0)) #19, !dbg !3478
  %38 = icmp eq i32 %37, 0, !dbg !3478
  br i1 %38, label %39, label %46, !dbg !3479

39:                                               ; preds = %36
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3480
  call void @llvm.dbg.value(metadata i64 %1, metadata !2617, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3482
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2617, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3482
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2616, metadata !DIExpression()) #15, !dbg !3482
  %40 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3484
  %41 = icmp eq i32 %40, 5, !dbg !3485
  br i1 %41, label %474, label %42, !dbg !3486

42:                                               ; preds = %39
  %43 = tail call { i64, %struct.jv_refcnt* } @jv_dump_string(i64 %1, %struct.jv_refcnt* %2, i32 0) #15, !dbg !3487
  %44 = extractvalue { i64, %struct.jv_refcnt* } %43, 0, !dbg !3487
  %45 = extractvalue { i64, %struct.jv_refcnt* } %43, 1, !dbg !3487
  br label %474, !dbg !3488

46:                                               ; preds = %36
  %47 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(4) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.170, i64 0, i64 0)) #19, !dbg !3489
  %48 = icmp eq i32 %47, 0, !dbg !3489
  br i1 %48, label %52, label %49, !dbg !3490

49:                                               ; preds = %46
  %50 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(4) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.171, i64 0, i64 0)) #19, !dbg !3491
  %51 = icmp eq i32 %50, 0, !dbg !3491
  br i1 %51, label %52, label %158, !dbg !3492

52:                                               ; preds = %49, %46
  %53 = phi i8* [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str.172, i64 0, i64 0), %46 ], [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str.176, i64 0, i64 0), %49 ], !dbg !3493
  %54 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.175, i64 0, i64 0), %46 ], [ getelementptr inbounds ([17 x i8], [17 x i8]* @.str.180, i64 0, i64 0), %49 ], !dbg !3493
  %55 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.174, i64 0, i64 0), %46 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.179, i64 0, i64 0), %49 ], !dbg !3493
  %56 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.173, i64 0, i64 0), %46 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), %49 ], !dbg !3493
  call void @llvm.dbg.value(metadata i8* %56, metadata !3373, metadata !DIExpression()), !dbg !3495
  call void @llvm.dbg.value(metadata i8* %55, metadata !3378, metadata !DIExpression()), !dbg !3495
  call void @llvm.dbg.value(metadata i8* %54, metadata !3379, metadata !DIExpression()), !dbg !3495
  call void @llvm.dbg.value(metadata i8* %53, metadata !3380, metadata !DIExpression()), !dbg !3495
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3496
  %57 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3497
  %58 = icmp eq i32 %57, 6, !dbg !3499
  br i1 %58, label %73, label %59, !dbg !3500

59:                                               ; preds = %52
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3501
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3501
  call void @llvm.dbg.value(metadata i8* %53, metadata !389, metadata !DIExpression()) #15, !dbg !3501
  %60 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !3503
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %60) #15, !dbg !3503
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !3504
  %61 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3505
  %62 = tail call i8* @jv_kind_name(i32 %61) #15, !dbg !3506
  %63 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3507
  %64 = extractvalue { i64, %struct.jv_refcnt* } %63, 0, !dbg !3507
  %65 = extractvalue { i64, %struct.jv_refcnt* } %63, 1, !dbg !3507
  %66 = call i8* @jv_dump_string_trunc(i64 %64, %struct.jv_refcnt* %65, i8* nonnull %60, i64 15) #15, !dbg !3508
  %67 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %62, i8* %66, i8* %53) #15, !dbg !3509
  %68 = extractvalue { i64, %struct.jv_refcnt* } %67, 0, !dbg !3509
  %69 = extractvalue { i64, %struct.jv_refcnt* } %67, 1, !dbg !3509
  %70 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %68, %struct.jv_refcnt* %69) #15, !dbg !3510
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3501
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3501
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3511
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %60) #15, !dbg !3512
  %71 = extractvalue { i64, %struct.jv_refcnt* } %70, 0, !dbg !3513
  call void @llvm.dbg.value(metadata i64 %71, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %71, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %72 = extractvalue { i64, %struct.jv_refcnt* } %70, 1, !dbg !3513
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %72, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %72, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474, !dbg !3514

73:                                               ; preds = %52
  %74 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)) #15, !dbg !3515
  %75 = extractvalue { i64, %struct.jv_refcnt* } %74, 0, !dbg !3515
  call void @llvm.dbg.value(metadata i64 %75, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  %76 = extractvalue { i64, %struct.jv_refcnt* } %74, 1, !dbg !3515
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %76, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  %77 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3516
  %78 = extractvalue { i64, %struct.jv_refcnt* } %77, 0, !dbg !3516
  %79 = extractvalue { i64, %struct.jv_refcnt* } %77, 1, !dbg !3516
  %80 = tail call i32 @jv_array_length(i64 %78, %struct.jv_refcnt* %79) #15, !dbg !3516
  call void @llvm.dbg.value(metadata i32 %80, metadata !3382, metadata !DIExpression()), !dbg !3517
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i32 undef, metadata !3385, metadata !DIExpression()), !dbg !3517
  call void @llvm.dbg.value(metadata i64 %75, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i32 0, metadata !3384, metadata !DIExpression()), !dbg !3517
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3386, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3518
  call void @llvm.dbg.value(metadata i64 undef, metadata !3386, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3518
  %81 = icmp sgt i32 %80, 0, !dbg !3519
  br i1 %81, label %82, label %155, !dbg !3519

82:                                               ; preds = %73, %134
  %83 = phi %struct.jv_refcnt* [ %136, %134 ], [ %76, %73 ]
  %84 = phi i64 [ %135, %134 ], [ %75, %73 ]
  %85 = phi i32 [ %137, %134 ], [ 0, %73 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %83, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i64 %84, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i32 %85, metadata !3384, metadata !DIExpression()), !dbg !3517
  %86 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3519
  %87 = extractvalue { i64, %struct.jv_refcnt* } %86, 0, !dbg !3519
  %88 = extractvalue { i64, %struct.jv_refcnt* } %86, 1, !dbg !3519
  %89 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %87, %struct.jv_refcnt* %88, i32 %85) #15, !dbg !3519
  %90 = extractvalue { i64, %struct.jv_refcnt* } %89, 0, !dbg !3519
  %91 = extractvalue { i64, %struct.jv_refcnt* } %89, 1, !dbg !3519
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3386, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3518
  call void @llvm.dbg.value(metadata i64 undef, metadata !3386, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3518
  %92 = icmp eq i32 %85, 0, !dbg !3521
  br i1 %92, label %97, label %93, !dbg !3524

93:                                               ; preds = %82
  %94 = tail call { i64, %struct.jv_refcnt* } @jv_string_append_str(i64 %84, %struct.jv_refcnt* %83, i8* %55) #15, !dbg !3525
  %95 = extractvalue { i64, %struct.jv_refcnt* } %94, 0, !dbg !3525
  %96 = extractvalue { i64, %struct.jv_refcnt* } %94, 1, !dbg !3525
  call void @llvm.dbg.value(metadata i64 %95, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %96, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  br label %97, !dbg !3526

97:                                               ; preds = %93, %82
  %98 = phi i64 [ %95, %93 ], [ %84, %82 ], !dbg !3495
  %99 = phi %struct.jv_refcnt* [ %96, %93 ], [ %83, %82 ], !dbg !3495
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %99, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i64 %98, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  %100 = tail call i32 @jv_get_kind(i64 %90, %struct.jv_refcnt* %91) #15, !dbg !3527
  switch i32 %100, label %139 [
    i32 1, label %101
    i32 3, label %102
    i32 2, label %102
    i32 4, label %109
    i32 5, label %121
  ], !dbg !3528

101:                                              ; preds = %97
  tail call void @jv_free(i64 %90, %struct.jv_refcnt* %91) #15, !dbg !3529
  br label %134, !dbg !3531

102:                                              ; preds = %97, %97
  %103 = tail call { i64, %struct.jv_refcnt* } @jv_dump_string(i64 %90, %struct.jv_refcnt* %91, i32 0) #15, !dbg !3532
  %104 = extractvalue { i64, %struct.jv_refcnt* } %103, 0, !dbg !3532
  %105 = extractvalue { i64, %struct.jv_refcnt* } %103, 1, !dbg !3532
  %106 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %98, %struct.jv_refcnt* %99, i64 %104, %struct.jv_refcnt* %105) #15, !dbg !3533
  %107 = extractvalue { i64, %struct.jv_refcnt* } %106, 0, !dbg !3533
  %108 = extractvalue { i64, %struct.jv_refcnt* } %106, 1, !dbg !3533
  call void @llvm.dbg.value(metadata i64 %107, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %108, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  br label %134, !dbg !3534

109:                                              ; preds = %97
  %110 = tail call double @jv_number_value(i64 %90, %struct.jv_refcnt* %91) #15, !dbg !3535
  %111 = tail call double @jv_number_value(i64 %90, %struct.jv_refcnt* %91) #15, !dbg !3537
  %112 = fcmp une double %110, %111, !dbg !3538
  br i1 %112, label %113, label %114, !dbg !3539

113:                                              ; preds = %109
  tail call void @jv_free(i64 %90, %struct.jv_refcnt* %91) #15, !dbg !3540
  br label %134, !dbg !3542

114:                                              ; preds = %109
  %115 = tail call { i64, %struct.jv_refcnt* } @jv_dump_string(i64 %90, %struct.jv_refcnt* %91, i32 0) #15, !dbg !3543
  %116 = extractvalue { i64, %struct.jv_refcnt* } %115, 0, !dbg !3543
  %117 = extractvalue { i64, %struct.jv_refcnt* } %115, 1, !dbg !3543
  %118 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %98, %struct.jv_refcnt* %99, i64 %116, %struct.jv_refcnt* %117) #15, !dbg !3545
  %119 = extractvalue { i64, %struct.jv_refcnt* } %118, 0, !dbg !3545
  %120 = extractvalue { i64, %struct.jv_refcnt* } %118, 1, !dbg !3545
  call void @llvm.dbg.value(metadata i64 %119, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %120, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  br label %134

121:                                              ; preds = %97
  %122 = tail call { i64, %struct.jv_refcnt* } @jv_string_append_str(i64 %98, %struct.jv_refcnt* %99, i8* %56) #15, !dbg !3546
  %123 = extractvalue { i64, %struct.jv_refcnt* } %122, 0, !dbg !3546
  %124 = extractvalue { i64, %struct.jv_refcnt* } %122, 1, !dbg !3546
  call void @llvm.dbg.value(metadata i64 %123, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %124, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  %125 = tail call fastcc { i64, %struct.jv_refcnt* } @escape_string(i64 %90, %struct.jv_refcnt* %91, i8* %54), !dbg !3548
  %126 = extractvalue { i64, %struct.jv_refcnt* } %125, 0, !dbg !3548
  %127 = extractvalue { i64, %struct.jv_refcnt* } %125, 1, !dbg !3548
  %128 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %123, %struct.jv_refcnt* %124, i64 %126, %struct.jv_refcnt* %127) #15, !dbg !3549
  %129 = extractvalue { i64, %struct.jv_refcnt* } %128, 0, !dbg !3549
  %130 = extractvalue { i64, %struct.jv_refcnt* } %128, 1, !dbg !3549
  call void @llvm.dbg.value(metadata i64 %129, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %130, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  %131 = tail call { i64, %struct.jv_refcnt* } @jv_string_append_str(i64 %129, %struct.jv_refcnt* %130, i8* %56) #15, !dbg !3550
  %132 = extractvalue { i64, %struct.jv_refcnt* } %131, 0, !dbg !3550
  %133 = extractvalue { i64, %struct.jv_refcnt* } %131, 1, !dbg !3550
  call void @llvm.dbg.value(metadata i64 %132, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %133, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  br label %134, !dbg !3551

134:                                              ; preds = %101, %102, %121, %114, %113
  %135 = phi i64 [ %132, %121 ], [ %98, %113 ], [ %119, %114 ], [ %107, %102 ], [ %98, %101 ], !dbg !3552
  %136 = phi %struct.jv_refcnt* [ %133, %121 ], [ %99, %113 ], [ %120, %114 ], [ %108, %102 ], [ %99, %101 ], !dbg !3552
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %136, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i64 %135, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  %137 = add nuw nsw i32 %85, 1, !dbg !3519
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %136, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i64 %135, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i32 %137, metadata !3384, metadata !DIExpression()), !dbg !3517
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3386, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3518
  call void @llvm.dbg.value(metadata i64 undef, metadata !3386, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3518
  %138 = icmp eq i32 %137, %80, !dbg !3519
  br i1 %138, label %155, label %82, !dbg !3519, !llvm.loop !3553

139:                                              ; preds = %97
  %140 = extractvalue { i64, %struct.jv_refcnt* } %89, 0, !dbg !3519
  %141 = extractvalue { i64, %struct.jv_refcnt* } %89, 1, !dbg !3519
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3556
  tail call void @jv_free(i64 %98, %struct.jv_refcnt* %99) #15, !dbg !3557
  call void @llvm.dbg.value(metadata i64 undef, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3558
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3558
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.181, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !3558
  %142 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !3560
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %142) #15, !dbg !3560
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !390, metadata !DIExpression()) #15, !dbg !3561
  %143 = tail call i32 @jv_get_kind(i64 %140, %struct.jv_refcnt* %141) #15, !dbg !3562
  %144 = tail call i8* @jv_kind_name(i32 %143) #15, !dbg !3563
  %145 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %140, %struct.jv_refcnt* %141) #15, !dbg !3564
  %146 = extractvalue { i64, %struct.jv_refcnt* } %145, 0, !dbg !3564
  %147 = extractvalue { i64, %struct.jv_refcnt* } %145, 1, !dbg !3564
  %148 = call i8* @jv_dump_string_trunc(i64 %146, %struct.jv_refcnt* %147, i8* nonnull %142, i64 15) #15, !dbg !3565
  %149 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %144, i8* %148, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.181, i64 0, i64 0)) #15, !dbg !3566
  %150 = extractvalue { i64, %struct.jv_refcnt* } %149, 0, !dbg !3566
  %151 = extractvalue { i64, %struct.jv_refcnt* } %149, 1, !dbg !3566
  %152 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %150, %struct.jv_refcnt* %151) #15, !dbg !3567
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3558
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3558
  call void @jv_free(i64 %140, %struct.jv_refcnt* %141) #15, !dbg !3568
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %142) #15, !dbg !3569
  %153 = extractvalue { i64, %struct.jv_refcnt* } %152, 0, !dbg !3570
  call void @llvm.dbg.value(metadata i64 %153, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %153, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %154 = extractvalue { i64, %struct.jv_refcnt* } %152, 1, !dbg !3570
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %154, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %154, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %153, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 %153, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %99, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i64 %98, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  br label %474

155:                                              ; preds = %134, %73
  %156 = phi i64 [ %75, %73 ], [ %135, %134 ], !dbg !3495
  %157 = phi %struct.jv_refcnt* [ %76, %73 ], [ %136, %134 ], !dbg !3495
  call void @llvm.dbg.value(metadata i32 undef, metadata !3384, metadata !DIExpression()), !dbg !3517
  call void @llvm.dbg.value(metadata i32 undef, metadata !3385, metadata !DIExpression()), !dbg !3517
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* poison, metadata !3386, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3518
  call void @llvm.dbg.value(metadata i64 poison, metadata !3386, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3518
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %154, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %154, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %153, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 %153, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %99, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3495
  call void @llvm.dbg.value(metadata i64 %98, metadata !3381, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3495
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3571
  call void @llvm.dbg.value(metadata i64 %98, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %98, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %99, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %99, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474, !dbg !3572

158:                                              ; preds = %49
  %159 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.182, i64 0, i64 0)) #19, !dbg !3573
  %160 = icmp eq i32 %159, 0, !dbg !3573
  br i1 %160, label %161, label %174, !dbg !3574

161:                                              ; preds = %158
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3575
  call void @llvm.dbg.value(metadata i64 %1, metadata !2617, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3577
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2617, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3577
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !2616, metadata !DIExpression()) #15, !dbg !3577
  %162 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3579
  %163 = icmp eq i32 %162, 5, !dbg !3580
  br i1 %163, label %168, label %164, !dbg !3581

164:                                              ; preds = %161
  %165 = tail call { i64, %struct.jv_refcnt* } @jv_dump_string(i64 %1, %struct.jv_refcnt* %2, i32 0) #15, !dbg !3582
  %166 = extractvalue { i64, %struct.jv_refcnt* } %165, 0, !dbg !3582
  %167 = extractvalue { i64, %struct.jv_refcnt* } %165, 1, !dbg !3582
  br label %168, !dbg !3583

168:                                              ; preds = %161, %164
  %169 = phi i64 [ %166, %164 ], [ %1, %161 ], !dbg !3584
  %170 = phi %struct.jv_refcnt* [ %167, %164 ], [ %2, %161 ], !dbg !3584
  %171 = tail call fastcc { i64, %struct.jv_refcnt* } @escape_string(i64 %169, %struct.jv_refcnt* %170, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.183, i64 0, i64 0)), !dbg !3585
  %172 = extractvalue { i64, %struct.jv_refcnt* } %171, 0, !dbg !3585
  call void @llvm.dbg.value(metadata i64 %172, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %172, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %173 = extractvalue { i64, %struct.jv_refcnt* } %171, 1, !dbg !3585
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %173, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %173, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474, !dbg !3586

174:                                              ; preds = %158
  %175 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(4) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.184, i64 0, i64 0)) #19, !dbg !3587
  %176 = icmp eq i32 %175, 0, !dbg !3587
  br i1 %176, label %177, label %239, !dbg !3588

177:                                              ; preds = %174
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3589
  %178 = tail call { i64, %struct.jv_refcnt* } @f_tostring(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2), !dbg !3590
  %179 = extractvalue { i64, %struct.jv_refcnt* } %178, 0, !dbg !3590
  call void @llvm.dbg.value(metadata i64 %179, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %197, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3448
  %180 = bitcast [128 x i32]* %10 to i8*, !dbg !3591
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %180) #15, !dbg !3591
  call void @llvm.dbg.declare(metadata [128 x i32]* %10, metadata !3389, metadata !DIExpression()), !dbg !3592
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(512) %180, i8 0, i64 512, i1 false), !dbg !3592
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.185, i64 0, i64 0), metadata !3396, metadata !DIExpression()), !dbg !3468
  br label %181, !dbg !3593

181:                                              ; preds = %519, %177
  %182 = phi i8 [ 65, %177 ], [ %524, %519 ]
  %183 = phi i8* [ getelementptr inbounds ([72 x i8], [72 x i8]* @.str.185, i64 0, i64 0), %177 ], [ %521, %519 ]
  call void @llvm.dbg.value(metadata i8* %183, metadata !3396, metadata !DIExpression()), !dbg !3468
  %184 = getelementptr inbounds i8, i8* %183, i64 1, !dbg !3594
  call void @llvm.dbg.value(metadata i8* %184, metadata !3396, metadata !DIExpression()), !dbg !3468
  %185 = sext i8 %182 to i64, !dbg !3595
  %186 = getelementptr inbounds [128 x i32], [128 x i32]* %10, i64 0, i64 %185, !dbg !3595
  store i32 1, i32* %186, align 4, !dbg !3596, !tbaa !2095
  %187 = load i8, i8* %184, align 1, !dbg !3597, !tbaa !2186
  call void @llvm.dbg.value(metadata i8* %184, metadata !3396, metadata !DIExpression()), !dbg !3468
  %188 = getelementptr inbounds i8, i8* %183, i64 2, !dbg !3594
  call void @llvm.dbg.value(metadata i8* %188, metadata !3396, metadata !DIExpression()), !dbg !3468
  %189 = sext i8 %187 to i64, !dbg !3595
  %190 = getelementptr inbounds [128 x i32], [128 x i32]* %10, i64 0, i64 %189, !dbg !3595
  store i32 1, i32* %190, align 4, !dbg !3596, !tbaa !2095
  %191 = load i8, i8* %188, align 1, !dbg !3597, !tbaa !2186
  call void @llvm.dbg.value(metadata i8* %188, metadata !3396, metadata !DIExpression()), !dbg !3468
  %192 = getelementptr inbounds i8, i8* %183, i64 3, !dbg !3594
  call void @llvm.dbg.value(metadata i8* %192, metadata !3396, metadata !DIExpression()), !dbg !3468
  %193 = sext i8 %191 to i64, !dbg !3595
  %194 = getelementptr inbounds [128 x i32], [128 x i32]* %10, i64 0, i64 %193, !dbg !3595
  store i32 1, i32* %194, align 4, !dbg !3596, !tbaa !2095
  %195 = icmp eq i8* %192, getelementptr inbounds ([72 x i8], [72 x i8]* @.str.185, i64 0, i64 71), !dbg !3593
  br i1 %195, label %196, label %519, !dbg !3593, !llvm.loop !3598

196:                                              ; preds = %181
  %197 = extractvalue { i64, %struct.jv_refcnt* } %178, 1, !dbg !3590
  %198 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)) #15, !dbg !3600
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  %199 = tail call i8* @jv_string_value(i64 %179, %struct.jv_refcnt* %197) #15, !dbg !3601
  call void @llvm.dbg.value(metadata i8* %199, metadata !3398, metadata !DIExpression()), !dbg !3468
  call void @llvm.dbg.value(metadata i32 0, metadata !3399, metadata !DIExpression()), !dbg !3602
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  %200 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %179, %struct.jv_refcnt* %197) #15, !dbg !3603
  %201 = extractvalue { i64, %struct.jv_refcnt* } %200, 0, !dbg !3603
  %202 = extractvalue { i64, %struct.jv_refcnt* } %200, 1, !dbg !3603
  %203 = tail call i32 @jv_string_length_bytes(i64 %201, %struct.jv_refcnt* %202) #15, !dbg !3604
  %204 = icmp sgt i32 %203, 0, !dbg !3605
  br i1 %204, label %209, label %205, !dbg !3606

205:                                              ; preds = %230, %196
  %206 = phi { i64, %struct.jv_refcnt* } [ %198, %196 ], [ %231, %230 ]
  %207 = extractvalue { i64, %struct.jv_refcnt* } %206, 1, !dbg !3468
  %208 = extractvalue { i64, %struct.jv_refcnt* } %206, 0, !dbg !3468
  tail call void @jv_free(i64 %179, %struct.jv_refcnt* %197) #15, !dbg !3607
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %180) #15, !dbg !3608
  br label %474

209:                                              ; preds = %196, %230
  %210 = phi { i64, %struct.jv_refcnt* } [ %231, %230 ], [ %198, %196 ]
  %211 = phi i8* [ %232, %230 ], [ %199, %196 ]
  %212 = phi i32 [ %233, %230 ], [ 0, %196 ]
  %213 = extractvalue { i64, %struct.jv_refcnt* } %210, 1, !dbg !3468
  %214 = extractvalue { i64, %struct.jv_refcnt* } %210, 0, !dbg !3468
  call void @llvm.dbg.value(metadata i8* %211, metadata !3398, metadata !DIExpression()), !dbg !3468
  call void @llvm.dbg.value(metadata i32 %212, metadata !3399, metadata !DIExpression()), !dbg !3602
  %215 = load i8, i8* %211, align 1, !dbg !3609, !tbaa !2186
  %216 = zext i8 %215 to i32, !dbg !3610
  call void @llvm.dbg.value(metadata i32 %216, metadata !3401, metadata !DIExpression()), !dbg !3611
  %217 = icmp sgt i8 %215, -1, !dbg !3612
  br i1 %217, label %218, label %225, !dbg !3614

218:                                              ; preds = %209
  %219 = zext i8 %215 to i64, !dbg !3615
  %220 = getelementptr inbounds [128 x i32], [128 x i32]* %10, i64 0, i64 %219, !dbg !3615
  %221 = load i32, i32* %220, align 4, !dbg !3615, !tbaa !2095
  %222 = icmp eq i32 %221, 0, !dbg !3615
  br i1 %222, label %225, label %223, !dbg !3616

223:                                              ; preds = %218
  %224 = tail call { i64, %struct.jv_refcnt* } @jv_string_append_buf(i64 %214, %struct.jv_refcnt* %213, i8* nonnull %211, i32 1) #15, !dbg !3617
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %230, !dbg !3619

225:                                              ; preds = %218, %209
  %226 = tail call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.186, i64 0, i64 0), i32 %216) #15, !dbg !3620
  %227 = extractvalue { i64, %struct.jv_refcnt* } %226, 0, !dbg !3620
  %228 = extractvalue { i64, %struct.jv_refcnt* } %226, 1, !dbg !3620
  %229 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %214, %struct.jv_refcnt* %213, i64 %227, %struct.jv_refcnt* %228) #15, !dbg !3622
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %230

230:                                              ; preds = %225, %223
  %231 = phi { i64, %struct.jv_refcnt* } [ %224, %223 ], [ %229, %225 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  %232 = getelementptr inbounds i8, i8* %211, i64 1, !dbg !3623
  call void @llvm.dbg.value(metadata i8* %232, metadata !3398, metadata !DIExpression()), !dbg !3468
  %233 = add nuw nsw i32 %212, 1, !dbg !3624
  call void @llvm.dbg.value(metadata i32 %233, metadata !3399, metadata !DIExpression()), !dbg !3602
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  %234 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %179, %struct.jv_refcnt* %197) #15, !dbg !3603
  %235 = extractvalue { i64, %struct.jv_refcnt* } %234, 0, !dbg !3603
  %236 = extractvalue { i64, %struct.jv_refcnt* } %234, 1, !dbg !3603
  %237 = tail call i32 @jv_string_length_bytes(i64 %235, %struct.jv_refcnt* %236) #15, !dbg !3604
  %238 = icmp slt i32 %233, %237, !dbg !3605
  br i1 %238, label %209, label %205, !dbg !3606, !llvm.loop !3625

239:                                              ; preds = %174
  %240 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0)) #19, !dbg !3627
  %241 = icmp eq i32 %240, 0, !dbg !3627
  br i1 %241, label %242, label %326, !dbg !3628

242:                                              ; preds = %239
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3629
  %243 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3630
  %244 = icmp eq i32 %243, 6, !dbg !3632
  br i1 %244, label %252, label %245, !dbg !3633

245:                                              ; preds = %242
  %246 = tail call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !3634
  %247 = extractvalue { i64, %struct.jv_refcnt* } %246, 0, !dbg !3634
  %248 = extractvalue { i64, %struct.jv_refcnt* } %246, 1, !dbg !3634
  %249 = tail call { i64, %struct.jv_refcnt* } @jv_array_set(i64 %247, %struct.jv_refcnt* %248, i32 0, i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3635
  %250 = extractvalue { i64, %struct.jv_refcnt* } %249, 0, !dbg !3635
  %251 = extractvalue { i64, %struct.jv_refcnt* } %249, 1, !dbg !3635
  call void @llvm.dbg.value(metadata i64 %250, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %251, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3448
  br label %252, !dbg !3636

252:                                              ; preds = %245, %242
  %253 = phi i64 [ %250, %245 ], [ %1, %242 ]
  %254 = phi %struct.jv_refcnt* [ %251, %245 ], [ %2, %242 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %254, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata i64 %253, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3448
  %255 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)) #15, !dbg !3637
  %256 = extractvalue { i64, %struct.jv_refcnt* } %255, 0, !dbg !3637
  call void @llvm.dbg.value(metadata i64 %256, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  %257 = extractvalue { i64, %struct.jv_refcnt* } %255, 1, !dbg !3637
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %257, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  %258 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %253, %struct.jv_refcnt* %254) #15, !dbg !3639
  %259 = extractvalue { i64, %struct.jv_refcnt* } %258, 0, !dbg !3639
  %260 = extractvalue { i64, %struct.jv_refcnt* } %258, 1, !dbg !3639
  %261 = tail call i32 @jv_array_length(i64 %259, %struct.jv_refcnt* %260) #15, !dbg !3639
  call void @llvm.dbg.value(metadata i32 %261, metadata !3407, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i32 undef, metadata !3410, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.value(metadata i64 %256, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i32 0, metadata !3409, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3411, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3641
  call void @llvm.dbg.value(metadata i64 undef, metadata !3411, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3641
  %262 = icmp sgt i32 %261, 0, !dbg !3642
  br i1 %262, label %263, label %323, !dbg !3642

263:                                              ; preds = %252, %298
  %264 = phi %struct.jv_refcnt* [ %300, %298 ], [ %257, %252 ]
  %265 = phi i64 [ %301, %298 ], [ %256, %252 ]
  %266 = phi i32 [ %302, %298 ], [ 0, %252 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %264, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i64 %265, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i32 %266, metadata !3409, metadata !DIExpression()), !dbg !3640
  %267 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %253, %struct.jv_refcnt* %254) #15, !dbg !3642
  %268 = extractvalue { i64, %struct.jv_refcnt* } %267, 0, !dbg !3642
  %269 = extractvalue { i64, %struct.jv_refcnt* } %267, 1, !dbg !3642
  %270 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %268, %struct.jv_refcnt* %269, i32 %266) #15, !dbg !3642
  %271 = extractvalue { i64, %struct.jv_refcnt* } %270, 0, !dbg !3642
  %272 = extractvalue { i64, %struct.jv_refcnt* } %270, 1, !dbg !3642
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3411, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3641
  call void @llvm.dbg.value(metadata i64 undef, metadata !3411, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3641
  %273 = icmp eq i32 %266, 0, !dbg !3644
  br i1 %273, label %278, label %274, !dbg !3647

274:                                              ; preds = %263
  %275 = tail call { i64, %struct.jv_refcnt* } @jv_string_append_str(i64 %265, %struct.jv_refcnt* %264, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.188, i64 0, i64 0)) #15, !dbg !3648
  %276 = extractvalue { i64, %struct.jv_refcnt* } %275, 0, !dbg !3648
  %277 = extractvalue { i64, %struct.jv_refcnt* } %275, 1, !dbg !3648
  call void @llvm.dbg.value(metadata i64 %276, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %277, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  br label %278, !dbg !3649

278:                                              ; preds = %274, %263
  %279 = phi i64 [ %276, %274 ], [ %265, %263 ], !dbg !3638
  %280 = phi %struct.jv_refcnt* [ %277, %274 ], [ %264, %263 ], !dbg !3638
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %280, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i64 %279, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  %281 = tail call i32 @jv_get_kind(i64 %271, %struct.jv_refcnt* %272) #15, !dbg !3650
  switch i32 %281, label %304 [
    i32 1, label %282
    i32 3, label %282
    i32 2, label %282
    i32 4, label %282
    i32 5, label %287
  ], !dbg !3651

282:                                              ; preds = %278, %278, %278, %278
  %283 = tail call { i64, %struct.jv_refcnt* } @jv_dump_string(i64 %271, %struct.jv_refcnt* %272, i32 0) #15, !dbg !3652
  %284 = extractvalue { i64, %struct.jv_refcnt* } %283, 0, !dbg !3652
  %285 = extractvalue { i64, %struct.jv_refcnt* } %283, 1, !dbg !3652
  %286 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %279, %struct.jv_refcnt* %280, i64 %284, %struct.jv_refcnt* %285) #15, !dbg !3654
  call void @llvm.dbg.value(metadata i64 undef, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  br label %298, !dbg !3655

287:                                              ; preds = %278
  %288 = tail call { i64, %struct.jv_refcnt* } @jv_string_append_str(i64 %279, %struct.jv_refcnt* %280, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.189, i64 0, i64 0)) #15, !dbg !3656
  %289 = extractvalue { i64, %struct.jv_refcnt* } %288, 0, !dbg !3656
  %290 = extractvalue { i64, %struct.jv_refcnt* } %288, 1, !dbg !3656
  call void @llvm.dbg.value(metadata i64 %289, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %290, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  %291 = tail call fastcc { i64, %struct.jv_refcnt* } @escape_string(i64 %271, %struct.jv_refcnt* %272, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.190, i64 0, i64 0)), !dbg !3658
  %292 = extractvalue { i64, %struct.jv_refcnt* } %291, 0, !dbg !3658
  %293 = extractvalue { i64, %struct.jv_refcnt* } %291, 1, !dbg !3658
  %294 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %289, %struct.jv_refcnt* %290, i64 %292, %struct.jv_refcnt* %293) #15, !dbg !3659
  %295 = extractvalue { i64, %struct.jv_refcnt* } %294, 0, !dbg !3659
  %296 = extractvalue { i64, %struct.jv_refcnt* } %294, 1, !dbg !3659
  call void @llvm.dbg.value(metadata i64 %295, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %296, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  %297 = tail call { i64, %struct.jv_refcnt* } @jv_string_append_str(i64 %295, %struct.jv_refcnt* %296, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.189, i64 0, i64 0)) #15, !dbg !3660
  call void @llvm.dbg.value(metadata i64 undef, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  br label %298, !dbg !3661

298:                                              ; preds = %282, %287
  %299 = phi { i64, %struct.jv_refcnt* } [ %297, %287 ], [ %286, %282 ]
  %300 = extractvalue { i64, %struct.jv_refcnt* } %299, 1, !dbg !3662
  %301 = extractvalue { i64, %struct.jv_refcnt* } %299, 0, !dbg !3662
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %300, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i64 %301, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  %302 = add nuw nsw i32 %266, 1, !dbg !3642
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %300, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i64 %301, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i32 %302, metadata !3409, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3411, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3641
  call void @llvm.dbg.value(metadata i64 undef, metadata !3411, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3641
  %303 = icmp eq i32 %302, %261, !dbg !3642
  br i1 %303, label %320, label %263, !dbg !3642, !llvm.loop !3663

304:                                              ; preds = %278
  %305 = extractvalue { i64, %struct.jv_refcnt* } %270, 0, !dbg !3642
  %306 = extractvalue { i64, %struct.jv_refcnt* } %270, 1, !dbg !3642
  tail call void @jv_free(i64 %253, %struct.jv_refcnt* %254) #15, !dbg !3666
  tail call void @jv_free(i64 %279, %struct.jv_refcnt* %280) #15, !dbg !3667
  call void @llvm.dbg.value(metadata i64 undef, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3668
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3668
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.191, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !3668
  %307 = getelementptr inbounds [15 x i8], [15 x i8]* %6, i64 0, i64 0, !dbg !3670
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %307) #15, !dbg !3670
  call void @llvm.dbg.declare(metadata [15 x i8]* %6, metadata !390, metadata !DIExpression()) #15, !dbg !3671
  %308 = tail call i32 @jv_get_kind(i64 %305, %struct.jv_refcnt* %306) #15, !dbg !3672
  %309 = tail call i8* @jv_kind_name(i32 %308) #15, !dbg !3673
  %310 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %305, %struct.jv_refcnt* %306) #15, !dbg !3674
  %311 = extractvalue { i64, %struct.jv_refcnt* } %310, 0, !dbg !3674
  %312 = extractvalue { i64, %struct.jv_refcnt* } %310, 1, !dbg !3674
  %313 = call i8* @jv_dump_string_trunc(i64 %311, %struct.jv_refcnt* %312, i8* nonnull %307, i64 15) #15, !dbg !3675
  %314 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %309, i8* %313, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.191, i64 0, i64 0)) #15, !dbg !3676
  %315 = extractvalue { i64, %struct.jv_refcnt* } %314, 0, !dbg !3676
  %316 = extractvalue { i64, %struct.jv_refcnt* } %314, 1, !dbg !3676
  %317 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %315, %struct.jv_refcnt* %316) #15, !dbg !3677
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3668
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3668
  call void @jv_free(i64 %305, %struct.jv_refcnt* %306) #15, !dbg !3678
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %307) #15, !dbg !3679
  %318 = extractvalue { i64, %struct.jv_refcnt* } %317, 0, !dbg !3680
  call void @llvm.dbg.value(metadata i64 %318, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %318, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %319 = extractvalue { i64, %struct.jv_refcnt* } %317, 1, !dbg !3680
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %319, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %319, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %318, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 %318, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %280, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i64 %279, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  br label %474

320:                                              ; preds = %298
  %321 = extractvalue { i64, %struct.jv_refcnt* } %299, 1, !dbg !3662
  %322 = extractvalue { i64, %struct.jv_refcnt* } %299, 0, !dbg !3662
  br label %323, !dbg !3681

323:                                              ; preds = %320, %252
  %324 = phi i64 [ %256, %252 ], [ %322, %320 ], !dbg !3638
  %325 = phi %struct.jv_refcnt* [ %257, %252 ], [ %321, %320 ], !dbg !3638
  call void @llvm.dbg.value(metadata i32 undef, metadata !3409, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.value(metadata i32 undef, metadata !3410, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* poison, metadata !3411, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3641
  call void @llvm.dbg.value(metadata i64 poison, metadata !3411, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3641
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %319, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %319, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %318, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 %318, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %280, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3638
  call void @llvm.dbg.value(metadata i64 %279, metadata !3404, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3638
  tail call void @jv_free(i64 %253, %struct.jv_refcnt* %254) #15, !dbg !3681
  call void @llvm.dbg.value(metadata i64 %279, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %279, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %280, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %280, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474, !dbg !3682

326:                                              ; preds = %239
  %327 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(7) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.192, i64 0, i64 0)) #19, !dbg !3683
  %328 = icmp eq i32 %327, 0, !dbg !3683
  br i1 %328, label %329, label %373, !dbg !3684

329:                                              ; preds = %326
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3685
  %330 = tail call { i64, %struct.jv_refcnt* } @f_tostring(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2), !dbg !3686
  %331 = extractvalue { i64, %struct.jv_refcnt* } %330, 0, !dbg !3686
  %332 = extractvalue { i64, %struct.jv_refcnt* } %330, 1, !dbg !3686
  call void @llvm.dbg.value(metadata i64 %331, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %332, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3448
  %333 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)) #15, !dbg !3687
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  %334 = tail call i8* @jv_string_value(i64 %331, %struct.jv_refcnt* %332) #15, !dbg !3688
  call void @llvm.dbg.value(metadata i8* %334, metadata !3417, metadata !DIExpression()), !dbg !3469
  %335 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %331, %struct.jv_refcnt* %332) #15, !dbg !3689
  %336 = extractvalue { i64, %struct.jv_refcnt* } %335, 0, !dbg !3689
  %337 = extractvalue { i64, %struct.jv_refcnt* } %335, 1, !dbg !3689
  %338 = tail call i32 @jv_string_length_bytes(i64 %336, %struct.jv_refcnt* %337) #15, !dbg !3690
  call void @llvm.dbg.value(metadata i32 %338, metadata !3418, metadata !DIExpression()), !dbg !3469
  call void @llvm.dbg.value(metadata i32 0, metadata !3419, metadata !DIExpression()), !dbg !3691
  %339 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 0
  %340 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 3
  %341 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 2
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  %342 = icmp sgt i32 %338, 0, !dbg !3692
  br i1 %342, label %343, label %345, !dbg !3693

343:                                              ; preds = %329
  %344 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 1
  br label %349, !dbg !3693

345:                                              ; preds = %368, %329
  %346 = phi { i64, %struct.jv_refcnt* } [ %333, %329 ], [ %369, %368 ]
  %347 = extractvalue { i64, %struct.jv_refcnt* } %346, 1, !dbg !3469
  %348 = extractvalue { i64, %struct.jv_refcnt* } %346, 0, !dbg !3469
  call void @jv_free(i64 %331, %struct.jv_refcnt* %332) #15, !dbg !3694
  br label %474

349:                                              ; preds = %343, %368
  %350 = phi i64 [ 0, %343 ], [ %370, %368 ]
  %351 = phi { i64, %struct.jv_refcnt* } [ %333, %343 ], [ %369, %368 ]
  %352 = extractvalue { i64, %struct.jv_refcnt* } %351, 1, !dbg !3469
  call void @llvm.dbg.value(metadata i64 %350, metadata !3419, metadata !DIExpression()), !dbg !3691
  call void @llvm.dbg.value(metadata i32 0, metadata !3421, metadata !DIExpression()), !dbg !3695
  %353 = trunc i64 %350 to i32, !dbg !3696
  %354 = sub nsw i32 %338, %353, !dbg !3696
  %355 = icmp slt i32 %354, 3, !dbg !3697
  %356 = select i1 %355, i32 %354, i32 3, !dbg !3697
  call void @llvm.dbg.value(metadata i32 %356, metadata !3427, metadata !DIExpression()), !dbg !3695
  call void @llvm.dbg.value(metadata i64 0, metadata !3428, metadata !DIExpression()), !dbg !3698
  %357 = icmp sgt i32 %354, 0, !dbg !3699
  br i1 %357, label %358, label %362, !dbg !3702

358:                                              ; preds = %349
  %359 = getelementptr inbounds i8, i8* %334, i64 %350, !dbg !3703
  %360 = load i8, i8* %359, align 1, !dbg !3703, !tbaa !2186
  %361 = zext i8 %360 to i32, !dbg !3704
  br label %362, !dbg !3702

362:                                              ; preds = %349, %358
  %363 = phi i32 [ %361, %358 ], [ 0, %349 ], !dbg !3702
  call void @llvm.dbg.value(metadata i64 1, metadata !3428, metadata !DIExpression()), !dbg !3698
  call void @llvm.dbg.value(metadata i32 %363, metadata !3421, metadata !DIExpression(DW_OP_constu, 8, DW_OP_shl, DW_OP_stack_value)), !dbg !3695
  %364 = icmp sgt i32 %356, 1, !dbg !3699
  br i1 %364, label %479, label %365, !dbg !3702

365:                                              ; preds = %362
  call void @llvm.dbg.value(metadata !DIArgList(i32 %483, i32 %363), metadata !3421, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_constu, 8, DW_OP_shl, DW_OP_or, DW_OP_stack_value)), !dbg !3695
  call void @llvm.dbg.value(metadata i64 2, metadata !3428, metadata !DIExpression()), !dbg !3698
  call void @llvm.dbg.value(metadata i64 2, metadata !3428, metadata !DIExpression()), !dbg !3698
  call void @llvm.dbg.value(metadata !DIArgList(i32 %483, i32 %363), metadata !3421, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_constu, 8, DW_OP_shl, DW_OP_or, DW_OP_stack_value)), !dbg !3695
  %366 = shl nuw nsw i32 %363, 16, !dbg !3705
  call void @llvm.dbg.value(metadata !DIArgList(i32 %484, i32 %485), metadata !3421, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_or, DW_OP_stack_value)), !dbg !3695
  br label %493, !dbg !3702

367:                                              ; preds = %493
  store i8 61, i8* %341, align 1, !dbg !3706, !tbaa !2186
  br label %368, !dbg !3708

368:                                              ; preds = %367, %493
  %369 = call { i64, %struct.jv_refcnt* } @jv_string_append_buf(i64 %516, %struct.jv_refcnt* %352, i8* nonnull %339, i32 4) #15, !dbg !3709
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %339) #15, !dbg !3710
  %370 = add nuw i64 %350, 3, !dbg !3711
  call void @llvm.dbg.value(metadata i64 %370, metadata !3419, metadata !DIExpression()), !dbg !3691
  call void @llvm.dbg.value(metadata i64 undef, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 undef, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  %371 = trunc i64 %370 to i32, !dbg !3692
  %372 = icmp sgt i32 %338, %371, !dbg !3692
  br i1 %372, label %349, label %345, !dbg !3693, !llvm.loop !3712

373:                                              ; preds = %326
  %374 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %29, i8* noundef nonnull dereferenceable(8) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.193, i64 0, i64 0)) #19, !dbg !3714
  %375 = icmp eq i32 %374, 0, !dbg !3714
  br i1 %375, label %376, label %464, !dbg !3715

376:                                              ; preds = %373
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3716
  %377 = tail call { i64, %struct.jv_refcnt* } @f_tostring(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2), !dbg !3717
  %378 = extractvalue { i64, %struct.jv_refcnt* } %377, 0, !dbg !3717
  %379 = extractvalue { i64, %struct.jv_refcnt* } %377, 1, !dbg !3717
  call void @llvm.dbg.value(metadata i64 %378, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3448
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %379, metadata !3370, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3448
  %380 = tail call i8* @jv_string_value(i64 %378, %struct.jv_refcnt* %379) #15, !dbg !3718
  call void @llvm.dbg.value(metadata i8* %380, metadata !3436, metadata !DIExpression()), !dbg !3719
  %381 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %378, %struct.jv_refcnt* %379) #15, !dbg !3720
  %382 = extractvalue { i64, %struct.jv_refcnt* } %381, 0, !dbg !3720
  %383 = extractvalue { i64, %struct.jv_refcnt* } %381, 1, !dbg !3720
  %384 = tail call i32 @jv_string_length_bytes(i64 %382, %struct.jv_refcnt* %383) #15, !dbg !3721
  call void @llvm.dbg.value(metadata i32 %384, metadata !3439, metadata !DIExpression()), !dbg !3719
  %385 = mul nsw i32 %384, 3, !dbg !3722
  %386 = sdiv i32 %385, 4, !dbg !3723
  %387 = sext i32 %386 to i64, !dbg !3724
  call void @llvm.dbg.value(metadata i64 %387, metadata !3440, metadata !DIExpression()), !dbg !3719
  %388 = tail call i8* @jv_mem_calloc(i64 %387, i64 1) #15, !dbg !3725
  call void @llvm.dbg.value(metadata i8* %388, metadata !3441, metadata !DIExpression()), !dbg !3719
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %388, i8 0, i64 %387, i1 false), !dbg !3726
  call void @llvm.dbg.value(metadata i32 0, metadata !3442, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.value(metadata i32 0, metadata !3443, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.value(metadata i32 0, metadata !3444, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.value(metadata i32 0, metadata !3445, metadata !DIExpression()), !dbg !3727
  %389 = icmp sgt i32 %384, 0, !dbg !3728
  br i1 %389, label %390, label %459, !dbg !3730

390:                                              ; preds = %376
  %391 = zext i32 %384 to i64, !dbg !3728
  br label %392, !dbg !3731

392:                                              ; preds = %390, %426
  %393 = phi i64 [ 0, %390 ], [ %430, %426 ]
  %394 = phi i32 [ 0, %390 ], [ %429, %426 ]
  %395 = phi i32 [ 0, %390 ], [ %428, %426 ]
  %396 = phi i32 [ 0, %390 ], [ %427, %426 ]
  call void @llvm.dbg.value(metadata i64 %393, metadata !3445, metadata !DIExpression()), !dbg !3727
  call void @llvm.dbg.value(metadata i32 %394, metadata !3444, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.value(metadata i32 %395, metadata !3443, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.value(metadata i32 %396, metadata !3442, metadata !DIExpression()), !dbg !3719
  %397 = getelementptr inbounds i8, i8* %380, i64 %393, !dbg !3732
  %398 = load i8, i8* %397, align 1, !dbg !3732, !tbaa !2186
  %399 = icmp eq i8 %398, 61, !dbg !3733
  br i1 %399, label %436, label %400, !dbg !3731

400:                                              ; preds = %392
  %401 = zext i8 %398 to i64, !dbg !3734
  %402 = getelementptr inbounds [255 x i8], [255 x i8]* @BASE64_DECODE_TABLE, i64 0, i64 %401, !dbg !3734
  %403 = load i8, i8* %402, align 1, !dbg !3734, !tbaa !2186
  %404 = icmp eq i8 %403, -1, !dbg !3737
  br i1 %404, label %432, label %405, !dbg !3738

405:                                              ; preds = %400
  %406 = zext i8 %403 to i32, !dbg !3734
  %407 = shl i32 %394, 6, !dbg !3739
  call void @llvm.dbg.value(metadata i32 %407, metadata !3444, metadata !DIExpression()), !dbg !3719
  %408 = or i32 %407, %406, !dbg !3740
  call void @llvm.dbg.value(metadata !DIArgList(i32 %407, i32 %406), metadata !3444, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_or, DW_OP_stack_value)), !dbg !3719
  %409 = add nsw i32 %395, 1, !dbg !3741
  call void @llvm.dbg.value(metadata i32 %409, metadata !3443, metadata !DIExpression()), !dbg !3719
  %410 = icmp eq i32 %409, 4, !dbg !3742
  br i1 %410, label %411, label %426, !dbg !3744

411:                                              ; preds = %405
  %412 = lshr i32 %394, 10, !dbg !3745
  %413 = trunc i32 %412 to i8, !dbg !3747
  %414 = add i32 %396, 1, !dbg !3748
  call void @llvm.dbg.value(metadata i32 %414, metadata !3442, metadata !DIExpression()), !dbg !3719
  %415 = zext i32 %396 to i64, !dbg !3749
  %416 = getelementptr inbounds i8, i8* %388, i64 %415, !dbg !3749
  store i8 %413, i8* %416, align 1, !dbg !3750, !tbaa !2186
  %417 = lshr i32 %394, 2, !dbg !3751
  %418 = trunc i32 %417 to i8, !dbg !3752
  %419 = add i32 %396, 2, !dbg !3753
  call void @llvm.dbg.value(metadata i32 %419, metadata !3442, metadata !DIExpression()), !dbg !3719
  %420 = zext i32 %414 to i64, !dbg !3754
  %421 = getelementptr inbounds i8, i8* %388, i64 %420, !dbg !3754
  store i8 %418, i8* %421, align 1, !dbg !3755, !tbaa !2186
  %422 = trunc i32 %408 to i8, !dbg !3756
  %423 = add i32 %396, 3, !dbg !3757
  call void @llvm.dbg.value(metadata i32 %423, metadata !3442, metadata !DIExpression()), !dbg !3719
  %424 = zext i32 %419 to i64, !dbg !3758
  %425 = getelementptr inbounds i8, i8* %388, i64 %424, !dbg !3758
  store i8 %422, i8* %425, align 1, !dbg !3759, !tbaa !2186
  call void @llvm.dbg.value(metadata i32 0, metadata !3443, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.value(metadata i32 0, metadata !3444, metadata !DIExpression()), !dbg !3719
  br label %426, !dbg !3760

426:                                              ; preds = %405, %411
  %427 = phi i32 [ %423, %411 ], [ %396, %405 ], !dbg !3719
  %428 = phi i32 [ 0, %411 ], [ %409, %405 ], !dbg !3761
  %429 = phi i32 [ 0, %411 ], [ %408, %405 ], !dbg !3761
  call void @llvm.dbg.value(metadata i32 %429, metadata !3444, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.value(metadata i32 %428, metadata !3443, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.value(metadata i32 %427, metadata !3442, metadata !DIExpression()), !dbg !3719
  %430 = add nuw nsw i64 %393, 1, !dbg !3762
  call void @llvm.dbg.value(metadata i64 %430, metadata !3445, metadata !DIExpression()), !dbg !3727
  %431 = icmp eq i64 %430, %391, !dbg !3728
  br i1 %431, label %436, label %392, !dbg !3730, !llvm.loop !3763

432:                                              ; preds = %400
  tail call void @free(i8* %388) #15, !dbg !3765
  %433 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error(i64 %378, %struct.jv_refcnt* %379, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.194, i64 0, i64 0)), !dbg !3767
  %434 = extractvalue { i64, %struct.jv_refcnt* } %433, 0, !dbg !3767
  call void @llvm.dbg.value(metadata i64 %434, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %434, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %435 = extractvalue { i64, %struct.jv_refcnt* } %433, 1, !dbg !3767
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %435, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %435, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %434, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 %434, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  br label %474

436:                                              ; preds = %392, %426
  %437 = phi i32 [ %396, %392 ], [ %427, %426 ], !dbg !3719
  %438 = phi i32 [ %395, %392 ], [ %428, %426 ], !dbg !3719
  %439 = phi i32 [ %394, %392 ], [ %429, %426 ], !dbg !3719
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %435, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %435, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %434, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 %434, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  switch i32 %438, label %459 [
    i32 3, label %440
    i32 2, label %450
    i32 1, label %446
  ], !dbg !3768

440:                                              ; preds = %436
  %441 = lshr i32 %439, 10, !dbg !3769
  %442 = trunc i32 %441 to i8, !dbg !3772
  %443 = add i32 %437, 1, !dbg !3773
  call void @llvm.dbg.value(metadata i32 %443, metadata !3442, metadata !DIExpression()), !dbg !3719
  %444 = zext i32 %437 to i64, !dbg !3774
  %445 = getelementptr inbounds i8, i8* %388, i64 %444, !dbg !3774
  store i8 %442, i8* %445, align 1, !dbg !3775, !tbaa !2186
  call void @llvm.dbg.value(metadata i32 undef, metadata !3442, metadata !DIExpression()), !dbg !3719
  br label %450, !dbg !3776

446:                                              ; preds = %436
  tail call void @free(i8* %388) #15, !dbg !3777
  %447 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error(i64 %378, %struct.jv_refcnt* %379, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.195, i64 0, i64 0)), !dbg !3781
  %448 = extractvalue { i64, %struct.jv_refcnt* } %447, 0, !dbg !3781
  call void @llvm.dbg.value(metadata i64 %448, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %448, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %449 = extractvalue { i64, %struct.jv_refcnt* } %447, 1, !dbg !3781
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %449, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %449, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474, !dbg !3782

450:                                              ; preds = %436, %440
  %451 = phi i32 [ 2, %440 ], [ 4, %436 ]
  %452 = phi i32 [ 2, %440 ], [ 1, %436 ]
  %453 = phi i32 [ %443, %440 ], [ %437, %436 ]
  %454 = lshr i32 %439, %451, !dbg !3783
  %455 = trunc i32 %454 to i8, !dbg !3783
  %456 = add i32 %437, %452, !dbg !3783
  %457 = zext i32 %453 to i64, !dbg !3783
  %458 = getelementptr inbounds i8, i8* %388, i64 %457, !dbg !3783
  store i8 %455, i8* %458, align 1, !dbg !3783, !tbaa !2186
  br label %459, !dbg !3784

459:                                              ; preds = %450, %376, %436
  %460 = phi i32 [ %437, %436 ], [ 0, %376 ], [ %456, %450 ], !dbg !3719
  call void @llvm.dbg.value(metadata i32 %460, metadata !3442, metadata !DIExpression()), !dbg !3719
  %461 = tail call { i64, %struct.jv_refcnt* } @jv_string_sized(i8* %388, i32 %460) #15, !dbg !3784
  %462 = extractvalue { i64, %struct.jv_refcnt* } %461, 0, !dbg !3784
  call void @llvm.dbg.value(metadata i64 %462, metadata !3447, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3719
  %463 = extractvalue { i64, %struct.jv_refcnt* } %461, 1, !dbg !3784
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %463, metadata !3447, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3719
  tail call void @jv_free(i64 %378, %struct.jv_refcnt* %379) #15, !dbg !3785
  tail call void @free(i8* %388) #15, !dbg !3786
  call void @llvm.dbg.value(metadata i64 %462, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %462, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %463, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %463, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474

464:                                              ; preds = %373
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3787
  %465 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.196, i64 0, i64 0)) #15, !dbg !3789
  %466 = extractvalue { i64, %struct.jv_refcnt* } %465, 0, !dbg !3789
  %467 = extractvalue { i64, %struct.jv_refcnt* } %465, 1, !dbg !3789
  %468 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %3, %struct.jv_refcnt* %4, i64 %466, %struct.jv_refcnt* %467) #15, !dbg !3790
  %469 = extractvalue { i64, %struct.jv_refcnt* } %468, 0, !dbg !3790
  %470 = extractvalue { i64, %struct.jv_refcnt* } %468, 1, !dbg !3790
  %471 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %469, %struct.jv_refcnt* %470) #15, !dbg !3791
  %472 = extractvalue { i64, %struct.jv_refcnt* } %471, 0, !dbg !3791
  call void @llvm.dbg.value(metadata i64 %472, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %472, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  %473 = extractvalue { i64, %struct.jv_refcnt* } %471, 1, !dbg !3791
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %473, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %473, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  br label %474, !dbg !3792

474:                                              ; preds = %42, %39, %432, %304, %139, %32, %168, %205, %345, %464, %155, %59, %323, %459, %446, %14
  %475 = phi i64 [ %26, %14 ], [ %472, %464 ], [ %348, %345 ], [ %208, %205 ], [ %172, %168 ], [ %34, %32 ], [ %71, %59 ], [ %156, %155 ], [ %153, %139 ], [ %324, %323 ], [ %318, %304 ], [ %462, %459 ], [ %448, %446 ], [ %434, %432 ], [ %44, %42 ], [ %1, %39 ], !dbg !3448
  %476 = phi %struct.jv_refcnt* [ %27, %14 ], [ %473, %464 ], [ %347, %345 ], [ %207, %205 ], [ %173, %168 ], [ %35, %32 ], [ %72, %59 ], [ %157, %155 ], [ %154, %139 ], [ %325, %323 ], [ %319, %304 ], [ %463, %459 ], [ %449, %446 ], [ %435, %432 ], [ %45, %42 ], [ %2, %39 ], !dbg !3448
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %476, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %476, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3468
  call void @llvm.dbg.value(metadata i64 %475, metadata !3414, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3469
  call void @llvm.dbg.value(metadata i64 %475, metadata !3397, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3468
  %477 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %475, 0, !dbg !3793
  %478 = insertvalue { i64, %struct.jv_refcnt* } %477, %struct.jv_refcnt* %476, 1, !dbg !3793
  ret { i64, %struct.jv_refcnt* } %478, !dbg !3793

479:                                              ; preds = %362
  %480 = add nuw nsw i64 %350, 1, !dbg !3794
  %481 = getelementptr inbounds i8, i8* %334, i64 %480, !dbg !3703
  %482 = load i8, i8* %481, align 1, !dbg !3703, !tbaa !2186
  %483 = zext i8 %482 to i32, !dbg !3704
  call void @llvm.dbg.value(metadata i64 2, metadata !3428, metadata !DIExpression()), !dbg !3698
  call void @llvm.dbg.value(metadata !DIArgList(i32 %483, i32 %363), metadata !3421, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_constu, 8, DW_OP_shl, DW_OP_or, DW_OP_stack_value)), !dbg !3695
  %484 = shl nuw nsw i32 %363, 16, !dbg !3705
  %485 = shl nuw nsw i32 %483, 8, !dbg !3705
  %486 = or i32 %484, %485, !dbg !3705
  call void @llvm.dbg.value(metadata !DIArgList(i32 %484, i32 %485), metadata !3421, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_or, DW_OP_stack_value)), !dbg !3695
  %487 = icmp eq i32 %356, 2, !dbg !3699
  br i1 %487, label %493, label %488, !dbg !3702

488:                                              ; preds = %479
  %489 = add nuw nsw i64 %350, 2, !dbg !3794
  %490 = getelementptr inbounds i8, i8* %334, i64 %489, !dbg !3703
  %491 = load i8, i8* %490, align 1, !dbg !3703, !tbaa !2186
  %492 = zext i8 %491 to i32, !dbg !3704
  br label %493, !dbg !3702

493:                                              ; preds = %365, %488, %479
  %494 = phi i32 [ %486, %488 ], [ %486, %479 ], [ %366, %365 ]
  %495 = phi i32 [ %485, %488 ], [ %485, %479 ], [ 0, %365 ]
  %496 = phi i32 [ %492, %488 ], [ 0, %479 ], [ 0, %365 ], !dbg !3702
  %497 = or i32 %496, %495, !dbg !3795
  call void @llvm.dbg.value(metadata !DIArgList(i32 %496, i32 %484, i32 %485), metadata !3421, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_LLVM_arg, 2, DW_OP_or, DW_OP_or, DW_OP_stack_value)), !dbg !3695
  call void @llvm.dbg.value(metadata i64 3, metadata !3428, metadata !DIExpression()), !dbg !3698
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %339) #15, !dbg !3796
  call void @llvm.dbg.declare(metadata [4 x i8]* %11, metadata !3430, metadata !DIExpression()), !dbg !3797
  call void @llvm.dbg.value(metadata i64 0, metadata !3434, metadata !DIExpression()), !dbg !3798
  %498 = lshr i32 %363, 2, !dbg !3799
  %499 = zext i32 %498 to i64, !dbg !3802
  %500 = getelementptr inbounds [65 x i8], [65 x i8]* @BASE64_ENCODE_TABLE, i64 0, i64 %499, !dbg !3802
  %501 = load i8, i8* %500, align 1, !dbg !3802, !tbaa !2186
  store i8 %501, i8* %339, align 1, !dbg !3803, !tbaa !2186
  call void @llvm.dbg.value(metadata i64 1, metadata !3434, metadata !DIExpression()), !dbg !3798
  %502 = lshr i32 %494, 12, !dbg !3799
  %503 = and i32 %502, 63, !dbg !3804
  %504 = zext i32 %503 to i64, !dbg !3802
  %505 = getelementptr inbounds [65 x i8], [65 x i8]* @BASE64_ENCODE_TABLE, i64 0, i64 %504, !dbg !3802
  %506 = load i8, i8* %505, align 1, !dbg !3802, !tbaa !2186
  store i8 %506, i8* %344, align 1, !dbg !3803, !tbaa !2186
  call void @llvm.dbg.value(metadata i64 2, metadata !3434, metadata !DIExpression()), !dbg !3798
  %507 = lshr i32 %497, 6, !dbg !3799
  %508 = and i32 %507, 63, !dbg !3804
  %509 = zext i32 %508 to i64, !dbg !3802
  %510 = getelementptr inbounds [65 x i8], [65 x i8]* @BASE64_ENCODE_TABLE, i64 0, i64 %509, !dbg !3802
  %511 = load i8, i8* %510, align 1, !dbg !3802, !tbaa !2186
  store i8 %511, i8* %341, align 1, !dbg !3803, !tbaa !2186
  call void @llvm.dbg.value(metadata i64 3, metadata !3434, metadata !DIExpression()), !dbg !3798
  %512 = and i32 %496, 63, !dbg !3804
  %513 = zext i32 %512 to i64, !dbg !3802
  %514 = getelementptr inbounds [65 x i8], [65 x i8]* @BASE64_ENCODE_TABLE, i64 0, i64 %513, !dbg !3802
  %515 = load i8, i8* %514, align 1, !dbg !3802, !tbaa !2186
  call void @llvm.dbg.value(metadata i64 4, metadata !3434, metadata !DIExpression()), !dbg !3798
  %516 = extractvalue { i64, %struct.jv_refcnt* } %351, 0, !dbg !3469
  %517 = select i1 %355, i8 61, i8 %515, !dbg !3805
  store i8 %517, i8* %340, align 1, !dbg !3695, !tbaa !2186
  %518 = icmp slt i32 %356, 2, !dbg !3806
  br i1 %518, label %367, label %368, !dbg !3807

519:                                              ; preds = %181
  %520 = load i8, i8* %192, align 1, !dbg !3597, !tbaa !2186
  call void @llvm.dbg.value(metadata i8* %192, metadata !3396, metadata !DIExpression()), !dbg !3468
  %521 = getelementptr inbounds i8, i8* %183, i64 4, !dbg !3594
  call void @llvm.dbg.value(metadata i8* %521, metadata !3396, metadata !DIExpression()), !dbg !3468
  %522 = sext i8 %520 to i64, !dbg !3595
  %523 = getelementptr inbounds [128 x i32], [128 x i32]* %10, i64 0, i64 %522, !dbg !3595
  store i32 1, i32* %523, align 4, !dbg !3596, !tbaa !2095
  %524 = load i8, i8* %521, align 1, !dbg !3597, !tbaa !2186
  br label %181
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_env(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3808 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3811, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3811, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3810, metadata !DIExpression()), !dbg !3818
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3819
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_object() #15, !dbg !3820
  %5 = extractvalue { i64, %struct.jv_refcnt* } %4, 0, !dbg !3820
  call void @llvm.dbg.value(metadata i64 %5, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3818
  %6 = extractvalue { i64, %struct.jv_refcnt* } %4, 1, !dbg !3820
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %6, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3818
  %7 = load i8**, i8*** @environ, align 8, !dbg !3821, !tbaa !300
  call void @llvm.dbg.value(metadata i8** %7, metadata !3815, metadata !DIExpression()), !dbg !3822
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %6, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata i64 %5, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3818
  %8 = load i8*, i8** %7, align 8, !dbg !3823, !tbaa !300
  %9 = icmp eq i8* %8, null, !dbg !3825
  br i1 %9, label %10, label %15, !dbg !3826

10:                                               ; preds = %50, %3
  %11 = phi i64 [ %5, %3 ], [ %51, %50 ], !dbg !3818
  %12 = phi %struct.jv_refcnt* [ %6, %3 ], [ %52, %50 ], !dbg !3818
  %13 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %11, 0, !dbg !3827
  %14 = insertvalue { i64, %struct.jv_refcnt* } %13, %struct.jv_refcnt* %12, 1, !dbg !3827
  ret { i64, %struct.jv_refcnt* } %14, !dbg !3827

15:                                               ; preds = %3, %50
  %16 = phi i8* [ %54, %50 ], [ %8, %3 ]
  %17 = phi %struct.jv_refcnt* [ %52, %50 ], [ %6, %3 ]
  %18 = phi i64 [ %51, %50 ], [ %5, %3 ]
  %19 = phi i8** [ %53, %50 ], [ %7, %3 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %17, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata i64 %18, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata i8** %19, metadata !3815, metadata !DIExpression()), !dbg !3822
  call void @llvm.dbg.value(metadata i8* %16, metadata !3813, metadata !DIExpression()), !dbg !3818
  %20 = tail call i8* @strchr(i8* noundef nonnull %16, i32 61) #19, !dbg !3828
  call void @llvm.dbg.value(metadata i8* %20, metadata !3814, metadata !DIExpression()), !dbg !3818
  %21 = icmp eq i8* %20, null, !dbg !3830
  br i1 %21, label %22, label %32, !dbg !3832

22:                                               ; preds = %15
  %23 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* nonnull %16) #15, !dbg !3833
  %24 = extractvalue { i64, %struct.jv_refcnt* } %23, 0, !dbg !3833
  %25 = extractvalue { i64, %struct.jv_refcnt* } %23, 1, !dbg !3833
  %26 = tail call { i64, %struct.jv_refcnt* } @jv_null() #15, !dbg !3834
  %27 = extractvalue { i64, %struct.jv_refcnt* } %26, 0, !dbg !3834
  %28 = extractvalue { i64, %struct.jv_refcnt* } %26, 1, !dbg !3834
  %29 = tail call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %18, %struct.jv_refcnt* %17, i64 %24, %struct.jv_refcnt* %25, i64 %27, %struct.jv_refcnt* %28) #15, !dbg !3835
  %30 = extractvalue { i64, %struct.jv_refcnt* } %29, 0, !dbg !3835
  %31 = extractvalue { i64, %struct.jv_refcnt* } %29, 1, !dbg !3835
  call void @llvm.dbg.value(metadata i64 %30, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %31, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3818
  br label %50, !dbg !3836

32:                                               ; preds = %15
  %33 = ptrtoint i8* %16 to i64, !dbg !3837
  %34 = ptrtoint i8* %20 to i64, !dbg !3837
  %35 = sub i64 %33, %34, !dbg !3837
  %36 = icmp slt i64 %35, 2147483647, !dbg !3839
  br i1 %36, label %37, label %50, !dbg !3840

37:                                               ; preds = %32
  %38 = sub i64 %34, %33, !dbg !3841
  %39 = trunc i64 %38 to i32, !dbg !3842
  %40 = tail call { i64, %struct.jv_refcnt* } @jv_string_sized(i8* nonnull %16, i32 %39) #15, !dbg !3843
  %41 = extractvalue { i64, %struct.jv_refcnt* } %40, 0, !dbg !3843
  %42 = extractvalue { i64, %struct.jv_refcnt* } %40, 1, !dbg !3843
  %43 = getelementptr inbounds i8, i8* %20, i64 1, !dbg !3844
  %44 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* nonnull %43) #15, !dbg !3845
  %45 = extractvalue { i64, %struct.jv_refcnt* } %44, 0, !dbg !3845
  %46 = extractvalue { i64, %struct.jv_refcnt* } %44, 1, !dbg !3845
  %47 = tail call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %18, %struct.jv_refcnt* %17, i64 %41, %struct.jv_refcnt* %42, i64 %45, %struct.jv_refcnt* %46) #15, !dbg !3846
  %48 = extractvalue { i64, %struct.jv_refcnt* } %47, 0, !dbg !3846
  %49 = extractvalue { i64, %struct.jv_refcnt* } %47, 1, !dbg !3846
  call void @llvm.dbg.value(metadata i64 %48, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %49, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3818
  br label %50, !dbg !3847

50:                                               ; preds = %22, %37, %32
  %51 = phi i64 [ %30, %22 ], [ %48, %37 ], [ %18, %32 ], !dbg !3818
  %52 = phi %struct.jv_refcnt* [ %31, %22 ], [ %49, %37 ], [ %17, %32 ], !dbg !3818
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %52, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata i64 %51, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3818
  %53 = getelementptr inbounds i8*, i8** %19, i64 1, !dbg !3848
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %52, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata i64 %51, metadata !3812, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3818
  call void @llvm.dbg.value(metadata i8** %53, metadata !3815, metadata !DIExpression()), !dbg !3822
  %54 = load i8*, i8** %53, align 8, !dbg !3823, !tbaa !300
  %55 = icmp eq i8* %54, null, !dbg !3825
  br i1 %55, label %10, label %15, !dbg !3826, !llvm.loop !3849
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_halt(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3851 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3854, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3855
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3854, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3855
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3853, metadata !DIExpression()), !dbg !3855
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3856
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_invalid() #15, !dbg !3857
  %5 = extractvalue { i64, %struct.jv_refcnt* } %4, 0, !dbg !3857
  %6 = extractvalue { i64, %struct.jv_refcnt* } %4, 1, !dbg !3857
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_invalid() #15, !dbg !3858
  %8 = extractvalue { i64, %struct.jv_refcnt* } %7, 0, !dbg !3858
  %9 = extractvalue { i64, %struct.jv_refcnt* } %7, 1, !dbg !3858
  tail call void @jq_halt(%struct.jq_state* %0, i64 %5, %struct.jv_refcnt* %6, i64 %8, %struct.jv_refcnt* %9) #15, !dbg !3859
  %10 = tail call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !3860
  ret { i64, %struct.jv_refcnt* } %10, !dbg !3861
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_halt_error(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !3862 {
  %6 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %1, metadata !3865, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3867
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3865, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3867
  call void @llvm.dbg.value(metadata i64 %3, metadata !3866, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3867
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3866, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3867
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3864, metadata !DIExpression()), !dbg !3867
  %7 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3868
  %8 = icmp eq i32 %7, 4, !dbg !3870
  br i1 %8, label %21, label %9, !dbg !3871

9:                                                ; preds = %5
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !3872
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3874
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3874
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.199, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !3874
  %10 = getelementptr inbounds [15 x i8], [15 x i8]* %6, i64 0, i64 0, !dbg !3876
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %10) #15, !dbg !3876
  call void @llvm.dbg.declare(metadata [15 x i8]* %6, metadata !390, metadata !DIExpression()) #15, !dbg !3877
  %11 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3878
  %12 = tail call i8* @jv_kind_name(i32 %11) #15, !dbg !3879
  %13 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3880
  %14 = extractvalue { i64, %struct.jv_refcnt* } %13, 0, !dbg !3880
  %15 = extractvalue { i64, %struct.jv_refcnt* } %13, 1, !dbg !3880
  %16 = call i8* @jv_dump_string_trunc(i64 %14, %struct.jv_refcnt* %15, i8* nonnull %10, i64 15) #15, !dbg !3881
  %17 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %12, i8* %16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.199, i64 0, i64 0)) #15, !dbg !3882
  %18 = extractvalue { i64, %struct.jv_refcnt* } %17, 0, !dbg !3882
  %19 = extractvalue { i64, %struct.jv_refcnt* } %17, 1, !dbg !3882
  %20 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %18, %struct.jv_refcnt* %19) #15, !dbg !3883
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !3874
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !3874
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3884
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %10) #15, !dbg !3885
  br label %23, !dbg !3886

21:                                               ; preds = %5
  tail call void @jq_halt(%struct.jq_state* %0, i64 %3, %struct.jv_refcnt* %4, i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3887
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !3888
  br label %23, !dbg !3889

23:                                               ; preds = %21, %9
  %24 = phi { i64, %struct.jv_refcnt* } [ %20, %9 ], [ %22, %21 ]
  ret { i64, %struct.jv_refcnt* } %24, !dbg !3890
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_get_search_list(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3891 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3894, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3895
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3894, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3895
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3893, metadata !DIExpression()), !dbg !3895
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3896
  %4 = tail call { i64, %struct.jv_refcnt* } @jq_get_lib_dirs(%struct.jq_state* %0) #15, !dbg !3897
  ret { i64, %struct.jv_refcnt* } %4, !dbg !3898
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_get_prog_origin(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3899 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3902, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3903
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3902, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3903
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3901, metadata !DIExpression()), !dbg !3903
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3904
  %4 = tail call { i64, %struct.jv_refcnt* } @jq_get_prog_origin(%struct.jq_state* %0) #15, !dbg !3905
  ret { i64, %struct.jv_refcnt* } %4, !dbg !3906
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_get_jq_origin(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !3907 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !3910, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !3911
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3910, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !3911
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3909, metadata !DIExpression()), !dbg !3911
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !3912
  %4 = tail call { i64, %struct.jv_refcnt* } @jq_get_jq_origin(%struct.jq_state* %0) #15, !dbg !3913
  ret { i64, %struct.jv_refcnt* } %4, !dbg !3914
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_match(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %5, %struct.jv* nocapture readonly byval(%struct.jv) align 8 %6) #0 !dbg !3915 {
  %8 = alloca [15 x i8], align 1
  %9 = alloca [15 x i8], align 1
  %10 = alloca [15 x i8], align 1
  %11 = alloca %struct.re_pattern_buffer*, align 8
  %12 = alloca %struct.OnigErrorInfo, align 8
  %13 = alloca [90 x i8], align 16
  %14 = alloca %struct.jv, align 8
  %15 = alloca [90 x i8], align 16
  call void @llvm.dbg.value(metadata i64 %1, metadata !3918, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !3918, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata i64 %3, metadata !3919, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !3919, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !3917, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.declare(metadata %struct.jv* %5, metadata !3920, metadata !DIExpression()), !dbg !4160
  call void @llvm.dbg.declare(metadata %struct.jv* %6, metadata !3921, metadata !DIExpression()), !dbg !4161
  %16 = tail call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !4162
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !4162
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !4162
  %19 = bitcast %struct.jv* %6 to i64*, !dbg !4163
  %20 = load i64, i64* %19, align 8, !dbg !4163
  %21 = getelementptr inbounds %struct.jv, %struct.jv* %6, i64 0, i32 4, i32 0, !dbg !4163
  %22 = load %struct.jv_refcnt*, %struct.jv_refcnt** %21, align 8, !dbg !4163
  %23 = tail call i32 @jv_equal(i64 %20, %struct.jv_refcnt* %22, i64 %17, %struct.jv_refcnt* %18) #15, !dbg !4163
  call void @llvm.dbg.value(metadata i32 %23, metadata !3922, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 0, metadata !3925, metadata !DIExpression()), !dbg !4159
  %24 = bitcast %struct.re_pattern_buffer** %11 to i8*, !dbg !4164
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #15, !dbg !4164
  %25 = bitcast %struct.OnigErrorInfo* %12 to i8*, !dbg !4165
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #15, !dbg !4165
  call void @llvm.dbg.declare(metadata %struct.OnigErrorInfo* %12, metadata !4083, metadata !DIExpression()), !dbg !4166
  %26 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4167
  %27 = icmp eq i32 %26, 5, !dbg !4169
  br i1 %27, label %46, label %28, !dbg !4170

28:                                               ; preds = %7
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4171
  %29 = bitcast %struct.jv* %5 to i64*, !dbg !4173
  %30 = load i64, i64* %29, align 8, !dbg !4173
  %31 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !4173
  %32 = load %struct.jv_refcnt*, %struct.jv_refcnt** %31, align 8, !dbg !4173
  tail call void @jv_free(i64 %30, %struct.jv_refcnt* %32) #15, !dbg !4173
  call void @llvm.dbg.value(metadata i64 %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4174
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4174
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.200, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !4174
  %33 = getelementptr inbounds [15 x i8], [15 x i8]* %10, i64 0, i64 0, !dbg !4176
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %33) #15, !dbg !4176
  call void @llvm.dbg.declare(metadata [15 x i8]* %10, metadata !390, metadata !DIExpression()) #15, !dbg !4177
  %34 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4178
  %35 = tail call i8* @jv_kind_name(i32 %34) #15, !dbg !4179
  %36 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4180
  %37 = extractvalue { i64, %struct.jv_refcnt* } %36, 0, !dbg !4180
  %38 = extractvalue { i64, %struct.jv_refcnt* } %36, 1, !dbg !4180
  %39 = call i8* @jv_dump_string_trunc(i64 %37, %struct.jv_refcnt* %38, i8* nonnull %33, i64 15) #15, !dbg !4181
  %40 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %35, i8* %39, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.200, i64 0, i64 0)) #15, !dbg !4182
  %41 = extractvalue { i64, %struct.jv_refcnt* } %40, 0, !dbg !4182
  %42 = extractvalue { i64, %struct.jv_refcnt* } %40, 1, !dbg !4182
  %43 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %41, %struct.jv_refcnt* %42) #15, !dbg !4183
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4174
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4174
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4184
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %33) #15, !dbg !4185
  %44 = extractvalue { i64, %struct.jv_refcnt* } %43, 0, !dbg !4186
  %45 = extractvalue { i64, %struct.jv_refcnt* } %43, 1, !dbg !4186
  br label %604, !dbg !4187

46:                                               ; preds = %7
  %47 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4188
  %48 = icmp eq i32 %47, 5, !dbg !4190
  br i1 %48, label %67, label %49, !dbg !4191

49:                                               ; preds = %46
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4192
  %50 = bitcast %struct.jv* %5 to i64*, !dbg !4194
  %51 = load i64, i64* %50, align 8, !dbg !4194
  %52 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !4194
  %53 = load %struct.jv_refcnt*, %struct.jv_refcnt** %52, align 8, !dbg !4194
  tail call void @jv_free(i64 %51, %struct.jv_refcnt* %53) #15, !dbg !4194
  call void @llvm.dbg.value(metadata i64 %3, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4195
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4195
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.201, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !4195
  %54 = getelementptr inbounds [15 x i8], [15 x i8]* %9, i64 0, i64 0, !dbg !4197
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %54) #15, !dbg !4197
  call void @llvm.dbg.declare(metadata [15 x i8]* %9, metadata !390, metadata !DIExpression()) #15, !dbg !4198
  %55 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4199
  %56 = tail call i8* @jv_kind_name(i32 %55) #15, !dbg !4200
  %57 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4201
  %58 = extractvalue { i64, %struct.jv_refcnt* } %57, 0, !dbg !4201
  %59 = extractvalue { i64, %struct.jv_refcnt* } %57, 1, !dbg !4201
  %60 = call i8* @jv_dump_string_trunc(i64 %58, %struct.jv_refcnt* %59, i8* nonnull %54, i64 15) #15, !dbg !4202
  %61 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %56, i8* %60, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.201, i64 0, i64 0)) #15, !dbg !4203
  %62 = extractvalue { i64, %struct.jv_refcnt* } %61, 0, !dbg !4203
  %63 = extractvalue { i64, %struct.jv_refcnt* } %61, 1, !dbg !4203
  %64 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %62, %struct.jv_refcnt* %63) #15, !dbg !4204
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4195
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4195
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4205
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %54) #15, !dbg !4206
  %65 = extractvalue { i64, %struct.jv_refcnt* } %64, 0, !dbg !4207
  %66 = extractvalue { i64, %struct.jv_refcnt* } %64, 1, !dbg !4207
  br label %604, !dbg !4208

67:                                               ; preds = %46
  call void @llvm.dbg.value(metadata i32 256, metadata !4112, metadata !DIExpression()), !dbg !4159
  %68 = bitcast %struct.jv* %5 to i64*, !dbg !4209
  %69 = load i64, i64* %68, align 8, !dbg !4209
  %70 = getelementptr inbounds %struct.jv, %struct.jv* %5, i64 0, i32 4, i32 0, !dbg !4209
  %71 = load %struct.jv_refcnt*, %struct.jv_refcnt** %70, align 8, !dbg !4209
  %72 = tail call i32 @jv_get_kind(i64 %69, %struct.jv_refcnt* %71) #15, !dbg !4209
  %73 = icmp eq i32 %72, 5, !dbg !4210
  br i1 %73, label %74, label %130, !dbg !4211

74:                                               ; preds = %67
  %75 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %69, %struct.jv_refcnt* %71) #15, !dbg !4212
  %76 = extractvalue { i64, %struct.jv_refcnt* } %75, 0, !dbg !4212
  %77 = extractvalue { i64, %struct.jv_refcnt* } %75, 1, !dbg !4212
  %78 = tail call { i64, %struct.jv_refcnt* } @jv_string_explode(i64 %76, %struct.jv_refcnt* %77) #15, !dbg !4213
  %79 = extractvalue { i64, %struct.jv_refcnt* } %78, 0, !dbg !4213
  call void @llvm.dbg.value(metadata i64 %79, metadata !4113, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4214
  %80 = extractvalue { i64, %struct.jv_refcnt* } %78, 1, !dbg !4213
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %80, metadata !4113, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4214
  %81 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %79, %struct.jv_refcnt* %80) #15, !dbg !4215
  %82 = extractvalue { i64, %struct.jv_refcnt* } %81, 0, !dbg !4215
  %83 = extractvalue { i64, %struct.jv_refcnt* } %81, 1, !dbg !4215
  %84 = tail call i32 @jv_array_length(i64 %82, %struct.jv_refcnt* %83) #15, !dbg !4215
  call void @llvm.dbg.value(metadata i32 %84, metadata !4116, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata i32 0, metadata !4118, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata i32 1, metadata !4119, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata i32 0, metadata !3925, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 256, metadata !4112, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 undef, metadata !4119, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* poison, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4217
  call void @llvm.dbg.value(metadata i64 poison, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4217
  call void @llvm.dbg.value(metadata i32 0, metadata !3925, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 256, metadata !4112, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 0, metadata !4118, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata i32 0, metadata !3925, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 256, metadata !4112, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 0, metadata !4118, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4217
  call void @llvm.dbg.value(metadata i64 undef, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4217
  %85 = icmp sgt i32 %84, 0, !dbg !4218
  br i1 %85, label %86, label %127, !dbg !4218

86:                                               ; preds = %74, %112
  %87 = phi i32 [ %114, %112 ], [ 0, %74 ]
  %88 = phi i32 [ %113, %112 ], [ 256, %74 ]
  %89 = phi i32 [ %115, %112 ], [ 0, %74 ]
  call void @llvm.dbg.value(metadata i32 %87, metadata !3925, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 %88, metadata !4112, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 %89, metadata !4118, metadata !DIExpression()), !dbg !4216
  %90 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %79, %struct.jv_refcnt* %80) #15, !dbg !4218
  %91 = extractvalue { i64, %struct.jv_refcnt* } %90, 0, !dbg !4218
  %92 = extractvalue { i64, %struct.jv_refcnt* } %90, 1, !dbg !4218
  %93 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %91, %struct.jv_refcnt* %92, i32 %89) #15, !dbg !4218
  %94 = extractvalue { i64, %struct.jv_refcnt* } %93, 0, !dbg !4218
  %95 = extractvalue { i64, %struct.jv_refcnt* } %93, 1, !dbg !4218
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4217
  call void @llvm.dbg.value(metadata i64 undef, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4217
  %96 = tail call double @jv_number_value(i64 %94, %struct.jv_refcnt* %95) #15, !dbg !4220
  %97 = fptosi double %96 to i32, !dbg !4222
  switch i32 %97, label %117 [
    i32 103, label %112
    i32 105, label %98
    i32 120, label %100
    i32 109, label %102
    i32 115, label %104
    i32 112, label %106
    i32 108, label %108
    i32 110, label %110
  ], !dbg !4223

98:                                               ; preds = %86
  %99 = or i32 %88, 1, !dbg !4224
  call void @llvm.dbg.value(metadata i32 %99, metadata !4112, metadata !DIExpression()), !dbg !4159
  br label %112, !dbg !4226

100:                                              ; preds = %86
  %101 = or i32 %88, 2, !dbg !4227
  call void @llvm.dbg.value(metadata i32 %101, metadata !4112, metadata !DIExpression()), !dbg !4159
  br label %112, !dbg !4228

102:                                              ; preds = %86
  %103 = or i32 %88, 4, !dbg !4229
  call void @llvm.dbg.value(metadata i32 %103, metadata !4112, metadata !DIExpression()), !dbg !4159
  br label %112, !dbg !4230

104:                                              ; preds = %86
  %105 = or i32 %88, 8, !dbg !4231
  call void @llvm.dbg.value(metadata i32 %105, metadata !4112, metadata !DIExpression()), !dbg !4159
  br label %112, !dbg !4232

106:                                              ; preds = %86
  %107 = or i32 %88, 12, !dbg !4233
  call void @llvm.dbg.value(metadata i32 %107, metadata !4112, metadata !DIExpression()), !dbg !4159
  br label %112, !dbg !4234

108:                                              ; preds = %86
  %109 = or i32 %88, 16, !dbg !4235
  call void @llvm.dbg.value(metadata i32 %109, metadata !4112, metadata !DIExpression()), !dbg !4159
  br label %112, !dbg !4236

110:                                              ; preds = %86
  %111 = or i32 %88, 32, !dbg !4237
  call void @llvm.dbg.value(metadata i32 %111, metadata !4112, metadata !DIExpression()), !dbg !4159
  br label %112, !dbg !4238

112:                                              ; preds = %86, %98, %100, %102, %104, %106, %108, %110
  %113 = phi i32 [ %111, %110 ], [ %109, %108 ], [ %107, %106 ], [ %105, %104 ], [ %103, %102 ], [ %101, %100 ], [ %99, %98 ], [ %88, %86 ], !dbg !4159
  %114 = phi i32 [ %87, %110 ], [ %87, %108 ], [ %87, %106 ], [ %87, %104 ], [ %87, %102 ], [ %87, %100 ], [ %87, %98 ], [ 1, %86 ], !dbg !4159
  call void @llvm.dbg.value(metadata i32 %114, metadata !3925, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 %113, metadata !4112, metadata !DIExpression()), !dbg !4159
  %115 = add nuw nsw i32 %89, 1, !dbg !4218
  call void @llvm.dbg.value(metadata i32 %115, metadata !4118, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4217
  call void @llvm.dbg.value(metadata i64 undef, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4217
  %116 = icmp eq i32 %115, %84, !dbg !4218
  br i1 %116, label %127, label %86, !dbg !4218, !llvm.loop !4239

117:                                              ; preds = %86
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4242
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4243
  tail call void @jv_free(i64 %79, %struct.jv_refcnt* %80) #15, !dbg !4244
  %118 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.202, i64 0, i64 0)) #15, !dbg !4245
  %119 = extractvalue { i64, %struct.jv_refcnt* } %118, 0, !dbg !4245
  %120 = extractvalue { i64, %struct.jv_refcnt* } %118, 1, !dbg !4245
  %121 = tail call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %69, %struct.jv_refcnt* %71, i64 %119, %struct.jv_refcnt* %120) #15, !dbg !4246
  %122 = extractvalue { i64, %struct.jv_refcnt* } %121, 0, !dbg !4246
  %123 = extractvalue { i64, %struct.jv_refcnt* } %121, 1, !dbg !4246
  %124 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %122, %struct.jv_refcnt* %123) #15, !dbg !4247
  %125 = extractvalue { i64, %struct.jv_refcnt* } %124, 0, !dbg !4247
  %126 = extractvalue { i64, %struct.jv_refcnt* } %124, 1, !dbg !4247
  call void @llvm.dbg.value(metadata i32 undef, metadata !3925, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 undef, metadata !4112, metadata !DIExpression()), !dbg !4159
  br label %604

127:                                              ; preds = %112, %74
  %128 = phi i32 [ 256, %74 ], [ %113, %112 ], !dbg !4248
  %129 = phi i32 [ 0, %74 ], [ %114, %112 ], !dbg !4249
  call void @llvm.dbg.value(metadata i32 undef, metadata !4118, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata i32 undef, metadata !4119, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* poison, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4217
  call void @llvm.dbg.value(metadata i64 poison, metadata !4120, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4217
  call void @llvm.dbg.value(metadata i32 undef, metadata !3925, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 undef, metadata !4112, metadata !DIExpression()), !dbg !4159
  tail call void @jv_free(i64 %79, %struct.jv_refcnt* %80) #15, !dbg !4250
  br label %147

130:                                              ; preds = %67
  %131 = tail call i32 @jv_get_kind(i64 %69, %struct.jv_refcnt* %71) #15, !dbg !4251
  %132 = icmp eq i32 %131, 1, !dbg !4253
  br i1 %132, label %147, label %133, !dbg !4254

133:                                              ; preds = %130
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4255
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4257
  call void @llvm.dbg.value(metadata i64 %69, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4258
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %71, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4258
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.201, i64 0, i64 0), metadata !389, metadata !DIExpression()) #15, !dbg !4258
  %134 = getelementptr inbounds [15 x i8], [15 x i8]* %8, i64 0, i64 0, !dbg !4260
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %134) #15, !dbg !4260
  call void @llvm.dbg.declare(metadata [15 x i8]* %8, metadata !390, metadata !DIExpression()) #15, !dbg !4261
  %135 = tail call i32 @jv_get_kind(i64 %69, %struct.jv_refcnt* %71) #15, !dbg !4262
  %136 = tail call i8* @jv_kind_name(i32 %135) #15, !dbg !4263
  %137 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %69, %struct.jv_refcnt* %71) #15, !dbg !4264
  %138 = extractvalue { i64, %struct.jv_refcnt* } %137, 0, !dbg !4264
  %139 = extractvalue { i64, %struct.jv_refcnt* } %137, 1, !dbg !4264
  %140 = call i8* @jv_dump_string_trunc(i64 %138, %struct.jv_refcnt* %139, i8* nonnull %134, i64 15) #15, !dbg !4265
  %141 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %136, i8* %140, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.201, i64 0, i64 0)) #15, !dbg !4266
  %142 = extractvalue { i64, %struct.jv_refcnt* } %141, 0, !dbg !4266
  %143 = extractvalue { i64, %struct.jv_refcnt* } %141, 1, !dbg !4266
  %144 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %142, %struct.jv_refcnt* %143) #15, !dbg !4267
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4258
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4258
  call void @jv_free(i64 %69, %struct.jv_refcnt* %71) #15, !dbg !4268
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %134) #15, !dbg !4269
  %145 = extractvalue { i64, %struct.jv_refcnt* } %144, 0, !dbg !4270
  %146 = extractvalue { i64, %struct.jv_refcnt* } %144, 1, !dbg !4270
  br label %604, !dbg !4271

147:                                              ; preds = %127, %130
  %148 = phi i32 [ %128, %127 ], [ 256, %130 ], !dbg !4248
  %149 = phi i32 [ %129, %127 ], [ 0, %130 ], !dbg !4249
  call void @llvm.dbg.value(metadata i32 %149, metadata !3925, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.value(metadata i32 %148, metadata !4112, metadata !DIExpression()), !dbg !4159
  tail call void @jv_free(i64 %69, %struct.jv_refcnt* %71) #15, !dbg !4272
  %150 = tail call i8* @jv_string_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4273
  %151 = tail call i8* @jv_string_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4274
  %152 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4275
  %153 = extractvalue { i64, %struct.jv_refcnt* } %152, 0, !dbg !4275
  %154 = extractvalue { i64, %struct.jv_refcnt* } %152, 1, !dbg !4275
  %155 = tail call i32 @jv_string_length_bytes(i64 %153, %struct.jv_refcnt* %154) #15, !dbg !4276
  %156 = sext i32 %155 to i64, !dbg !4277
  %157 = getelementptr inbounds i8, i8* %151, i64 %156, !dbg !4277
  call void @llvm.dbg.value(metadata %struct.re_pattern_buffer** %11, metadata !3926, metadata !DIExpression(DW_OP_deref)), !dbg !4159
  %158 = call i32 @onig_new(%struct.re_pattern_buffer** nonnull %11, i8* %150, i8* %157, i32 %148, %struct.OnigEncodingTypeST* nonnull @OnigEncodingUTF8, %struct.OnigSyntaxType* nonnull @OnigSyntaxPerl_NG, %struct.OnigErrorInfo* nonnull %12) #15, !dbg !4278
  call void @llvm.dbg.value(metadata i32 %158, metadata !3924, metadata !DIExpression()), !dbg !4159
  %159 = icmp eq i32 %158, 0, !dbg !4279
  br i1 %159, label %175, label %160, !dbg !4280

160:                                              ; preds = %147
  %161 = getelementptr inbounds [90 x i8], [90 x i8]* %13, i64 0, i64 0, !dbg !4281
  call void @llvm.lifetime.start.p0i8(i64 90, i8* nonnull %161) #15, !dbg !4281
  call void @llvm.dbg.declare(metadata [90 x i8]* %13, metadata !4123, metadata !DIExpression()), !dbg !4282
  %162 = call i32 (i8*, i32, %struct.OnigErrorInfo*, ...) bitcast (i32 (...)* @onig_error_code_to_str to i32 (i8*, i32, %struct.OnigErrorInfo*, ...)*)(i8* nonnull %161, i32 %158, %struct.OnigErrorInfo* nonnull %12) #15, !dbg !4283
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4284
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4285
  %163 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.203, i64 0, i64 0)) #15, !dbg !4286
  %164 = extractvalue { i64, %struct.jv_refcnt* } %163, 0, !dbg !4286
  %165 = extractvalue { i64, %struct.jv_refcnt* } %163, 1, !dbg !4286
  %166 = call { i64, %struct.jv_refcnt* } @jv_string(i8* nonnull %161) #15, !dbg !4287
  %167 = extractvalue { i64, %struct.jv_refcnt* } %166, 0, !dbg !4287
  %168 = extractvalue { i64, %struct.jv_refcnt* } %166, 1, !dbg !4287
  %169 = call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %164, %struct.jv_refcnt* %165, i64 %167, %struct.jv_refcnt* %168) #15, !dbg !4288
  %170 = extractvalue { i64, %struct.jv_refcnt* } %169, 0, !dbg !4288
  %171 = extractvalue { i64, %struct.jv_refcnt* } %169, 1, !dbg !4288
  %172 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %170, %struct.jv_refcnt* %171) #15, !dbg !4289
  %173 = extractvalue { i64, %struct.jv_refcnt* } %172, 0, !dbg !4289
  %174 = extractvalue { i64, %struct.jv_refcnt* } %172, 1, !dbg !4289
  call void @llvm.lifetime.end.p0i8(i64 90, i8* nonnull %161) #15, !dbg !4290
  br label %604

175:                                              ; preds = %147
  %176 = icmp eq i32 %23, 0, !dbg !4291
  br i1 %176, label %179, label %177, !dbg !4291

177:                                              ; preds = %175
  %178 = call { i64, %struct.jv_refcnt* } @jv_false() #15, !dbg !4292
  call void @llvm.dbg.value(metadata i64 undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  br label %181, !dbg !4291

179:                                              ; preds = %175
  %180 = call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !4293
  call void @llvm.dbg.value(metadata i64 undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  br label %181, !dbg !4291

181:                                              ; preds = %179, %177
  %182 = phi { i64, %struct.jv_refcnt* } [ %178, %177 ], [ %180, %179 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata i64 undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  %183 = call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4294
  call void @llvm.dbg.value(metadata i8* %183, metadata !4129, metadata !DIExpression()), !dbg !4159
  %184 = call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4295
  call void @llvm.dbg.value(metadata i8* %184, metadata !4130, metadata !DIExpression()), !dbg !4159
  %185 = call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4296
  %186 = extractvalue { i64, %struct.jv_refcnt* } %185, 0, !dbg !4296
  %187 = extractvalue { i64, %struct.jv_refcnt* } %185, 1, !dbg !4296
  %188 = call i32 @jv_string_length_bytes(i64 %186, %struct.jv_refcnt* %187) #15, !dbg !4297
  %189 = sext i32 %188 to i64, !dbg !4297
  call void @llvm.dbg.value(metadata i64 %189, metadata !4131, metadata !DIExpression()), !dbg !4159
  %190 = getelementptr inbounds i8, i8* %184, i64 %189, !dbg !4298
  call void @llvm.dbg.value(metadata i8* %190, metadata !4133, metadata !DIExpression()), !dbg !4159
  %191 = call %struct.re_registers* @onig_region_new() #15, !dbg !4299
  call void @llvm.dbg.value(metadata %struct.re_registers* %191, metadata !4090, metadata !DIExpression()), !dbg !4159
  %192 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %191, i64 0, i32 3
  %193 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %191, i64 0, i32 2
  %194 = getelementptr inbounds %struct.jv, %struct.jv* %14, i64 0, i32 0
  %195 = bitcast %struct.jv* %14 to i64*
  %196 = getelementptr inbounds %struct.jv, %struct.jv* %14, i64 0, i32 4, i32 0
  %197 = getelementptr inbounds %struct.re_registers, %struct.re_registers* %191, i64 0, i32 1
  %198 = icmp ne i32 %149, 0
  br label %199, !dbg !4300

199:                                              ; preds = %592, %181
  %200 = phi i8* [ %184, %181 ], [ %593, %592 ], !dbg !4159
  %201 = phi { i64, %struct.jv_refcnt* } [ %182, %181 ], [ %594, %592 ]
  %202 = extractvalue { i64, %struct.jv_refcnt* } %201, 1, !dbg !4159
  %203 = extractvalue { i64, %struct.jv_refcnt* } %201, 0, !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %202, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata i64 %203, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata i8* %200, metadata !4130, metadata !DIExpression()), !dbg !4159
  %204 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %11, align 8, !dbg !4301, !tbaa !300
  call void @llvm.dbg.value(metadata %struct.re_pattern_buffer* %204, metadata !3926, metadata !DIExpression()), !dbg !4159
  %205 = call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4302
  %206 = call i32 @onig_search(%struct.re_pattern_buffer* %204, i8* %205, i8* %190, i8* %200, i8* %190, %struct.re_registers* %191, i32 0) #15, !dbg !4303
  call void @llvm.dbg.value(metadata i32 %206, metadata !3924, metadata !DIExpression()), !dbg !4159
  %207 = icmp sgt i32 %206, -1, !dbg !4304
  br i1 %207, label %208, label %573, !dbg !4305

208:                                              ; preds = %199
  br i1 %176, label %213, label %209, !dbg !4306

209:                                              ; preds = %208
  %210 = call { i64, %struct.jv_refcnt* } @jv_true() #15, !dbg !4307
  %211 = extractvalue { i64, %struct.jv_refcnt* } %210, 0, !dbg !4307
  %212 = extractvalue { i64, %struct.jv_refcnt* } %210, 1, !dbg !4307
  call void @llvm.dbg.value(metadata i64 %211, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %212, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  br label %600, !dbg !4310

213:                                              ; preds = %208
  %214 = load i32*, i32** %192, align 8, !dbg !4311, !tbaa !4312
  %215 = load i32, i32* %214, align 4, !dbg !4314, !tbaa !2095
  %216 = load i32*, i32** %193, align 8, !dbg !4315, !tbaa !4316
  %217 = load i32, i32* %216, align 4, !dbg !4317, !tbaa !2095
  %218 = icmp eq i32 %215, %217, !dbg !4318
  %219 = icmp sgt i32 %215, 0, !dbg !4319
  br i1 %218, label %230, label %220, !dbg !4320

220:                                              ; preds = %213
  call void @llvm.dbg.value(metadata i64 0, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 0, metadata !4143, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i8* %183, metadata !4144, metadata !DIExpression()), !dbg !4319
  br i1 %219, label %221, label %309, !dbg !4321

221:                                              ; preds = %220
  call void @llvm.dbg.value(metadata i64 0, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 0, metadata !4143, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i8* %183, metadata !4144, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 0, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 undef, metadata !4143, metadata !DIExpression()), !dbg !4319
  %222 = load i8, i8* %183, align 1, !dbg !4323, !tbaa !2186
  %223 = call i32 @jvp_utf8_decode_length(i8 signext %222) #15, !dbg !4326
  call void @llvm.dbg.value(metadata !DIArgList(i8* %183, i32 %223), metadata !4144, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_constu, 1, DW_OP_mul, DW_OP_plus, DW_OP_stack_value)), !dbg !4319
  call void @llvm.dbg.value(metadata i64 1, metadata !4143, metadata !DIExpression()), !dbg !4319
  %224 = load i32*, i32** %192, align 8, !dbg !4327, !tbaa !4312
  %225 = load i32, i32* %224, align 4, !dbg !4328, !tbaa !2095
  %226 = icmp slt i32 %223, %225, !dbg !4329
  br i1 %226, label %227, label %309, !dbg !4321, !llvm.loop !4330

227:                                              ; preds = %221
  %228 = sext i32 %223 to i64, !dbg !4332
  call void @llvm.dbg.value(metadata !DIArgList(i8* %183, i64 %228), metadata !4144, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_constu, 1, DW_OP_mul, DW_OP_plus, DW_OP_stack_value)), !dbg !4319
  %229 = getelementptr inbounds i8, i8* %183, i64 %228, !dbg !4332
  call void @llvm.dbg.value(metadata i8* %229, metadata !4144, metadata !DIExpression()), !dbg !4319
  br label %288, !dbg !4321

230:                                              ; preds = %213
  call void @llvm.dbg.value(metadata i64 0, metadata !4134, metadata !DIExpression()), !dbg !4333
  call void @llvm.dbg.value(metadata i8* %183, metadata !4140, metadata !DIExpression()), !dbg !4333
  br i1 %219, label %231, label %244, !dbg !4334

231:                                              ; preds = %230, %231
  %232 = phi i64 [ %238, %231 ], [ 0, %230 ]
  %233 = phi i8* [ %237, %231 ], [ %183, %230 ]
  call void @llvm.dbg.value(metadata i64 %232, metadata !4134, metadata !DIExpression()), !dbg !4333
  call void @llvm.dbg.value(metadata i8* %233, metadata !4140, metadata !DIExpression()), !dbg !4333
  %234 = load i8, i8* %233, align 1, !dbg !4336, !tbaa !2186
  %235 = call i32 @jvp_utf8_decode_length(i8 signext %234) #15, !dbg !4339
  %236 = sext i32 %235 to i64, !dbg !4340
  %237 = getelementptr inbounds i8, i8* %233, i64 %236, !dbg !4340
  call void @llvm.dbg.value(metadata i8* %237, metadata !4140, metadata !DIExpression()), !dbg !4333
  %238 = add i64 %232, 1, !dbg !4341
  call void @llvm.dbg.value(metadata i64 %238, metadata !4134, metadata !DIExpression()), !dbg !4333
  %239 = load i32*, i32** %193, align 8, !dbg !4342, !tbaa !4316
  %240 = load i32, i32* %239, align 4, !dbg !4343, !tbaa !2095
  %241 = sext i32 %240 to i64, !dbg !4344
  %242 = getelementptr inbounds i8, i8* %183, i64 %241, !dbg !4344
  %243 = icmp ult i8* %237, %242, !dbg !4345
  br i1 %243, label %231, label %244, !dbg !4334, !llvm.loop !4346

244:                                              ; preds = %231, %230
  %245 = phi i64 [ 0, %230 ], [ %238, %231 ], !dbg !4348
  %246 = call { i64, %struct.jv_refcnt* } @jv_object() #15, !dbg !4349
  %247 = extractvalue { i64, %struct.jv_refcnt* } %246, 0, !dbg !4349
  %248 = extractvalue { i64, %struct.jv_refcnt* } %246, 1, !dbg !4349
  %249 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.204, i64 0, i64 0)) #15, !dbg !4350
  %250 = extractvalue { i64, %struct.jv_refcnt* } %249, 0, !dbg !4350
  %251 = extractvalue { i64, %struct.jv_refcnt* } %249, 1, !dbg !4350
  %252 = uitofp i64 %245 to double, !dbg !4351
  %253 = call { i64, %struct.jv_refcnt* } @jv_number(double %252) #15, !dbg !4352
  %254 = extractvalue { i64, %struct.jv_refcnt* } %253, 0, !dbg !4352
  %255 = extractvalue { i64, %struct.jv_refcnt* } %253, 1, !dbg !4352
  %256 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %247, %struct.jv_refcnt* %248, i64 %250, %struct.jv_refcnt* %251, i64 %254, %struct.jv_refcnt* %255) #15, !dbg !4353
  %257 = extractvalue { i64, %struct.jv_refcnt* } %256, 0, !dbg !4353
  call void @llvm.dbg.value(metadata i64 %257, metadata !4141, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4333
  %258 = extractvalue { i64, %struct.jv_refcnt* } %256, 1, !dbg !4353
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %258, metadata !4141, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4333
  %259 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i64 0, i64 0)) #15, !dbg !4354
  %260 = extractvalue { i64, %struct.jv_refcnt* } %259, 0, !dbg !4354
  %261 = extractvalue { i64, %struct.jv_refcnt* } %259, 1, !dbg !4354
  %262 = call { i64, %struct.jv_refcnt* } @jv_number(double 0.000000e+00) #15, !dbg !4355
  %263 = extractvalue { i64, %struct.jv_refcnt* } %262, 0, !dbg !4355
  %264 = extractvalue { i64, %struct.jv_refcnt* } %262, 1, !dbg !4355
  %265 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %257, %struct.jv_refcnt* %258, i64 %260, %struct.jv_refcnt* %261, i64 %263, %struct.jv_refcnt* %264) #15, !dbg !4356
  %266 = extractvalue { i64, %struct.jv_refcnt* } %265, 0, !dbg !4356
  %267 = extractvalue { i64, %struct.jv_refcnt* } %265, 1, !dbg !4356
  call void @llvm.dbg.value(metadata i64 %266, metadata !4141, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %267, metadata !4141, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4333
  %268 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.205, i64 0, i64 0)) #15, !dbg !4357
  %269 = extractvalue { i64, %struct.jv_refcnt* } %268, 0, !dbg !4357
  %270 = extractvalue { i64, %struct.jv_refcnt* } %268, 1, !dbg !4357
  %271 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)) #15, !dbg !4358
  %272 = extractvalue { i64, %struct.jv_refcnt* } %271, 0, !dbg !4358
  %273 = extractvalue { i64, %struct.jv_refcnt* } %271, 1, !dbg !4358
  %274 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %266, %struct.jv_refcnt* %267, i64 %269, %struct.jv_refcnt* %270, i64 %272, %struct.jv_refcnt* %273) #15, !dbg !4359
  %275 = extractvalue { i64, %struct.jv_refcnt* } %274, 0, !dbg !4359
  %276 = extractvalue { i64, %struct.jv_refcnt* } %274, 1, !dbg !4359
  call void @llvm.dbg.value(metadata i64 %275, metadata !4141, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %276, metadata !4141, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4333
  %277 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.206, i64 0, i64 0)) #15, !dbg !4360
  %278 = extractvalue { i64, %struct.jv_refcnt* } %277, 0, !dbg !4360
  %279 = extractvalue { i64, %struct.jv_refcnt* } %277, 1, !dbg !4360
  %280 = call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !4361
  %281 = extractvalue { i64, %struct.jv_refcnt* } %280, 0, !dbg !4361
  %282 = extractvalue { i64, %struct.jv_refcnt* } %280, 1, !dbg !4361
  %283 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %275, %struct.jv_refcnt* %276, i64 %278, %struct.jv_refcnt* %279, i64 %281, %struct.jv_refcnt* %282) #15, !dbg !4362
  %284 = extractvalue { i64, %struct.jv_refcnt* } %283, 0, !dbg !4362
  %285 = extractvalue { i64, %struct.jv_refcnt* } %283, 1, !dbg !4362
  call void @llvm.dbg.value(metadata i64 %284, metadata !4141, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4333
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %285, metadata !4141, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4333
  %286 = call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %203, %struct.jv_refcnt* %202, i64 %284, %struct.jv_refcnt* %285) #15, !dbg !4363
  call void @llvm.dbg.value(metadata i64 undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  %287 = getelementptr inbounds i8, i8* %200, i64 1, !dbg !4364
  call void @llvm.dbg.value(metadata i8* %287, metadata !4130, metadata !DIExpression()), !dbg !4159
  br label %592

288:                                              ; preds = %227, %288
  %289 = phi i64 [ 1, %227 ], [ %303, %288 ]
  %290 = phi i8* [ %229, %227 ], [ %301, %288 ]
  %291 = phi i64 [ 0, %227 ], [ %297, %288 ]
  %292 = load i32*, i32** %193, align 8, !dbg !4365, !tbaa !4316
  %293 = load i32, i32* %292, align 4, !dbg !4367, !tbaa !2095
  call void @llvm.dbg.value(metadata i64 %291, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 %289, metadata !4143, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i8* %290, metadata !4144, metadata !DIExpression()), !dbg !4319
  %294 = sext i32 %293 to i64, !dbg !4368
  %295 = getelementptr inbounds i8, i8* %183, i64 %294, !dbg !4368
  %296 = icmp eq i8* %290, %295, !dbg !4369
  %297 = select i1 %296, i64 %289, i64 %291, !dbg !4370
  call void @llvm.dbg.value(metadata i64 %297, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 undef, metadata !4143, metadata !DIExpression()), !dbg !4319
  %298 = load i8, i8* %290, align 1, !dbg !4323, !tbaa !2186
  %299 = call i32 @jvp_utf8_decode_length(i8 signext %298) #15, !dbg !4326
  %300 = sext i32 %299 to i64, !dbg !4332
  %301 = getelementptr inbounds i8, i8* %290, i64 %300, !dbg !4332
  call void @llvm.dbg.value(metadata i8* %301, metadata !4144, metadata !DIExpression()), !dbg !4319
  %302 = add i64 %289, 1, !dbg !4371
  %303 = select i1 %296, i64 1, i64 %302, !dbg !4371
  call void @llvm.dbg.value(metadata i64 %303, metadata !4143, metadata !DIExpression()), !dbg !4319
  %304 = load i32*, i32** %192, align 8, !dbg !4327, !tbaa !4312
  %305 = load i32, i32* %304, align 4, !dbg !4328, !tbaa !2095
  %306 = sext i32 %305 to i64, !dbg !4372
  %307 = getelementptr inbounds i8, i8* %183, i64 %306, !dbg !4372
  %308 = icmp ult i8* %301, %307, !dbg !4329
  br i1 %308, label %288, label %309, !dbg !4321, !llvm.loop !4330

309:                                              ; preds = %288, %221, %220
  %310 = phi i64 [ 0, %220 ], [ 1, %221 ], [ %303, %288 ], !dbg !4373
  %311 = phi i64 [ 0, %220 ], [ 0, %221 ], [ %297, %288 ], !dbg !4373
  %312 = call { i64, %struct.jv_refcnt* } @jv_object() #15, !dbg !4374
  %313 = extractvalue { i64, %struct.jv_refcnt* } %312, 0, !dbg !4374
  %314 = extractvalue { i64, %struct.jv_refcnt* } %312, 1, !dbg !4374
  %315 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.204, i64 0, i64 0)) #15, !dbg !4375
  %316 = extractvalue { i64, %struct.jv_refcnt* } %315, 0, !dbg !4375
  %317 = extractvalue { i64, %struct.jv_refcnt* } %315, 1, !dbg !4375
  %318 = uitofp i64 %311 to double, !dbg !4376
  %319 = call { i64, %struct.jv_refcnt* } @jv_number(double %318) #15, !dbg !4377
  %320 = extractvalue { i64, %struct.jv_refcnt* } %319, 0, !dbg !4377
  %321 = extractvalue { i64, %struct.jv_refcnt* } %319, 1, !dbg !4377
  %322 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %313, %struct.jv_refcnt* %314, i64 %316, %struct.jv_refcnt* %317, i64 %320, %struct.jv_refcnt* %321) #15, !dbg !4378
  %323 = extractvalue { i64, %struct.jv_refcnt* } %322, 0, !dbg !4378
  call void @llvm.dbg.value(metadata i64 %323, metadata !4145, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4319
  %324 = extractvalue { i64, %struct.jv_refcnt* } %322, 1, !dbg !4378
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %324, metadata !4145, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4319
  %325 = load i32*, i32** %192, align 8, !dbg !4379, !tbaa !4312
  %326 = load i32, i32* %325, align 4, !dbg !4380, !tbaa !2095
  %327 = load i32*, i32** %193, align 8, !dbg !4381, !tbaa !4316
  %328 = load i32, i32* %327, align 4, !dbg !4382, !tbaa !2095
  %329 = sub nsw i32 %326, %328, !dbg !4383
  call void @llvm.dbg.value(metadata i32 %329, metadata !4146, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_stack_value)), !dbg !4319
  %330 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i64 0, i64 0)) #15, !dbg !4384
  %331 = extractvalue { i64, %struct.jv_refcnt* } %330, 0, !dbg !4384
  %332 = extractvalue { i64, %struct.jv_refcnt* } %330, 1, !dbg !4384
  %333 = uitofp i64 %310 to double, !dbg !4385
  %334 = call { i64, %struct.jv_refcnt* } @jv_number(double %333) #15, !dbg !4386
  %335 = extractvalue { i64, %struct.jv_refcnt* } %334, 0, !dbg !4386
  %336 = extractvalue { i64, %struct.jv_refcnt* } %334, 1, !dbg !4386
  %337 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %323, %struct.jv_refcnt* %324, i64 %331, %struct.jv_refcnt* %332, i64 %335, %struct.jv_refcnt* %336) #15, !dbg !4387
  %338 = extractvalue { i64, %struct.jv_refcnt* } %337, 0, !dbg !4387
  %339 = extractvalue { i64, %struct.jv_refcnt* } %337, 1, !dbg !4387
  call void @llvm.dbg.value(metadata i64 %338, metadata !4145, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4319
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %339, metadata !4145, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4319
  %340 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.205, i64 0, i64 0)) #15, !dbg !4388
  %341 = extractvalue { i64, %struct.jv_refcnt* } %340, 0, !dbg !4388
  %342 = extractvalue { i64, %struct.jv_refcnt* } %340, 1, !dbg !4388
  %343 = load i32*, i32** %193, align 8, !dbg !4389, !tbaa !4316
  %344 = load i32, i32* %343, align 4, !dbg !4390, !tbaa !2095
  %345 = sext i32 %344 to i64, !dbg !4391
  %346 = getelementptr inbounds i8, i8* %183, i64 %345, !dbg !4391
  %347 = call { i64, %struct.jv_refcnt* } @jv_string_sized(i8* %346, i32 %329) #15, !dbg !4392
  %348 = extractvalue { i64, %struct.jv_refcnt* } %347, 0, !dbg !4392
  %349 = extractvalue { i64, %struct.jv_refcnt* } %347, 1, !dbg !4392
  %350 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %338, %struct.jv_refcnt* %339, i64 %341, %struct.jv_refcnt* %342, i64 %348, %struct.jv_refcnt* %349) #15, !dbg !4393
  %351 = extractvalue { i64, %struct.jv_refcnt* } %350, 0, !dbg !4393
  %352 = extractvalue { i64, %struct.jv_refcnt* } %350, 1, !dbg !4393
  call void @llvm.dbg.value(metadata i64 %351, metadata !4145, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4319
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %352, metadata !4145, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4319
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %194) #15, !dbg !4394
  call void @llvm.dbg.declare(metadata %struct.jv* %14, metadata !4147, metadata !DIExpression()), !dbg !4395
  %353 = call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !4396
  %354 = extractvalue { i64, %struct.jv_refcnt* } %353, 0, !dbg !4396
  store i64 %354, i64* %195, align 8, !dbg !4396
  %355 = extractvalue { i64, %struct.jv_refcnt* } %353, 1, !dbg !4396
  store %struct.jv_refcnt* %355, %struct.jv_refcnt** %196, align 8, !dbg !4396
  call void @llvm.dbg.value(metadata i32 1, metadata !4148, metadata !DIExpression()), !dbg !4397
  %356 = load i32, i32* %197, align 4, !dbg !4398, !tbaa !4399
  %357 = icmp sgt i32 %356, 1, !dbg !4400
  br i1 %357, label %374, label %358, !dbg !4401

358:                                              ; preds = %565, %309
  %359 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %11, align 8, !dbg !4402, !tbaa !300
  call void @llvm.dbg.value(metadata %struct.re_pattern_buffer* %359, metadata !3926, metadata !DIExpression()), !dbg !4159
  %360 = call i32 @onig_foreach_name(%struct.re_pattern_buffer* %359, i32 (i8*, i8*, i32, i32*, %struct.re_pattern_buffer*, i8*)* nonnull @f_match_name_iter, i8* nonnull %194) #15, !dbg !4403
  %361 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.206, i64 0, i64 0)) #15, !dbg !4404
  %362 = extractvalue { i64, %struct.jv_refcnt* } %361, 0, !dbg !4404
  %363 = extractvalue { i64, %struct.jv_refcnt* } %361, 1, !dbg !4404
  %364 = load i64, i64* %195, align 8, !dbg !4405
  %365 = load %struct.jv_refcnt*, %struct.jv_refcnt** %196, align 8, !dbg !4405
  %366 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %351, %struct.jv_refcnt* %352, i64 %362, %struct.jv_refcnt* %363, i64 %364, %struct.jv_refcnt* %365) #15, !dbg !4405
  %367 = extractvalue { i64, %struct.jv_refcnt* } %366, 0, !dbg !4405
  %368 = extractvalue { i64, %struct.jv_refcnt* } %366, 1, !dbg !4405
  call void @llvm.dbg.value(metadata i64 %367, metadata !4145, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4319
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %368, metadata !4145, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4319
  %369 = call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %203, %struct.jv_refcnt* %202, i64 %367, %struct.jv_refcnt* %368) #15, !dbg !4406
  call void @llvm.dbg.value(metadata i64 undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  %370 = load i32*, i32** %192, align 8, !dbg !4407, !tbaa !4312
  %371 = load i32, i32* %370, align 4, !dbg !4408, !tbaa !2095
  %372 = sext i32 %371 to i64, !dbg !4409
  %373 = getelementptr inbounds i8, i8* %183, i64 %372, !dbg !4409
  call void @llvm.dbg.value(metadata i8* %373, metadata !4130, metadata !DIExpression()), !dbg !4159
  call void @onig_region_free(%struct.re_registers* nonnull %191, i32 0) #15, !dbg !4410
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %194) #15, !dbg !4411
  br label %592, !dbg !4412

374:                                              ; preds = %309, %565
  %375 = phi i64 [ %569, %565 ], [ 1, %309 ]
  call void @llvm.dbg.value(metadata i64 %375, metadata !4148, metadata !DIExpression()), !dbg !4397
  %376 = load i32*, i32** %193, align 8, !dbg !4413, !tbaa !4316
  %377 = getelementptr inbounds i32, i32* %376, i64 %375, !dbg !4414
  %378 = load i32, i32* %377, align 4, !dbg !4414, !tbaa !2095
  %379 = load i32*, i32** %192, align 8, !dbg !4415, !tbaa !4312
  %380 = getelementptr inbounds i32, i32* %379, i64 %375, !dbg !4416
  %381 = load i32, i32* %380, align 4, !dbg !4416, !tbaa !2095
  %382 = icmp eq i32 %378, %381, !dbg !4417
  br i1 %382, label %395, label %383, !dbg !4418

383:                                              ; preds = %374
  call void @llvm.dbg.value(metadata i64 0, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 0, metadata !4143, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i8* %183, metadata !4144, metadata !DIExpression()), !dbg !4319
  %384 = icmp sgt i32 %381, 0, !dbg !4419
  br i1 %384, label %385, label %510, !dbg !4422

385:                                              ; preds = %383
  call void @llvm.dbg.value(metadata i64 0, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 0, metadata !4143, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i8* %183, metadata !4144, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 0, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 undef, metadata !4143, metadata !DIExpression()), !dbg !4319
  %386 = load i8, i8* %183, align 1, !dbg !4423, !tbaa !2186
  %387 = call i32 @jvp_utf8_decode_length(i8 signext %386) #15, !dbg !4425
  call void @llvm.dbg.value(metadata !DIArgList(i8* %183, i32 %387), metadata !4144, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_constu, 1, DW_OP_mul, DW_OP_plus, DW_OP_stack_value)), !dbg !4319
  call void @llvm.dbg.value(metadata i64 1, metadata !4143, metadata !DIExpression()), !dbg !4319
  %388 = load i32*, i32** %192, align 8, !dbg !4426, !tbaa !4312
  %389 = getelementptr inbounds i32, i32* %388, i64 %375, !dbg !4427
  %390 = load i32, i32* %389, align 4, !dbg !4427, !tbaa !2095
  %391 = icmp slt i32 %387, %390, !dbg !4419
  br i1 %391, label %392, label %503, !dbg !4422, !llvm.loop !4428

392:                                              ; preds = %385
  %393 = sext i32 %387 to i64, !dbg !4430
  call void @llvm.dbg.value(metadata !DIArgList(i8* %183, i64 %393), metadata !4144, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_constu, 1, DW_OP_mul, DW_OP_plus, DW_OP_stack_value)), !dbg !4319
  %394 = getelementptr inbounds i8, i8* %183, i64 %393, !dbg !4430
  call void @llvm.dbg.value(metadata i8* %394, metadata !4144, metadata !DIExpression()), !dbg !4319
  br label %480, !dbg !4422

395:                                              ; preds = %374
  %396 = icmp eq i32 %378, -1, !dbg !4431
  br i1 %396, label %399, label %397, !dbg !4433

397:                                              ; preds = %395
  call void @llvm.dbg.value(metadata i64 0, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i8* %183, metadata !4144, metadata !DIExpression()), !dbg !4319
  %398 = icmp sgt i32 %378, 0, !dbg !4434
  br i1 %398, label %419, label %433, !dbg !4438

399:                                              ; preds = %395
  %400 = call { i64, %struct.jv_refcnt* } @jv_object() #15, !dbg !4439
  %401 = extractvalue { i64, %struct.jv_refcnt* } %400, 0, !dbg !4439
  %402 = extractvalue { i64, %struct.jv_refcnt* } %400, 1, !dbg !4439
  %403 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.204, i64 0, i64 0)) #15, !dbg !4441
  %404 = extractvalue { i64, %struct.jv_refcnt* } %403, 0, !dbg !4441
  %405 = extractvalue { i64, %struct.jv_refcnt* } %403, 1, !dbg !4441
  %406 = call { i64, %struct.jv_refcnt* } @jv_number(double -1.000000e+00) #15, !dbg !4442
  %407 = extractvalue { i64, %struct.jv_refcnt* } %406, 0, !dbg !4442
  %408 = extractvalue { i64, %struct.jv_refcnt* } %406, 1, !dbg !4442
  %409 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %401, %struct.jv_refcnt* %402, i64 %404, %struct.jv_refcnt* %405, i64 %407, %struct.jv_refcnt* %408) #15, !dbg !4443
  %410 = extractvalue { i64, %struct.jv_refcnt* } %409, 0, !dbg !4443
  %411 = extractvalue { i64, %struct.jv_refcnt* } %409, 1, !dbg !4443
  call void @llvm.dbg.value(metadata i64 %410, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4444
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %411, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4444
  %412 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.205, i64 0, i64 0)) #15, !dbg !4445
  %413 = extractvalue { i64, %struct.jv_refcnt* } %412, 0, !dbg !4445
  %414 = extractvalue { i64, %struct.jv_refcnt* } %412, 1, !dbg !4445
  %415 = call { i64, %struct.jv_refcnt* } @jv_null() #15, !dbg !4446
  %416 = extractvalue { i64, %struct.jv_refcnt* } %415, 0, !dbg !4446
  %417 = extractvalue { i64, %struct.jv_refcnt* } %415, 1, !dbg !4446
  %418 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %410, %struct.jv_refcnt* %411, i64 %413, %struct.jv_refcnt* %414, i64 %416, %struct.jv_refcnt* %417) #15, !dbg !4447
  call void @llvm.dbg.value(metadata i64 undef, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4444
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4444
  br label %455, !dbg !4448

419:                                              ; preds = %397, %419
  %420 = phi i64 [ %426, %419 ], [ 0, %397 ]
  %421 = phi i8* [ %425, %419 ], [ %183, %397 ]
  call void @llvm.dbg.value(metadata i64 %420, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i8* %421, metadata !4144, metadata !DIExpression()), !dbg !4319
  %422 = load i8, i8* %421, align 1, !dbg !4449, !tbaa !2186
  %423 = call i32 @jvp_utf8_decode_length(i8 signext %422) #15, !dbg !4451
  %424 = sext i32 %423 to i64, !dbg !4452
  %425 = getelementptr inbounds i8, i8* %421, i64 %424, !dbg !4452
  call void @llvm.dbg.value(metadata i8* %425, metadata !4144, metadata !DIExpression()), !dbg !4319
  %426 = add i64 %420, 1, !dbg !4453
  call void @llvm.dbg.value(metadata i64 %426, metadata !4142, metadata !DIExpression()), !dbg !4319
  %427 = load i32*, i32** %193, align 8, !dbg !4454, !tbaa !4316
  %428 = getelementptr inbounds i32, i32* %427, i64 %375, !dbg !4455
  %429 = load i32, i32* %428, align 4, !dbg !4455, !tbaa !2095
  %430 = sext i32 %429 to i64, !dbg !4456
  %431 = getelementptr inbounds i8, i8* %183, i64 %430, !dbg !4456
  %432 = icmp ult i8* %425, %431, !dbg !4434
  br i1 %432, label %419, label %433, !dbg !4438, !llvm.loop !4457

433:                                              ; preds = %419, %397
  %434 = phi i64 [ 0, %397 ], [ %426, %419 ], !dbg !4459
  %435 = call { i64, %struct.jv_refcnt* } @jv_object() #15, !dbg !4460
  %436 = extractvalue { i64, %struct.jv_refcnt* } %435, 0, !dbg !4460
  %437 = extractvalue { i64, %struct.jv_refcnt* } %435, 1, !dbg !4460
  %438 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.204, i64 0, i64 0)) #15, !dbg !4461
  %439 = extractvalue { i64, %struct.jv_refcnt* } %438, 0, !dbg !4461
  %440 = extractvalue { i64, %struct.jv_refcnt* } %438, 1, !dbg !4461
  %441 = uitofp i64 %434 to double, !dbg !4462
  %442 = call { i64, %struct.jv_refcnt* } @jv_number(double %441) #15, !dbg !4463
  %443 = extractvalue { i64, %struct.jv_refcnt* } %442, 0, !dbg !4463
  %444 = extractvalue { i64, %struct.jv_refcnt* } %442, 1, !dbg !4463
  %445 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %436, %struct.jv_refcnt* %437, i64 %439, %struct.jv_refcnt* %440, i64 %443, %struct.jv_refcnt* %444) #15, !dbg !4464
  %446 = extractvalue { i64, %struct.jv_refcnt* } %445, 0, !dbg !4464
  %447 = extractvalue { i64, %struct.jv_refcnt* } %445, 1, !dbg !4464
  call void @llvm.dbg.value(metadata i64 %446, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4444
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %447, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4444
  %448 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.205, i64 0, i64 0)) #15, !dbg !4465
  %449 = extractvalue { i64, %struct.jv_refcnt* } %448, 0, !dbg !4465
  %450 = extractvalue { i64, %struct.jv_refcnt* } %448, 1, !dbg !4465
  %451 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)) #15, !dbg !4466
  %452 = extractvalue { i64, %struct.jv_refcnt* } %451, 0, !dbg !4466
  %453 = extractvalue { i64, %struct.jv_refcnt* } %451, 1, !dbg !4466
  %454 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %446, %struct.jv_refcnt* %447, i64 %449, %struct.jv_refcnt* %450, i64 %452, %struct.jv_refcnt* %453) #15, !dbg !4467
  call void @llvm.dbg.value(metadata i64 undef, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4444
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4444
  br label %455

455:                                              ; preds = %433, %399
  %456 = phi { i64, %struct.jv_refcnt* } [ %418, %399 ], [ %454, %433 ]
  %457 = extractvalue { i64, %struct.jv_refcnt* } %456, 1, !dbg !4468
  %458 = extractvalue { i64, %struct.jv_refcnt* } %456, 0, !dbg !4468
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %457, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4444
  call void @llvm.dbg.value(metadata i64 %458, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4444
  %459 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i64 0, i64 0)) #15, !dbg !4469
  %460 = extractvalue { i64, %struct.jv_refcnt* } %459, 0, !dbg !4469
  %461 = extractvalue { i64, %struct.jv_refcnt* } %459, 1, !dbg !4469
  %462 = call { i64, %struct.jv_refcnt* } @jv_number(double 0.000000e+00) #15, !dbg !4470
  %463 = extractvalue { i64, %struct.jv_refcnt* } %462, 0, !dbg !4470
  %464 = extractvalue { i64, %struct.jv_refcnt* } %462, 1, !dbg !4470
  %465 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %458, %struct.jv_refcnt* %457, i64 %460, %struct.jv_refcnt* %461, i64 %463, %struct.jv_refcnt* %464) #15, !dbg !4471
  %466 = extractvalue { i64, %struct.jv_refcnt* } %465, 0, !dbg !4471
  %467 = extractvalue { i64, %struct.jv_refcnt* } %465, 1, !dbg !4471
  call void @llvm.dbg.value(metadata i64 %466, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4444
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %467, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4444
  %468 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.207, i64 0, i64 0)) #15, !dbg !4472
  %469 = extractvalue { i64, %struct.jv_refcnt* } %468, 0, !dbg !4472
  %470 = extractvalue { i64, %struct.jv_refcnt* } %468, 1, !dbg !4472
  %471 = call { i64, %struct.jv_refcnt* } @jv_null() #15, !dbg !4473
  %472 = extractvalue { i64, %struct.jv_refcnt* } %471, 0, !dbg !4473
  %473 = extractvalue { i64, %struct.jv_refcnt* } %471, 1, !dbg !4473
  %474 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %466, %struct.jv_refcnt* %467, i64 %469, %struct.jv_refcnt* %470, i64 %472, %struct.jv_refcnt* %473) #15, !dbg !4474
  %475 = extractvalue { i64, %struct.jv_refcnt* } %474, 0, !dbg !4474
  %476 = extractvalue { i64, %struct.jv_refcnt* } %474, 1, !dbg !4474
  call void @llvm.dbg.value(metadata i64 %475, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4444
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %476, metadata !4150, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4444
  %477 = load i64, i64* %195, align 8, !dbg !4475
  %478 = load %struct.jv_refcnt*, %struct.jv_refcnt** %196, align 8, !dbg !4475
  %479 = call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %477, %struct.jv_refcnt* %478, i64 %475, %struct.jv_refcnt* %476) #15, !dbg !4475
  br label %565

480:                                              ; preds = %392, %480
  %481 = phi i64 [ 1, %392 ], [ %496, %480 ]
  %482 = phi i8* [ %394, %392 ], [ %494, %480 ]
  %483 = phi i64 [ 0, %392 ], [ %490, %480 ]
  %484 = load i32*, i32** %193, align 8, !dbg !4476, !tbaa !4316
  %485 = getelementptr inbounds i32, i32* %484, i64 %375
  %486 = load i32, i32* %485, align 4, !dbg !4478, !tbaa !2095
  call void @llvm.dbg.value(metadata i64 %483, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 %481, metadata !4143, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i8* %482, metadata !4144, metadata !DIExpression()), !dbg !4319
  %487 = sext i32 %486 to i64, !dbg !4479
  %488 = getelementptr inbounds i8, i8* %183, i64 %487, !dbg !4479
  %489 = icmp eq i8* %482, %488, !dbg !4480
  %490 = select i1 %489, i64 %481, i64 %483, !dbg !4481
  call void @llvm.dbg.value(metadata i64 %490, metadata !4142, metadata !DIExpression()), !dbg !4319
  call void @llvm.dbg.value(metadata i64 undef, metadata !4143, metadata !DIExpression()), !dbg !4319
  %491 = load i8, i8* %482, align 1, !dbg !4423, !tbaa !2186
  %492 = call i32 @jvp_utf8_decode_length(i8 signext %491) #15, !dbg !4425
  %493 = sext i32 %492 to i64, !dbg !4430
  %494 = getelementptr inbounds i8, i8* %482, i64 %493, !dbg !4430
  call void @llvm.dbg.value(metadata i8* %494, metadata !4144, metadata !DIExpression()), !dbg !4319
  %495 = add i64 %481, 1, !dbg !4482
  %496 = select i1 %489, i64 1, i64 %495, !dbg !4482
  call void @llvm.dbg.value(metadata i64 %496, metadata !4143, metadata !DIExpression()), !dbg !4319
  %497 = load i32*, i32** %192, align 8, !dbg !4426, !tbaa !4312
  %498 = getelementptr inbounds i32, i32* %497, i64 %375, !dbg !4427
  %499 = load i32, i32* %498, align 4, !dbg !4427, !tbaa !2095
  %500 = sext i32 %499 to i64, !dbg !4483
  %501 = getelementptr inbounds i8, i8* %183, i64 %500, !dbg !4483
  %502 = icmp ult i8* %494, %501, !dbg !4419
  br i1 %502, label %480, label %503, !dbg !4422, !llvm.loop !4428

503:                                              ; preds = %480, %385
  %504 = phi i64 [ 0, %385 ], [ %490, %480 ], !dbg !4481
  %505 = phi i64 [ 1, %385 ], [ %496, %480 ], !dbg !4482
  %506 = phi i32 [ %390, %385 ], [ %499, %480 ], !dbg !4427
  %507 = load i32*, i32** %193, align 8, !dbg !4484, !tbaa !4316
  %508 = getelementptr inbounds i32, i32* %507, i64 %375
  %509 = load i32, i32* %508, align 4, !dbg !4485, !tbaa !2095
  br label %510, !dbg !4484

510:                                              ; preds = %503, %383
  %511 = phi i32 [ %378, %383 ], [ %509, %503 ], !dbg !4485
  %512 = phi i64 [ 0, %383 ], [ %505, %503 ], !dbg !4486
  %513 = phi i64 [ 0, %383 ], [ %504, %503 ], !dbg !4486
  %514 = phi i32 [ %381, %383 ], [ %506, %503 ], !dbg !4427
  %515 = sub nsw i32 %514, %511, !dbg !4487
  call void @llvm.dbg.value(metadata i32 %515, metadata !4146, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_stack_value)), !dbg !4319
  %516 = call { i64, %struct.jv_refcnt* } @jv_object() #15, !dbg !4488
  %517 = extractvalue { i64, %struct.jv_refcnt* } %516, 0, !dbg !4488
  %518 = extractvalue { i64, %struct.jv_refcnt* } %516, 1, !dbg !4488
  %519 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.204, i64 0, i64 0)) #15, !dbg !4489
  %520 = extractvalue { i64, %struct.jv_refcnt* } %519, 0, !dbg !4489
  %521 = extractvalue { i64, %struct.jv_refcnt* } %519, 1, !dbg !4489
  %522 = uitofp i64 %513 to double, !dbg !4490
  %523 = call { i64, %struct.jv_refcnt* } @jv_number(double %522) #15, !dbg !4491
  %524 = extractvalue { i64, %struct.jv_refcnt* } %523, 0, !dbg !4491
  %525 = extractvalue { i64, %struct.jv_refcnt* } %523, 1, !dbg !4491
  %526 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %517, %struct.jv_refcnt* %518, i64 %520, %struct.jv_refcnt* %521, i64 %524, %struct.jv_refcnt* %525) #15, !dbg !4492
  %527 = extractvalue { i64, %struct.jv_refcnt* } %526, 0, !dbg !4492
  call void @llvm.dbg.value(metadata i64 %527, metadata !4155, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4493
  %528 = extractvalue { i64, %struct.jv_refcnt* } %526, 1, !dbg !4492
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %528, metadata !4155, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4493
  %529 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i64 0, i64 0)) #15, !dbg !4494
  %530 = extractvalue { i64, %struct.jv_refcnt* } %529, 0, !dbg !4494
  %531 = extractvalue { i64, %struct.jv_refcnt* } %529, 1, !dbg !4494
  %532 = uitofp i64 %512 to double, !dbg !4495
  %533 = call { i64, %struct.jv_refcnt* } @jv_number(double %532) #15, !dbg !4496
  %534 = extractvalue { i64, %struct.jv_refcnt* } %533, 0, !dbg !4496
  %535 = extractvalue { i64, %struct.jv_refcnt* } %533, 1, !dbg !4496
  %536 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %527, %struct.jv_refcnt* %528, i64 %530, %struct.jv_refcnt* %531, i64 %534, %struct.jv_refcnt* %535) #15, !dbg !4497
  %537 = extractvalue { i64, %struct.jv_refcnt* } %536, 0, !dbg !4497
  %538 = extractvalue { i64, %struct.jv_refcnt* } %536, 1, !dbg !4497
  call void @llvm.dbg.value(metadata i64 %537, metadata !4155, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4493
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %538, metadata !4155, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4493
  %539 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.205, i64 0, i64 0)) #15, !dbg !4498
  %540 = extractvalue { i64, %struct.jv_refcnt* } %539, 0, !dbg !4498
  %541 = extractvalue { i64, %struct.jv_refcnt* } %539, 1, !dbg !4498
  %542 = load i32*, i32** %193, align 8, !dbg !4499, !tbaa !4316
  %543 = getelementptr inbounds i32, i32* %542, i64 %375, !dbg !4500
  %544 = load i32, i32* %543, align 4, !dbg !4500, !tbaa !2095
  %545 = sext i32 %544 to i64, !dbg !4501
  %546 = getelementptr inbounds i8, i8* %183, i64 %545, !dbg !4501
  %547 = call { i64, %struct.jv_refcnt* } @jv_string_sized(i8* %546, i32 %515) #15, !dbg !4502
  %548 = extractvalue { i64, %struct.jv_refcnt* } %547, 0, !dbg !4502
  %549 = extractvalue { i64, %struct.jv_refcnt* } %547, 1, !dbg !4502
  %550 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %537, %struct.jv_refcnt* %538, i64 %540, %struct.jv_refcnt* %541, i64 %548, %struct.jv_refcnt* %549) #15, !dbg !4503
  %551 = extractvalue { i64, %struct.jv_refcnt* } %550, 0, !dbg !4503
  %552 = extractvalue { i64, %struct.jv_refcnt* } %550, 1, !dbg !4503
  call void @llvm.dbg.value(metadata i64 %551, metadata !4155, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4493
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %552, metadata !4155, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4493
  %553 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.207, i64 0, i64 0)) #15, !dbg !4504
  %554 = extractvalue { i64, %struct.jv_refcnt* } %553, 0, !dbg !4504
  %555 = extractvalue { i64, %struct.jv_refcnt* } %553, 1, !dbg !4504
  %556 = call { i64, %struct.jv_refcnt* } @jv_null() #15, !dbg !4505
  %557 = extractvalue { i64, %struct.jv_refcnt* } %556, 0, !dbg !4505
  %558 = extractvalue { i64, %struct.jv_refcnt* } %556, 1, !dbg !4505
  %559 = call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %551, %struct.jv_refcnt* %552, i64 %554, %struct.jv_refcnt* %555, i64 %557, %struct.jv_refcnt* %558) #15, !dbg !4506
  %560 = extractvalue { i64, %struct.jv_refcnt* } %559, 0, !dbg !4506
  %561 = extractvalue { i64, %struct.jv_refcnt* } %559, 1, !dbg !4506
  call void @llvm.dbg.value(metadata i64 %560, metadata !4155, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4493
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %561, metadata !4155, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4493
  %562 = load i64, i64* %195, align 8, !dbg !4507
  %563 = load %struct.jv_refcnt*, %struct.jv_refcnt** %196, align 8, !dbg !4507
  %564 = call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %562, %struct.jv_refcnt* %563, i64 %560, %struct.jv_refcnt* %561) #15, !dbg !4507
  br label %565, !dbg !4508

565:                                              ; preds = %510, %455
  %566 = phi { i64, %struct.jv_refcnt* } [ %564, %510 ], [ %479, %455 ]
  %567 = extractvalue { i64, %struct.jv_refcnt* } %566, 0, !dbg !4493
  store i64 %567, i64* %195, align 8, !dbg !4493
  %568 = extractvalue { i64, %struct.jv_refcnt* } %566, 1, !dbg !4493
  store %struct.jv_refcnt* %568, %struct.jv_refcnt** %196, align 8, !dbg !4493
  %569 = add nuw nsw i64 %375, 1, !dbg !4509
  call void @llvm.dbg.value(metadata i64 %569, metadata !4148, metadata !DIExpression()), !dbg !4397
  %570 = load i32, i32* %197, align 4, !dbg !4398, !tbaa !4399
  %571 = sext i32 %570 to i64, !dbg !4400
  %572 = icmp slt i64 %569, %571, !dbg !4400
  br i1 %572, label %374, label %358, !dbg !4401, !llvm.loop !4510

573:                                              ; preds = %199
  %574 = extractvalue { i64, %struct.jv_refcnt* } %201, 1, !dbg !4159
  %575 = extractvalue { i64, %struct.jv_refcnt* } %201, 0, !dbg !4159
  %576 = icmp eq i32 %206, -1, !dbg !4512
  br i1 %576, label %600, label %577, !dbg !4513

577:                                              ; preds = %573
  %578 = getelementptr inbounds [90 x i8], [90 x i8]* %15, i64 0, i64 0, !dbg !4514
  call void @llvm.lifetime.start.p0i8(i64 90, i8* nonnull %578) #15, !dbg !4514
  call void @llvm.dbg.declare(metadata [90 x i8]* %15, metadata !4156, metadata !DIExpression()), !dbg !4515
  %579 = call i32 (i8*, i32, %struct.OnigErrorInfo*, ...) bitcast (i32 (...)* @onig_error_code_to_str to i32 (i8*, i32, %struct.OnigErrorInfo*, ...)*)(i8* nonnull %578, i32 %206, %struct.OnigErrorInfo* nonnull %12) #15, !dbg !4516
  call void @jv_free(i64 %575, %struct.jv_refcnt* %574) #15, !dbg !4517
  %580 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.203, i64 0, i64 0)) #15, !dbg !4518
  %581 = extractvalue { i64, %struct.jv_refcnt* } %580, 0, !dbg !4518
  %582 = extractvalue { i64, %struct.jv_refcnt* } %580, 1, !dbg !4518
  %583 = call { i64, %struct.jv_refcnt* } @jv_string(i8* nonnull %578) #15, !dbg !4519
  %584 = extractvalue { i64, %struct.jv_refcnt* } %583, 0, !dbg !4519
  %585 = extractvalue { i64, %struct.jv_refcnt* } %583, 1, !dbg !4519
  %586 = call { i64, %struct.jv_refcnt* } @jv_string_concat(i64 %581, %struct.jv_refcnt* %582, i64 %584, %struct.jv_refcnt* %585) #15, !dbg !4520
  %587 = extractvalue { i64, %struct.jv_refcnt* } %586, 0, !dbg !4520
  %588 = extractvalue { i64, %struct.jv_refcnt* } %586, 1, !dbg !4520
  %589 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %587, %struct.jv_refcnt* %588) #15, !dbg !4521
  %590 = extractvalue { i64, %struct.jv_refcnt* } %589, 0, !dbg !4521
  %591 = extractvalue { i64, %struct.jv_refcnt* } %589, 1, !dbg !4521
  call void @llvm.dbg.value(metadata i64 %590, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %591, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  call void @llvm.lifetime.end.p0i8(i64 90, i8* nonnull %578) #15, !dbg !4522
  br label %600

592:                                              ; preds = %358, %244
  %593 = phi i8* [ %287, %244 ], [ %373, %358 ], !dbg !4319
  %594 = phi { i64, %struct.jv_refcnt* } [ %286, %244 ], [ %369, %358 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata i64 undef, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata i8* %593, metadata !4130, metadata !DIExpression()), !dbg !4159
  %595 = icmp ne i8* %593, %190, !dbg !4523
  %596 = select i1 %198, i1 %595, i1 false, !dbg !4523
  br i1 %596, label %199, label %597, !dbg !4412, !llvm.loop !4524

597:                                              ; preds = %592
  %598 = extractvalue { i64, %struct.jv_refcnt* } %594, 1, !dbg !4319
  %599 = extractvalue { i64, %struct.jv_refcnt* } %594, 0, !dbg !4319
  br label %600, !dbg !4526

600:                                              ; preds = %597, %573, %577, %209
  %601 = phi i64 [ %211, %209 ], [ %575, %573 ], [ %590, %577 ], [ %599, %597 ], !dbg !4159
  %602 = phi %struct.jv_refcnt* [ %212, %209 ], [ %574, %573 ], [ %591, %577 ], [ %598, %597 ], !dbg !4159
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %602, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4159
  call void @llvm.dbg.value(metadata i64 %601, metadata !3923, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4159
  call void @onig_region_free(%struct.re_registers* %191, i32 1) #15, !dbg !4526
  call void @llvm.dbg.value(metadata %struct.re_registers* null, metadata !4090, metadata !DIExpression()), !dbg !4159
  %603 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %11, align 8, !dbg !4527, !tbaa !300
  call void @llvm.dbg.value(metadata %struct.re_pattern_buffer* %603, metadata !3926, metadata !DIExpression()), !dbg !4159
  call void @onig_free(%struct.re_pattern_buffer* %603) #15, !dbg !4528
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4529
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4530
  br label %604

604:                                              ; preds = %117, %133, %160, %600, %49, %28
  %605 = phi i64 [ %44, %28 ], [ %65, %49 ], [ %173, %160 ], [ %601, %600 ], [ %145, %133 ], [ %125, %117 ], !dbg !4159
  %606 = phi %struct.jv_refcnt* [ %45, %28 ], [ %66, %49 ], [ %174, %160 ], [ %602, %600 ], [ %146, %133 ], [ %126, %117 ], !dbg !4159
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #15, !dbg !4531
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #15, !dbg !4531
  %607 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %605, 0, !dbg !4531
  %608 = insertvalue { i64, %struct.jv_refcnt* } %607, %struct.jv_refcnt* %606, 1, !dbg !4531
  ret { i64, %struct.jv_refcnt* } %608, !dbg !4531
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_modulemeta(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !4532 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !4535, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4536
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4535, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4536
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4534, metadata !DIExpression()), !dbg !4536
  %4 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4537
  %5 = icmp eq i32 %4, 5, !dbg !4539
  br i1 %5, label %11, label %6, !dbg !4540

6:                                                ; preds = %3
  %7 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.208, i64 0, i64 0)) #15, !dbg !4541
  %8 = extractvalue { i64, %struct.jv_refcnt* } %7, 0, !dbg !4541
  %9 = extractvalue { i64, %struct.jv_refcnt* } %7, 1, !dbg !4541
  call void @llvm.dbg.value(metadata i64 %1, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4543
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4543
  call void @llvm.dbg.value(metadata i64 %8, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4543
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %9, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4543
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4545
  %10 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %8, %struct.jv_refcnt* %9) #15, !dbg !4546
  br label %13, !dbg !4547

11:                                               ; preds = %3
  %12 = tail call { i64, %struct.jv_refcnt* } @load_module_meta(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4548
  br label %13, !dbg !4549

13:                                               ; preds = %11, %6
  %14 = phi { i64, %struct.jv_refcnt* } [ %10, %6 ], [ %12, %11 ]
  ret { i64, %struct.jv_refcnt* } %14, !dbg !4550
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_input(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !4551 {
  %4 = alloca { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)*, align 8
  %5 = alloca i8*, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4554, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4562
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4554, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4562
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4553, metadata !DIExpression()), !dbg !4562
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4563
  %6 = bitcast { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)** %4 to i8*, !dbg !4564
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #15, !dbg !4564
  %7 = bitcast i8** %5 to i8*, !dbg !4565
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #15, !dbg !4565
  call void @llvm.dbg.value(metadata { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)** %4, metadata !4555, metadata !DIExpression(DW_OP_deref)), !dbg !4562
  call void @llvm.dbg.value(metadata i8** %5, metadata !4560, metadata !DIExpression(DW_OP_deref)), !dbg !4562
  call void @jq_get_input_cb(%struct.jq_state* %0, { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)** nonnull %4, i8** nonnull %5) #15, !dbg !4566
  %8 = load { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)*, { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)** %4, align 8, !dbg !4567, !tbaa !300
  call void @llvm.dbg.value(metadata { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)* %8, metadata !4555, metadata !DIExpression()), !dbg !4562
  %9 = icmp eq { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)* %8, null, !dbg !4569
  br i1 %9, label %23, label %10, !dbg !4570

10:                                               ; preds = %3
  %11 = load i8*, i8** %5, align 8, !dbg !4571, !tbaa !300
  call void @llvm.dbg.value(metadata i8* %11, metadata !4560, metadata !DIExpression()), !dbg !4562
  %12 = call { i64, %struct.jv_refcnt* } %8(%struct.jq_state* %0, i8* %11) #15, !dbg !4572
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !4572
  call void @llvm.dbg.value(metadata i64 %13, metadata !4561, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4562
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !4572
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !4561, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4562
  call void @llvm.dbg.value(metadata i64 %13, metadata !2582, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4573
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %14, metadata !2582, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4573
  %15 = call i32 @jv_get_kind(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !4576
  %16 = icmp eq i32 %15, 0, !dbg !4577
  br i1 %16, label %17, label %28, !dbg !4578

17:                                               ; preds = %10
  %18 = call { i64, %struct.jv_refcnt* } @jv_copy(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !4579
  %19 = extractvalue { i64, %struct.jv_refcnt* } %18, 0, !dbg !4579
  %20 = extractvalue { i64, %struct.jv_refcnt* } %18, 1, !dbg !4579
  %21 = call i32 @jv_invalid_has_msg(i64 %19, %struct.jv_refcnt* %20) #15, !dbg !4580
  %22 = icmp eq i32 %21, 0, !dbg !4580
  br i1 %22, label %23, label %28, !dbg !4581

23:                                               ; preds = %17, %3
  %24 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.209, i64 0, i64 0)) #15, !dbg !4562
  %25 = extractvalue { i64, %struct.jv_refcnt* } %24, 0, !dbg !4562
  %26 = extractvalue { i64, %struct.jv_refcnt* } %24, 1, !dbg !4562
  %27 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %25, %struct.jv_refcnt* %26) #15, !dbg !4562
  br label %28, !dbg !4582

28:                                               ; preds = %23, %17, %10
  %29 = phi { i64, %struct.jv_refcnt* } [ %12, %17 ], [ %12, %10 ], [ %27, %23 ], !dbg !4582
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #15, !dbg !4582
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #15, !dbg !4582
  ret { i64, %struct.jv_refcnt* } %29, !dbg !4582
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_debug(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !4583 {
  %4 = alloca void (i8*, i64, %struct.jv_refcnt*)*, align 8
  %5 = alloca i8*, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4586, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4593
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4586, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4593
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4585, metadata !DIExpression()), !dbg !4593
  %6 = bitcast void (i8*, i64, %struct.jv_refcnt*)** %4 to i8*, !dbg !4594
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #15, !dbg !4594
  %7 = bitcast i8** %5 to i8*, !dbg !4595
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #15, !dbg !4595
  call void @llvm.dbg.value(metadata void (i8*, i64, %struct.jv_refcnt*)** %4, metadata !4587, metadata !DIExpression(DW_OP_deref)), !dbg !4593
  call void @llvm.dbg.value(metadata i8** %5, metadata !4592, metadata !DIExpression(DW_OP_deref)), !dbg !4593
  call void @jq_get_debug_cb(%struct.jq_state* %0, void (i8*, i64, %struct.jv_refcnt*)** nonnull %4, i8** nonnull %5) #15, !dbg !4596
  %8 = load void (i8*, i64, %struct.jv_refcnt*)*, void (i8*, i64, %struct.jv_refcnt*)** %4, align 8, !dbg !4597, !tbaa !300
  call void @llvm.dbg.value(metadata void (i8*, i64, %struct.jv_refcnt*)* %8, metadata !4587, metadata !DIExpression()), !dbg !4593
  %9 = icmp eq void (i8*, i64, %struct.jv_refcnt*)* %8, null, !dbg !4599
  br i1 %9, label %15, label %10, !dbg !4600

10:                                               ; preds = %3
  %11 = load i8*, i8** %5, align 8, !dbg !4601, !tbaa !300
  call void @llvm.dbg.value(metadata i8* %11, metadata !4592, metadata !DIExpression()), !dbg !4593
  %12 = call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4602
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !4602
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !4602
  call void %8(i8* %11, i64 %13, %struct.jv_refcnt* %14) #15, !dbg !4603
  br label %15, !dbg !4603

15:                                               ; preds = %10, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #15, !dbg !4604
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #15, !dbg !4604
  %16 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %1, 0, !dbg !4604
  %17 = insertvalue { i64, %struct.jv_refcnt* } %16, %struct.jv_refcnt* %2, 1, !dbg !4604
  ret { i64, %struct.jv_refcnt* } %17, !dbg !4604
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_stderr(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !4605 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !4608, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4609
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4608, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4609
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4607, metadata !DIExpression()), !dbg !4609
  %4 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4610
  %5 = extractvalue { i64, %struct.jv_refcnt* } %4, 0, !dbg !4610
  %6 = extractvalue { i64, %struct.jv_refcnt* } %4, 1, !dbg !4610
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4611, !tbaa !300
  tail call void @jv_dumpf(i64 %5, %struct.jv_refcnt* %6, %struct._IO_FILE* %7, i32 0) #15, !dbg !4612
  %8 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %1, 0, !dbg !4613
  %9 = insertvalue { i64, %struct.jv_refcnt* } %8, %struct.jv_refcnt* %2, 1, !dbg !4613
  ret { i64, %struct.jv_refcnt* } %9, !dbg !4613
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_strptime(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !4614 {
  %6 = alloca %struct.tm, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4617, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4624
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4617, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4624
  call void @llvm.dbg.value(metadata i64 %3, metadata !4618, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4624
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !4618, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4624
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4616, metadata !DIExpression()), !dbg !4624
  %7 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4625
  %8 = icmp eq i32 %7, 5, !dbg !4627
  br i1 %8, label %9, label %12, !dbg !4628

9:                                                ; preds = %5
  %10 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4629
  %11 = icmp eq i32 %10, 5, !dbg !4630
  br i1 %11, label %19, label %12, !dbg !4631

12:                                               ; preds = %9, %5
  %13 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.210, i64 0, i64 0)) #15, !dbg !4632
  %14 = extractvalue { i64, %struct.jv_refcnt* } %13, 0, !dbg !4632
  %15 = extractvalue { i64, %struct.jv_refcnt* } %13, 1, !dbg !4632
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4634
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4634
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4634
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4634
  call void @llvm.dbg.value(metadata i64 %14, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4634
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %15, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4634
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4636
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4637
  %16 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %14, %struct.jv_refcnt* %15) #15, !dbg !4638
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !4639
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !4639
  br label %88, !dbg !4640

19:                                               ; preds = %9
  %20 = bitcast %struct.tm* %6 to i8*, !dbg !4641
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %20) #15, !dbg !4641
  call void @llvm.dbg.declare(metadata %struct.tm* %6, metadata !4619, metadata !DIExpression()), !dbg !4642
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %20, i8 0, i64 56, i1 false), !dbg !4643
  %21 = getelementptr inbounds %struct.tm, %struct.tm* %6, i64 0, i32 6, !dbg !4644
  store i32 8, i32* %21, align 8, !dbg !4645, !tbaa !4646
  %22 = getelementptr inbounds %struct.tm, %struct.tm* %6, i64 0, i32 7, !dbg !4649
  store i32 367, i32* %22, align 4, !dbg !4650, !tbaa !4651
  %23 = tail call i8* @jv_string_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4652
  call void @llvm.dbg.value(metadata i8* %23, metadata !4620, metadata !DIExpression()), !dbg !4624
  %24 = tail call i8* @jv_string_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4653
  call void @llvm.dbg.value(metadata i8* %24, metadata !4621, metadata !DIExpression()), !dbg !4624
  %25 = call i8* @strptime(i8* %23, i8* %24, %struct.tm* nonnull %6) #15, !dbg !4654
  call void @llvm.dbg.value(metadata i8* %25, metadata !4622, metadata !DIExpression()), !dbg !4624
  %26 = icmp eq i8* %25, null, !dbg !4655
  br i1 %26, label %38, label %27, !dbg !4657

27:                                               ; preds = %19
  %28 = load i8, i8* %25, align 1, !dbg !4658, !tbaa !2186
  %29 = icmp eq i8 %28, 0, !dbg !4659
  br i1 %29, label %45, label %30, !dbg !4660

30:                                               ; preds = %27
  %31 = tail call i16** @__ctype_b_loc() #17, !dbg !4661
  %32 = load i16*, i16** %31, align 8, !dbg !4661, !tbaa !300
  %33 = sext i8 %28 to i64, !dbg !4661
  %34 = getelementptr inbounds i16, i16* %32, i64 %33, !dbg !4661
  %35 = load i16, i16* %34, align 2, !dbg !4661, !tbaa !2187
  %36 = and i16 %35, 8192, !dbg !4661
  %37 = icmp eq i16 %36, 0, !dbg !4661
  br i1 %37, label %38, label %45, !dbg !4662

38:                                               ; preds = %30, %19
  %39 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.211, i64 0, i64 0), i8* %23, i8* %24) #15, !dbg !4663
  %40 = extractvalue { i64, %struct.jv_refcnt* } %39, 0, !dbg !4663
  %41 = extractvalue { i64, %struct.jv_refcnt* } %39, 1, !dbg !4663
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4665
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4665
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4665
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4665
  call void @llvm.dbg.value(metadata i64 %40, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4665
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %41, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4665
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4667
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4668
  %42 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %40, %struct.jv_refcnt* %41) #15, !dbg !4669
  %43 = extractvalue { i64, %struct.jv_refcnt* } %42, 0, !dbg !4670
  %44 = extractvalue { i64, %struct.jv_refcnt* } %42, 1, !dbg !4670
  br label %85, !dbg !4671

45:                                               ; preds = %30, %27
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4672
  %46 = load i32, i32* %21, align 8, !dbg !4673, !tbaa !4646
  %47 = icmp eq i32 %46, 8, !dbg !4675
  br i1 %47, label %48, label %57, !dbg !4676

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.tm, %struct.tm* %6, i64 0, i32 3, !dbg !4677
  %50 = load i32, i32* %49, align 4, !dbg !4677, !tbaa !4678
  %51 = icmp eq i32 %50, 0, !dbg !4679
  br i1 %51, label %57, label %52, !dbg !4680

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.tm, %struct.tm* %6, i64 0, i32 4, !dbg !4681
  %54 = load i32, i32* %53, align 8, !dbg !4681, !tbaa !4682
  %55 = icmp ult i32 %54, 12, !dbg !4683
  br i1 %55, label %56, label %57, !dbg !4683

56:                                               ; preds = %52
  call fastcc void @set_tm_wday(%struct.tm* nonnull %6), !dbg !4684
  br label %57, !dbg !4684

57:                                               ; preds = %56, %52, %48, %45
  %58 = load i32, i32* %22, align 4, !dbg !4685, !tbaa !4651
  %59 = icmp eq i32 %58, 367, !dbg !4687
  br i1 %59, label %60, label %69, !dbg !4688

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.tm, %struct.tm* %6, i64 0, i32 3, !dbg !4689
  %62 = load i32, i32* %61, align 4, !dbg !4689, !tbaa !4678
  %63 = icmp eq i32 %62, 0, !dbg !4690
  br i1 %63, label %69, label %64, !dbg !4691

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.tm, %struct.tm* %6, i64 0, i32 4, !dbg !4692
  %66 = load i32, i32* %65, align 8, !dbg !4692, !tbaa !4682
  %67 = icmp ult i32 %66, 12, !dbg !4693
  br i1 %67, label %68, label %69, !dbg !4693

68:                                               ; preds = %64
  call fastcc void @set_tm_yday(%struct.tm* nonnull %6), !dbg !4694
  br label %69, !dbg !4694

69:                                               ; preds = %68, %64, %60, %57
  %70 = call fastcc { i64, %struct.jv_refcnt* } @tm2jv(%struct.tm* nonnull %6), !dbg !4695
  %71 = extractvalue { i64, %struct.jv_refcnt* } %70, 0, !dbg !4695
  call void @llvm.dbg.value(metadata i64 %71, metadata !4623, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4624
  %72 = extractvalue { i64, %struct.jv_refcnt* } %70, 1, !dbg !4695
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %72, metadata !4623, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4624
  %73 = load i8, i8* %25, align 1, !dbg !4696, !tbaa !2186
  %74 = icmp eq i8 %73, 0, !dbg !4698
  br i1 %74, label %82, label %75, !dbg !4699

75:                                               ; preds = %69
  %76 = call { i64, %struct.jv_refcnt* } @jv_string(i8* nonnull %25) #15, !dbg !4700
  %77 = extractvalue { i64, %struct.jv_refcnt* } %76, 0, !dbg !4700
  %78 = extractvalue { i64, %struct.jv_refcnt* } %76, 1, !dbg !4700
  %79 = call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %71, %struct.jv_refcnt* %72, i64 %77, %struct.jv_refcnt* %78) #15, !dbg !4701
  %80 = extractvalue { i64, %struct.jv_refcnt* } %79, 0, !dbg !4701
  %81 = extractvalue { i64, %struct.jv_refcnt* } %79, 1, !dbg !4701
  call void @llvm.dbg.value(metadata i64 %80, metadata !4623, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4624
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %81, metadata !4623, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4624
  br label %82, !dbg !4702

82:                                               ; preds = %75, %69
  %83 = phi i64 [ %80, %75 ], [ %71, %69 ], !dbg !4624
  %84 = phi %struct.jv_refcnt* [ %81, %75 ], [ %72, %69 ], !dbg !4624
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %84, metadata !4623, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4624
  call void @llvm.dbg.value(metadata i64 %83, metadata !4623, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4624
  call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4703
  br label %85

85:                                               ; preds = %82, %38
  %86 = phi i64 [ %43, %38 ], [ %83, %82 ], !dbg !4624
  %87 = phi %struct.jv_refcnt* [ %44, %38 ], [ %84, %82 ], !dbg !4624
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #15, !dbg !4704
  br label %88

88:                                               ; preds = %85, %12
  %89 = phi i64 [ %17, %12 ], [ %86, %85 ], !dbg !4624
  %90 = phi %struct.jv_refcnt* [ %18, %12 ], [ %87, %85 ], !dbg !4624
  %91 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %89, 0, !dbg !4704
  %92 = insertvalue { i64, %struct.jv_refcnt* } %91, %struct.jv_refcnt* %90, 1, !dbg !4704
  ret { i64, %struct.jv_refcnt* } %92, !dbg !4704
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_strftime(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !4705 {
  %6 = alloca %struct.tm, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4708, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4715
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4708, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4715
  call void @llvm.dbg.value(metadata i64 %3, metadata !4709, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4715
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !4709, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4715
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4707, metadata !DIExpression()), !dbg !4715
  %7 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4716
  %8 = icmp eq i32 %7, 4, !dbg !4718
  br i1 %8, label %9, label %16, !dbg !4719

9:                                                ; preds = %5
  %10 = tail call { i64, %struct.jv_refcnt* } @f_gmtime(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2), !dbg !4720
  %11 = extractvalue { i64, %struct.jv_refcnt* } %10, 0, !dbg !4720
  %12 = extractvalue { i64, %struct.jv_refcnt* } %10, 1, !dbg !4720
  call void @llvm.dbg.value(metadata i64 %11, metadata !4708, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4715
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %12, metadata !4708, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4715
  call void @llvm.dbg.value(metadata i64 %11, metadata !2582, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4722
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %12, metadata !2582, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4722
  %13 = tail call i32 @jv_get_kind(i64 %11, %struct.jv_refcnt* %12) #15, !dbg !4725
  %14 = icmp eq i32 %13, 0, !dbg !4726
  br i1 %14, label %15, label %32, !dbg !4727

15:                                               ; preds = %9
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4728
  br label %61, !dbg !4730

16:                                               ; preds = %5
  %17 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4731
  %18 = icmp eq i32 %17, 6, !dbg !4733
  br i1 %18, label %24, label %19, !dbg !4734

19:                                               ; preds = %16
  %20 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.213, i64 0, i64 0)) #15, !dbg !4735
  %21 = extractvalue { i64, %struct.jv_refcnt* } %20, 0, !dbg !4735
  %22 = extractvalue { i64, %struct.jv_refcnt* } %20, 1, !dbg !4735
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4737
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4737
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4737
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4737
  call void @llvm.dbg.value(metadata i64 %21, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4737
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %22, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4737
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4739
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4740
  %23 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %21, %struct.jv_refcnt* %22) #15, !dbg !4741
  br label %61, !dbg !4742

24:                                               ; preds = %16
  %25 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4743
  %26 = icmp eq i32 %25, 5, !dbg !4745
  br i1 %26, label %32, label %27, !dbg !4746

27:                                               ; preds = %24
  %28 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.214, i64 0, i64 0)) #15, !dbg !4747
  %29 = extractvalue { i64, %struct.jv_refcnt* } %28, 0, !dbg !4747
  %30 = extractvalue { i64, %struct.jv_refcnt* } %28, 1, !dbg !4747
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4749
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4749
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4749
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4749
  call void @llvm.dbg.value(metadata i64 %29, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4749
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %30, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4749
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4751
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4752
  %31 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %29, %struct.jv_refcnt* %30) #15, !dbg !4753
  br label %61, !dbg !4754

32:                                               ; preds = %24, %9
  %33 = phi i64 [ %11, %9 ], [ %1, %24 ]
  %34 = phi %struct.jv_refcnt* [ %12, %9 ], [ %2, %24 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %34, metadata !4708, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4715
  call void @llvm.dbg.value(metadata i64 %33, metadata !4708, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4715
  %35 = bitcast %struct.tm* %6 to i8*, !dbg !4755
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %35) #15, !dbg !4755
  call void @llvm.dbg.declare(metadata %struct.tm* %6, metadata !4710, metadata !DIExpression()), !dbg !4756
  %36 = call fastcc i32 @jv2tm(i64 %33, %struct.jv_refcnt* %34, %struct.tm* nonnull %6), !dbg !4757
  %37 = icmp eq i32 %36, 0, !dbg !4757
  br i1 %37, label %38, label %43, !dbg !4759

38:                                               ; preds = %32
  %39 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.213, i64 0, i64 0)) #15, !dbg !4760
  %40 = extractvalue { i64, %struct.jv_refcnt* } %39, 0, !dbg !4760
  %41 = extractvalue { i64, %struct.jv_refcnt* } %39, 1, !dbg !4760
  call void @llvm.dbg.value(metadata i64 %3, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4761
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4761
  call void @llvm.dbg.value(metadata i64 %40, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4761
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %41, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4761
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4763
  %42 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %40, %struct.jv_refcnt* %41) #15, !dbg !4764
  br label %59, !dbg !4765

43:                                               ; preds = %32
  %44 = tail call i8* @jv_string_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4766
  call void @llvm.dbg.value(metadata i8* %44, metadata !4711, metadata !DIExpression()), !dbg !4715
  %45 = tail call i64 @strlen(i8* noundef nonnull dereferenceable(1) %44) #19, !dbg !4767
  %46 = add i64 %45, 100, !dbg !4768
  call void @llvm.dbg.value(metadata i64 %46, metadata !4712, metadata !DIExpression()), !dbg !4715
  %47 = alloca i8, i64 %46, align 16, !dbg !4769
  call void @llvm.dbg.value(metadata i8* %47, metadata !4713, metadata !DIExpression()), !dbg !4715
  %48 = call i64 @strftime(i8* nonnull %47, i64 %46, i8* %44, %struct.tm* nonnull %6) #15, !dbg !4770
  call void @llvm.dbg.value(metadata i64 %48, metadata !4714, metadata !DIExpression()), !dbg !4715
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4771
  %49 = icmp eq i64 %48, 0, !dbg !4772
  %50 = icmp ugt i64 %48, %46
  %51 = select i1 %49, i1 true, i1 %50, !dbg !4774
  br i1 %51, label %52, label %57, !dbg !4774

52:                                               ; preds = %43
  %53 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.215, i64 0, i64 0)) #15, !dbg !4775
  %54 = extractvalue { i64, %struct.jv_refcnt* } %53, 0, !dbg !4775
  %55 = extractvalue { i64, %struct.jv_refcnt* } %53, 1, !dbg !4775
  %56 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %54, %struct.jv_refcnt* %55) #15, !dbg !4776
  br label %59, !dbg !4777

57:                                               ; preds = %43
  %58 = call { i64, %struct.jv_refcnt* } @jv_string(i8* nonnull %47) #15, !dbg !4778
  br label %59, !dbg !4779

59:                                               ; preds = %52, %57, %38
  %60 = phi { i64, %struct.jv_refcnt* } [ %42, %38 ], [ %56, %52 ], [ %58, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %35) #15, !dbg !4780
  br label %61

61:                                               ; preds = %59, %27, %19, %15
  %62 = phi { i64, %struct.jv_refcnt* } [ %60, %59 ], [ %31, %27 ], [ %23, %19 ], [ %10, %15 ], !dbg !4780
  ret { i64, %struct.jv_refcnt* } %62, !dbg !4780
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_strflocaltime(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2, i64 %3, %struct.jv_refcnt* %4) #0 !dbg !4781 {
  %6 = alloca %struct.tm, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4784, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4791
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4784, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4791
  call void @llvm.dbg.value(metadata i64 %3, metadata !4785, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4791
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !4785, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4791
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4783, metadata !DIExpression()), !dbg !4791
  %7 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4792
  %8 = icmp eq i32 %7, 4, !dbg !4794
  br i1 %8, label %9, label %13, !dbg !4795

9:                                                ; preds = %5
  %10 = tail call { i64, %struct.jv_refcnt* } @f_localtime(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2), !dbg !4796
  %11 = extractvalue { i64, %struct.jv_refcnt* } %10, 0, !dbg !4796
  %12 = extractvalue { i64, %struct.jv_refcnt* } %10, 1, !dbg !4796
  call void @llvm.dbg.value(metadata i64 %11, metadata !4784, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4791
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %12, metadata !4784, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4791
  br label %29, !dbg !4798

13:                                               ; preds = %5
  %14 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4799
  %15 = icmp eq i32 %14, 6, !dbg !4801
  br i1 %15, label %21, label %16, !dbg !4802

16:                                               ; preds = %13
  %17 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.216, i64 0, i64 0)) #15, !dbg !4803
  %18 = extractvalue { i64, %struct.jv_refcnt* } %17, 0, !dbg !4803
  %19 = extractvalue { i64, %struct.jv_refcnt* } %17, 1, !dbg !4803
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4805
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4805
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4805
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4805
  call void @llvm.dbg.value(metadata i64 %18, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4805
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %19, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4805
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4807
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4808
  %20 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %18, %struct.jv_refcnt* %19) #15, !dbg !4809
  br label %58, !dbg !4810

21:                                               ; preds = %13
  %22 = tail call i32 @jv_get_kind(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4811
  %23 = icmp eq i32 %22, 5, !dbg !4813
  br i1 %23, label %29, label %24, !dbg !4814

24:                                               ; preds = %21
  %25 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.217, i64 0, i64 0)) #15, !dbg !4815
  %26 = extractvalue { i64, %struct.jv_refcnt* } %25, 0, !dbg !4815
  %27 = extractvalue { i64, %struct.jv_refcnt* } %25, 1, !dbg !4815
  call void @llvm.dbg.value(metadata i64 %1, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4817
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2707, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4817
  call void @llvm.dbg.value(metadata i64 %3, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4817
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %4, metadata !2712, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4817
  call void @llvm.dbg.value(metadata i64 %26, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4817
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %27, metadata !2713, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4817
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4819
  tail call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4820
  %28 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %26, %struct.jv_refcnt* %27) #15, !dbg !4821
  br label %58, !dbg !4822

29:                                               ; preds = %21, %9
  %30 = phi i64 [ %11, %9 ], [ %1, %21 ]
  %31 = phi %struct.jv_refcnt* [ %12, %9 ], [ %2, %21 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %31, metadata !4784, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4791
  call void @llvm.dbg.value(metadata i64 %30, metadata !4784, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4791
  %32 = bitcast %struct.tm* %6 to i8*, !dbg !4823
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %32) #15, !dbg !4823
  call void @llvm.dbg.declare(metadata %struct.tm* %6, metadata !4786, metadata !DIExpression()), !dbg !4824
  %33 = call fastcc i32 @jv2tm(i64 %30, %struct.jv_refcnt* %31, %struct.tm* nonnull %6), !dbg !4825
  %34 = icmp eq i32 %33, 0, !dbg !4825
  br i1 %34, label %35, label %40, !dbg !4827

35:                                               ; preds = %29
  %36 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.216, i64 0, i64 0)) #15, !dbg !4828
  %37 = extractvalue { i64, %struct.jv_refcnt* } %36, 0, !dbg !4828
  %38 = extractvalue { i64, %struct.jv_refcnt* } %36, 1, !dbg !4828
  %39 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %37, %struct.jv_refcnt* %38) #15, !dbg !4829
  br label %56, !dbg !4830

40:                                               ; preds = %29
  %41 = tail call i8* @jv_string_value(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4831
  call void @llvm.dbg.value(metadata i8* %41, metadata !4787, metadata !DIExpression()), !dbg !4791
  %42 = tail call i64 @strlen(i8* noundef nonnull dereferenceable(1) %41) #19, !dbg !4832
  %43 = add i64 %42, 100, !dbg !4833
  call void @llvm.dbg.value(metadata i64 %43, metadata !4788, metadata !DIExpression()), !dbg !4791
  %44 = alloca i8, i64 %43, align 16, !dbg !4834
  call void @llvm.dbg.value(metadata i8* %44, metadata !4789, metadata !DIExpression()), !dbg !4791
  %45 = call i64 @strftime(i8* nonnull %44, i64 %43, i8* %41, %struct.tm* nonnull %6) #15, !dbg !4835
  call void @llvm.dbg.value(metadata i64 %45, metadata !4790, metadata !DIExpression()), !dbg !4791
  call void @jv_free(i64 %3, %struct.jv_refcnt* %4) #15, !dbg !4836
  %46 = icmp eq i64 %45, 0, !dbg !4837
  %47 = icmp ugt i64 %45, %43
  %48 = select i1 %46, i1 true, i1 %47, !dbg !4839
  br i1 %48, label %49, label %54, !dbg !4839

49:                                               ; preds = %40
  %50 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.218, i64 0, i64 0)) #15, !dbg !4840
  %51 = extractvalue { i64, %struct.jv_refcnt* } %50, 0, !dbg !4840
  %52 = extractvalue { i64, %struct.jv_refcnt* } %50, 1, !dbg !4840
  %53 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %51, %struct.jv_refcnt* %52) #15, !dbg !4841
  br label %56, !dbg !4842

54:                                               ; preds = %40
  %55 = call { i64, %struct.jv_refcnt* } @jv_string(i8* nonnull %44) #15, !dbg !4843
  br label %56, !dbg !4844

56:                                               ; preds = %49, %54, %35
  %57 = phi { i64, %struct.jv_refcnt* } [ %39, %35 ], [ %53, %49 ], [ %55, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %32) #15, !dbg !4845
  br label %58

58:                                               ; preds = %56, %24, %16
  %59 = phi { i64, %struct.jv_refcnt* } [ %57, %56 ], [ %20, %16 ], [ %28, %24 ]
  ret { i64, %struct.jv_refcnt* } %59, !dbg !4845
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_mktime(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !4846 {
  %4 = alloca %struct.tm, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4849, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4852
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4849, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4852
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4848, metadata !DIExpression()), !dbg !4852
  %5 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4853
  %6 = icmp eq i32 %5, 6, !dbg !4855
  br i1 %6, label %12, label %7, !dbg !4856

7:                                                ; preds = %3
  %8 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.219, i64 0, i64 0)) #15, !dbg !4857
  %9 = extractvalue { i64, %struct.jv_refcnt* } %8, 0, !dbg !4857
  %10 = extractvalue { i64, %struct.jv_refcnt* } %8, 1, !dbg !4857
  call void @llvm.dbg.value(metadata i64 %1, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4858
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4858
  call void @llvm.dbg.value(metadata i64 %9, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4858
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %10, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4858
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4860
  %11 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %9, %struct.jv_refcnt* %10) #15, !dbg !4861
  br label %49, !dbg !4862

12:                                               ; preds = %3
  %13 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4863
  %14 = extractvalue { i64, %struct.jv_refcnt* } %13, 0, !dbg !4863
  %15 = extractvalue { i64, %struct.jv_refcnt* } %13, 1, !dbg !4863
  %16 = tail call i32 @jv_array_length(i64 %14, %struct.jv_refcnt* %15) #15, !dbg !4865
  %17 = icmp slt i32 %16, 6, !dbg !4866
  br i1 %17, label %18, label %23, !dbg !4867

18:                                               ; preds = %12
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.220, i64 0, i64 0)) #15, !dbg !4868
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !4868
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !4868
  call void @llvm.dbg.value(metadata i64 %1, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4869
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4869
  call void @llvm.dbg.value(metadata i64 %20, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4869
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %21, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4869
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4871
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %20, %struct.jv_refcnt* %21) #15, !dbg !4872
  br label %49, !dbg !4873

23:                                               ; preds = %12
  %24 = bitcast %struct.tm* %4 to i8*, !dbg !4874
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %24) #15, !dbg !4874
  call void @llvm.dbg.declare(metadata %struct.tm* %4, metadata !4850, metadata !DIExpression()), !dbg !4875
  %25 = call fastcc i32 @jv2tm(i64 %1, %struct.jv_refcnt* %2, %struct.tm* nonnull %4), !dbg !4876
  %26 = icmp eq i32 %25, 0, !dbg !4876
  br i1 %26, label %27, label %32, !dbg !4878

27:                                               ; preds = %23
  %28 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.220, i64 0, i64 0)) #15, !dbg !4879
  %29 = extractvalue { i64, %struct.jv_refcnt* } %28, 0, !dbg !4879
  %30 = extractvalue { i64, %struct.jv_refcnt* } %28, 1, !dbg !4879
  %31 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %29, %struct.jv_refcnt* %30) #15, !dbg !4880
  br label %47, !dbg !4881

32:                                               ; preds = %23
  call void @llvm.dbg.value(metadata %struct.tm* %4, metadata !4882, metadata !DIExpression()) #15, !dbg !4887
  %33 = call i64 @timegm(%struct.tm* nonnull %4) #15, !dbg !4889
  call void @llvm.dbg.value(metadata i64 %33, metadata !4851, metadata !DIExpression()), !dbg !4852
  switch i64 %33, label %44 [
    i64 -1, label %34
    i64 -2, label %39
  ], !dbg !4890

34:                                               ; preds = %32
  %35 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.221, i64 0, i64 0)) #15, !dbg !4891
  %36 = extractvalue { i64, %struct.jv_refcnt* } %35, 0, !dbg !4891
  %37 = extractvalue { i64, %struct.jv_refcnt* } %35, 1, !dbg !4891
  %38 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %36, %struct.jv_refcnt* %37) #15, !dbg !4893
  br label %47, !dbg !4894

39:                                               ; preds = %32
  %40 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.222, i64 0, i64 0)) #15, !dbg !4895
  %41 = extractvalue { i64, %struct.jv_refcnt* } %40, 0, !dbg !4895
  %42 = extractvalue { i64, %struct.jv_refcnt* } %40, 1, !dbg !4895
  %43 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %41, %struct.jv_refcnt* %42) #15, !dbg !4897
  br label %47, !dbg !4898

44:                                               ; preds = %32
  %45 = sitofp i64 %33 to double, !dbg !4899
  %46 = call { i64, %struct.jv_refcnt* } @jv_number(double %45) #15, !dbg !4900
  br label %47, !dbg !4901

47:                                               ; preds = %34, %39, %44, %27
  %48 = phi { i64, %struct.jv_refcnt* } [ %31, %27 ], [ %38, %34 ], [ %43, %39 ], [ %46, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %24) #15, !dbg !4902
  br label %49

49:                                               ; preds = %47, %18, %7
  %50 = phi { i64, %struct.jv_refcnt* } [ %11, %7 ], [ %22, %18 ], [ %48, %47 ]
  ret { i64, %struct.jv_refcnt* } %50, !dbg !4902
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_gmtime(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !4903 {
  %4 = alloca %struct.tm, align 8
  %5 = alloca i64, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4906, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4911
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4906, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4911
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4905, metadata !DIExpression()), !dbg !4911
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4912
  %7 = icmp eq i32 %6, 4, !dbg !4914
  br i1 %7, label %13, label %8, !dbg !4915

8:                                                ; preds = %3
  %9 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.223, i64 0, i64 0)) #15, !dbg !4916
  %10 = extractvalue { i64, %struct.jv_refcnt* } %9, 0, !dbg !4916
  %11 = extractvalue { i64, %struct.jv_refcnt* } %9, 1, !dbg !4916
  call void @llvm.dbg.value(metadata i64 %1, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4917
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4917
  call void @llvm.dbg.value(metadata i64 %10, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4917
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %11, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4917
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4919
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %10, %struct.jv_refcnt* %11) #15, !dbg !4920
  br label %45, !dbg !4921

13:                                               ; preds = %3
  %14 = bitcast %struct.tm* %4 to i8*, !dbg !4922
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %14) #15, !dbg !4922
  call void @llvm.dbg.declare(metadata %struct.tm* %4, metadata !4907, metadata !DIExpression()), !dbg !4923
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %14, i8 0, i64 56, i1 false), !dbg !4924
  %15 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4925
  call void @llvm.dbg.value(metadata double %15, metadata !4909, metadata !DIExpression()), !dbg !4911
  %16 = bitcast i64* %5 to i8*, !dbg !4926
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #15, !dbg !4926
  %17 = fptosi double %15 to i64, !dbg !4927
  call void @llvm.dbg.value(metadata i64 %17, metadata !4910, metadata !DIExpression()), !dbg !4911
  store i64 %17, i64* %5, align 8, !dbg !4928, !tbaa !4929
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4930
  call void @llvm.dbg.value(metadata i64* %5, metadata !4910, metadata !DIExpression(DW_OP_deref)), !dbg !4911
  %18 = call %struct.tm* @gmtime_r(i64* nonnull %5, %struct.tm* nonnull %4) #15, !dbg !4931
  call void @llvm.dbg.value(metadata %struct.tm* %18, metadata !4908, metadata !DIExpression()), !dbg !4911
  %19 = icmp eq %struct.tm* %18, null, !dbg !4932
  br i1 %19, label %20, label %25, !dbg !4934

20:                                               ; preds = %13
  %21 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.224, i64 0, i64 0)) #15, !dbg !4935
  %22 = extractvalue { i64, %struct.jv_refcnt* } %21, 0, !dbg !4935
  %23 = extractvalue { i64, %struct.jv_refcnt* } %21, 1, !dbg !4935
  %24 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %22, %struct.jv_refcnt* %23) #15, !dbg !4936
  br label %43, !dbg !4937

25:                                               ; preds = %13
  %26 = call fastcc { i64, %struct.jv_refcnt* } @tm2jv(%struct.tm* nonnull %18), !dbg !4938
  %27 = extractvalue { i64, %struct.jv_refcnt* } %26, 0, !dbg !4938
  %28 = extractvalue { i64, %struct.jv_refcnt* } %26, 1, !dbg !4938
  call void @llvm.dbg.value(metadata i64 %27, metadata !4906, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4911
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %28, metadata !4906, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4911
  %29 = call { i64, %struct.jv_refcnt* } @jv_copy(i64 %27, %struct.jv_refcnt* %28) #15, !dbg !4939
  %30 = extractvalue { i64, %struct.jv_refcnt* } %29, 0, !dbg !4939
  %31 = extractvalue { i64, %struct.jv_refcnt* } %29, 1, !dbg !4939
  %32 = call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %30, %struct.jv_refcnt* %31, i32 5) #15, !dbg !4940
  %33 = extractvalue { i64, %struct.jv_refcnt* } %32, 0, !dbg !4940
  %34 = extractvalue { i64, %struct.jv_refcnt* } %32, 1, !dbg !4940
  %35 = call double @jv_number_value(i64 %33, %struct.jv_refcnt* %34) #15, !dbg !4941
  %36 = call double @llvm.floor.f64(double %15), !dbg !4942
  %37 = fsub double %15, %36, !dbg !4943
  %38 = fadd double %37, %35, !dbg !4944
  %39 = call { i64, %struct.jv_refcnt* } @jv_number(double %38) #15, !dbg !4945
  %40 = extractvalue { i64, %struct.jv_refcnt* } %39, 0, !dbg !4945
  %41 = extractvalue { i64, %struct.jv_refcnt* } %39, 1, !dbg !4945
  %42 = call { i64, %struct.jv_refcnt* } @jv_array_set(i64 %27, %struct.jv_refcnt* %28, i32 5, i64 %40, %struct.jv_refcnt* %41) #15, !dbg !4946
  br label %43, !dbg !4947

43:                                               ; preds = %25, %20
  %44 = phi { i64, %struct.jv_refcnt* } [ %24, %20 ], [ %42, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #15, !dbg !4948
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %14) #15, !dbg !4948
  br label %45

45:                                               ; preds = %43, %8
  %46 = phi { i64, %struct.jv_refcnt* } [ %12, %8 ], [ %44, %43 ]
  ret { i64, %struct.jv_refcnt* } %46, !dbg !4948
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_localtime(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !4949 {
  %4 = alloca %struct.tm, align 8
  %5 = alloca i64, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4952, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4957
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4952, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4957
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4951, metadata !DIExpression()), !dbg !4957
  %6 = tail call i32 @jv_get_kind(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4958
  %7 = icmp eq i32 %6, 4, !dbg !4960
  br i1 %7, label %13, label %8, !dbg !4961

8:                                                ; preds = %3
  %9 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.225, i64 0, i64 0)) #15, !dbg !4962
  %10 = extractvalue { i64, %struct.jv_refcnt* } %9, 0, !dbg !4962
  %11 = extractvalue { i64, %struct.jv_refcnt* } %9, 1, !dbg !4962
  call void @llvm.dbg.value(metadata i64 %1, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4963
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !2873, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4963
  call void @llvm.dbg.value(metadata i64 %10, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !4963
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %11, metadata !2878, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !4963
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4965
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %10, %struct.jv_refcnt* %11) #15, !dbg !4966
  br label %45, !dbg !4967

13:                                               ; preds = %3
  %14 = bitcast %struct.tm* %4 to i8*, !dbg !4968
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %14) #15, !dbg !4968
  call void @llvm.dbg.declare(metadata %struct.tm* %4, metadata !4953, metadata !DIExpression()), !dbg !4969
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %14, i8 0, i64 56, i1 false), !dbg !4970
  %15 = tail call double @jv_number_value(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4971
  call void @llvm.dbg.value(metadata double %15, metadata !4955, metadata !DIExpression()), !dbg !4957
  %16 = bitcast i64* %5 to i8*, !dbg !4972
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #15, !dbg !4972
  %17 = fptosi double %15 to i64, !dbg !4973
  call void @llvm.dbg.value(metadata i64 %17, metadata !4956, metadata !DIExpression()), !dbg !4957
  store i64 %17, i64* %5, align 8, !dbg !4974, !tbaa !4929
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !4975
  call void @llvm.dbg.value(metadata i64* %5, metadata !4956, metadata !DIExpression(DW_OP_deref)), !dbg !4957
  %18 = call %struct.tm* @localtime_r(i64* nonnull %5, %struct.tm* nonnull %4) #15, !dbg !4976
  call void @llvm.dbg.value(metadata %struct.tm* %18, metadata !4954, metadata !DIExpression()), !dbg !4957
  %19 = icmp eq %struct.tm* %18, null, !dbg !4977
  br i1 %19, label %20, label %25, !dbg !4979

20:                                               ; preds = %13
  %21 = call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.224, i64 0, i64 0)) #15, !dbg !4980
  %22 = extractvalue { i64, %struct.jv_refcnt* } %21, 0, !dbg !4980
  %23 = extractvalue { i64, %struct.jv_refcnt* } %21, 1, !dbg !4980
  %24 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %22, %struct.jv_refcnt* %23) #15, !dbg !4981
  br label %43, !dbg !4982

25:                                               ; preds = %13
  %26 = call fastcc { i64, %struct.jv_refcnt* } @tm2jv(%struct.tm* nonnull %18), !dbg !4983
  %27 = extractvalue { i64, %struct.jv_refcnt* } %26, 0, !dbg !4983
  %28 = extractvalue { i64, %struct.jv_refcnt* } %26, 1, !dbg !4983
  call void @llvm.dbg.value(metadata i64 %27, metadata !4952, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !4957
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %28, metadata !4952, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !4957
  %29 = call { i64, %struct.jv_refcnt* } @jv_copy(i64 %27, %struct.jv_refcnt* %28) #15, !dbg !4984
  %30 = extractvalue { i64, %struct.jv_refcnt* } %29, 0, !dbg !4984
  %31 = extractvalue { i64, %struct.jv_refcnt* } %29, 1, !dbg !4984
  %32 = call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %30, %struct.jv_refcnt* %31, i32 5) #15, !dbg !4985
  %33 = extractvalue { i64, %struct.jv_refcnt* } %32, 0, !dbg !4985
  %34 = extractvalue { i64, %struct.jv_refcnt* } %32, 1, !dbg !4985
  %35 = call double @jv_number_value(i64 %33, %struct.jv_refcnt* %34) #15, !dbg !4986
  %36 = call double @llvm.floor.f64(double %15), !dbg !4987
  %37 = fsub double %15, %36, !dbg !4988
  %38 = fadd double %37, %35, !dbg !4989
  %39 = call { i64, %struct.jv_refcnt* } @jv_number(double %38) #15, !dbg !4990
  %40 = extractvalue { i64, %struct.jv_refcnt* } %39, 0, !dbg !4990
  %41 = extractvalue { i64, %struct.jv_refcnt* } %39, 1, !dbg !4990
  %42 = call { i64, %struct.jv_refcnt* } @jv_array_set(i64 %27, %struct.jv_refcnt* %28, i32 5, i64 %40, %struct.jv_refcnt* %41) #15, !dbg !4991
  br label %43, !dbg !4992

43:                                               ; preds = %25, %20
  %44 = phi { i64, %struct.jv_refcnt* } [ %24, %20 ], [ %42, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #15, !dbg !4993
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %14) #15, !dbg !4993
  br label %45

45:                                               ; preds = %43, %8
  %46 = phi { i64, %struct.jv_refcnt* } [ %12, %8 ], [ %44, %43 ]
  ret { i64, %struct.jv_refcnt* } %46, !dbg !4993
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_now(%struct.jq_state* nocapture readnone %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !4994 {
  %4 = alloca %struct.timeval, align 8
  call void @llvm.dbg.value(metadata i64 %1, metadata !4997, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5005
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !4997, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5005
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !4996, metadata !DIExpression()), !dbg !5005
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !5006
  %5 = bitcast %struct.timeval* %4 to i8*, !dbg !5007
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #15, !dbg !5007
  call void @llvm.dbg.declare(metadata %struct.timeval* %4, metadata !4998, metadata !DIExpression()), !dbg !5008
  %6 = call i32 @gettimeofday(%struct.timeval* nonnull %4, i8* null) #15, !dbg !5009
  %7 = icmp eq i32 %6, -1, !dbg !5011
  br i1 %7, label %8, label %11, !dbg !5012

8:                                                ; preds = %3
  %9 = tail call i64 @time(i64* null) #15, !dbg !5013
  %10 = sitofp i64 %9 to double, !dbg !5013
  br label %20, !dbg !5014

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i64 0, i32 0, !dbg !5015
  %13 = load i64, i64* %12, align 8, !dbg !5015, !tbaa !5016
  %14 = sitofp i64 %13 to double, !dbg !5018
  %15 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i64 0, i32 1, !dbg !5019
  %16 = load i64, i64* %15, align 8, !dbg !5019, !tbaa !5020
  %17 = sitofp i64 %16 to double, !dbg !5021
  %18 = fdiv double %17, 1.000000e+06, !dbg !5022
  %19 = fadd double %18, %14, !dbg !5023
  br label %20, !dbg !5024

20:                                               ; preds = %11, %8
  %21 = phi double [ %19, %11 ], [ %10, %8 ]
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %21) #15, !dbg !5005
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #15, !dbg !5025
  ret { i64, %struct.jv_refcnt* } %22, !dbg !5025
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_current_filename(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !5026 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !5029, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5031
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !5029, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5031
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !5028, metadata !DIExpression()), !dbg !5031
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !5032
  %4 = tail call { i64, %struct.jv_refcnt* } @jq_util_input_get_current_filename(%struct.jq_state* %0) #15, !dbg !5033
  %5 = extractvalue { i64, %struct.jv_refcnt* } %4, 0, !dbg !5033
  call void @llvm.dbg.value(metadata i64 %5, metadata !5030, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5031
  %6 = extractvalue { i64, %struct.jv_refcnt* } %4, 1, !dbg !5033
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %6, metadata !5030, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5031
  call void @llvm.dbg.value(metadata i64 %5, metadata !2582, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)) #15, !dbg !5034
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %6, metadata !2582, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)) #15, !dbg !5034
  %7 = tail call i32 @jv_get_kind(i64 %5, %struct.jv_refcnt* %6) #15, !dbg !5037
  %8 = icmp eq i32 %7, 0, !dbg !5038
  br i1 %8, label %9, label %11, !dbg !5039

9:                                                ; preds = %3
  tail call void @jv_free(i64 %5, %struct.jv_refcnt* %6) #15, !dbg !5040
  %10 = tail call { i64, %struct.jv_refcnt* } @jv_null() #15, !dbg !5041
  br label %11, !dbg !5042

11:                                               ; preds = %3, %9
  %12 = phi { i64, %struct.jv_refcnt* } [ %10, %9 ], [ %4, %3 ], !dbg !5043
  ret { i64, %struct.jv_refcnt* } %12, !dbg !5043
}

; Function Attrs: nounwind sspstrong uwtable
define internal { i64, %struct.jv_refcnt* } @f_current_line(%struct.jq_state* %0, i64 %1, %struct.jv_refcnt* %2) #0 !dbg !5044 {
  call void @llvm.dbg.value(metadata i64 %1, metadata !5047, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5048
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %2, metadata !5047, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5048
  call void @llvm.dbg.value(metadata %struct.jq_state* %0, metadata !5046, metadata !DIExpression()), !dbg !5048
  tail call void @jv_free(i64 %1, %struct.jv_refcnt* %2) #15, !dbg !5049
  %4 = tail call { i64, %struct.jv_refcnt* } @jq_util_input_get_current_line(%struct.jq_state* %0) #15, !dbg !5050
  ret { i64, %struct.jv_refcnt* } %4, !dbg !5051
}

declare !dbg !5052 i32 @jv_get_kind(i64, %struct.jv_refcnt*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc { i64, %struct.jv_refcnt* } @type_error(i64 %0, %struct.jv_refcnt* %1, i8* %2) unnamed_addr #0 !dbg !385 {
  %4 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %0, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5055
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %1, metadata !384, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5055
  call void @llvm.dbg.value(metadata i8* %2, metadata !389, metadata !DIExpression()), !dbg !5055
  %5 = getelementptr inbounds [15 x i8], [15 x i8]* %4, i64 0, i64 0, !dbg !5056
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %5) #15, !dbg !5056
  call void @llvm.dbg.declare(metadata [15 x i8]* %4, metadata !390, metadata !DIExpression()), !dbg !5057
  %6 = tail call i32 @jv_get_kind(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5058
  %7 = tail call i8* @jv_kind_name(i32 %6) #15, !dbg !5059
  %8 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5060
  %9 = extractvalue { i64, %struct.jv_refcnt* } %8, 0, !dbg !5060
  %10 = extractvalue { i64, %struct.jv_refcnt* } %8, 1, !dbg !5060
  %11 = call i8* @jv_dump_string_trunc(i64 %9, %struct.jv_refcnt* %10, i8* nonnull %5, i64 15) #15, !dbg !5061
  %12 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %7, i8* %11, i8* %2) #15, !dbg !5062
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !5062
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !5062
  %15 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %13, %struct.jv_refcnt* %14) #15, !dbg !5063
  call void @llvm.dbg.value(metadata i64 undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5055
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !394, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5055
  call void @jv_free(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5064
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %5) #15, !dbg !5065
  ret { i64, %struct.jv_refcnt* } %15, !dbg !5065
}

declare !dbg !5066 { i64, %struct.jv_refcnt* } @jv_number(double) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @acos(double) local_unnamed_addr #5

declare !dbg !5069 double @jv_number_value(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5072 void @jv_free(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5075 { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5078 { i64, %struct.jv_refcnt* } @jv_string_fmt(i8*, ...) local_unnamed_addr #3

declare !dbg !5081 i8* @jv_kind_name(i32) local_unnamed_addr #3

declare !dbg !5084 i8* @jv_dump_string_trunc(i64, %struct.jv_refcnt*, i8*, i64) local_unnamed_addr #3

declare !dbg !5087 { i64, %struct.jv_refcnt* } @jv_copy(i64, %struct.jv_refcnt*) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @acosh(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @asin(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @asinh(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @atan2(double, double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @atanh(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare double @cbrt(double) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @cosh(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @exp(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #1

; Function Attrs: nounwind
declare double @hypot(double, double) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5088 double @j0(double) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5092 double @j1(double) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @log(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @log10(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @pow(double, double) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @remainder(double, double) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @sinh(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @tanh(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare double @tgamma(double) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5093 double @y0(double) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5094 double @y1(double) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5095 double @jn(i32, double) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5098 double @yn(i32, double) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.copysign.f64(double, double) #1

; Function Attrs: nounwind
declare !dbg !5099 double @drem(double, double) local_unnamed_addr #7

; Function Attrs: nounwind
declare double @erf(double) local_unnamed_addr #7

; Function Attrs: nounwind
declare double @erfc(double) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5102 double @exp10(double) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @expm1(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #1

; Function Attrs: nounwind
declare double @fdim(double, double) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.maxnum.f64(double, double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double, double) #1

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @fmod(double, double) local_unnamed_addr #5

; Function Attrs: nounwind
declare !dbg !5103 double @gamma(double) local_unnamed_addr #7

; Function Attrs: nounwind
declare double @lgamma(double) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @log1p(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @logb(double) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.nearbyint.f64(double) #1

; Function Attrs: nounwind
declare double @nextafter(double, double) local_unnamed_addr #7

; Function Attrs: nounwind
declare double @nexttoward(double, x86_fp80) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.rint.f64(double) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.round.f64(double) #1

; Function Attrs: nounwind
declare !dbg !5104 double @scalb(double, double) local_unnamed_addr #7

; Function Attrs: nounwind
declare double @scalbln(double, i64) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5105 double @significand(double) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.trunc.f64(double) #1

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @ldexp(double, i32 signext) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @frexp(double, i32* nocapture) local_unnamed_addr #5

declare !dbg !5106 { i64, %struct.jv_refcnt* } @jv_array_append(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5109 { i64, %struct.jv_refcnt* } @jv_array() local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @modf(double, double* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind
declare !dbg !5110 double @lgamma_r(double, i32*) local_unnamed_addr #7

declare !dbg !5113 { i64, %struct.jv_refcnt* } @jv_string_concat(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5114 { i64, %struct.jv_refcnt* } @jv_array_concat(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5115 { i64, %struct.jv_refcnt* } @jv_object_merge(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %0, %struct.jv_refcnt* %1, i64 %2, %struct.jv_refcnt* %3, i8* %4) unnamed_addr #0 !dbg !5116 {
  %6 = alloca [15 x i8], align 1
  %7 = alloca [15 x i8], align 1
  call void @llvm.dbg.value(metadata i64 %0, metadata !5120, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5126
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %1, metadata !5120, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5126
  call void @llvm.dbg.value(metadata i64 %2, metadata !5121, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5126
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %3, metadata !5121, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5126
  call void @llvm.dbg.value(metadata i8* %4, metadata !5122, metadata !DIExpression()), !dbg !5126
  %8 = getelementptr inbounds [15 x i8], [15 x i8]* %6, i64 0, i64 0, !dbg !5127
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %8) #15, !dbg !5127
  call void @llvm.dbg.declare(metadata [15 x i8]* %6, metadata !5123, metadata !DIExpression()), !dbg !5128
  %9 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0, !dbg !5127
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %9) #15, !dbg !5127
  call void @llvm.dbg.declare(metadata [15 x i8]* %7, metadata !5124, metadata !DIExpression()), !dbg !5129
  %10 = tail call i32 @jv_get_kind(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5130
  %11 = tail call i8* @jv_kind_name(i32 %10) #15, !dbg !5131
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5132
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !5132
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !5132
  %15 = call i8* @jv_dump_string_trunc(i64 %13, %struct.jv_refcnt* %14, i8* nonnull %8, i64 15) #15, !dbg !5133
  %16 = call i32 @jv_get_kind(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5134
  %17 = call i8* @jv_kind_name(i32 %16) #15, !dbg !5135
  %18 = call { i64, %struct.jv_refcnt* } @jv_copy(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5136
  %19 = extractvalue { i64, %struct.jv_refcnt* } %18, 0, !dbg !5136
  %20 = extractvalue { i64, %struct.jv_refcnt* } %18, 1, !dbg !5136
  %21 = call i8* @jv_dump_string_trunc(i64 %19, %struct.jv_refcnt* %20, i8* nonnull %9, i64 15) #15, !dbg !5137
  %22 = call { i64, %struct.jv_refcnt* } (i8*, ...) @jv_string_fmt(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.144, i64 0, i64 0), i8* %11, i8* %15, i8* %17, i8* %21, i8* %4) #15, !dbg !5138
  %23 = extractvalue { i64, %struct.jv_refcnt* } %22, 0, !dbg !5138
  %24 = extractvalue { i64, %struct.jv_refcnt* } %22, 1, !dbg !5138
  %25 = call { i64, %struct.jv_refcnt* } @jv_invalid_with_msg(i64 %23, %struct.jv_refcnt* %24) #15, !dbg !5139
  call void @llvm.dbg.value(metadata i64 undef, metadata !5125, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5126
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !5125, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5126
  call void @jv_free(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5140
  call void @jv_free(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5141
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %9) #15, !dbg !5142
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %8) #15, !dbg !5142
  ret { i64, %struct.jv_refcnt* } %25, !dbg !5142
}

declare !dbg !5143 i32 @jv_array_length(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5146 { i64, %struct.jv_refcnt* } @jv_array_get(i64, %struct.jv_refcnt*, i32) local_unnamed_addr #3

declare !dbg !5149 i32 @jv_equal(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5152 { i64, %struct.jv_refcnt* } @jv_null() local_unnamed_addr #3

declare !dbg !5153 i32 @jv_string_length_bytes(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5154 { i64, %struct.jv_refcnt* } @jv_string_empty(i32) local_unnamed_addr #3

declare !dbg !5157 { i64, %struct.jv_refcnt* } @jv_string_append_buf(i64, %struct.jv_refcnt*, i8*, i32) local_unnamed_addr #3

declare !dbg !5160 i8* @jv_string_value(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5163 { i64, %struct.jv_refcnt* } @jv_object_merge_recursive(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5164 { i64, %struct.jv_refcnt* } @jv_string_split(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5165 { i64, %struct.jv_refcnt* } @jv_dump_string(i64, %struct.jv_refcnt*, i32) local_unnamed_addr #3

declare !dbg !5166 { i64, %struct.jv_refcnt* } @jv_parse_sized(i8*, i32) local_unnamed_addr #3

declare !dbg !5169 { i64, %struct.jv_refcnt* } @jv_parse(i8*) local_unnamed_addr #3

declare !dbg !5172 { i64, %struct.jv_refcnt* } @jv_keys(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5173 { i64, %struct.jv_refcnt* } @jv_keys_unsorted(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5174 { i64, %struct.jv_refcnt* } @jv_string(i8*) local_unnamed_addr #3

declare !dbg !5175 { i64, %struct.jv_refcnt* } @jv_string_sized(i8*, i32) local_unnamed_addr #3

declare !dbg !5176 { i64, %struct.jv_refcnt* } @jv_string_explode(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5177 { i64, %struct.jv_refcnt* } @jv_string_implode(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5178 { i64, %struct.jv_refcnt* } @jv_string_indexes(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5179 { i64, %struct.jv_refcnt* } @jv_setpath(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare { i64, %struct.jv_refcnt* } @_jq_path_append(%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, %struct.jv* byval(%struct.jv) align 8) local_unnamed_addr #3

declare !dbg !5182 { i64, %struct.jv_refcnt* } @jv_getpath(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5183 { i64, %struct.jv_refcnt* } @jv_delpaths(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5184 { i64, %struct.jv_refcnt* } @jv_has(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5185 { i64, %struct.jv_refcnt* } @jv_bool(i32) local_unnamed_addr #3

declare !dbg !5186 i32 @jv_cmp(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5187 i32 @jv_contains(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5188 i32 @jv_object_length(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5189 i32 @jv_string_length_codepoints(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5190 { i64, %struct.jv_refcnt* } @jv_sort(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5191 { i64, %struct.jv_refcnt* } @jv_group(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc { i64, %struct.jv_refcnt* } @minmax_by(i64 %0, %struct.jv_refcnt* %1, i64 %2, %struct.jv_refcnt* %3, i32 %4) unnamed_addr #0 !dbg !5192 {
  call void @llvm.dbg.value(metadata i64 %0, metadata !5196, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %1, metadata !5196, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %2, metadata !5197, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %3, metadata !5197, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i32 %4, metadata !5198, metadata !DIExpression()), !dbg !5207
  %6 = tail call i32 @jv_get_kind(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5208
  %7 = icmp eq i32 %6, 6, !dbg !5210
  br i1 %7, label %12, label %8, !dbg !5211

8:                                                ; preds = %5
  %9 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %0, %struct.jv_refcnt* %1, i64 %2, %struct.jv_refcnt* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.165, i64 0, i64 0)), !dbg !5212
  %10 = extractvalue { i64, %struct.jv_refcnt* } %9, 0, !dbg !5212
  %11 = extractvalue { i64, %struct.jv_refcnt* } %9, 1, !dbg !5212
  br label %108, !dbg !5213

12:                                               ; preds = %5
  %13 = tail call i32 @jv_get_kind(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5214
  %14 = icmp eq i32 %13, 6, !dbg !5216
  br i1 %14, label %19, label %15, !dbg !5217

15:                                               ; preds = %12
  %16 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %0, %struct.jv_refcnt* %1, i64 %2, %struct.jv_refcnt* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.165, i64 0, i64 0)), !dbg !5218
  %17 = extractvalue { i64, %struct.jv_refcnt* } %16, 0, !dbg !5218
  %18 = extractvalue { i64, %struct.jv_refcnt* } %16, 1, !dbg !5218
  br label %108, !dbg !5219

19:                                               ; preds = %12
  %20 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5220
  %21 = extractvalue { i64, %struct.jv_refcnt* } %20, 0, !dbg !5220
  %22 = extractvalue { i64, %struct.jv_refcnt* } %20, 1, !dbg !5220
  %23 = tail call i32 @jv_array_length(i64 %21, %struct.jv_refcnt* %22) #15, !dbg !5222
  %24 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5223
  %25 = extractvalue { i64, %struct.jv_refcnt* } %24, 0, !dbg !5223
  %26 = extractvalue { i64, %struct.jv_refcnt* } %24, 1, !dbg !5223
  %27 = tail call i32 @jv_array_length(i64 %25, %struct.jv_refcnt* %26) #15, !dbg !5224
  %28 = icmp eq i32 %23, %27, !dbg !5225
  br i1 %28, label %33, label %29, !dbg !5226

29:                                               ; preds = %19
  %30 = tail call fastcc { i64, %struct.jv_refcnt* } @type_error2(i64 %0, %struct.jv_refcnt* %1, i64 %2, %struct.jv_refcnt* %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.166, i64 0, i64 0)), !dbg !5227
  %31 = extractvalue { i64, %struct.jv_refcnt* } %30, 0, !dbg !5227
  %32 = extractvalue { i64, %struct.jv_refcnt* } %30, 1, !dbg !5227
  br label %108, !dbg !5228

33:                                               ; preds = %19
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5229
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !5229
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !5229
  %37 = tail call i32 @jv_array_length(i64 %35, %struct.jv_refcnt* %36) #15, !dbg !5231
  %38 = icmp eq i32 %37, 0, !dbg !5232
  br i1 %38, label %39, label %43, !dbg !5233

39:                                               ; preds = %33
  tail call void @jv_free(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5234
  tail call void @jv_free(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5236
  %40 = tail call { i64, %struct.jv_refcnt* } @jv_null() #15, !dbg !5237
  %41 = extractvalue { i64, %struct.jv_refcnt* } %40, 0, !dbg !5237
  %42 = extractvalue { i64, %struct.jv_refcnt* } %40, 1, !dbg !5237
  br label %108, !dbg !5238

43:                                               ; preds = %33
  %44 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5239
  %45 = extractvalue { i64, %struct.jv_refcnt* } %44, 0, !dbg !5239
  %46 = extractvalue { i64, %struct.jv_refcnt* } %44, 1, !dbg !5239
  %47 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %45, %struct.jv_refcnt* %46, i32 0) #15, !dbg !5240
  %48 = extractvalue { i64, %struct.jv_refcnt* } %47, 0, !dbg !5240
  call void @llvm.dbg.value(metadata i64 %48, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  %49 = extractvalue { i64, %struct.jv_refcnt* } %47, 1, !dbg !5240
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %49, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  %50 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5241
  %51 = extractvalue { i64, %struct.jv_refcnt* } %50, 0, !dbg !5241
  %52 = extractvalue { i64, %struct.jv_refcnt* } %50, 1, !dbg !5241
  %53 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %51, %struct.jv_refcnt* %52, i32 0) #15, !dbg !5242
  %54 = extractvalue { i64, %struct.jv_refcnt* } %53, 0, !dbg !5242
  call void @llvm.dbg.value(metadata i64 %54, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  %55 = extractvalue { i64, %struct.jv_refcnt* } %53, 1, !dbg !5242
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %55, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i32 1, metadata !5201, metadata !DIExpression()), !dbg !5243
  %56 = icmp eq i32 %4, 1
  %57 = zext i1 %56 to i32
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %49, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %48, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %55, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %54, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i32 1, metadata !5201, metadata !DIExpression()), !dbg !5243
  %58 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5244
  %59 = extractvalue { i64, %struct.jv_refcnt* } %58, 0, !dbg !5244
  %60 = extractvalue { i64, %struct.jv_refcnt* } %58, 1, !dbg !5244
  %61 = tail call i32 @jv_array_length(i64 %59, %struct.jv_refcnt* %60) #15, !dbg !5245
  %62 = icmp sgt i32 %61, 1, !dbg !5246
  br i1 %62, label %68, label %63, !dbg !5247

63:                                               ; preds = %97, %43
  %64 = phi i64 [ %54, %43 ], [ %98, %97 ], !dbg !5207
  %65 = phi %struct.jv_refcnt* [ %55, %43 ], [ %99, %97 ], !dbg !5207
  %66 = phi i64 [ %48, %43 ], [ %100, %97 ], !dbg !5207
  %67 = phi %struct.jv_refcnt* [ %49, %43 ], [ %101, %97 ], !dbg !5207
  tail call void @jv_free(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5248
  tail call void @jv_free(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5249
  tail call void @jv_free(i64 %64, %struct.jv_refcnt* %65) #15, !dbg !5250
  br label %108

68:                                               ; preds = %43, %97
  %69 = phi %struct.jv_refcnt* [ %101, %97 ], [ %49, %43 ]
  %70 = phi i64 [ %100, %97 ], [ %48, %43 ]
  %71 = phi %struct.jv_refcnt* [ %99, %97 ], [ %55, %43 ]
  %72 = phi i64 [ %98, %97 ], [ %54, %43 ]
  %73 = phi i32 [ %102, %97 ], [ 1, %43 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %69, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %70, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %71, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %72, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i32 %73, metadata !5201, metadata !DIExpression()), !dbg !5243
  %74 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %2, %struct.jv_refcnt* %3) #15, !dbg !5251
  %75 = extractvalue { i64, %struct.jv_refcnt* } %74, 0, !dbg !5251
  %76 = extractvalue { i64, %struct.jv_refcnt* } %74, 1, !dbg !5251
  %77 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %75, %struct.jv_refcnt* %76, i32 %73) #15, !dbg !5252
  %78 = extractvalue { i64, %struct.jv_refcnt* } %77, 0, !dbg !5252
  call void @llvm.dbg.value(metadata i64 %78, metadata !5203, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5253
  %79 = extractvalue { i64, %struct.jv_refcnt* } %77, 1, !dbg !5252
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %79, metadata !5203, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5253
  %80 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %78, %struct.jv_refcnt* %79) #15, !dbg !5254
  %81 = extractvalue { i64, %struct.jv_refcnt* } %80, 0, !dbg !5254
  %82 = extractvalue { i64, %struct.jv_refcnt* } %80, 1, !dbg !5254
  %83 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %72, %struct.jv_refcnt* %71) #15, !dbg !5255
  %84 = extractvalue { i64, %struct.jv_refcnt* } %83, 0, !dbg !5255
  %85 = extractvalue { i64, %struct.jv_refcnt* } %83, 1, !dbg !5255
  %86 = tail call i32 @jv_cmp(i64 %81, %struct.jv_refcnt* %82, i64 %84, %struct.jv_refcnt* %85) #15, !dbg !5256
  call void @llvm.dbg.value(metadata i32 %86, metadata !5206, metadata !DIExpression()), !dbg !5253
  %87 = lshr i32 %86, 31, !dbg !5257
  %88 = icmp eq i32 %87, %57, !dbg !5259
  br i1 %88, label %89, label %96, !dbg !5260

89:                                               ; preds = %68
  tail call void @jv_free(i64 %72, %struct.jv_refcnt* %71) #15, !dbg !5261
  call void @llvm.dbg.value(metadata i64 %78, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %79, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  tail call void @jv_free(i64 %70, %struct.jv_refcnt* %69) #15, !dbg !5263
  %90 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5264
  %91 = extractvalue { i64, %struct.jv_refcnt* } %90, 0, !dbg !5264
  %92 = extractvalue { i64, %struct.jv_refcnt* } %90, 1, !dbg !5264
  %93 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %91, %struct.jv_refcnt* %92, i32 %73) #15, !dbg !5265
  %94 = extractvalue { i64, %struct.jv_refcnt* } %93, 0, !dbg !5265
  %95 = extractvalue { i64, %struct.jv_refcnt* } %93, 1, !dbg !5265
  call void @llvm.dbg.value(metadata i64 %94, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %95, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  br label %97, !dbg !5266

96:                                               ; preds = %68
  tail call void @jv_free(i64 %78, %struct.jv_refcnt* %79) #15, !dbg !5267
  br label %97

97:                                               ; preds = %96, %89
  %98 = phi i64 [ %78, %89 ], [ %72, %96 ], !dbg !5207
  %99 = phi %struct.jv_refcnt* [ %79, %89 ], [ %71, %96 ], !dbg !5207
  %100 = phi i64 [ %94, %89 ], [ %70, %96 ], !dbg !5207
  %101 = phi %struct.jv_refcnt* [ %95, %89 ], [ %69, %96 ], !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %101, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %100, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %99, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %98, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  %102 = add nuw nsw i32 %73, 1, !dbg !5269
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %101, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %100, metadata !5199, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %99, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i64 %98, metadata !5200, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5207
  call void @llvm.dbg.value(metadata i32 %102, metadata !5201, metadata !DIExpression()), !dbg !5243
  %103 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5244
  %104 = extractvalue { i64, %struct.jv_refcnt* } %103, 0, !dbg !5244
  %105 = extractvalue { i64, %struct.jv_refcnt* } %103, 1, !dbg !5244
  %106 = tail call i32 @jv_array_length(i64 %104, %struct.jv_refcnt* %105) #15, !dbg !5245
  %107 = icmp slt i32 %102, %106, !dbg !5246
  br i1 %107, label %68, label %63, !dbg !5247, !llvm.loop !5270

108:                                              ; preds = %63, %39, %29, %15, %8
  %109 = phi i64 [ %10, %8 ], [ %17, %15 ], [ %31, %29 ], [ %41, %39 ], [ %66, %63 ], !dbg !5207
  %110 = phi %struct.jv_refcnt* [ %11, %8 ], [ %18, %15 ], [ %32, %29 ], [ %42, %39 ], [ %67, %63 ], !dbg !5207
  %111 = insertvalue { i64, %struct.jv_refcnt* } undef, i64 %109, 0, !dbg !5272
  %112 = insertvalue { i64, %struct.jv_refcnt* } %111, %struct.jv_refcnt* %110, 1, !dbg !5272
  ret { i64, %struct.jv_refcnt* } %112, !dbg !5272
}

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #9

declare !dbg !5273 { i64, %struct.jv_refcnt* } @jv_string_append_str(i64, %struct.jv_refcnt*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc { i64, %struct.jv_refcnt* } @escape_string(i64 %0, %struct.jv_refcnt* %1, i8* %2) unnamed_addr #0 !dbg !5276 {
  %4 = alloca [128 x i8*], align 16
  %5 = alloca i32, align 4
  call void @llvm.dbg.value(metadata i64 %0, metadata !5278, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5288
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %1, metadata !5278, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5288
  call void @llvm.dbg.value(metadata i8* %2, metadata !5279, metadata !DIExpression()), !dbg !5288
  %6 = tail call i32 @jv_get_kind(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5289
  %7 = icmp eq i32 %6, 5, !dbg !5289
  br i1 %7, label %9, label %8, !dbg !5292

8:                                                ; preds = %3
  tail call void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.197, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 542, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__PRETTY_FUNCTION__.escape_string, i64 0, i64 0)) #16, !dbg !5289
  unreachable, !dbg !5289

9:                                                ; preds = %3
  %10 = bitcast [128 x i8*]* %4 to i8*, !dbg !5293
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %10) #15, !dbg !5293
  call void @llvm.dbg.declare(metadata [128 x i8*]* %4, metadata !5280, metadata !DIExpression()), !dbg !5294
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1024) %10, i8 0, i64 1024, i1 false), !dbg !5294
  call void @llvm.dbg.value(metadata i8* %2, metadata !5282, metadata !DIExpression()), !dbg !5288
  %11 = getelementptr inbounds [128 x i8*], [128 x i8*]* %4, i64 0, i64 0, !dbg !5295
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.198, i64 0, i64 0), i8** %11, align 16, !dbg !5296, !tbaa !300
  call void @llvm.dbg.value(metadata i8* %2, metadata !5282, metadata !DIExpression()), !dbg !5288
  %12 = load i8, i8* %2, align 1, !dbg !5297, !tbaa !2186
  %13 = icmp eq i8 %12, 0, !dbg !5298
  br i1 %13, label %25, label %14, !dbg !5298

14:                                               ; preds = %9, %14
  %15 = phi i8 [ %23, %14 ], [ %12, %9 ]
  %16 = phi i8* [ %22, %14 ], [ %2, %9 ]
  call void @llvm.dbg.value(metadata i8* %16, metadata !5282, metadata !DIExpression()), !dbg !5288
  %17 = getelementptr inbounds i8, i8* %16, i64 1, !dbg !5299
  %18 = sext i8 %15 to i64, !dbg !5301
  %19 = getelementptr inbounds [128 x i8*], [128 x i8*]* %4, i64 0, i64 %18, !dbg !5301
  store i8* %17, i8** %19, align 8, !dbg !5302, !tbaa !300
  call void @llvm.dbg.value(metadata i8* %17, metadata !5282, metadata !DIExpression()), !dbg !5288
  %20 = tail call i64 @strlen(i8* noundef nonnull %17) #19, !dbg !5303
  call void @llvm.dbg.value(metadata !DIArgList(i8* %17, i64 %20), metadata !5282, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_constu, 1, DW_OP_mul, DW_OP_plus, DW_OP_stack_value)), !dbg !5288
  %21 = add nsw i64 %20, 1, !dbg !5304
  %22 = getelementptr inbounds i8, i8* %17, i64 %21, !dbg !5304
  call void @llvm.dbg.value(metadata i8* %22, metadata !5282, metadata !DIExpression()), !dbg !5288
  %23 = load i8, i8* %22, align 1, !dbg !5297, !tbaa !2186
  %24 = icmp eq i8 %23, 0, !dbg !5298
  br i1 %24, label %25, label %14, !dbg !5298, !llvm.loop !5305

25:                                               ; preds = %14, %9
  %26 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0)) #15, !dbg !5307
  call void @llvm.dbg.value(metadata i64 undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5288
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5288
  %27 = tail call i8* @jv_string_value(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5308
  call void @llvm.dbg.value(metadata i8* %27, metadata !5284, metadata !DIExpression()), !dbg !5288
  %28 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5309
  %29 = extractvalue { i64, %struct.jv_refcnt* } %28, 0, !dbg !5309
  %30 = extractvalue { i64, %struct.jv_refcnt* } %28, 1, !dbg !5309
  %31 = tail call i32 @jv_string_length_bytes(i64 %29, %struct.jv_refcnt* %30) #15, !dbg !5310
  %32 = sext i32 %31 to i64, !dbg !5311
  %33 = getelementptr inbounds i8, i8* %27, i64 %32, !dbg !5311
  call void @llvm.dbg.value(metadata i8* %33, metadata !5285, metadata !DIExpression()), !dbg !5288
  %34 = bitcast i32* %5 to i8*, !dbg !5312
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #15, !dbg !5312
  call void @llvm.dbg.value(metadata i32 0, metadata !5287, metadata !DIExpression()), !dbg !5288
  store i32 0, i32* %5, align 4, !dbg !5313, !tbaa !2095
  call void @llvm.dbg.value(metadata i64 undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5288
  call void @llvm.dbg.value(metadata i8* %27, metadata !5286, metadata !DIExpression()), !dbg !5288
  call void @llvm.dbg.value(metadata i32* %5, metadata !5287, metadata !DIExpression(DW_OP_deref)), !dbg !5288
  %35 = call i8* @jvp_utf8_next(i8* %27, i8* %33, i32* nonnull %5) #15, !dbg !5314
  call void @llvm.dbg.value(metadata i8* %35, metadata !5284, metadata !DIExpression()), !dbg !5288
  %36 = icmp eq i8* %35, null, !dbg !5315
  br i1 %36, label %62, label %37, !dbg !5315

37:                                               ; preds = %25, %58
  %38 = phi i8* [ %60, %58 ], [ %35, %25 ]
  %39 = phi { i64, %struct.jv_refcnt* } [ %59, %58 ], [ %26, %25 ]
  %40 = phi i8* [ %38, %58 ], [ %27, %25 ]
  %41 = extractvalue { i64, %struct.jv_refcnt* } %39, 1, !dbg !5288
  %42 = extractvalue { i64, %struct.jv_refcnt* } %39, 0, !dbg !5288
  call void @llvm.dbg.value(metadata i8* %40, metadata !5284, metadata !DIExpression()), !dbg !5288
  %43 = load i32, i32* %5, align 4, !dbg !5316, !tbaa !2095
  call void @llvm.dbg.value(metadata i32 %43, metadata !5287, metadata !DIExpression()), !dbg !5288
  %44 = icmp slt i32 %43, 128, !dbg !5319
  br i1 %44, label %45, label %52, !dbg !5320

45:                                               ; preds = %37
  %46 = sext i32 %43 to i64, !dbg !5321
  %47 = getelementptr inbounds [128 x i8*], [128 x i8*]* %4, i64 0, i64 %46, !dbg !5321
  %48 = load i8*, i8** %47, align 8, !dbg !5321, !tbaa !300
  %49 = icmp eq i8* %48, null, !dbg !5321
  br i1 %49, label %52, label %50, !dbg !5322

50:                                               ; preds = %45
  %51 = call { i64, %struct.jv_refcnt* } @jv_string_append_str(i64 %42, %struct.jv_refcnt* %41, i8* nonnull %48) #15, !dbg !5323
  call void @llvm.dbg.value(metadata i64 undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5288
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5288
  br label %58, !dbg !5325

52:                                               ; preds = %45, %37
  %53 = ptrtoint i8* %38 to i64, !dbg !5326
  %54 = ptrtoint i8* %40 to i64, !dbg !5326
  %55 = sub i64 %53, %54, !dbg !5326
  %56 = trunc i64 %55 to i32, !dbg !5328
  %57 = call { i64, %struct.jv_refcnt* } @jv_string_append_buf(i64 %42, %struct.jv_refcnt* %41, i8* %40, i32 %56) #15, !dbg !5329
  call void @llvm.dbg.value(metadata i64 undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5288
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5288
  br label %58

58:                                               ; preds = %52, %50
  %59 = phi { i64, %struct.jv_refcnt* } [ %51, %50 ], [ %57, %52 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5288
  call void @llvm.dbg.value(metadata i64 undef, metadata !5283, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5288
  call void @llvm.dbg.value(metadata i8* %38, metadata !5284, metadata !DIExpression()), !dbg !5288
  call void @llvm.dbg.value(metadata i8* %38, metadata !5286, metadata !DIExpression()), !dbg !5288
  call void @llvm.dbg.value(metadata i32* %5, metadata !5287, metadata !DIExpression(DW_OP_deref)), !dbg !5288
  %60 = call i8* @jvp_utf8_next(i8* nonnull %38, i8* %33, i32* nonnull %5) #15, !dbg !5314
  call void @llvm.dbg.value(metadata i8* %60, metadata !5284, metadata !DIExpression()), !dbg !5288
  %61 = icmp eq i8* %60, null, !dbg !5315
  br i1 %61, label %62, label %37, !dbg !5315, !llvm.loop !5330

62:                                               ; preds = %58, %25
  %63 = phi { i64, %struct.jv_refcnt* } [ %26, %25 ], [ %59, %58 ]
  call void @jv_free(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5332
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #15, !dbg !5333
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %10) #15, !dbg !5333
  ret { i64, %struct.jv_refcnt* } %63, !dbg !5333
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #10

declare !dbg !5334 { i64, %struct.jv_refcnt* } @jv_array_set(i64, %struct.jv_refcnt*, i32, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5337 i8* @jv_mem_calloc(i64, i64) local_unnamed_addr #3

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn
declare void @free(i8* nocapture noundef) local_unnamed_addr #11

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

declare !dbg !5341 i8* @jvp_utf8_next(i8*, i8*, i32*) local_unnamed_addr #3

declare !dbg !5345 { i64, %struct.jv_refcnt* } @jv_object() local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i8* @strchr(i8*, i32) local_unnamed_addr #9

declare !dbg !5346 { i64, %struct.jv_refcnt* } @jv_object_set(i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5347 void @jq_halt(%struct.jq_state*, i64, %struct.jv_refcnt*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5350 { i64, %struct.jv_refcnt* } @jv_invalid() local_unnamed_addr #3

declare !dbg !5351 { i64, %struct.jv_refcnt* } @jq_get_lib_dirs(%struct.jq_state*) local_unnamed_addr #3

declare !dbg !5354 { i64, %struct.jv_refcnt* } @jq_get_prog_origin(%struct.jq_state*) local_unnamed_addr #3

declare !dbg !5355 { i64, %struct.jv_refcnt* } @jq_get_jq_origin(%struct.jq_state*) local_unnamed_addr #3

declare !dbg !5356 i32 @onig_new(%struct.re_pattern_buffer**, i8*, i8*, i32, %struct.OnigEncodingTypeST*, %struct.OnigSyntaxType*, %struct.OnigErrorInfo*) local_unnamed_addr #3

declare i32 @onig_error_code_to_str(...) local_unnamed_addr #3

declare !dbg !5362 %struct.re_registers* @onig_region_new() local_unnamed_addr #3

declare !dbg !5366 i32 @onig_search(%struct.re_pattern_buffer*, i8*, i8*, i8*, i8*, %struct.re_registers*, i32) local_unnamed_addr #3

declare !dbg !5369 i32 @jvp_utf8_decode_length(i8 signext) local_unnamed_addr #3

declare !dbg !5372 i32 @onig_foreach_name(%struct.re_pattern_buffer*, i32 (i8*, i8*, i32, i32*, %struct.re_pattern_buffer*, i8*)*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @f_match_name_iter(i8* %0, i8* %1, i32 %2, i32* nocapture readonly %3, %struct.re_pattern_buffer* nocapture readnone %4, i8* nocapture %5) #0 !dbg !5378 {
  call void @llvm.dbg.value(metadata i8* %0, metadata !5382, metadata !DIExpression()), !dbg !5394
  call void @llvm.dbg.value(metadata i8* %1, metadata !5383, metadata !DIExpression()), !dbg !5394
  call void @llvm.dbg.value(metadata i32 %2, metadata !5384, metadata !DIExpression()), !dbg !5394
  call void @llvm.dbg.value(metadata i32* %3, metadata !5385, metadata !DIExpression()), !dbg !5394
  call void @llvm.dbg.value(metadata %struct.re_pattern_buffer* %4, metadata !5386, metadata !DIExpression()), !dbg !5394
  call void @llvm.dbg.value(metadata i8* %5, metadata !5387, metadata !DIExpression()), !dbg !5394
  %7 = bitcast i8* %5 to i64*, !dbg !5395
  %8 = load i64, i64* %7, align 8, !dbg !5395, !tbaa.struct !2185
  call void @llvm.dbg.value(metadata i64 %8, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5394
  %9 = getelementptr inbounds i8, i8* %5, i64 8, !dbg !5395
  %10 = bitcast i8* %9 to %struct.jv_refcnt**, !dbg !5395
  %11 = load %struct.jv_refcnt*, %struct.jv_refcnt** %10, align 8, !dbg !5395, !tbaa.struct !2190
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %11, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata i32 0, metadata !5389, metadata !DIExpression()), !dbg !5396
  %12 = ptrtoint i8* %1 to i64
  %13 = ptrtoint i8* %0 to i64
  %14 = sub i64 %12, %13
  %15 = trunc i64 %14 to i32
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %11, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata i64 %8, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata i32 0, metadata !5389, metadata !DIExpression()), !dbg !5396
  %16 = icmp sgt i32 %2, 0, !dbg !5397
  br i1 %16, label %17, label %19, !dbg !5398

17:                                               ; preds = %6
  %18 = zext i32 %2 to i64, !dbg !5397
  br label %22, !dbg !5398

19:                                               ; preds = %53, %6
  %20 = phi i64 [ %8, %6 ], [ %54, %53 ], !dbg !5394
  %21 = phi %struct.jv_refcnt* [ %11, %6 ], [ %55, %53 ], !dbg !5394
  store i64 %20, i64* %7, align 8, !dbg !5399, !tbaa.struct !2185
  store %struct.jv_refcnt* %21, %struct.jv_refcnt** %10, align 8, !dbg !5399, !tbaa.struct !2190
  ret i32 0, !dbg !5400

22:                                               ; preds = %17, %53
  %23 = phi i64 [ 0, %17 ], [ %56, %53 ]
  %24 = phi %struct.jv_refcnt* [ %11, %17 ], [ %55, %53 ]
  %25 = phi i64 [ %8, %17 ], [ %54, %53 ]
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %24, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata i64 %25, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata i64 %23, metadata !5389, metadata !DIExpression()), !dbg !5396
  %26 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %25, %struct.jv_refcnt* %24) #15, !dbg !5401
  %27 = extractvalue { i64, %struct.jv_refcnt* } %26, 0, !dbg !5401
  %28 = extractvalue { i64, %struct.jv_refcnt* } %26, 1, !dbg !5401
  %29 = getelementptr inbounds i32, i32* %3, i64 %23, !dbg !5402
  %30 = load i32, i32* %29, align 4, !dbg !5402, !tbaa !2095
  %31 = add nsw i32 %30, -1, !dbg !5403
  %32 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %27, %struct.jv_refcnt* %28, i32 %31) #15, !dbg !5404
  %33 = extractvalue { i64, %struct.jv_refcnt* } %32, 0, !dbg !5404
  call void @llvm.dbg.value(metadata i64 %33, metadata !5391, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5405
  %34 = extractvalue { i64, %struct.jv_refcnt* } %32, 1, !dbg !5404
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %34, metadata !5391, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5405
  %35 = tail call i32 @jv_get_kind(i64 %33, %struct.jv_refcnt* %34) #15, !dbg !5406
  %36 = icmp eq i32 %35, 7, !dbg !5408
  br i1 %36, label %37, label %52, !dbg !5409

37:                                               ; preds = %22
  %38 = tail call { i64, %struct.jv_refcnt* } @jv_string(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.207, i64 0, i64 0)) #15, !dbg !5410
  %39 = extractvalue { i64, %struct.jv_refcnt* } %38, 0, !dbg !5410
  %40 = extractvalue { i64, %struct.jv_refcnt* } %38, 1, !dbg !5410
  %41 = tail call { i64, %struct.jv_refcnt* } @jv_string_sized(i8* %0, i32 %15) #15, !dbg !5412
  %42 = extractvalue { i64, %struct.jv_refcnt* } %41, 0, !dbg !5412
  %43 = extractvalue { i64, %struct.jv_refcnt* } %41, 1, !dbg !5412
  %44 = tail call { i64, %struct.jv_refcnt* } @jv_object_set(i64 %33, %struct.jv_refcnt* %34, i64 %39, %struct.jv_refcnt* %40, i64 %42, %struct.jv_refcnt* %43) #15, !dbg !5413
  %45 = extractvalue { i64, %struct.jv_refcnt* } %44, 0, !dbg !5413
  %46 = extractvalue { i64, %struct.jv_refcnt* } %44, 1, !dbg !5413
  call void @llvm.dbg.value(metadata i64 %45, metadata !5391, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5405
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %46, metadata !5391, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5405
  %47 = load i32, i32* %29, align 4, !dbg !5414, !tbaa !2095
  %48 = add nsw i32 %47, -1, !dbg !5415
  %49 = tail call { i64, %struct.jv_refcnt* } @jv_array_set(i64 %25, %struct.jv_refcnt* %24, i32 %48, i64 %45, %struct.jv_refcnt* %46) #15, !dbg !5416
  %50 = extractvalue { i64, %struct.jv_refcnt* } %49, 0, !dbg !5416
  %51 = extractvalue { i64, %struct.jv_refcnt* } %49, 1, !dbg !5416
  call void @llvm.dbg.value(metadata i64 %50, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %51, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5394
  br label %53, !dbg !5417

52:                                               ; preds = %22
  tail call void @jv_free(i64 %33, %struct.jv_refcnt* %34) #15, !dbg !5418
  br label %53

53:                                               ; preds = %52, %37
  %54 = phi i64 [ %50, %37 ], [ %25, %52 ], !dbg !5394
  %55 = phi %struct.jv_refcnt* [ %51, %37 ], [ %24, %52 ], !dbg !5394
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %55, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata i64 %54, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5394
  %56 = add nuw nsw i64 %23, 1, !dbg !5420
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %55, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata i64 %54, metadata !5388, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5394
  call void @llvm.dbg.value(metadata i64 %56, metadata !5389, metadata !DIExpression()), !dbg !5396
  %57 = icmp eq i64 %56, %18, !dbg !5397
  br i1 %57, label %19, label %22, !dbg !5398, !llvm.loop !5421
}

declare !dbg !5423 void @onig_region_free(%struct.re_registers*, i32) local_unnamed_addr #3

declare !dbg !5426 void @onig_free(%struct.re_pattern_buffer*) local_unnamed_addr #3

declare !dbg !5429 { i64, %struct.jv_refcnt* } @load_module_meta(%struct.jq_state*, i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5433 void @jq_get_input_cb(%struct.jq_state*, { i64, %struct.jv_refcnt* } (%struct.jq_state*, i8*)**, i8**) local_unnamed_addr #3

declare !dbg !5441 i32 @jv_invalid_has_msg(i64, %struct.jv_refcnt*) local_unnamed_addr #3

declare !dbg !5442 void @jq_get_debug_cb(%struct.jq_state*, void (i8*, i64, %struct.jv_refcnt*)**, i8**) local_unnamed_addr #3

declare !dbg !5449 void @jv_dumpf(i64, %struct.jv_refcnt*, %struct._IO_FILE*, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare !dbg !5500 i8* @strptime(i8*, i8*, %struct.tm*) local_unnamed_addr #7

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare i16** @__ctype_b_loc() local_unnamed_addr #6

; Function Attrs: mustprogress nofree nosync nounwind sspstrong uwtable willreturn
define internal fastcc void @set_tm_wday(%struct.tm* nocapture %0) unnamed_addr #12 !dbg !5504 {
  call void @llvm.dbg.value(metadata %struct.tm* %0, metadata !5506, metadata !DIExpression()), !dbg !5511
  %2 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 5, !dbg !5512
  %3 = load i32, i32* %2, align 4, !dbg !5512, !tbaa !5513
  %4 = add nsw i32 %3, 1900, !dbg !5514
  %5 = sdiv i32 %4, 100, !dbg !5515
  call void @llvm.dbg.value(metadata i32 %5, metadata !5507, metadata !DIExpression()), !dbg !5511
  %6 = srem i32 %4, 100, !dbg !5516
  call void @llvm.dbg.value(metadata i32 %6, metadata !5508, metadata !DIExpression()), !dbg !5511
  %7 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 4, !dbg !5517
  %8 = load i32, i32* %7, align 8, !dbg !5517, !tbaa !4682
  %9 = icmp slt i32 %8, 2, !dbg !5519
  %10 = sext i1 %9 to i32, !dbg !5520
  %11 = add nsw i32 %6, %10, !dbg !5520
  call void @llvm.dbg.value(metadata i32 %11, metadata !5508, metadata !DIExpression()), !dbg !5511
  call void @llvm.dbg.value(metadata i32 %8, metadata !5509, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !5511
  %12 = select i1 %9, i32 11, i32 -1, !dbg !5521
  %13 = add nsw i32 %12, %8, !dbg !5521
  call void @llvm.dbg.value(metadata i32 %13, metadata !5509, metadata !DIExpression()), !dbg !5511
  %14 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 3, !dbg !5522
  %15 = load i32, i32* %14, align 4, !dbg !5522, !tbaa !4678
  %16 = sitofp i32 %13 to double, !dbg !5523
  %17 = fmul double %16, 2.600000e+00, !dbg !5524
  %18 = fadd double %17, -2.000000e-01, !dbg !5525
  %19 = tail call double @llvm.floor.f64(double %18), !dbg !5526
  %20 = fptosi double %19 to i32, !dbg !5527
  %21 = sitofp i32 %11 to double, !dbg !5528
  %22 = fmul double %21, 2.500000e-01, !dbg !5529
  %23 = tail call double @llvm.floor.f64(double %22), !dbg !5530
  %24 = fptosi double %23 to i32, !dbg !5531
  %25 = sitofp i32 %5 to double, !dbg !5532
  %26 = fmul double %25, 2.500000e-01, !dbg !5533
  %27 = tail call double @llvm.floor.f64(double %26), !dbg !5534
  %28 = fptosi double %27 to i32, !dbg !5535
  %29 = mul nsw i32 %5, -2, !dbg !5536
  %30 = add i32 %29, %15, !dbg !5537
  %31 = add i32 %30, %11, !dbg !5538
  %32 = add i32 %31, %28, !dbg !5539
  %33 = add i32 %32, %24, !dbg !5540
  %34 = add i32 %33, %20, !dbg !5541
  %35 = srem i32 %34, 7, !dbg !5542
  call void @llvm.dbg.value(metadata i32 %35, metadata !5510, metadata !DIExpression()), !dbg !5511
  %36 = icmp slt i32 %35, 0, !dbg !5543
  %37 = add nsw i32 %35, 7
  %38 = select i1 %36, i32 %37, i32 %35, !dbg !5545
  call void @llvm.dbg.value(metadata i32 %38, metadata !5510, metadata !DIExpression()), !dbg !5511
  %39 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 6, !dbg !5546
  store i32 %38, i32* %39, align 8, !dbg !5547, !tbaa !4646
  ret void, !dbg !5548
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @set_tm_yday(%struct.tm* nocapture %0) unnamed_addr #0 !dbg !161 {
  call void @llvm.dbg.value(metadata %struct.tm* %0, metadata !180, metadata !DIExpression()), !dbg !5549
  %2 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 4, !dbg !5550
  %3 = load i32, i32* %2, align 8, !dbg !5550, !tbaa !4682
  call void @llvm.dbg.value(metadata i32 %3, metadata !181, metadata !DIExpression()), !dbg !5549
  %4 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 5, !dbg !5551
  %5 = load i32, i32* %4, align 4, !dbg !5551, !tbaa !5513
  %6 = add nsw i32 %5, 1900, !dbg !5552
  call void @llvm.dbg.value(metadata i32 %6, metadata !182, metadata !DIExpression()), !dbg !5549
  call void @llvm.dbg.value(metadata i32 0, metadata !183, metadata !DIExpression()), !dbg !5549
  %7 = icmp sgt i32 %3, 1, !dbg !5553
  br i1 %7, label %8, label %18, !dbg !5555

8:                                                ; preds = %1
  %9 = and i32 %5, 3, !dbg !5556
  %10 = icmp ne i32 %9, 0, !dbg !5556
  %11 = srem i32 %6, 100
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %10, i1 true, i1 %12, !dbg !5557
  %14 = srem i32 %6, 400
  %15 = icmp ne i32 %14, 0
  %16 = select i1 %13, i1 %15, i1 false, !dbg !5557
  %17 = sext i1 %16 to i32, !dbg !5557
  br label %18, !dbg !5557

18:                                               ; preds = %8, %1
  %19 = phi i32 [ -1, %1 ], [ %17, %8 ]
  call void @llvm.dbg.value(metadata i32 undef, metadata !183, metadata !DIExpression()), !dbg !5549
  %20 = tail call i32 @llvm.abs.i32(i32 %3, i1 true), !dbg !5558
  call void @llvm.dbg.value(metadata i32 %20, metadata !181, metadata !DIExpression()), !dbg !5549
  %21 = icmp ugt i32 %20, 11, !dbg !5559
  %22 = urem i32 %20, 12, !dbg !5561
  %23 = select i1 %21, i32 %22, i32 %20, !dbg !5561
  call void @llvm.dbg.value(metadata i32 %23, metadata !181, metadata !DIExpression()), !dbg !5549
  %24 = zext i32 %23 to i64, !dbg !5562
  %25 = getelementptr inbounds [12 x i32], [12 x i32]* @set_tm_yday.d, i64 0, i64 %24, !dbg !5562
  %26 = load i32, i32* %25, align 4, !dbg !5562, !tbaa !2095
  %27 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 3, !dbg !5563
  %28 = load i32, i32* %27, align 4, !dbg !5563, !tbaa !4678
  %29 = add i32 %19, %26, !dbg !5564
  %30 = add i32 %29, %28, !dbg !5565
  call void @llvm.dbg.value(metadata i32 %30, metadata !184, metadata !DIExpression()), !dbg !5549
  %31 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 7, !dbg !5566
  %32 = load i32, i32* %31, align 4, !dbg !5566, !tbaa !4651
  %33 = icmp eq i32 %30, %32, !dbg !5566
  %34 = icmp eq i32 %32, 367, !dbg !5566
  %35 = or i1 %34, %33, !dbg !5566
  br i1 %35, label %37, label %36, !dbg !5566

36:                                               ; preds = %18
  tail call void @__assert_fail(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.212, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i32 1363, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @__PRETTY_FUNCTION__.set_tm_yday, i64 0, i64 0)) #16, !dbg !5566
  unreachable, !dbg !5566

37:                                               ; preds = %18
  store i32 %30, i32* %31, align 4, !dbg !5569, !tbaa !4651
  ret void, !dbg !5570
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc { i64, %struct.jv_refcnt* } @tm2jv(%struct.tm* nocapture readonly %0) unnamed_addr #0 !dbg !5571 {
  call void @llvm.dbg.value(metadata %struct.tm* %0, metadata !5575, metadata !DIExpression()), !dbg !5576
  %2 = tail call { i64, %struct.jv_refcnt* } @jv_array() #15, !dbg !5577
  %3 = extractvalue { i64, %struct.jv_refcnt* } %2, 0, !dbg !5577
  %4 = extractvalue { i64, %struct.jv_refcnt* } %2, 1, !dbg !5577
  %5 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 5, !dbg !5577
  %6 = load i32, i32* %5, align 4, !dbg !5577, !tbaa !5513
  %7 = add nsw i32 %6, 1900, !dbg !5577
  %8 = sitofp i32 %7 to double, !dbg !5577
  %9 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %8) #15, !dbg !5577
  %10 = extractvalue { i64, %struct.jv_refcnt* } %9, 0, !dbg !5577
  %11 = extractvalue { i64, %struct.jv_refcnt* } %9, 1, !dbg !5577
  %12 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %3, %struct.jv_refcnt* %4, i64 %10, %struct.jv_refcnt* %11) #15, !dbg !5577
  %13 = extractvalue { i64, %struct.jv_refcnt* } %12, 0, !dbg !5577
  %14 = extractvalue { i64, %struct.jv_refcnt* } %12, 1, !dbg !5577
  %15 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 4, !dbg !5577
  %16 = load i32, i32* %15, align 8, !dbg !5577, !tbaa !4682
  %17 = sitofp i32 %16 to double, !dbg !5577
  %18 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %17) #15, !dbg !5577
  %19 = extractvalue { i64, %struct.jv_refcnt* } %18, 0, !dbg !5577
  %20 = extractvalue { i64, %struct.jv_refcnt* } %18, 1, !dbg !5577
  %21 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %13, %struct.jv_refcnt* %14, i64 %19, %struct.jv_refcnt* %20) #15, !dbg !5577
  %22 = extractvalue { i64, %struct.jv_refcnt* } %21, 0, !dbg !5577
  %23 = extractvalue { i64, %struct.jv_refcnt* } %21, 1, !dbg !5577
  %24 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 3, !dbg !5577
  %25 = load i32, i32* %24, align 4, !dbg !5577, !tbaa !4678
  %26 = sitofp i32 %25 to double, !dbg !5577
  %27 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %26) #15, !dbg !5577
  %28 = extractvalue { i64, %struct.jv_refcnt* } %27, 0, !dbg !5577
  %29 = extractvalue { i64, %struct.jv_refcnt* } %27, 1, !dbg !5577
  %30 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %22, %struct.jv_refcnt* %23, i64 %28, %struct.jv_refcnt* %29) #15, !dbg !5577
  %31 = extractvalue { i64, %struct.jv_refcnt* } %30, 0, !dbg !5577
  %32 = extractvalue { i64, %struct.jv_refcnt* } %30, 1, !dbg !5577
  %33 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 2, !dbg !5577
  %34 = load i32, i32* %33, align 8, !dbg !5577, !tbaa !5578
  %35 = sitofp i32 %34 to double, !dbg !5577
  %36 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %35) #15, !dbg !5577
  %37 = extractvalue { i64, %struct.jv_refcnt* } %36, 0, !dbg !5577
  %38 = extractvalue { i64, %struct.jv_refcnt* } %36, 1, !dbg !5577
  %39 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %31, %struct.jv_refcnt* %32, i64 %37, %struct.jv_refcnt* %38) #15, !dbg !5577
  %40 = extractvalue { i64, %struct.jv_refcnt* } %39, 0, !dbg !5577
  %41 = extractvalue { i64, %struct.jv_refcnt* } %39, 1, !dbg !5577
  %42 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 1, !dbg !5577
  %43 = load i32, i32* %42, align 4, !dbg !5577, !tbaa !5579
  %44 = sitofp i32 %43 to double, !dbg !5577
  %45 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %44) #15, !dbg !5577
  %46 = extractvalue { i64, %struct.jv_refcnt* } %45, 0, !dbg !5577
  %47 = extractvalue { i64, %struct.jv_refcnt* } %45, 1, !dbg !5577
  %48 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %40, %struct.jv_refcnt* %41, i64 %46, %struct.jv_refcnt* %47) #15, !dbg !5577
  %49 = extractvalue { i64, %struct.jv_refcnt* } %48, 0, !dbg !5577
  %50 = extractvalue { i64, %struct.jv_refcnt* } %48, 1, !dbg !5577
  %51 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 0, !dbg !5577
  %52 = load i32, i32* %51, align 8, !dbg !5577, !tbaa !5580
  %53 = sitofp i32 %52 to double, !dbg !5577
  %54 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %53) #15, !dbg !5577
  %55 = extractvalue { i64, %struct.jv_refcnt* } %54, 0, !dbg !5577
  %56 = extractvalue { i64, %struct.jv_refcnt* } %54, 1, !dbg !5577
  %57 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %49, %struct.jv_refcnt* %50, i64 %55, %struct.jv_refcnt* %56) #15, !dbg !5577
  %58 = extractvalue { i64, %struct.jv_refcnt* } %57, 0, !dbg !5577
  %59 = extractvalue { i64, %struct.jv_refcnt* } %57, 1, !dbg !5577
  %60 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 6, !dbg !5577
  %61 = load i32, i32* %60, align 8, !dbg !5577, !tbaa !4646
  %62 = sitofp i32 %61 to double, !dbg !5577
  %63 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %62) #15, !dbg !5577
  %64 = extractvalue { i64, %struct.jv_refcnt* } %63, 0, !dbg !5577
  %65 = extractvalue { i64, %struct.jv_refcnt* } %63, 1, !dbg !5577
  %66 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %58, %struct.jv_refcnt* %59, i64 %64, %struct.jv_refcnt* %65) #15, !dbg !5577
  %67 = extractvalue { i64, %struct.jv_refcnt* } %66, 0, !dbg !5577
  %68 = extractvalue { i64, %struct.jv_refcnt* } %66, 1, !dbg !5577
  %69 = getelementptr inbounds %struct.tm, %struct.tm* %0, i64 0, i32 7, !dbg !5577
  %70 = load i32, i32* %69, align 4, !dbg !5577, !tbaa !4651
  %71 = sitofp i32 %70 to double, !dbg !5577
  %72 = tail call { i64, %struct.jv_refcnt* } @jv_number(double %71) #15, !dbg !5577
  %73 = extractvalue { i64, %struct.jv_refcnt* } %72, 0, !dbg !5577
  %74 = extractvalue { i64, %struct.jv_refcnt* } %72, 1, !dbg !5577
  %75 = tail call { i64, %struct.jv_refcnt* } @jv_array_append(i64 %67, %struct.jv_refcnt* %68, i64 %73, %struct.jv_refcnt* %74) #15, !dbg !5577
  ret { i64, %struct.jv_refcnt* } %75, !dbg !5581
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @jv2tm(i64 %0, %struct.jv_refcnt* %1, %struct.tm* nocapture %2) unnamed_addr #0 !dbg !5582 {
  call void @llvm.dbg.value(metadata i64 %0, metadata !5586, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5604
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %1, metadata !5586, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5604
  call void @llvm.dbg.value(metadata %struct.tm* %2, metadata !5587, metadata !DIExpression()), !dbg !5604
  %4 = bitcast %struct.tm* %2 to i8*, !dbg !5605
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %4, i8 0, i64 56, i1 false), !dbg !5605
  %5 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5606
  %6 = extractvalue { i64, %struct.jv_refcnt* } %5, 0, !dbg !5606
  %7 = extractvalue { i64, %struct.jv_refcnt* } %5, 1, !dbg !5606
  %8 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %6, %struct.jv_refcnt* %7, i32 0) #15, !dbg !5606
  %9 = extractvalue { i64, %struct.jv_refcnt* } %8, 0, !dbg !5606
  call void @llvm.dbg.value(metadata i64 %9, metadata !5588, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5607
  %10 = extractvalue { i64, %struct.jv_refcnt* } %8, 1, !dbg !5606
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %10, metadata !5588, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5607
  %11 = tail call i32 @jv_get_kind(i64 %9, %struct.jv_refcnt* %10) #15, !dbg !5608
  %12 = icmp eq i32 %11, 4, !dbg !5608
  br i1 %12, label %13, label %103, !dbg !5606

13:                                               ; preds = %3
  %14 = tail call double @jv_number_value(i64 %9, %struct.jv_refcnt* %10) #15, !dbg !5606
  %15 = fptosi double %14 to i32, !dbg !5606
  %16 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 5, !dbg !5606
  store i32 %15, i32* %16, align 4, !dbg !5606, !tbaa !5513
  tail call void @jv_free(i64 %9, %struct.jv_refcnt* %10) #15, !dbg !5606
  %17 = load i32, i32* %16, align 4, !dbg !5610, !tbaa !5513
  %18 = add nsw i32 %17, -1900, !dbg !5610
  store i32 %18, i32* %16, align 4, !dbg !5610, !tbaa !5513
  %19 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5611
  %20 = extractvalue { i64, %struct.jv_refcnt* } %19, 0, !dbg !5611
  %21 = extractvalue { i64, %struct.jv_refcnt* } %19, 1, !dbg !5611
  %22 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %20, %struct.jv_refcnt* %21, i32 1) #15, !dbg !5611
  %23 = extractvalue { i64, %struct.jv_refcnt* } %22, 0, !dbg !5611
  call void @llvm.dbg.value(metadata i64 %23, metadata !5590, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5612
  %24 = extractvalue { i64, %struct.jv_refcnt* } %22, 1, !dbg !5611
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %24, metadata !5590, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5612
  %25 = tail call i32 @jv_get_kind(i64 %23, %struct.jv_refcnt* %24) #15, !dbg !5613
  %26 = icmp eq i32 %25, 4, !dbg !5613
  br i1 %26, label %27, label %103, !dbg !5611

27:                                               ; preds = %13
  %28 = tail call double @jv_number_value(i64 %23, %struct.jv_refcnt* %24) #15, !dbg !5611
  %29 = fptosi double %28 to i32, !dbg !5611
  %30 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 4, !dbg !5611
  store i32 %29, i32* %30, align 8, !dbg !5611, !tbaa !4682
  tail call void @jv_free(i64 %23, %struct.jv_refcnt* %24) #15, !dbg !5611
  %31 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5615
  %32 = extractvalue { i64, %struct.jv_refcnt* } %31, 0, !dbg !5615
  %33 = extractvalue { i64, %struct.jv_refcnt* } %31, 1, !dbg !5615
  %34 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %32, %struct.jv_refcnt* %33, i32 2) #15, !dbg !5615
  %35 = extractvalue { i64, %struct.jv_refcnt* } %34, 0, !dbg !5615
  call void @llvm.dbg.value(metadata i64 %35, metadata !5592, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5616
  %36 = extractvalue { i64, %struct.jv_refcnt* } %34, 1, !dbg !5615
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %36, metadata !5592, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5616
  %37 = tail call i32 @jv_get_kind(i64 %35, %struct.jv_refcnt* %36) #15, !dbg !5617
  %38 = icmp eq i32 %37, 4, !dbg !5617
  br i1 %38, label %39, label %103, !dbg !5615

39:                                               ; preds = %27
  %40 = tail call double @jv_number_value(i64 %35, %struct.jv_refcnt* %36) #15, !dbg !5615
  %41 = fptosi double %40 to i32, !dbg !5615
  %42 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 3, !dbg !5615
  store i32 %41, i32* %42, align 4, !dbg !5615, !tbaa !4678
  tail call void @jv_free(i64 %35, %struct.jv_refcnt* %36) #15, !dbg !5615
  %43 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5619
  %44 = extractvalue { i64, %struct.jv_refcnt* } %43, 0, !dbg !5619
  %45 = extractvalue { i64, %struct.jv_refcnt* } %43, 1, !dbg !5619
  %46 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %44, %struct.jv_refcnt* %45, i32 3) #15, !dbg !5619
  %47 = extractvalue { i64, %struct.jv_refcnt* } %46, 0, !dbg !5619
  call void @llvm.dbg.value(metadata i64 %47, metadata !5594, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5620
  %48 = extractvalue { i64, %struct.jv_refcnt* } %46, 1, !dbg !5619
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %48, metadata !5594, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5620
  %49 = tail call i32 @jv_get_kind(i64 %47, %struct.jv_refcnt* %48) #15, !dbg !5621
  %50 = icmp eq i32 %49, 4, !dbg !5621
  br i1 %50, label %51, label %103, !dbg !5619

51:                                               ; preds = %39
  %52 = tail call double @jv_number_value(i64 %47, %struct.jv_refcnt* %48) #15, !dbg !5619
  %53 = fptosi double %52 to i32, !dbg !5619
  %54 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 2, !dbg !5619
  store i32 %53, i32* %54, align 8, !dbg !5619, !tbaa !5578
  tail call void @jv_free(i64 %47, %struct.jv_refcnt* %48) #15, !dbg !5619
  %55 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5623
  %56 = extractvalue { i64, %struct.jv_refcnt* } %55, 0, !dbg !5623
  %57 = extractvalue { i64, %struct.jv_refcnt* } %55, 1, !dbg !5623
  %58 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %56, %struct.jv_refcnt* %57, i32 4) #15, !dbg !5623
  %59 = extractvalue { i64, %struct.jv_refcnt* } %58, 0, !dbg !5623
  call void @llvm.dbg.value(metadata i64 %59, metadata !5596, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5624
  %60 = extractvalue { i64, %struct.jv_refcnt* } %58, 1, !dbg !5623
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %60, metadata !5596, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5624
  %61 = tail call i32 @jv_get_kind(i64 %59, %struct.jv_refcnt* %60) #15, !dbg !5625
  %62 = icmp eq i32 %61, 4, !dbg !5625
  br i1 %62, label %63, label %103, !dbg !5623

63:                                               ; preds = %51
  %64 = tail call double @jv_number_value(i64 %59, %struct.jv_refcnt* %60) #15, !dbg !5623
  %65 = fptosi double %64 to i32, !dbg !5623
  %66 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 1, !dbg !5623
  store i32 %65, i32* %66, align 4, !dbg !5623, !tbaa !5579
  tail call void @jv_free(i64 %59, %struct.jv_refcnt* %60) #15, !dbg !5623
  %67 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5627
  %68 = extractvalue { i64, %struct.jv_refcnt* } %67, 0, !dbg !5627
  %69 = extractvalue { i64, %struct.jv_refcnt* } %67, 1, !dbg !5627
  %70 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %68, %struct.jv_refcnt* %69, i32 5) #15, !dbg !5627
  %71 = extractvalue { i64, %struct.jv_refcnt* } %70, 0, !dbg !5627
  call void @llvm.dbg.value(metadata i64 %71, metadata !5598, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5628
  %72 = extractvalue { i64, %struct.jv_refcnt* } %70, 1, !dbg !5627
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %72, metadata !5598, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5628
  %73 = tail call i32 @jv_get_kind(i64 %71, %struct.jv_refcnt* %72) #15, !dbg !5629
  %74 = icmp eq i32 %73, 4, !dbg !5629
  br i1 %74, label %75, label %103, !dbg !5627

75:                                               ; preds = %63
  %76 = tail call double @jv_number_value(i64 %71, %struct.jv_refcnt* %72) #15, !dbg !5627
  %77 = fptosi double %76 to i32, !dbg !5627
  %78 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 0, !dbg !5627
  store i32 %77, i32* %78, align 8, !dbg !5627, !tbaa !5580
  tail call void @jv_free(i64 %71, %struct.jv_refcnt* %72) #15, !dbg !5627
  %79 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5631
  %80 = extractvalue { i64, %struct.jv_refcnt* } %79, 0, !dbg !5631
  %81 = extractvalue { i64, %struct.jv_refcnt* } %79, 1, !dbg !5631
  %82 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %80, %struct.jv_refcnt* %81, i32 6) #15, !dbg !5631
  %83 = extractvalue { i64, %struct.jv_refcnt* } %82, 0, !dbg !5631
  call void @llvm.dbg.value(metadata i64 %83, metadata !5600, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5632
  %84 = extractvalue { i64, %struct.jv_refcnt* } %82, 1, !dbg !5631
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %84, metadata !5600, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5632
  %85 = tail call i32 @jv_get_kind(i64 %83, %struct.jv_refcnt* %84) #15, !dbg !5633
  %86 = icmp eq i32 %85, 4, !dbg !5633
  br i1 %86, label %87, label %103, !dbg !5631

87:                                               ; preds = %75
  %88 = tail call double @jv_number_value(i64 %83, %struct.jv_refcnt* %84) #15, !dbg !5631
  %89 = fptosi double %88 to i32, !dbg !5631
  %90 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 6, !dbg !5631
  store i32 %89, i32* %90, align 8, !dbg !5631, !tbaa !4646
  tail call void @jv_free(i64 %83, %struct.jv_refcnt* %84) #15, !dbg !5631
  %91 = tail call { i64, %struct.jv_refcnt* } @jv_copy(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5635
  %92 = extractvalue { i64, %struct.jv_refcnt* } %91, 0, !dbg !5635
  %93 = extractvalue { i64, %struct.jv_refcnt* } %91, 1, !dbg !5635
  %94 = tail call { i64, %struct.jv_refcnt* } @jv_array_get(i64 %92, %struct.jv_refcnt* %93, i32 7) #15, !dbg !5635
  %95 = extractvalue { i64, %struct.jv_refcnt* } %94, 0, !dbg !5635
  call void @llvm.dbg.value(metadata i64 %95, metadata !5602, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !5636
  %96 = extractvalue { i64, %struct.jv_refcnt* } %94, 1, !dbg !5635
  call void @llvm.dbg.value(metadata %struct.jv_refcnt* %96, metadata !5602, metadata !DIExpression(DW_OP_LLVM_fragment, 64, 64)), !dbg !5636
  %97 = tail call i32 @jv_get_kind(i64 %95, %struct.jv_refcnt* %96) #15, !dbg !5637
  %98 = icmp eq i32 %97, 4, !dbg !5637
  br i1 %98, label %99, label %103, !dbg !5635

99:                                               ; preds = %87
  %100 = tail call double @jv_number_value(i64 %95, %struct.jv_refcnt* %96) #15, !dbg !5635
  %101 = fptosi double %100 to i32, !dbg !5635
  %102 = getelementptr inbounds %struct.tm, %struct.tm* %2, i64 0, i32 7, !dbg !5635
  store i32 %101, i32* %102, align 4, !dbg !5635, !tbaa !4651
  tail call void @jv_free(i64 %95, %struct.jv_refcnt* %96) #15, !dbg !5635
  br label %103, !dbg !5639

103:                                              ; preds = %87, %75, %63, %51, %39, %27, %13, %3, %99
  %104 = phi i32 [ 1, %99 ], [ 0, %3 ], [ 0, %13 ], [ 0, %27 ], [ 0, %39 ], [ 0, %51 ], [ 0, %63 ], [ 0, %75 ], [ 0, %87 ], !dbg !5604
  tail call void @jv_free(i64 %0, %struct.jv_refcnt* %1) #15, !dbg !5604
  ret i32 %104, !dbg !5640
}

; Function Attrs: nounwind
declare !dbg !5641 i64 @strftime(i8*, i64, i8*, %struct.tm*) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5646 i64 @timegm(%struct.tm*) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5649 %struct.tm* @gmtime_r(i64*, %struct.tm*) local_unnamed_addr #7

; Function Attrs: nounwind
declare !dbg !5654 %struct.tm* @localtime_r(i64*, %struct.tm*) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare !dbg !5655 noundef i32 @gettimeofday(%struct.timeval* nocapture noundef, i8* nocapture noundef) local_unnamed_addr #8

; Function Attrs: nounwind
declare !dbg !5660 i64 @time(i64*) local_unnamed_addr #7

declare !dbg !5664 { i64, %struct.jv_refcnt* } @jq_util_input_get_current_filename(%struct.jq_state*) local_unnamed_addr #3

declare !dbg !5665 { i64, %struct.jv_refcnt* } @jq_util_input_get_current_line(%struct.jq_state*) local_unnamed_addr #3

declare !dbg !5666 { i64, %struct.jv_refcnt* } @block_list_funcs(%struct.inst*, %struct.inst*, i32) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #13

; Function Attrs: argmemonly nofree nounwind readonly willreturn
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #13

attributes #0 = { nounwind sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { mustprogress nofree nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { mustprogress nofree nosync nounwind readnone willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #11 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { mustprogress nofree nosync nounwind sspstrong uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #14 = { argmemonly nofree nounwind readonly willreturn }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }
attributes #17 = { nounwind readnone willreturn }
attributes #18 = { readnone }
attributes #19 = { nounwind readonly willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!192, !193, !194, !195, !196}
!llvm.ident = !{!197}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "jq_builtins", scope: !2, file: !3, line: 1807, type: !189, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.1", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !92, globals: !131, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "src/builtin.c", directory: "/home/jonas/Repos/jq")
!4 = !{!5, !17, !60, !71, !77}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 20, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./src/bytecode.h", directory: "/home/jonas/Repos/jq")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16}
!9 = !DIEnumerator(name: "OP_HAS_CONSTANT", value: 2)
!10 = !DIEnumerator(name: "OP_HAS_VARIABLE", value: 4)
!11 = !DIEnumerator(name: "OP_HAS_BRANCH", value: 8)
!12 = !DIEnumerator(name: "OP_HAS_CFUNC", value: 32)
!13 = !DIEnumerator(name: "OP_HAS_UFUNC", value: 64)
!14 = !DIEnumerator(name: "OP_IS_CALL_PSEUDO", value: 128)
!15 = !DIEnumerator(name: "OP_HAS_BINDING", value: 1024)
!16 = !DIEnumerator(name: "OP_BIND_WILDCARD", value: 2048)
!17 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 7, baseType: !7, size: 32, elements: !18)
!18 = !{!19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59}
!19 = !DIEnumerator(name: "LOADK", value: 0)
!20 = !DIEnumerator(name: "DUP", value: 1)
!21 = !DIEnumerator(name: "DUPN", value: 2)
!22 = !DIEnumerator(name: "DUP2", value: 3)
!23 = !DIEnumerator(name: "PUSHK_UNDER", value: 4)
!24 = !DIEnumerator(name: "POP", value: 5)
!25 = !DIEnumerator(name: "LOADV", value: 6)
!26 = !DIEnumerator(name: "LOADVN", value: 7)
!27 = !DIEnumerator(name: "STOREV", value: 8)
!28 = !DIEnumerator(name: "STORE_GLOBAL", value: 9)
!29 = !DIEnumerator(name: "INDEX", value: 10)
!30 = !DIEnumerator(name: "INDEX_OPT", value: 11)
!31 = !DIEnumerator(name: "EACH", value: 12)
!32 = !DIEnumerator(name: "EACH_OPT", value: 13)
!33 = !DIEnumerator(name: "FORK", value: 14)
!34 = !DIEnumerator(name: "FORK_OPT", value: 15)
!35 = !DIEnumerator(name: "JUMP", value: 16)
!36 = !DIEnumerator(name: "JUMP_F", value: 17)
!37 = !DIEnumerator(name: "BACKTRACK", value: 18)
!38 = !DIEnumerator(name: "APPEND", value: 19)
!39 = !DIEnumerator(name: "INSERT", value: 20)
!40 = !DIEnumerator(name: "RANGE", value: 21)
!41 = !DIEnumerator(name: "SUBEXP_BEGIN", value: 22)
!42 = !DIEnumerator(name: "SUBEXP_END", value: 23)
!43 = !DIEnumerator(name: "PATH_BEGIN", value: 24)
!44 = !DIEnumerator(name: "PATH_END", value: 25)
!45 = !DIEnumerator(name: "CALL_BUILTIN", value: 26)
!46 = !DIEnumerator(name: "CALL_JQ", value: 27)
!47 = !DIEnumerator(name: "RET", value: 28)
!48 = !DIEnumerator(name: "TAIL_CALL_JQ", value: 29)
!49 = !DIEnumerator(name: "CLOSURE_PARAM", value: 30)
!50 = !DIEnumerator(name: "CLOSURE_REF", value: 31)
!51 = !DIEnumerator(name: "CLOSURE_CREATE", value: 32)
!52 = !DIEnumerator(name: "CLOSURE_CREATE_C", value: 33)
!53 = !DIEnumerator(name: "TOP", value: 34)
!54 = !DIEnumerator(name: "CLOSURE_PARAM_REGULAR", value: 35)
!55 = !DIEnumerator(name: "DEPS", value: 36)
!56 = !DIEnumerator(name: "MODULEMETA", value: 37)
!57 = !DIEnumerator(name: "GENLABEL", value: 38)
!58 = !DIEnumerator(name: "DESTRUCTURE_ALT", value: 39)
!59 = !DIEnumerator(name: "STOREVN", value: 40)
!60 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !61, line: 8, baseType: !7, size: 32, elements: !62)
!61 = !DIFile(filename: "./src/jv.h", directory: "/home/jonas/Repos/jq")
!62 = !{!63, !64, !65, !66, !67, !68, !69, !70}
!63 = !DIEnumerator(name: "JV_KIND_INVALID", value: 0)
!64 = !DIEnumerator(name: "JV_KIND_NULL", value: 1)
!65 = !DIEnumerator(name: "JV_KIND_FALSE", value: 2)
!66 = !DIEnumerator(name: "JV_KIND_TRUE", value: 3)
!67 = !DIEnumerator(name: "JV_KIND_NUMBER", value: 4)
!68 = !DIEnumerator(name: "JV_KIND_STRING", value: 5)
!69 = !DIEnumerator(name: "JV_KIND_ARRAY", value: 6)
!70 = !DIEnumerator(name: "JV_KIND_OBJECT", value: 7)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cmp_op", file: !3, line: 420, baseType: !7, size: 32, elements: !72)
!72 = !{!73, !74, !75, !76}
!73 = !DIEnumerator(name: "CMP_OP_LESS", value: 0)
!74 = !DIEnumerator(name: "CMP_OP_GREATER", value: 1)
!75 = !DIEnumerator(name: "CMP_OP_LESSEQ", value: 2)
!76 = !DIEnumerator(name: "CMP_OP_GREATEREQ", value: 3)
!77 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !78, line: 46, baseType: !7, size: 32, elements: !79)
!78 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!79 = !{!80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91}
!80 = !DIEnumerator(name: "_ISupper", value: 256)
!81 = !DIEnumerator(name: "_ISlower", value: 512)
!82 = !DIEnumerator(name: "_ISalpha", value: 1024)
!83 = !DIEnumerator(name: "_ISdigit", value: 2048)
!84 = !DIEnumerator(name: "_ISxdigit", value: 4096)
!85 = !DIEnumerator(name: "_ISspace", value: 8192)
!86 = !DIEnumerator(name: "_ISprint", value: 16384)
!87 = !DIEnumerator(name: "_ISgraph", value: 32768)
!88 = !DIEnumerator(name: "_ISblank", value: 1)
!89 = !DIEnumerator(name: "_IScntrl", value: 2)
!90 = !DIEnumerator(name: "_ISpunct", value: 4)
!91 = !DIEnumerator(name: "_ISalnum", value: 8)
!92 = !{!93, !98, !7, !99, !100, !102, !103, !107, !109, !111, !118, !128}
!93 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !94, line: 101, baseType: !95)
!94 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!95 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !96, line: 72, baseType: !97)
!96 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!97 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!98 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!99 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !101, size: 64)
!101 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !99)
!102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64)
!104 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !105)
!105 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigUChar", file: !106, line: 104, baseType: !99)
!106 = !DIFile(filename: "./modules/oniguruma/src/oniguruma.h", directory: "/home/jonas/Repos/jq")
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !108)
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !112, size: 64)
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "jv", file: !61, line: 32, baseType: !113)
!113 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !61, line: 23, size: 128, elements: !114)
!114 = !{!115, !116, !117, !119, !120}
!115 = !DIDerivedType(tag: DW_TAG_member, name: "kind_flags", scope: !113, file: !61, line: 24, baseType: !99, size: 8)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "pad_", scope: !113, file: !61, line: 25, baseType: !99, size: 8, offset: 8)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !113, file: !61, line: 26, baseType: !118, size: 16, offset: 16)
!118 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !113, file: !61, line: 27, baseType: !98, size: 32, offset: 32)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !113, file: !61, line: 31, baseType: !121, size: 64, offset: 64)
!121 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !113, file: !61, line: 28, size: 64, elements: !122)
!122 = !{!123, !126}
!123 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !121, file: !61, line: 29, baseType: !124, size: 64)
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DICompositeType(tag: DW_TAG_structure_type, name: "jv_refcnt", file: !61, line: 19, flags: DIFlagFwdDecl)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "number", scope: !121, file: !61, line: 30, baseType: !127, size: 64)
!127 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !129, line: 10, baseType: !130)
!129 = !DIFile(filename: "/usr/include/bits/types/time_t.h", directory: "")
!130 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !96, line: 160, baseType: !97)
!131 = !{!0, !132, !147, !149, !154, !159}
!132 = !DIGlobalVariableExpression(var: !133, expr: !DIExpression())
!133 = distinct !DIGlobalVariable(name: "function_list", scope: !2, file: !3, line: 1674, type: !134, isLocal: true, isDefinition: true)
!134 = !DICompositeType(tag: DW_TAG_array_type, baseType: !135, size: 24768, elements: !145)
!135 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !136)
!136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cfunction", file: !6, line: 49, size: 192, elements: !137)
!137 = !{!138, !143, !144}
!138 = !DIDerivedType(tag: DW_TAG_member, name: "fptr", scope: !136, file: !6, line: 50, baseType: !139, size: 64)
!139 = !DIDerivedType(tag: DW_TAG_typedef, name: "cfunction_ptr", file: !6, line: 48, baseType: !140)
!140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!141 = !DISubroutineType(types: !142)
!142 = !{null, null}
!143 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !136, file: !6, line: 51, baseType: !109, size: 64, offset: 64)
!144 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !136, file: !6, line: 52, baseType: !98, size: 32, offset: 128)
!145 = !{!146}
!146 = !DISubrange(count: 129)
!147 = !DIGlobalVariableExpression(var: !148, expr: !DIExpression(DW_OP_constu, 255, DW_OP_stack_value))
!148 = distinct !DIGlobalVariable(name: "BASE64_INVALID_ENTRY", scope: !2, file: !3, line: 523, type: !101, isLocal: true, isDefinition: true)
!149 = !DIGlobalVariableExpression(var: !150, expr: !DIExpression())
!150 = distinct !DIGlobalVariable(name: "BASE64_ENCODE_TABLE", scope: !2, file: !3, line: 522, type: !151, isLocal: true, isDefinition: true)
!151 = !DICompositeType(tag: DW_TAG_array_type, baseType: !101, size: 520, elements: !152)
!152 = !{!153}
!153 = !DISubrange(count: 65)
!154 = !DIGlobalVariableExpression(var: !155, expr: !DIExpression())
!155 = distinct !DIGlobalVariable(name: "BASE64_DECODE_TABLE", scope: !2, file: !3, line: 524, type: !156, isLocal: true, isDefinition: true)
!156 = !DICompositeType(tag: DW_TAG_array_type, baseType: !101, size: 2040, elements: !157)
!157 = !{!158}
!158 = !DISubrange(count: 255)
!159 = !DIGlobalVariableExpression(var: !160, expr: !DIExpression())
!160 = distinct !DIGlobalVariable(name: "d", scope: !161, file: !3, line: 1348, type: !185, isLocal: true, isDefinition: true)
!161 = distinct !DISubprogram(name: "set_tm_yday", scope: !3, file: !3, line: 1347, type: !162, scopeLine: 1347, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !179)
!162 = !DISubroutineType(types: !163)
!163 = !{null, !164}
!164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !165, size: 64)
!165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !166, line: 7, size: 448, elements: !167)
!166 = !DIFile(filename: "/usr/include/bits/types/struct_tm.h", directory: "")
!167 = !{!168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178}
!168 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !165, file: !166, line: 9, baseType: !98, size: 32)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !165, file: !166, line: 10, baseType: !98, size: 32, offset: 32)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !165, file: !166, line: 11, baseType: !98, size: 32, offset: 64)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !165, file: !166, line: 12, baseType: !98, size: 32, offset: 96)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !165, file: !166, line: 13, baseType: !98, size: 32, offset: 128)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !165, file: !166, line: 14, baseType: !98, size: 32, offset: 160)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !165, file: !166, line: 15, baseType: !98, size: 32, offset: 192)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !165, file: !166, line: 16, baseType: !98, size: 32, offset: 224)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !165, file: !166, line: 17, baseType: !98, size: 32, offset: 256)
!177 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !165, file: !166, line: 20, baseType: !97, size: 64, offset: 320)
!178 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !165, file: !166, line: 21, baseType: !109, size: 64, offset: 384)
!179 = !{!180, !181, !182, !183, !184}
!180 = !DILocalVariable(name: "tm", arg: 1, scope: !161, file: !3, line: 1347, type: !164)
!181 = !DILocalVariable(name: "mon", scope: !161, file: !3, line: 1349, type: !98)
!182 = !DILocalVariable(name: "year", scope: !161, file: !3, line: 1350, type: !98)
!183 = !DILocalVariable(name: "leap_day", scope: !161, file: !3, line: 1351, type: !98)
!184 = !DILocalVariable(name: "yday", scope: !161, file: !3, line: 1362, type: !98)
!185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !186, size: 384, elements: !187)
!186 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !98)
!187 = !{!188}
!188 = !DISubrange(count: 12)
!189 = !DICompositeType(tag: DW_TAG_array_type, baseType: !110, size: 91384, elements: !190)
!190 = !{!191}
!191 = !DISubrange(count: 11423)
!192 = !{i32 7, !"Dwarf Version", i32 4}
!193 = !{i32 2, !"Debug Info Version", i32 3}
!194 = !{i32 1, !"wchar_size", i32 4}
!195 = !{i32 7, !"PIC Level", i32 2}
!196 = !{i32 7, !"uwtable", i32 1}
!197 = !{!"clang version 13.0.1"}
!198 = distinct !DISubprogram(name: "builtins_bind", scope: !3, file: !3, line: 1843, type: !199, scopeLine: 1843, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !215)
!199 = !DISubroutineType(types: !200)
!200 = !{!98, !201, !205}
!201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !202, size: 64)
!202 = !DIDerivedType(tag: DW_TAG_typedef, name: "jq_state", file: !203, line: 13, baseType: !204)
!203 = !DIFile(filename: "./src/jq.h", directory: "/home/jonas/Repos/jq")
!204 = !DICompositeType(tag: DW_TAG_structure_type, name: "jq_state", file: !203, line: 13, flags: DIFlagFwdDecl)
!205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !206, size: 64)
!206 = !DIDerivedType(tag: DW_TAG_typedef, name: "block", file: !207, line: 15, baseType: !208)
!207 = !DIFile(filename: "./src/compile.h", directory: "/home/jonas/Repos/jq")
!208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block", file: !207, line: 12, size: 128, elements: !209)
!209 = !{!210, !214}
!210 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !208, file: !207, line: 13, baseType: !211, size: 64)
!211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !212, size: 64)
!212 = !DIDerivedType(tag: DW_TAG_typedef, name: "inst", file: !207, line: 9, baseType: !213)
!213 = !DICompositeType(tag: DW_TAG_structure_type, name: "inst", file: !207, line: 8, flags: DIFlagFwdDecl)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !208, file: !207, line: 14, baseType: !211, size: 64, offset: 64)
!215 = !{!216, !217, !218, !219, !233}
!216 = !DILocalVariable(name: "jq", arg: 1, scope: !198, file: !3, line: 1843, type: !201)
!217 = !DILocalVariable(name: "bb", arg: 2, scope: !198, file: !3, line: 1843, type: !205)
!218 = !DILocalVariable(name: "builtins", scope: !198, file: !3, line: 1844, type: !206)
!219 = !DILocalVariable(name: "src", scope: !198, file: !3, line: 1845, type: !220)
!220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "locfile", file: !222, line: 12, size: 576, elements: !223)
!222 = !DIFile(filename: "./src/locfile.h", directory: "/home/jonas/Repos/jq")
!223 = !{!224, !225, !226, !227, !229, !230, !231, !232}
!224 = !DIDerivedType(tag: DW_TAG_member, name: "fname", scope: !221, file: !222, line: 13, baseType: !112, size: 128)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !221, file: !222, line: 14, baseType: !109, size: 64, offset: 128)
!226 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !221, file: !222, line: 15, baseType: !98, size: 32, offset: 192)
!227 = !DIDerivedType(tag: DW_TAG_member, name: "linemap", scope: !221, file: !222, line: 16, baseType: !228, size: 64, offset: 256)
!228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !98, size: 64)
!229 = !DIDerivedType(tag: DW_TAG_member, name: "nlines", scope: !221, file: !222, line: 17, baseType: !98, size: 32, offset: 320)
!230 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !221, file: !222, line: 18, baseType: !107, size: 64, offset: 384)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "jq", scope: !221, file: !222, line: 19, baseType: !201, size: 64, offset: 448)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "refct", scope: !221, file: !222, line: 20, baseType: !98, size: 32, offset: 512)
!233 = !DILocalVariable(name: "nerrors", scope: !198, file: !3, line: 1846, type: !98)
!234 = !DILocation(line: 0, scope: !198)
!235 = !DILocation(line: 1844, column: 3, scope: !198)
!236 = !DILocation(line: 1844, column: 9, scope: !198)
!237 = !DILocation(line: 1845, column: 25, scope: !198)
!238 = !DILocation(line: 1846, column: 17, scope: !198)
!239 = !DILocation(line: 1847, column: 3, scope: !240)
!240 = distinct !DILexicalBlock(scope: !241, file: !3, line: 1847, column: 3)
!241 = distinct !DILexicalBlock(scope: !198, file: !3, line: 1847, column: 3)
!242 = !DILocation(line: 1847, column: 3, scope: !241)
!243 = !DILocation(line: 1848, column: 3, scope: !198)
!244 = !DILocation(line: 1850, column: 14, scope: !198)
!245 = !DILocalVariable(name: "b", arg: 1, scope: !246, file: !3, line: 1762, type: !206)
!246 = distinct !DISubprogram(name: "bind_bytecoded_builtins", scope: !3, file: !3, line: 1762, type: !247, scopeLine: 1762, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !249)
!247 = !DISubroutineType(types: !248)
!248 = !{!206, !206}
!249 = !{!245, !250, !251, !260, !262, !267, !269, !271, !272}
!250 = !DILocalVariable(name: "builtins", scope: !246, file: !3, line: 1763, type: !206)
!251 = !DILocalVariable(name: "builtin_defs", scope: !252, file: !3, line: 1765, type: !253)
!252 = distinct !DILexicalBlock(scope: !246, file: !3, line: 1764, column: 3)
!253 = !DICompositeType(tag: DW_TAG_array_type, baseType: !254, size: 384, elements: !258)
!254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bytecoded_builtin", file: !3, line: 1761, size: 192, elements: !255)
!255 = !{!256, !257}
!256 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !254, file: !3, line: 1761, baseType: !109, size: 64)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !254, file: !3, line: 1761, baseType: !206, size: 128, offset: 64)
!258 = !{!259}
!259 = !DISubrange(count: 2)
!260 = !DILocalVariable(name: "i", scope: !261, file: !3, line: 1770, type: !7)
!261 = distinct !DILexicalBlock(scope: !252, file: !3, line: 1770, column: 5)
!262 = !DILocalVariable(name: "builtin_def_1arg", scope: !263, file: !3, line: 1776, type: !264)
!263 = distinct !DILexicalBlock(scope: !246, file: !3, line: 1775, column: 3)
!264 = !DICompositeType(tag: DW_TAG_array_type, baseType: !254, size: 192, elements: !265)
!265 = !{!266}
!266 = !DISubrange(count: 1)
!267 = !DILocalVariable(name: "i", scope: !268, file: !3, line: 1781, type: !7)
!268 = distinct !DILexicalBlock(scope: !263, file: !3, line: 1781, column: 5)
!269 = !DILocalVariable(name: "rangevar", scope: !270, file: !3, line: 1789, type: !206)
!270 = distinct !DILexicalBlock(scope: !246, file: !3, line: 1787, column: 3)
!271 = !DILocalVariable(name: "rangestart", scope: !270, file: !3, line: 1790, type: !206)
!272 = !DILocalVariable(name: "range", scope: !270, file: !3, line: 1791, type: !206)
!273 = !DILocation(line: 0, scope: !246, inlinedAt: !274)
!274 = distinct !DILocation(line: 1850, column: 14, scope: !198)
!275 = !DILocation(line: 1763, column: 20, scope: !246, inlinedAt: !274)
!276 = !DILocation(line: 0, scope: !252, inlinedAt: !274)
!277 = !DILocation(line: 1766, column: 17, scope: !252, inlinedAt: !274)
!278 = !DILocation(line: 1767, column: 40, scope: !252, inlinedAt: !274)
!279 = !DILocation(line: 1767, column: 30, scope: !252, inlinedAt: !274)
!280 = !DILocation(line: 1768, column: 40, scope: !252, inlinedAt: !274)
!281 = !DILocation(line: 1768, column: 30, scope: !252, inlinedAt: !274)
!282 = !DILocation(line: 1767, column: 15, scope: !252, inlinedAt: !274)
!283 = !DILocation(line: 0, scope: !261, inlinedAt: !274)
!284 = !DILocation(line: 1771, column: 18, scope: !285, inlinedAt: !274)
!285 = distinct !DILexicalBlock(scope: !286, file: !3, line: 1770, column: 77)
!286 = distinct !DILexicalBlock(scope: !261, file: !3, line: 1770, column: 5)
!287 = !DILocation(line: 0, scope: !263, inlinedAt: !274)
!288 = !DILocation(line: 1777, column: 16, scope: !263, inlinedAt: !274)
!289 = !DILocation(line: 0, scope: !268, inlinedAt: !274)
!290 = !DILocation(line: 1782, column: 18, scope: !291, inlinedAt: !274)
!291 = distinct !DILexicalBlock(scope: !292, file: !3, line: 1781, column: 85)
!292 = distinct !DILexicalBlock(scope: !268, file: !3, line: 1781, column: 5)
!293 = !DILocation(line: 1789, column: 22, scope: !270, inlinedAt: !274)
!294 = !DILocation(line: 0, scope: !270, inlinedAt: !274)
!295 = !DILocation(line: 1790, column: 24, scope: !270, inlinedAt: !274)
!296 = !DILocation(line: 1791, column: 19, scope: !270, inlinedAt: !274)
!297 = !DILocation(line: 1800, column: 16, scope: !270, inlinedAt: !274)
!298 = !DILocation(line: 1804, column: 10, scope: !246, inlinedAt: !274)
!299 = !{i64 0, i64 8, !300, i64 8, i64 8, !300}
!300 = !{!301, !301, i64 0}
!301 = !{!"any pointer", !302, i64 0}
!302 = !{!"omnipotent char", !303, i64 0}
!303 = !{!"Simple C/C++ TBAA"}
!304 = !{i64 0, i64 8, !300}
!305 = !DILocation(line: 1851, column: 14, scope: !198)
!306 = !DILocalVariable(name: "builtins", arg: 1, scope: !307, file: !3, line: 1838, type: !206)
!307 = distinct !DISubprogram(name: "gen_builtin_list", scope: !3, file: !3, line: 1838, type: !247, scopeLine: 1838, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !308)
!308 = !{!306, !309}
!309 = !DILocalVariable(name: "list", scope: !307, file: !3, line: 1839, type: !112)
!310 = !DILocation(line: 0, scope: !307, inlinedAt: !311)
!311 = distinct !DILocation(line: 1852, column: 14, scope: !198)
!312 = !DILocation(line: 1839, column: 29, scope: !307, inlinedAt: !311)
!313 = !DILocation(line: 1839, column: 60, scope: !307, inlinedAt: !311)
!314 = !DILocation(line: 1839, column: 13, scope: !307, inlinedAt: !311)
!315 = !DILocation(line: 1840, column: 10, scope: !307, inlinedAt: !311)
!316 = !DILocation(line: 1852, column: 14, scope: !198)
!317 = !DILocation(line: 1854, column: 9, scope: !198)
!318 = !DILocation(line: 1856, column: 1, scope: !198)
!319 = !DILocation(line: 1855, column: 3, scope: !198)
!320 = !DISubprogram(name: "locfile_init", scope: !222, file: !222, line: 23, type: !321, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!321 = !DISubroutineType(types: !322)
!322 = !{!220, !323, !109, !109, !98}
!323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !204, size: 64)
!324 = !{}
!325 = !DISubprogram(name: "jq_parse_library", scope: !326, file: !326, line: 7, type: !327, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!326 = !DIFile(filename: "./src/jq_parser.h", directory: "/home/jonas/Repos/jq")
!327 = !DISubroutineType(types: !328)
!328 = !{!98, !220, !329}
!329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !208, size: 64)
!330 = !DISubprogram(name: "locfile_free", scope: !222, file: !222, line: 26, type: !331, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!331 = !DISubroutineType(types: !332)
!332 = !{null, !220}
!333 = !DISubprogram(name: "gen_cbinding", scope: !207, file: !207, line: 66, type: !334, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!334 = !DISubroutineType(types: !335)
!335 = !{!208, !336, !98, !208}
!336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !135, size: 64)
!337 = !DISubprogram(name: "block_bind_referenced", scope: !207, file: !207, line: 76, type: !338, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!338 = !DISubroutineType(types: !339)
!339 = !{!208, !208, !208, !98}
!340 = !DISubprogram(name: "gen_noop", scope: !207, file: !207, line: 19, type: !341, spFlags: DISPFlagOptimized, retainedNodes: !324)
!341 = !DISubroutineType(types: !342)
!342 = !{!208, null}
!343 = !DISubprogram(name: "gen_op_simple", scope: !207, file: !207, line: 21, type: !344, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!344 = !DISubroutineType(types: !345)
!345 = !{!208, !17}
!346 = !DISubprogram(name: "gen_condbranch", scope: !207, file: !207, line: 50, type: !347, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!347 = !DISubroutineType(types: !348)
!348 = !{!208, !208, !208}
!349 = !DISubprogram(name: "gen_const", scope: !207, file: !207, line: 22, type: !350, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!350 = !DISubroutineType(types: !351)
!351 = !{!208, !113}
!352 = !DISubprogram(name: "jv_false", scope: !61, file: !61, line: 59, type: !353, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!353 = !DISubroutineType(types: !354)
!354 = !{!113}
!355 = !DISubprogram(name: "jv_true", scope: !61, file: !61, line: 58, type: !353, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!356 = !DISubprogram(name: "block_join", scope: !207, file: !207, line: 69, type: !347, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!357 = !DISubprogram(name: "gen_function", scope: !207, file: !207, line: 38, type: !358, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!358 = !DISubroutineType(types: !359)
!359 = !{!208, !109, !208, !208}
!360 = !DISubprogram(name: "gen_call", scope: !207, file: !207, line: 42, type: !361, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!361 = !DISubroutineType(types: !362)
!362 = !{!208, !109, !208}
!363 = !DISubprogram(name: "gen_param", scope: !207, file: !207, line: 40, type: !364, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!364 = !DISubroutineType(types: !365)
!365 = !{!208, !109}
!366 = !DISubprogram(name: "gen_op_var_fresh", scope: !207, file: !207, line: 31, type: !367, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!367 = !DISubroutineType(types: !368)
!368 = !{!208, !17, !109}
!369 = !DISubprogram(name: "gen_op_bound", scope: !207, file: !207, line: 30, type: !370, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!370 = !DISubroutineType(types: !371)
!371 = !{!208, !17, !208}
!372 = distinct !DISubprogram(name: "f_acos", scope: !373, file: !373, line: 2, type: !374, scopeLine: 2, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !376)
!373 = !DIFile(filename: "./src/libm.h", directory: "/home/jonas/Repos/jq")
!374 = !DISubroutineType(types: !375)
!375 = !{!112, !201, !112}
!376 = !{!377, !378, !379}
!377 = !DILocalVariable(name: "jq", arg: 1, scope: !372, file: !373, line: 2, type: !201)
!378 = !DILocalVariable(name: "input", arg: 2, scope: !372, file: !373, line: 2, type: !112)
!379 = !DILocalVariable(name: "ret", scope: !372, file: !373, line: 2, type: !112)
!380 = !DILocation(line: 0, scope: !372)
!381 = !DILocation(line: 2, column: 1, scope: !382)
!382 = distinct !DILexicalBlock(scope: !372, file: !373, line: 2, column: 1)
!383 = !DILocation(line: 2, column: 1, scope: !372)
!384 = !DILocalVariable(name: "bad", arg: 1, scope: !385, file: !3, line: 50, type: !112)
!385 = distinct !DISubprogram(name: "type_error", scope: !3, file: !3, line: 50, type: !386, scopeLine: 50, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !388)
!386 = !DISubroutineType(types: !387)
!387 = !{!112, !112, !109}
!388 = !{!384, !389, !390, !394}
!389 = !DILocalVariable(name: "msg", arg: 2, scope: !385, file: !3, line: 50, type: !109)
!390 = !DILocalVariable(name: "errbuf", scope: !385, file: !3, line: 51, type: !391)
!391 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 120, elements: !392)
!392 = !{!393}
!393 = !DISubrange(count: 15)
!394 = !DILocalVariable(name: "err", scope: !385, file: !3, line: 52, type: !112)
!395 = !DILocation(line: 0, scope: !385, inlinedAt: !396)
!396 = distinct !DILocation(line: 2, column: 1, scope: !397)
!397 = distinct !DILexicalBlock(scope: !382, file: !373, line: 2, column: 1)
!398 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !396)
!399 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !396)
!400 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !396)
!401 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !396)
!402 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !396)
!403 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !396)
!404 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !396)
!405 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !396)
!406 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !396)
!407 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !396)
!408 = !DILocation(line: 2, column: 1, scope: !397)
!409 = distinct !DISubprogram(name: "f_acosh", scope: !373, file: !373, line: 7, type: !374, scopeLine: 7, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !410)
!410 = !{!411, !412, !413}
!411 = !DILocalVariable(name: "jq", arg: 1, scope: !409, file: !373, line: 7, type: !201)
!412 = !DILocalVariable(name: "input", arg: 2, scope: !409, file: !373, line: 7, type: !112)
!413 = !DILocalVariable(name: "ret", scope: !409, file: !373, line: 7, type: !112)
!414 = !DILocation(line: 0, scope: !409)
!415 = !DILocation(line: 7, column: 1, scope: !416)
!416 = distinct !DILexicalBlock(scope: !409, file: !373, line: 7, column: 1)
!417 = !DILocation(line: 7, column: 1, scope: !409)
!418 = !DILocation(line: 0, scope: !385, inlinedAt: !419)
!419 = distinct !DILocation(line: 7, column: 1, scope: !420)
!420 = distinct !DILexicalBlock(scope: !416, file: !373, line: 7, column: 1)
!421 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !419)
!422 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !419)
!423 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !419)
!424 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !419)
!425 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !419)
!426 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !419)
!427 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !419)
!428 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !419)
!429 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !419)
!430 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !419)
!431 = !DILocation(line: 7, column: 1, scope: !420)
!432 = distinct !DISubprogram(name: "f_asin", scope: !373, file: !373, line: 12, type: !374, scopeLine: 12, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !433)
!433 = !{!434, !435, !436}
!434 = !DILocalVariable(name: "jq", arg: 1, scope: !432, file: !373, line: 12, type: !201)
!435 = !DILocalVariable(name: "input", arg: 2, scope: !432, file: !373, line: 12, type: !112)
!436 = !DILocalVariable(name: "ret", scope: !432, file: !373, line: 12, type: !112)
!437 = !DILocation(line: 0, scope: !432)
!438 = !DILocation(line: 12, column: 1, scope: !439)
!439 = distinct !DILexicalBlock(scope: !432, file: !373, line: 12, column: 1)
!440 = !DILocation(line: 12, column: 1, scope: !432)
!441 = !DILocation(line: 0, scope: !385, inlinedAt: !442)
!442 = distinct !DILocation(line: 12, column: 1, scope: !443)
!443 = distinct !DILexicalBlock(scope: !439, file: !373, line: 12, column: 1)
!444 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !442)
!445 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !442)
!446 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !442)
!447 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !442)
!448 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !442)
!449 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !442)
!450 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !442)
!451 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !442)
!452 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !442)
!453 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !442)
!454 = !DILocation(line: 12, column: 1, scope: !443)
!455 = distinct !DISubprogram(name: "f_asinh", scope: !373, file: !373, line: 17, type: !374, scopeLine: 17, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !456)
!456 = !{!457, !458, !459}
!457 = !DILocalVariable(name: "jq", arg: 1, scope: !455, file: !373, line: 17, type: !201)
!458 = !DILocalVariable(name: "input", arg: 2, scope: !455, file: !373, line: 17, type: !112)
!459 = !DILocalVariable(name: "ret", scope: !455, file: !373, line: 17, type: !112)
!460 = !DILocation(line: 0, scope: !455)
!461 = !DILocation(line: 17, column: 1, scope: !462)
!462 = distinct !DILexicalBlock(scope: !455, file: !373, line: 17, column: 1)
!463 = !DILocation(line: 17, column: 1, scope: !455)
!464 = !DILocation(line: 0, scope: !385, inlinedAt: !465)
!465 = distinct !DILocation(line: 17, column: 1, scope: !466)
!466 = distinct !DILexicalBlock(scope: !462, file: !373, line: 17, column: 1)
!467 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !465)
!468 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !465)
!469 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !465)
!470 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !465)
!471 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !465)
!472 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !465)
!473 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !465)
!474 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !465)
!475 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !465)
!476 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !465)
!477 = !DILocation(line: 17, column: 1, scope: !466)
!478 = distinct !DISubprogram(name: "f_atan", scope: !373, file: !373, line: 22, type: !374, scopeLine: 22, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !479)
!479 = !{!480, !481, !482}
!480 = !DILocalVariable(name: "jq", arg: 1, scope: !478, file: !373, line: 22, type: !201)
!481 = !DILocalVariable(name: "input", arg: 2, scope: !478, file: !373, line: 22, type: !112)
!482 = !DILocalVariable(name: "ret", scope: !478, file: !373, line: 22, type: !112)
!483 = !DILocation(line: 0, scope: !478)
!484 = !DILocation(line: 22, column: 1, scope: !485)
!485 = distinct !DILexicalBlock(scope: !478, file: !373, line: 22, column: 1)
!486 = !DILocation(line: 22, column: 1, scope: !478)
!487 = !DILocation(line: 0, scope: !385, inlinedAt: !488)
!488 = distinct !DILocation(line: 22, column: 1, scope: !489)
!489 = distinct !DILexicalBlock(scope: !485, file: !373, line: 22, column: 1)
!490 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !488)
!491 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !488)
!492 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !488)
!493 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !488)
!494 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !488)
!495 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !488)
!496 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !488)
!497 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !488)
!498 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !488)
!499 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !488)
!500 = !DILocation(line: 22, column: 1, scope: !489)
!501 = distinct !DISubprogram(name: "f_atan2", scope: !373, file: !373, line: 27, type: !502, scopeLine: 27, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !504)
!502 = !DISubroutineType(types: !503)
!503 = !{!112, !201, !112, !112, !112}
!504 = !{!505, !506, !507, !508, !509}
!505 = !DILocalVariable(name: "jq", arg: 1, scope: !501, file: !373, line: 27, type: !201)
!506 = !DILocalVariable(name: "input", arg: 2, scope: !501, file: !373, line: 27, type: !112)
!507 = !DILocalVariable(name: "a", arg: 3, scope: !501, file: !373, line: 27, type: !112)
!508 = !DILocalVariable(name: "b", arg: 4, scope: !501, file: !373, line: 27, type: !112)
!509 = !DILocalVariable(name: "ret", scope: !501, file: !373, line: 27, type: !112)
!510 = !DILocation(line: 0, scope: !501)
!511 = !DILocation(line: 27, column: 1, scope: !501)
!512 = !DILocation(line: 27, column: 1, scope: !513)
!513 = distinct !DILexicalBlock(scope: !501, file: !373, line: 27, column: 1)
!514 = !DILocation(line: 27, column: 1, scope: !515)
!515 = distinct !DILexicalBlock(scope: !513, file: !373, line: 27, column: 1)
!516 = !DILocation(line: 0, scope: !385, inlinedAt: !517)
!517 = distinct !DILocation(line: 27, column: 1, scope: !515)
!518 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !517)
!519 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !517)
!520 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !517)
!521 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !517)
!522 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !517)
!523 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !517)
!524 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !517)
!525 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !517)
!526 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !517)
!527 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !517)
!528 = !DILocation(line: 27, column: 1, scope: !529)
!529 = distinct !DILexicalBlock(scope: !501, file: !373, line: 27, column: 1)
!530 = !DILocation(line: 27, column: 1, scope: !531)
!531 = distinct !DILexicalBlock(scope: !529, file: !373, line: 27, column: 1)
!532 = !DILocation(line: 0, scope: !385, inlinedAt: !533)
!533 = distinct !DILocation(line: 27, column: 1, scope: !531)
!534 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !533)
!535 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !533)
!536 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !533)
!537 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !533)
!538 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !533)
!539 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !533)
!540 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !533)
!541 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !533)
!542 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !533)
!543 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !533)
!544 = distinct !DISubprogram(name: "f_atanh", scope: !373, file: !373, line: 32, type: !374, scopeLine: 32, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !545)
!545 = !{!546, !547, !548}
!546 = !DILocalVariable(name: "jq", arg: 1, scope: !544, file: !373, line: 32, type: !201)
!547 = !DILocalVariable(name: "input", arg: 2, scope: !544, file: !373, line: 32, type: !112)
!548 = !DILocalVariable(name: "ret", scope: !544, file: !373, line: 32, type: !112)
!549 = !DILocation(line: 0, scope: !544)
!550 = !DILocation(line: 32, column: 1, scope: !551)
!551 = distinct !DILexicalBlock(scope: !544, file: !373, line: 32, column: 1)
!552 = !DILocation(line: 32, column: 1, scope: !544)
!553 = !DILocation(line: 0, scope: !385, inlinedAt: !554)
!554 = distinct !DILocation(line: 32, column: 1, scope: !555)
!555 = distinct !DILexicalBlock(scope: !551, file: !373, line: 32, column: 1)
!556 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !554)
!557 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !554)
!558 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !554)
!559 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !554)
!560 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !554)
!561 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !554)
!562 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !554)
!563 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !554)
!564 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !554)
!565 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !554)
!566 = !DILocation(line: 32, column: 1, scope: !555)
!567 = distinct !DISubprogram(name: "f_cbrt", scope: !373, file: !373, line: 37, type: !374, scopeLine: 37, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !568)
!568 = !{!569, !570, !571}
!569 = !DILocalVariable(name: "jq", arg: 1, scope: !567, file: !373, line: 37, type: !201)
!570 = !DILocalVariable(name: "input", arg: 2, scope: !567, file: !373, line: 37, type: !112)
!571 = !DILocalVariable(name: "ret", scope: !567, file: !373, line: 37, type: !112)
!572 = !DILocation(line: 0, scope: !567)
!573 = !DILocation(line: 37, column: 1, scope: !574)
!574 = distinct !DILexicalBlock(scope: !567, file: !373, line: 37, column: 1)
!575 = !DILocation(line: 37, column: 1, scope: !567)
!576 = !DILocation(line: 0, scope: !385, inlinedAt: !577)
!577 = distinct !DILocation(line: 37, column: 1, scope: !578)
!578 = distinct !DILexicalBlock(scope: !574, file: !373, line: 37, column: 1)
!579 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !577)
!580 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !577)
!581 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !577)
!582 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !577)
!583 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !577)
!584 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !577)
!585 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !577)
!586 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !577)
!587 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !577)
!588 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !577)
!589 = !DILocation(line: 37, column: 1, scope: !578)
!590 = distinct !DISubprogram(name: "f_cos", scope: !373, file: !373, line: 42, type: !374, scopeLine: 42, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !591)
!591 = !{!592, !593, !594}
!592 = !DILocalVariable(name: "jq", arg: 1, scope: !590, file: !373, line: 42, type: !201)
!593 = !DILocalVariable(name: "input", arg: 2, scope: !590, file: !373, line: 42, type: !112)
!594 = !DILocalVariable(name: "ret", scope: !590, file: !373, line: 42, type: !112)
!595 = !DILocation(line: 0, scope: !590)
!596 = !DILocation(line: 42, column: 1, scope: !597)
!597 = distinct !DILexicalBlock(scope: !590, file: !373, line: 42, column: 1)
!598 = !DILocation(line: 42, column: 1, scope: !590)
!599 = !DILocation(line: 0, scope: !385, inlinedAt: !600)
!600 = distinct !DILocation(line: 42, column: 1, scope: !601)
!601 = distinct !DILexicalBlock(scope: !597, file: !373, line: 42, column: 1)
!602 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !600)
!603 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !600)
!604 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !600)
!605 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !600)
!606 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !600)
!607 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !600)
!608 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !600)
!609 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !600)
!610 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !600)
!611 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !600)
!612 = !DILocation(line: 42, column: 1, scope: !601)
!613 = distinct !DISubprogram(name: "f_cosh", scope: !373, file: !373, line: 47, type: !374, scopeLine: 47, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !614)
!614 = !{!615, !616, !617}
!615 = !DILocalVariable(name: "jq", arg: 1, scope: !613, file: !373, line: 47, type: !201)
!616 = !DILocalVariable(name: "input", arg: 2, scope: !613, file: !373, line: 47, type: !112)
!617 = !DILocalVariable(name: "ret", scope: !613, file: !373, line: 47, type: !112)
!618 = !DILocation(line: 0, scope: !613)
!619 = !DILocation(line: 47, column: 1, scope: !620)
!620 = distinct !DILexicalBlock(scope: !613, file: !373, line: 47, column: 1)
!621 = !DILocation(line: 47, column: 1, scope: !613)
!622 = !DILocation(line: 0, scope: !385, inlinedAt: !623)
!623 = distinct !DILocation(line: 47, column: 1, scope: !624)
!624 = distinct !DILexicalBlock(scope: !620, file: !373, line: 47, column: 1)
!625 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !623)
!626 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !623)
!627 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !623)
!628 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !623)
!629 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !623)
!630 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !623)
!631 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !623)
!632 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !623)
!633 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !623)
!634 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !623)
!635 = !DILocation(line: 47, column: 1, scope: !624)
!636 = distinct !DISubprogram(name: "f_exp", scope: !373, file: !373, line: 52, type: !374, scopeLine: 52, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !637)
!637 = !{!638, !639, !640}
!638 = !DILocalVariable(name: "jq", arg: 1, scope: !636, file: !373, line: 52, type: !201)
!639 = !DILocalVariable(name: "input", arg: 2, scope: !636, file: !373, line: 52, type: !112)
!640 = !DILocalVariable(name: "ret", scope: !636, file: !373, line: 52, type: !112)
!641 = !DILocation(line: 0, scope: !636)
!642 = !DILocation(line: 52, column: 1, scope: !643)
!643 = distinct !DILexicalBlock(scope: !636, file: !373, line: 52, column: 1)
!644 = !DILocation(line: 52, column: 1, scope: !636)
!645 = !DILocation(line: 0, scope: !385, inlinedAt: !646)
!646 = distinct !DILocation(line: 52, column: 1, scope: !647)
!647 = distinct !DILexicalBlock(scope: !643, file: !373, line: 52, column: 1)
!648 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !646)
!649 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !646)
!650 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !646)
!651 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !646)
!652 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !646)
!653 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !646)
!654 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !646)
!655 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !646)
!656 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !646)
!657 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !646)
!658 = !DILocation(line: 52, column: 1, scope: !647)
!659 = distinct !DISubprogram(name: "f_exp2", scope: !373, file: !373, line: 57, type: !374, scopeLine: 57, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !660)
!660 = !{!661, !662, !663}
!661 = !DILocalVariable(name: "jq", arg: 1, scope: !659, file: !373, line: 57, type: !201)
!662 = !DILocalVariable(name: "input", arg: 2, scope: !659, file: !373, line: 57, type: !112)
!663 = !DILocalVariable(name: "ret", scope: !659, file: !373, line: 57, type: !112)
!664 = !DILocation(line: 0, scope: !659)
!665 = !DILocation(line: 57, column: 1, scope: !666)
!666 = distinct !DILexicalBlock(scope: !659, file: !373, line: 57, column: 1)
!667 = !DILocation(line: 57, column: 1, scope: !659)
!668 = !DILocation(line: 0, scope: !385, inlinedAt: !669)
!669 = distinct !DILocation(line: 57, column: 1, scope: !670)
!670 = distinct !DILexicalBlock(scope: !666, file: !373, line: 57, column: 1)
!671 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !669)
!672 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !669)
!673 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !669)
!674 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !669)
!675 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !669)
!676 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !669)
!677 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !669)
!678 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !669)
!679 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !669)
!680 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !669)
!681 = !DILocation(line: 57, column: 1, scope: !670)
!682 = distinct !DISubprogram(name: "f_floor", scope: !373, file: !373, line: 62, type: !374, scopeLine: 62, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !683)
!683 = !{!684, !685, !686}
!684 = !DILocalVariable(name: "jq", arg: 1, scope: !682, file: !373, line: 62, type: !201)
!685 = !DILocalVariable(name: "input", arg: 2, scope: !682, file: !373, line: 62, type: !112)
!686 = !DILocalVariable(name: "ret", scope: !682, file: !373, line: 62, type: !112)
!687 = !DILocation(line: 0, scope: !682)
!688 = !DILocation(line: 62, column: 1, scope: !689)
!689 = distinct !DILexicalBlock(scope: !682, file: !373, line: 62, column: 1)
!690 = !DILocation(line: 62, column: 1, scope: !682)
!691 = !DILocation(line: 0, scope: !385, inlinedAt: !692)
!692 = distinct !DILocation(line: 62, column: 1, scope: !693)
!693 = distinct !DILexicalBlock(scope: !689, file: !373, line: 62, column: 1)
!694 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !692)
!695 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !692)
!696 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !692)
!697 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !692)
!698 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !692)
!699 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !692)
!700 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !692)
!701 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !692)
!702 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !692)
!703 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !692)
!704 = !DILocation(line: 62, column: 1, scope: !693)
!705 = distinct !DISubprogram(name: "f_hypot", scope: !373, file: !373, line: 67, type: !502, scopeLine: 67, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !706)
!706 = !{!707, !708, !709, !710, !711}
!707 = !DILocalVariable(name: "jq", arg: 1, scope: !705, file: !373, line: 67, type: !201)
!708 = !DILocalVariable(name: "input", arg: 2, scope: !705, file: !373, line: 67, type: !112)
!709 = !DILocalVariable(name: "a", arg: 3, scope: !705, file: !373, line: 67, type: !112)
!710 = !DILocalVariable(name: "b", arg: 4, scope: !705, file: !373, line: 67, type: !112)
!711 = !DILocalVariable(name: "ret", scope: !705, file: !373, line: 67, type: !112)
!712 = !DILocation(line: 0, scope: !705)
!713 = !DILocation(line: 67, column: 1, scope: !705)
!714 = !DILocation(line: 67, column: 1, scope: !715)
!715 = distinct !DILexicalBlock(scope: !705, file: !373, line: 67, column: 1)
!716 = !DILocation(line: 67, column: 1, scope: !717)
!717 = distinct !DILexicalBlock(scope: !715, file: !373, line: 67, column: 1)
!718 = !DILocation(line: 0, scope: !385, inlinedAt: !719)
!719 = distinct !DILocation(line: 67, column: 1, scope: !717)
!720 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !719)
!721 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !719)
!722 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !719)
!723 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !719)
!724 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !719)
!725 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !719)
!726 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !719)
!727 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !719)
!728 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !719)
!729 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !719)
!730 = !DILocation(line: 67, column: 1, scope: !731)
!731 = distinct !DILexicalBlock(scope: !705, file: !373, line: 67, column: 1)
!732 = !DILocation(line: 67, column: 1, scope: !733)
!733 = distinct !DILexicalBlock(scope: !731, file: !373, line: 67, column: 1)
!734 = !DILocation(line: 0, scope: !385, inlinedAt: !735)
!735 = distinct !DILocation(line: 67, column: 1, scope: !733)
!736 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !735)
!737 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !735)
!738 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !735)
!739 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !735)
!740 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !735)
!741 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !735)
!742 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !735)
!743 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !735)
!744 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !735)
!745 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !735)
!746 = distinct !DISubprogram(name: "f_j0", scope: !373, file: !373, line: 72, type: !374, scopeLine: 72, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !747)
!747 = !{!748, !749, !750}
!748 = !DILocalVariable(name: "jq", arg: 1, scope: !746, file: !373, line: 72, type: !201)
!749 = !DILocalVariable(name: "input", arg: 2, scope: !746, file: !373, line: 72, type: !112)
!750 = !DILocalVariable(name: "ret", scope: !746, file: !373, line: 72, type: !112)
!751 = !DILocation(line: 0, scope: !746)
!752 = !DILocation(line: 72, column: 1, scope: !753)
!753 = distinct !DILexicalBlock(scope: !746, file: !373, line: 72, column: 1)
!754 = !DILocation(line: 72, column: 1, scope: !746)
!755 = !DILocation(line: 0, scope: !385, inlinedAt: !756)
!756 = distinct !DILocation(line: 72, column: 1, scope: !757)
!757 = distinct !DILexicalBlock(scope: !753, file: !373, line: 72, column: 1)
!758 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !756)
!759 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !756)
!760 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !756)
!761 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !756)
!762 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !756)
!763 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !756)
!764 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !756)
!765 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !756)
!766 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !756)
!767 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !756)
!768 = !DILocation(line: 72, column: 1, scope: !757)
!769 = distinct !DISubprogram(name: "f_j1", scope: !373, file: !373, line: 77, type: !374, scopeLine: 77, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !770)
!770 = !{!771, !772, !773}
!771 = !DILocalVariable(name: "jq", arg: 1, scope: !769, file: !373, line: 77, type: !201)
!772 = !DILocalVariable(name: "input", arg: 2, scope: !769, file: !373, line: 77, type: !112)
!773 = !DILocalVariable(name: "ret", scope: !769, file: !373, line: 77, type: !112)
!774 = !DILocation(line: 0, scope: !769)
!775 = !DILocation(line: 77, column: 1, scope: !776)
!776 = distinct !DILexicalBlock(scope: !769, file: !373, line: 77, column: 1)
!777 = !DILocation(line: 77, column: 1, scope: !769)
!778 = !DILocation(line: 0, scope: !385, inlinedAt: !779)
!779 = distinct !DILocation(line: 77, column: 1, scope: !780)
!780 = distinct !DILexicalBlock(scope: !776, file: !373, line: 77, column: 1)
!781 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !779)
!782 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !779)
!783 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !779)
!784 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !779)
!785 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !779)
!786 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !779)
!787 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !779)
!788 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !779)
!789 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !779)
!790 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !779)
!791 = !DILocation(line: 77, column: 1, scope: !780)
!792 = distinct !DISubprogram(name: "f_log", scope: !373, file: !373, line: 82, type: !374, scopeLine: 82, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !793)
!793 = !{!794, !795, !796}
!794 = !DILocalVariable(name: "jq", arg: 1, scope: !792, file: !373, line: 82, type: !201)
!795 = !DILocalVariable(name: "input", arg: 2, scope: !792, file: !373, line: 82, type: !112)
!796 = !DILocalVariable(name: "ret", scope: !792, file: !373, line: 82, type: !112)
!797 = !DILocation(line: 0, scope: !792)
!798 = !DILocation(line: 82, column: 1, scope: !799)
!799 = distinct !DILexicalBlock(scope: !792, file: !373, line: 82, column: 1)
!800 = !DILocation(line: 82, column: 1, scope: !792)
!801 = !DILocation(line: 0, scope: !385, inlinedAt: !802)
!802 = distinct !DILocation(line: 82, column: 1, scope: !803)
!803 = distinct !DILexicalBlock(scope: !799, file: !373, line: 82, column: 1)
!804 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !802)
!805 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !802)
!806 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !802)
!807 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !802)
!808 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !802)
!809 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !802)
!810 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !802)
!811 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !802)
!812 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !802)
!813 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !802)
!814 = !DILocation(line: 82, column: 1, scope: !803)
!815 = distinct !DISubprogram(name: "f_log10", scope: !373, file: !373, line: 87, type: !374, scopeLine: 87, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !816)
!816 = !{!817, !818, !819}
!817 = !DILocalVariable(name: "jq", arg: 1, scope: !815, file: !373, line: 87, type: !201)
!818 = !DILocalVariable(name: "input", arg: 2, scope: !815, file: !373, line: 87, type: !112)
!819 = !DILocalVariable(name: "ret", scope: !815, file: !373, line: 87, type: !112)
!820 = !DILocation(line: 0, scope: !815)
!821 = !DILocation(line: 87, column: 1, scope: !822)
!822 = distinct !DILexicalBlock(scope: !815, file: !373, line: 87, column: 1)
!823 = !DILocation(line: 87, column: 1, scope: !815)
!824 = !DILocation(line: 0, scope: !385, inlinedAt: !825)
!825 = distinct !DILocation(line: 87, column: 1, scope: !826)
!826 = distinct !DILexicalBlock(scope: !822, file: !373, line: 87, column: 1)
!827 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !825)
!828 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !825)
!829 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !825)
!830 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !825)
!831 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !825)
!832 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !825)
!833 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !825)
!834 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !825)
!835 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !825)
!836 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !825)
!837 = !DILocation(line: 87, column: 1, scope: !826)
!838 = distinct !DISubprogram(name: "f_log2", scope: !373, file: !373, line: 92, type: !374, scopeLine: 92, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !839)
!839 = !{!840, !841, !842}
!840 = !DILocalVariable(name: "jq", arg: 1, scope: !838, file: !373, line: 92, type: !201)
!841 = !DILocalVariable(name: "input", arg: 2, scope: !838, file: !373, line: 92, type: !112)
!842 = !DILocalVariable(name: "ret", scope: !838, file: !373, line: 92, type: !112)
!843 = !DILocation(line: 0, scope: !838)
!844 = !DILocation(line: 92, column: 1, scope: !845)
!845 = distinct !DILexicalBlock(scope: !838, file: !373, line: 92, column: 1)
!846 = !DILocation(line: 92, column: 1, scope: !838)
!847 = !DILocation(line: 0, scope: !385, inlinedAt: !848)
!848 = distinct !DILocation(line: 92, column: 1, scope: !849)
!849 = distinct !DILexicalBlock(scope: !845, file: !373, line: 92, column: 1)
!850 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !848)
!851 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !848)
!852 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !848)
!853 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !848)
!854 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !848)
!855 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !848)
!856 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !848)
!857 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !848)
!858 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !848)
!859 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !848)
!860 = !DILocation(line: 92, column: 1, scope: !849)
!861 = distinct !DISubprogram(name: "f_pow", scope: !373, file: !373, line: 97, type: !502, scopeLine: 97, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !862)
!862 = !{!863, !864, !865, !866, !867}
!863 = !DILocalVariable(name: "jq", arg: 1, scope: !861, file: !373, line: 97, type: !201)
!864 = !DILocalVariable(name: "input", arg: 2, scope: !861, file: !373, line: 97, type: !112)
!865 = !DILocalVariable(name: "a", arg: 3, scope: !861, file: !373, line: 97, type: !112)
!866 = !DILocalVariable(name: "b", arg: 4, scope: !861, file: !373, line: 97, type: !112)
!867 = !DILocalVariable(name: "ret", scope: !861, file: !373, line: 97, type: !112)
!868 = !DILocation(line: 0, scope: !861)
!869 = !DILocation(line: 97, column: 1, scope: !861)
!870 = !DILocation(line: 97, column: 1, scope: !871)
!871 = distinct !DILexicalBlock(scope: !861, file: !373, line: 97, column: 1)
!872 = !DILocation(line: 97, column: 1, scope: !873)
!873 = distinct !DILexicalBlock(scope: !871, file: !373, line: 97, column: 1)
!874 = !DILocation(line: 0, scope: !385, inlinedAt: !875)
!875 = distinct !DILocation(line: 97, column: 1, scope: !873)
!876 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !875)
!877 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !875)
!878 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !875)
!879 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !875)
!880 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !875)
!881 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !875)
!882 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !875)
!883 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !875)
!884 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !875)
!885 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !875)
!886 = !DILocation(line: 97, column: 1, scope: !887)
!887 = distinct !DILexicalBlock(scope: !861, file: !373, line: 97, column: 1)
!888 = !DILocation(line: 97, column: 1, scope: !889)
!889 = distinct !DILexicalBlock(scope: !887, file: !373, line: 97, column: 1)
!890 = !DILocation(line: 0, scope: !385, inlinedAt: !891)
!891 = distinct !DILocation(line: 97, column: 1, scope: !889)
!892 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !891)
!893 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !891)
!894 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !891)
!895 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !891)
!896 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !891)
!897 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !891)
!898 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !891)
!899 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !891)
!900 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !891)
!901 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !891)
!902 = distinct !DISubprogram(name: "f_remainder", scope: !373, file: !373, line: 102, type: !502, scopeLine: 102, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !903)
!903 = !{!904, !905, !906, !907, !908}
!904 = !DILocalVariable(name: "jq", arg: 1, scope: !902, file: !373, line: 102, type: !201)
!905 = !DILocalVariable(name: "input", arg: 2, scope: !902, file: !373, line: 102, type: !112)
!906 = !DILocalVariable(name: "a", arg: 3, scope: !902, file: !373, line: 102, type: !112)
!907 = !DILocalVariable(name: "b", arg: 4, scope: !902, file: !373, line: 102, type: !112)
!908 = !DILocalVariable(name: "ret", scope: !902, file: !373, line: 102, type: !112)
!909 = !DILocation(line: 0, scope: !902)
!910 = !DILocation(line: 102, column: 1, scope: !902)
!911 = !DILocation(line: 102, column: 1, scope: !912)
!912 = distinct !DILexicalBlock(scope: !902, file: !373, line: 102, column: 1)
!913 = !DILocation(line: 102, column: 1, scope: !914)
!914 = distinct !DILexicalBlock(scope: !912, file: !373, line: 102, column: 1)
!915 = !DILocation(line: 0, scope: !385, inlinedAt: !916)
!916 = distinct !DILocation(line: 102, column: 1, scope: !914)
!917 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !916)
!918 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !916)
!919 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !916)
!920 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !916)
!921 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !916)
!922 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !916)
!923 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !916)
!924 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !916)
!925 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !916)
!926 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !916)
!927 = !DILocation(line: 102, column: 1, scope: !928)
!928 = distinct !DILexicalBlock(scope: !902, file: !373, line: 102, column: 1)
!929 = !DILocation(line: 102, column: 1, scope: !930)
!930 = distinct !DILexicalBlock(scope: !928, file: !373, line: 102, column: 1)
!931 = !DILocation(line: 0, scope: !385, inlinedAt: !932)
!932 = distinct !DILocation(line: 102, column: 1, scope: !930)
!933 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !932)
!934 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !932)
!935 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !932)
!936 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !932)
!937 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !932)
!938 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !932)
!939 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !932)
!940 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !932)
!941 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !932)
!942 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !932)
!943 = distinct !DISubprogram(name: "f_sin", scope: !373, file: !373, line: 107, type: !374, scopeLine: 107, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !944)
!944 = !{!945, !946, !947}
!945 = !DILocalVariable(name: "jq", arg: 1, scope: !943, file: !373, line: 107, type: !201)
!946 = !DILocalVariable(name: "input", arg: 2, scope: !943, file: !373, line: 107, type: !112)
!947 = !DILocalVariable(name: "ret", scope: !943, file: !373, line: 107, type: !112)
!948 = !DILocation(line: 0, scope: !943)
!949 = !DILocation(line: 107, column: 1, scope: !950)
!950 = distinct !DILexicalBlock(scope: !943, file: !373, line: 107, column: 1)
!951 = !DILocation(line: 107, column: 1, scope: !943)
!952 = !DILocation(line: 0, scope: !385, inlinedAt: !953)
!953 = distinct !DILocation(line: 107, column: 1, scope: !954)
!954 = distinct !DILexicalBlock(scope: !950, file: !373, line: 107, column: 1)
!955 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !953)
!956 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !953)
!957 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !953)
!958 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !953)
!959 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !953)
!960 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !953)
!961 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !953)
!962 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !953)
!963 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !953)
!964 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !953)
!965 = !DILocation(line: 107, column: 1, scope: !954)
!966 = distinct !DISubprogram(name: "f_sinh", scope: !373, file: !373, line: 112, type: !374, scopeLine: 112, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !967)
!967 = !{!968, !969, !970}
!968 = !DILocalVariable(name: "jq", arg: 1, scope: !966, file: !373, line: 112, type: !201)
!969 = !DILocalVariable(name: "input", arg: 2, scope: !966, file: !373, line: 112, type: !112)
!970 = !DILocalVariable(name: "ret", scope: !966, file: !373, line: 112, type: !112)
!971 = !DILocation(line: 0, scope: !966)
!972 = !DILocation(line: 112, column: 1, scope: !973)
!973 = distinct !DILexicalBlock(scope: !966, file: !373, line: 112, column: 1)
!974 = !DILocation(line: 112, column: 1, scope: !966)
!975 = !DILocation(line: 0, scope: !385, inlinedAt: !976)
!976 = distinct !DILocation(line: 112, column: 1, scope: !977)
!977 = distinct !DILexicalBlock(scope: !973, file: !373, line: 112, column: 1)
!978 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !976)
!979 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !976)
!980 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !976)
!981 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !976)
!982 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !976)
!983 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !976)
!984 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !976)
!985 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !976)
!986 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !976)
!987 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !976)
!988 = !DILocation(line: 112, column: 1, scope: !977)
!989 = distinct !DISubprogram(name: "f_sqrt", scope: !373, file: !373, line: 117, type: !374, scopeLine: 117, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !990)
!990 = !{!991, !992, !993}
!991 = !DILocalVariable(name: "jq", arg: 1, scope: !989, file: !373, line: 117, type: !201)
!992 = !DILocalVariable(name: "input", arg: 2, scope: !989, file: !373, line: 117, type: !112)
!993 = !DILocalVariable(name: "ret", scope: !989, file: !373, line: 117, type: !112)
!994 = !DILocation(line: 0, scope: !989)
!995 = !DILocation(line: 117, column: 1, scope: !996)
!996 = distinct !DILexicalBlock(scope: !989, file: !373, line: 117, column: 1)
!997 = !DILocation(line: 117, column: 1, scope: !989)
!998 = !DILocation(line: 0, scope: !385, inlinedAt: !999)
!999 = distinct !DILocation(line: 117, column: 1, scope: !1000)
!1000 = distinct !DILexicalBlock(scope: !996, file: !373, line: 117, column: 1)
!1001 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !999)
!1002 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !999)
!1003 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !999)
!1004 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !999)
!1005 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !999)
!1006 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !999)
!1007 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !999)
!1008 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !999)
!1009 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !999)
!1010 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !999)
!1011 = !DILocation(line: 117, column: 1, scope: !1000)
!1012 = distinct !DISubprogram(name: "f_tan", scope: !373, file: !373, line: 122, type: !374, scopeLine: 122, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1013)
!1013 = !{!1014, !1015, !1016}
!1014 = !DILocalVariable(name: "jq", arg: 1, scope: !1012, file: !373, line: 122, type: !201)
!1015 = !DILocalVariable(name: "input", arg: 2, scope: !1012, file: !373, line: 122, type: !112)
!1016 = !DILocalVariable(name: "ret", scope: !1012, file: !373, line: 122, type: !112)
!1017 = !DILocation(line: 0, scope: !1012)
!1018 = !DILocation(line: 122, column: 1, scope: !1019)
!1019 = distinct !DILexicalBlock(scope: !1012, file: !373, line: 122, column: 1)
!1020 = !DILocation(line: 122, column: 1, scope: !1012)
!1021 = !DILocation(line: 0, scope: !385, inlinedAt: !1022)
!1022 = distinct !DILocation(line: 122, column: 1, scope: !1023)
!1023 = distinct !DILexicalBlock(scope: !1019, file: !373, line: 122, column: 1)
!1024 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1022)
!1025 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1022)
!1026 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1022)
!1027 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1022)
!1028 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1022)
!1029 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1022)
!1030 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1022)
!1031 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1022)
!1032 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1022)
!1033 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1022)
!1034 = !DILocation(line: 122, column: 1, scope: !1023)
!1035 = distinct !DISubprogram(name: "f_tanh", scope: !373, file: !373, line: 127, type: !374, scopeLine: 127, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1036)
!1036 = !{!1037, !1038, !1039}
!1037 = !DILocalVariable(name: "jq", arg: 1, scope: !1035, file: !373, line: 127, type: !201)
!1038 = !DILocalVariable(name: "input", arg: 2, scope: !1035, file: !373, line: 127, type: !112)
!1039 = !DILocalVariable(name: "ret", scope: !1035, file: !373, line: 127, type: !112)
!1040 = !DILocation(line: 0, scope: !1035)
!1041 = !DILocation(line: 127, column: 1, scope: !1042)
!1042 = distinct !DILexicalBlock(scope: !1035, file: !373, line: 127, column: 1)
!1043 = !DILocation(line: 127, column: 1, scope: !1035)
!1044 = !DILocation(line: 0, scope: !385, inlinedAt: !1045)
!1045 = distinct !DILocation(line: 127, column: 1, scope: !1046)
!1046 = distinct !DILexicalBlock(scope: !1042, file: !373, line: 127, column: 1)
!1047 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1045)
!1048 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1045)
!1049 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1045)
!1050 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1045)
!1051 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1045)
!1052 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1045)
!1053 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1045)
!1054 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1045)
!1055 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1045)
!1056 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1045)
!1057 = !DILocation(line: 127, column: 1, scope: !1046)
!1058 = distinct !DISubprogram(name: "f_tgamma", scope: !373, file: !373, line: 132, type: !374, scopeLine: 132, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1059)
!1059 = !{!1060, !1061, !1062}
!1060 = !DILocalVariable(name: "jq", arg: 1, scope: !1058, file: !373, line: 132, type: !201)
!1061 = !DILocalVariable(name: "input", arg: 2, scope: !1058, file: !373, line: 132, type: !112)
!1062 = !DILocalVariable(name: "ret", scope: !1058, file: !373, line: 132, type: !112)
!1063 = !DILocation(line: 0, scope: !1058)
!1064 = !DILocation(line: 132, column: 1, scope: !1065)
!1065 = distinct !DILexicalBlock(scope: !1058, file: !373, line: 132, column: 1)
!1066 = !DILocation(line: 132, column: 1, scope: !1058)
!1067 = !DILocation(line: 0, scope: !385, inlinedAt: !1068)
!1068 = distinct !DILocation(line: 132, column: 1, scope: !1069)
!1069 = distinct !DILexicalBlock(scope: !1065, file: !373, line: 132, column: 1)
!1070 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1068)
!1071 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1068)
!1072 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1068)
!1073 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1068)
!1074 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1068)
!1075 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1068)
!1076 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1068)
!1077 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1068)
!1078 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1068)
!1079 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1068)
!1080 = !DILocation(line: 132, column: 1, scope: !1069)
!1081 = distinct !DISubprogram(name: "f_y0", scope: !373, file: !373, line: 137, type: !374, scopeLine: 137, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1082)
!1082 = !{!1083, !1084, !1085}
!1083 = !DILocalVariable(name: "jq", arg: 1, scope: !1081, file: !373, line: 137, type: !201)
!1084 = !DILocalVariable(name: "input", arg: 2, scope: !1081, file: !373, line: 137, type: !112)
!1085 = !DILocalVariable(name: "ret", scope: !1081, file: !373, line: 137, type: !112)
!1086 = !DILocation(line: 0, scope: !1081)
!1087 = !DILocation(line: 137, column: 1, scope: !1088)
!1088 = distinct !DILexicalBlock(scope: !1081, file: !373, line: 137, column: 1)
!1089 = !DILocation(line: 137, column: 1, scope: !1081)
!1090 = !DILocation(line: 0, scope: !385, inlinedAt: !1091)
!1091 = distinct !DILocation(line: 137, column: 1, scope: !1092)
!1092 = distinct !DILexicalBlock(scope: !1088, file: !373, line: 137, column: 1)
!1093 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1091)
!1094 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1091)
!1095 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1091)
!1096 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1091)
!1097 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1091)
!1098 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1091)
!1099 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1091)
!1100 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1091)
!1101 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1091)
!1102 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1091)
!1103 = !DILocation(line: 137, column: 1, scope: !1092)
!1104 = distinct !DISubprogram(name: "f_y1", scope: !373, file: !373, line: 142, type: !374, scopeLine: 142, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1105)
!1105 = !{!1106, !1107, !1108}
!1106 = !DILocalVariable(name: "jq", arg: 1, scope: !1104, file: !373, line: 142, type: !201)
!1107 = !DILocalVariable(name: "input", arg: 2, scope: !1104, file: !373, line: 142, type: !112)
!1108 = !DILocalVariable(name: "ret", scope: !1104, file: !373, line: 142, type: !112)
!1109 = !DILocation(line: 0, scope: !1104)
!1110 = !DILocation(line: 142, column: 1, scope: !1111)
!1111 = distinct !DILexicalBlock(scope: !1104, file: !373, line: 142, column: 1)
!1112 = !DILocation(line: 142, column: 1, scope: !1104)
!1113 = !DILocation(line: 0, scope: !385, inlinedAt: !1114)
!1114 = distinct !DILocation(line: 142, column: 1, scope: !1115)
!1115 = distinct !DILexicalBlock(scope: !1111, file: !373, line: 142, column: 1)
!1116 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1114)
!1117 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1114)
!1118 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1114)
!1119 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1114)
!1120 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1114)
!1121 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1114)
!1122 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1114)
!1123 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1114)
!1124 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1114)
!1125 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1114)
!1126 = !DILocation(line: 142, column: 1, scope: !1115)
!1127 = distinct !DISubprogram(name: "f_jn", scope: !373, file: !373, line: 147, type: !502, scopeLine: 147, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1128)
!1128 = !{!1129, !1130, !1131, !1132, !1133}
!1129 = !DILocalVariable(name: "jq", arg: 1, scope: !1127, file: !373, line: 147, type: !201)
!1130 = !DILocalVariable(name: "input", arg: 2, scope: !1127, file: !373, line: 147, type: !112)
!1131 = !DILocalVariable(name: "a", arg: 3, scope: !1127, file: !373, line: 147, type: !112)
!1132 = !DILocalVariable(name: "b", arg: 4, scope: !1127, file: !373, line: 147, type: !112)
!1133 = !DILocalVariable(name: "ret", scope: !1127, file: !373, line: 147, type: !112)
!1134 = !DILocation(line: 0, scope: !1127)
!1135 = !DILocation(line: 147, column: 1, scope: !1127)
!1136 = !DILocation(line: 147, column: 1, scope: !1137)
!1137 = distinct !DILexicalBlock(scope: !1127, file: !373, line: 147, column: 1)
!1138 = !DILocation(line: 147, column: 1, scope: !1139)
!1139 = distinct !DILexicalBlock(scope: !1137, file: !373, line: 147, column: 1)
!1140 = !DILocation(line: 0, scope: !385, inlinedAt: !1141)
!1141 = distinct !DILocation(line: 147, column: 1, scope: !1139)
!1142 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1141)
!1143 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1141)
!1144 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1141)
!1145 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1141)
!1146 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1141)
!1147 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1141)
!1148 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1141)
!1149 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1141)
!1150 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1141)
!1151 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1141)
!1152 = !DILocation(line: 147, column: 1, scope: !1153)
!1153 = distinct !DILexicalBlock(scope: !1127, file: !373, line: 147, column: 1)
!1154 = !DILocation(line: 147, column: 1, scope: !1155)
!1155 = distinct !DILexicalBlock(scope: !1153, file: !373, line: 147, column: 1)
!1156 = !DILocation(line: 0, scope: !385, inlinedAt: !1157)
!1157 = distinct !DILocation(line: 147, column: 1, scope: !1155)
!1158 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1157)
!1159 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1157)
!1160 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1157)
!1161 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1157)
!1162 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1157)
!1163 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1157)
!1164 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1157)
!1165 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1157)
!1166 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1157)
!1167 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1157)
!1168 = distinct !DISubprogram(name: "f_yn", scope: !373, file: !373, line: 150, type: !502, scopeLine: 150, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1169)
!1169 = !{!1170, !1171, !1172, !1173, !1174}
!1170 = !DILocalVariable(name: "jq", arg: 1, scope: !1168, file: !373, line: 150, type: !201)
!1171 = !DILocalVariable(name: "input", arg: 2, scope: !1168, file: !373, line: 150, type: !112)
!1172 = !DILocalVariable(name: "a", arg: 3, scope: !1168, file: !373, line: 150, type: !112)
!1173 = !DILocalVariable(name: "b", arg: 4, scope: !1168, file: !373, line: 150, type: !112)
!1174 = !DILocalVariable(name: "ret", scope: !1168, file: !373, line: 150, type: !112)
!1175 = !DILocation(line: 0, scope: !1168)
!1176 = !DILocation(line: 150, column: 1, scope: !1168)
!1177 = !DILocation(line: 150, column: 1, scope: !1178)
!1178 = distinct !DILexicalBlock(scope: !1168, file: !373, line: 150, column: 1)
!1179 = !DILocation(line: 150, column: 1, scope: !1180)
!1180 = distinct !DILexicalBlock(scope: !1178, file: !373, line: 150, column: 1)
!1181 = !DILocation(line: 0, scope: !385, inlinedAt: !1182)
!1182 = distinct !DILocation(line: 150, column: 1, scope: !1180)
!1183 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1182)
!1184 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1182)
!1185 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1182)
!1186 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1182)
!1187 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1182)
!1188 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1182)
!1189 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1182)
!1190 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1182)
!1191 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1182)
!1192 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1182)
!1193 = !DILocation(line: 150, column: 1, scope: !1194)
!1194 = distinct !DILexicalBlock(scope: !1168, file: !373, line: 150, column: 1)
!1195 = !DILocation(line: 150, column: 1, scope: !1196)
!1196 = distinct !DILexicalBlock(scope: !1194, file: !373, line: 150, column: 1)
!1197 = !DILocation(line: 0, scope: !385, inlinedAt: !1198)
!1198 = distinct !DILocation(line: 150, column: 1, scope: !1196)
!1199 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1198)
!1200 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1198)
!1201 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1198)
!1202 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1198)
!1203 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1198)
!1204 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1198)
!1205 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1198)
!1206 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1198)
!1207 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1198)
!1208 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1198)
!1209 = distinct !DISubprogram(name: "f_ceil", scope: !373, file: !373, line: 153, type: !374, scopeLine: 153, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1210)
!1210 = !{!1211, !1212, !1213}
!1211 = !DILocalVariable(name: "jq", arg: 1, scope: !1209, file: !373, line: 153, type: !201)
!1212 = !DILocalVariable(name: "input", arg: 2, scope: !1209, file: !373, line: 153, type: !112)
!1213 = !DILocalVariable(name: "ret", scope: !1209, file: !373, line: 153, type: !112)
!1214 = !DILocation(line: 0, scope: !1209)
!1215 = !DILocation(line: 153, column: 1, scope: !1216)
!1216 = distinct !DILexicalBlock(scope: !1209, file: !373, line: 153, column: 1)
!1217 = !DILocation(line: 153, column: 1, scope: !1209)
!1218 = !DILocation(line: 0, scope: !385, inlinedAt: !1219)
!1219 = distinct !DILocation(line: 153, column: 1, scope: !1220)
!1220 = distinct !DILexicalBlock(scope: !1216, file: !373, line: 153, column: 1)
!1221 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1219)
!1222 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1219)
!1223 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1219)
!1224 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1219)
!1225 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1219)
!1226 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1219)
!1227 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1219)
!1228 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1219)
!1229 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1219)
!1230 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1219)
!1231 = !DILocation(line: 153, column: 1, scope: !1220)
!1232 = distinct !DISubprogram(name: "f_copysign", scope: !373, file: !373, line: 158, type: !502, scopeLine: 158, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1233)
!1233 = !{!1234, !1235, !1236, !1237, !1238}
!1234 = !DILocalVariable(name: "jq", arg: 1, scope: !1232, file: !373, line: 158, type: !201)
!1235 = !DILocalVariable(name: "input", arg: 2, scope: !1232, file: !373, line: 158, type: !112)
!1236 = !DILocalVariable(name: "a", arg: 3, scope: !1232, file: !373, line: 158, type: !112)
!1237 = !DILocalVariable(name: "b", arg: 4, scope: !1232, file: !373, line: 158, type: !112)
!1238 = !DILocalVariable(name: "ret", scope: !1232, file: !373, line: 158, type: !112)
!1239 = !DILocation(line: 0, scope: !1232)
!1240 = !DILocation(line: 158, column: 1, scope: !1232)
!1241 = !DILocation(line: 158, column: 1, scope: !1242)
!1242 = distinct !DILexicalBlock(scope: !1232, file: !373, line: 158, column: 1)
!1243 = !DILocation(line: 158, column: 1, scope: !1244)
!1244 = distinct !DILexicalBlock(scope: !1242, file: !373, line: 158, column: 1)
!1245 = !DILocation(line: 0, scope: !385, inlinedAt: !1246)
!1246 = distinct !DILocation(line: 158, column: 1, scope: !1244)
!1247 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1246)
!1248 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1246)
!1249 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1246)
!1250 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1246)
!1251 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1246)
!1252 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1246)
!1253 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1246)
!1254 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1246)
!1255 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1246)
!1256 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1246)
!1257 = !DILocation(line: 158, column: 1, scope: !1258)
!1258 = distinct !DILexicalBlock(scope: !1232, file: !373, line: 158, column: 1)
!1259 = !DILocation(line: 158, column: 1, scope: !1260)
!1260 = distinct !DILexicalBlock(scope: !1258, file: !373, line: 158, column: 1)
!1261 = !DILocation(line: 0, scope: !385, inlinedAt: !1262)
!1262 = distinct !DILocation(line: 158, column: 1, scope: !1260)
!1263 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1262)
!1264 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1262)
!1265 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1262)
!1266 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1262)
!1267 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1262)
!1268 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1262)
!1269 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1262)
!1270 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1262)
!1271 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1262)
!1272 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1262)
!1273 = distinct !DISubprogram(name: "f_drem", scope: !373, file: !373, line: 163, type: !502, scopeLine: 163, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1274)
!1274 = !{!1275, !1276, !1277, !1278, !1279}
!1275 = !DILocalVariable(name: "jq", arg: 1, scope: !1273, file: !373, line: 163, type: !201)
!1276 = !DILocalVariable(name: "input", arg: 2, scope: !1273, file: !373, line: 163, type: !112)
!1277 = !DILocalVariable(name: "a", arg: 3, scope: !1273, file: !373, line: 163, type: !112)
!1278 = !DILocalVariable(name: "b", arg: 4, scope: !1273, file: !373, line: 163, type: !112)
!1279 = !DILocalVariable(name: "ret", scope: !1273, file: !373, line: 163, type: !112)
!1280 = !DILocation(line: 0, scope: !1273)
!1281 = !DILocation(line: 163, column: 1, scope: !1273)
!1282 = !DILocation(line: 163, column: 1, scope: !1283)
!1283 = distinct !DILexicalBlock(scope: !1273, file: !373, line: 163, column: 1)
!1284 = !DILocation(line: 163, column: 1, scope: !1285)
!1285 = distinct !DILexicalBlock(scope: !1283, file: !373, line: 163, column: 1)
!1286 = !DILocation(line: 0, scope: !385, inlinedAt: !1287)
!1287 = distinct !DILocation(line: 163, column: 1, scope: !1285)
!1288 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1287)
!1289 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1287)
!1290 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1287)
!1291 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1287)
!1292 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1287)
!1293 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1287)
!1294 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1287)
!1295 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1287)
!1296 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1287)
!1297 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1287)
!1298 = !DILocation(line: 163, column: 1, scope: !1299)
!1299 = distinct !DILexicalBlock(scope: !1273, file: !373, line: 163, column: 1)
!1300 = !DILocation(line: 163, column: 1, scope: !1301)
!1301 = distinct !DILexicalBlock(scope: !1299, file: !373, line: 163, column: 1)
!1302 = !DILocation(line: 0, scope: !385, inlinedAt: !1303)
!1303 = distinct !DILocation(line: 163, column: 1, scope: !1301)
!1304 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1303)
!1305 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1303)
!1306 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1303)
!1307 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1303)
!1308 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1303)
!1309 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1303)
!1310 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1303)
!1311 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1303)
!1312 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1303)
!1313 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1303)
!1314 = distinct !DISubprogram(name: "f_erf", scope: !373, file: !373, line: 168, type: !374, scopeLine: 168, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1315)
!1315 = !{!1316, !1317, !1318}
!1316 = !DILocalVariable(name: "jq", arg: 1, scope: !1314, file: !373, line: 168, type: !201)
!1317 = !DILocalVariable(name: "input", arg: 2, scope: !1314, file: !373, line: 168, type: !112)
!1318 = !DILocalVariable(name: "ret", scope: !1314, file: !373, line: 168, type: !112)
!1319 = !DILocation(line: 0, scope: !1314)
!1320 = !DILocation(line: 168, column: 1, scope: !1321)
!1321 = distinct !DILexicalBlock(scope: !1314, file: !373, line: 168, column: 1)
!1322 = !DILocation(line: 168, column: 1, scope: !1314)
!1323 = !DILocation(line: 0, scope: !385, inlinedAt: !1324)
!1324 = distinct !DILocation(line: 168, column: 1, scope: !1325)
!1325 = distinct !DILexicalBlock(scope: !1321, file: !373, line: 168, column: 1)
!1326 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1324)
!1327 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1324)
!1328 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1324)
!1329 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1324)
!1330 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1324)
!1331 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1324)
!1332 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1324)
!1333 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1324)
!1334 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1324)
!1335 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1324)
!1336 = !DILocation(line: 168, column: 1, scope: !1325)
!1337 = distinct !DISubprogram(name: "f_erfc", scope: !373, file: !373, line: 173, type: !374, scopeLine: 173, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1338)
!1338 = !{!1339, !1340, !1341}
!1339 = !DILocalVariable(name: "jq", arg: 1, scope: !1337, file: !373, line: 173, type: !201)
!1340 = !DILocalVariable(name: "input", arg: 2, scope: !1337, file: !373, line: 173, type: !112)
!1341 = !DILocalVariable(name: "ret", scope: !1337, file: !373, line: 173, type: !112)
!1342 = !DILocation(line: 0, scope: !1337)
!1343 = !DILocation(line: 173, column: 1, scope: !1344)
!1344 = distinct !DILexicalBlock(scope: !1337, file: !373, line: 173, column: 1)
!1345 = !DILocation(line: 173, column: 1, scope: !1337)
!1346 = !DILocation(line: 0, scope: !385, inlinedAt: !1347)
!1347 = distinct !DILocation(line: 173, column: 1, scope: !1348)
!1348 = distinct !DILexicalBlock(scope: !1344, file: !373, line: 173, column: 1)
!1349 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1347)
!1350 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1347)
!1351 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1347)
!1352 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1347)
!1353 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1347)
!1354 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1347)
!1355 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1347)
!1356 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1347)
!1357 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1347)
!1358 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1347)
!1359 = !DILocation(line: 173, column: 1, scope: !1348)
!1360 = distinct !DISubprogram(name: "f_exp10", scope: !373, file: !373, line: 178, type: !374, scopeLine: 178, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1361)
!1361 = !{!1362, !1363, !1364}
!1362 = !DILocalVariable(name: "jq", arg: 1, scope: !1360, file: !373, line: 178, type: !201)
!1363 = !DILocalVariable(name: "input", arg: 2, scope: !1360, file: !373, line: 178, type: !112)
!1364 = !DILocalVariable(name: "ret", scope: !1360, file: !373, line: 178, type: !112)
!1365 = !DILocation(line: 0, scope: !1360)
!1366 = !DILocation(line: 178, column: 1, scope: !1367)
!1367 = distinct !DILexicalBlock(scope: !1360, file: !373, line: 178, column: 1)
!1368 = !DILocation(line: 178, column: 1, scope: !1360)
!1369 = !DILocation(line: 0, scope: !385, inlinedAt: !1370)
!1370 = distinct !DILocation(line: 178, column: 1, scope: !1371)
!1371 = distinct !DILexicalBlock(scope: !1367, file: !373, line: 178, column: 1)
!1372 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1370)
!1373 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1370)
!1374 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1370)
!1375 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1370)
!1376 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1370)
!1377 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1370)
!1378 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1370)
!1379 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1370)
!1380 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1370)
!1381 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1370)
!1382 = !DILocation(line: 178, column: 1, scope: !1371)
!1383 = distinct !DISubprogram(name: "f_expm1", scope: !373, file: !373, line: 183, type: !374, scopeLine: 183, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1384)
!1384 = !{!1385, !1386, !1387}
!1385 = !DILocalVariable(name: "jq", arg: 1, scope: !1383, file: !373, line: 183, type: !201)
!1386 = !DILocalVariable(name: "input", arg: 2, scope: !1383, file: !373, line: 183, type: !112)
!1387 = !DILocalVariable(name: "ret", scope: !1383, file: !373, line: 183, type: !112)
!1388 = !DILocation(line: 0, scope: !1383)
!1389 = !DILocation(line: 183, column: 1, scope: !1390)
!1390 = distinct !DILexicalBlock(scope: !1383, file: !373, line: 183, column: 1)
!1391 = !DILocation(line: 183, column: 1, scope: !1383)
!1392 = !DILocation(line: 0, scope: !385, inlinedAt: !1393)
!1393 = distinct !DILocation(line: 183, column: 1, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1390, file: !373, line: 183, column: 1)
!1395 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1393)
!1396 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1393)
!1397 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1393)
!1398 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1393)
!1399 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1393)
!1400 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1393)
!1401 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1393)
!1402 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1393)
!1403 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1393)
!1404 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1393)
!1405 = !DILocation(line: 183, column: 1, scope: !1394)
!1406 = distinct !DISubprogram(name: "f_fabs", scope: !373, file: !373, line: 188, type: !374, scopeLine: 188, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1407)
!1407 = !{!1408, !1409, !1410}
!1408 = !DILocalVariable(name: "jq", arg: 1, scope: !1406, file: !373, line: 188, type: !201)
!1409 = !DILocalVariable(name: "input", arg: 2, scope: !1406, file: !373, line: 188, type: !112)
!1410 = !DILocalVariable(name: "ret", scope: !1406, file: !373, line: 188, type: !112)
!1411 = !DILocation(line: 0, scope: !1406)
!1412 = !DILocation(line: 188, column: 1, scope: !1413)
!1413 = distinct !DILexicalBlock(scope: !1406, file: !373, line: 188, column: 1)
!1414 = !DILocation(line: 188, column: 1, scope: !1406)
!1415 = !DILocation(line: 0, scope: !385, inlinedAt: !1416)
!1416 = distinct !DILocation(line: 188, column: 1, scope: !1417)
!1417 = distinct !DILexicalBlock(scope: !1413, file: !373, line: 188, column: 1)
!1418 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1416)
!1419 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1416)
!1420 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1416)
!1421 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1416)
!1422 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1416)
!1423 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1416)
!1424 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1416)
!1425 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1416)
!1426 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1416)
!1427 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1416)
!1428 = !DILocation(line: 188, column: 1, scope: !1417)
!1429 = distinct !DISubprogram(name: "f_fdim", scope: !373, file: !373, line: 193, type: !502, scopeLine: 193, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1430)
!1430 = !{!1431, !1432, !1433, !1434, !1435}
!1431 = !DILocalVariable(name: "jq", arg: 1, scope: !1429, file: !373, line: 193, type: !201)
!1432 = !DILocalVariable(name: "input", arg: 2, scope: !1429, file: !373, line: 193, type: !112)
!1433 = !DILocalVariable(name: "a", arg: 3, scope: !1429, file: !373, line: 193, type: !112)
!1434 = !DILocalVariable(name: "b", arg: 4, scope: !1429, file: !373, line: 193, type: !112)
!1435 = !DILocalVariable(name: "ret", scope: !1429, file: !373, line: 193, type: !112)
!1436 = !DILocation(line: 0, scope: !1429)
!1437 = !DILocation(line: 193, column: 1, scope: !1429)
!1438 = !DILocation(line: 193, column: 1, scope: !1439)
!1439 = distinct !DILexicalBlock(scope: !1429, file: !373, line: 193, column: 1)
!1440 = !DILocation(line: 193, column: 1, scope: !1441)
!1441 = distinct !DILexicalBlock(scope: !1439, file: !373, line: 193, column: 1)
!1442 = !DILocation(line: 0, scope: !385, inlinedAt: !1443)
!1443 = distinct !DILocation(line: 193, column: 1, scope: !1441)
!1444 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1443)
!1445 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1443)
!1446 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1443)
!1447 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1443)
!1448 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1443)
!1449 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1443)
!1450 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1443)
!1451 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1443)
!1452 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1443)
!1453 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1443)
!1454 = !DILocation(line: 193, column: 1, scope: !1455)
!1455 = distinct !DILexicalBlock(scope: !1429, file: !373, line: 193, column: 1)
!1456 = !DILocation(line: 193, column: 1, scope: !1457)
!1457 = distinct !DILexicalBlock(scope: !1455, file: !373, line: 193, column: 1)
!1458 = !DILocation(line: 0, scope: !385, inlinedAt: !1459)
!1459 = distinct !DILocation(line: 193, column: 1, scope: !1457)
!1460 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1459)
!1461 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1459)
!1462 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1459)
!1463 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1459)
!1464 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1459)
!1465 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1459)
!1466 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1459)
!1467 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1459)
!1468 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1459)
!1469 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1459)
!1470 = distinct !DISubprogram(name: "f_fma", scope: !373, file: !373, line: 198, type: !1471, scopeLine: 198, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1473)
!1471 = !DISubroutineType(types: !1472)
!1472 = !{!112, !201, !112, !112, !112, !112}
!1473 = !{!1474, !1475, !1476, !1477, !1478, !1479}
!1474 = !DILocalVariable(name: "jq", arg: 1, scope: !1470, file: !373, line: 198, type: !201)
!1475 = !DILocalVariable(name: "input", arg: 2, scope: !1470, file: !373, line: 198, type: !112)
!1476 = !DILocalVariable(name: "a", arg: 3, scope: !1470, file: !373, line: 198, type: !112)
!1477 = !DILocalVariable(name: "b", arg: 4, scope: !1470, file: !373, line: 198, type: !112)
!1478 = !DILocalVariable(name: "c", arg: 5, scope: !1470, file: !373, line: 198, type: !112)
!1479 = !DILocalVariable(name: "ret", scope: !1470, file: !373, line: 198, type: !112)
!1480 = !DILocation(line: 0, scope: !1470)
!1481 = !DILocation(line: 198, column: 1, scope: !1470)
!1482 = !DILocation(line: 198, column: 1, scope: !1483)
!1483 = distinct !DILexicalBlock(scope: !1470, file: !373, line: 198, column: 1)
!1484 = !DILocation(line: 198, column: 1, scope: !1485)
!1485 = distinct !DILexicalBlock(scope: !1483, file: !373, line: 198, column: 1)
!1486 = !DILocation(line: 0, scope: !385, inlinedAt: !1487)
!1487 = distinct !DILocation(line: 198, column: 1, scope: !1485)
!1488 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1487)
!1489 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1487)
!1490 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1487)
!1491 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1487)
!1492 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1487)
!1493 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1487)
!1494 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1487)
!1495 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1487)
!1496 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1487)
!1497 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1487)
!1498 = !DILocation(line: 198, column: 1, scope: !1499)
!1499 = distinct !DILexicalBlock(scope: !1470, file: !373, line: 198, column: 1)
!1500 = !DILocation(line: 198, column: 1, scope: !1501)
!1501 = distinct !DILexicalBlock(scope: !1499, file: !373, line: 198, column: 1)
!1502 = !DILocation(line: 0, scope: !385, inlinedAt: !1503)
!1503 = distinct !DILocation(line: 198, column: 1, scope: !1501)
!1504 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1503)
!1505 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1503)
!1506 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1503)
!1507 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1503)
!1508 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1503)
!1509 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1503)
!1510 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1503)
!1511 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1503)
!1512 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1503)
!1513 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1503)
!1514 = !DILocation(line: 198, column: 1, scope: !1515)
!1515 = distinct !DILexicalBlock(scope: !1470, file: !373, line: 198, column: 1)
!1516 = !DILocation(line: 198, column: 1, scope: !1517)
!1517 = distinct !DILexicalBlock(scope: !1515, file: !373, line: 198, column: 1)
!1518 = !DILocation(line: 0, scope: !385, inlinedAt: !1519)
!1519 = distinct !DILocation(line: 198, column: 1, scope: !1517)
!1520 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1519)
!1521 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1519)
!1522 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1519)
!1523 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1519)
!1524 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1519)
!1525 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1519)
!1526 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1519)
!1527 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1519)
!1528 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1519)
!1529 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1519)
!1530 = distinct !DISubprogram(name: "f_fmax", scope: !373, file: !373, line: 203, type: !502, scopeLine: 203, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1531)
!1531 = !{!1532, !1533, !1534, !1535, !1536}
!1532 = !DILocalVariable(name: "jq", arg: 1, scope: !1530, file: !373, line: 203, type: !201)
!1533 = !DILocalVariable(name: "input", arg: 2, scope: !1530, file: !373, line: 203, type: !112)
!1534 = !DILocalVariable(name: "a", arg: 3, scope: !1530, file: !373, line: 203, type: !112)
!1535 = !DILocalVariable(name: "b", arg: 4, scope: !1530, file: !373, line: 203, type: !112)
!1536 = !DILocalVariable(name: "ret", scope: !1530, file: !373, line: 203, type: !112)
!1537 = !DILocation(line: 0, scope: !1530)
!1538 = !DILocation(line: 203, column: 1, scope: !1530)
!1539 = !DILocation(line: 203, column: 1, scope: !1540)
!1540 = distinct !DILexicalBlock(scope: !1530, file: !373, line: 203, column: 1)
!1541 = !DILocation(line: 203, column: 1, scope: !1542)
!1542 = distinct !DILexicalBlock(scope: !1540, file: !373, line: 203, column: 1)
!1543 = !DILocation(line: 0, scope: !385, inlinedAt: !1544)
!1544 = distinct !DILocation(line: 203, column: 1, scope: !1542)
!1545 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1544)
!1546 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1544)
!1547 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1544)
!1548 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1544)
!1549 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1544)
!1550 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1544)
!1551 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1544)
!1552 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1544)
!1553 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1544)
!1554 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1544)
!1555 = !DILocation(line: 203, column: 1, scope: !1556)
!1556 = distinct !DILexicalBlock(scope: !1530, file: !373, line: 203, column: 1)
!1557 = !DILocation(line: 203, column: 1, scope: !1558)
!1558 = distinct !DILexicalBlock(scope: !1556, file: !373, line: 203, column: 1)
!1559 = !DILocation(line: 0, scope: !385, inlinedAt: !1560)
!1560 = distinct !DILocation(line: 203, column: 1, scope: !1558)
!1561 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1560)
!1562 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1560)
!1563 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1560)
!1564 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1560)
!1565 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1560)
!1566 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1560)
!1567 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1560)
!1568 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1560)
!1569 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1560)
!1570 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1560)
!1571 = distinct !DISubprogram(name: "f_fmin", scope: !373, file: !373, line: 208, type: !502, scopeLine: 208, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1572)
!1572 = !{!1573, !1574, !1575, !1576, !1577}
!1573 = !DILocalVariable(name: "jq", arg: 1, scope: !1571, file: !373, line: 208, type: !201)
!1574 = !DILocalVariable(name: "input", arg: 2, scope: !1571, file: !373, line: 208, type: !112)
!1575 = !DILocalVariable(name: "a", arg: 3, scope: !1571, file: !373, line: 208, type: !112)
!1576 = !DILocalVariable(name: "b", arg: 4, scope: !1571, file: !373, line: 208, type: !112)
!1577 = !DILocalVariable(name: "ret", scope: !1571, file: !373, line: 208, type: !112)
!1578 = !DILocation(line: 0, scope: !1571)
!1579 = !DILocation(line: 208, column: 1, scope: !1571)
!1580 = !DILocation(line: 208, column: 1, scope: !1581)
!1581 = distinct !DILexicalBlock(scope: !1571, file: !373, line: 208, column: 1)
!1582 = !DILocation(line: 208, column: 1, scope: !1583)
!1583 = distinct !DILexicalBlock(scope: !1581, file: !373, line: 208, column: 1)
!1584 = !DILocation(line: 0, scope: !385, inlinedAt: !1585)
!1585 = distinct !DILocation(line: 208, column: 1, scope: !1583)
!1586 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1585)
!1587 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1585)
!1588 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1585)
!1589 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1585)
!1590 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1585)
!1591 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1585)
!1592 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1585)
!1593 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1585)
!1594 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1585)
!1595 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1585)
!1596 = !DILocation(line: 208, column: 1, scope: !1597)
!1597 = distinct !DILexicalBlock(scope: !1571, file: !373, line: 208, column: 1)
!1598 = !DILocation(line: 208, column: 1, scope: !1599)
!1599 = distinct !DILexicalBlock(scope: !1597, file: !373, line: 208, column: 1)
!1600 = !DILocation(line: 0, scope: !385, inlinedAt: !1601)
!1601 = distinct !DILocation(line: 208, column: 1, scope: !1599)
!1602 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1601)
!1603 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1601)
!1604 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1601)
!1605 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1601)
!1606 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1601)
!1607 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1601)
!1608 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1601)
!1609 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1601)
!1610 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1601)
!1611 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1601)
!1612 = distinct !DISubprogram(name: "f_fmod", scope: !373, file: !373, line: 213, type: !502, scopeLine: 213, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1613)
!1613 = !{!1614, !1615, !1616, !1617, !1618}
!1614 = !DILocalVariable(name: "jq", arg: 1, scope: !1612, file: !373, line: 213, type: !201)
!1615 = !DILocalVariable(name: "input", arg: 2, scope: !1612, file: !373, line: 213, type: !112)
!1616 = !DILocalVariable(name: "a", arg: 3, scope: !1612, file: !373, line: 213, type: !112)
!1617 = !DILocalVariable(name: "b", arg: 4, scope: !1612, file: !373, line: 213, type: !112)
!1618 = !DILocalVariable(name: "ret", scope: !1612, file: !373, line: 213, type: !112)
!1619 = !DILocation(line: 0, scope: !1612)
!1620 = !DILocation(line: 213, column: 1, scope: !1612)
!1621 = !DILocation(line: 213, column: 1, scope: !1622)
!1622 = distinct !DILexicalBlock(scope: !1612, file: !373, line: 213, column: 1)
!1623 = !DILocation(line: 213, column: 1, scope: !1624)
!1624 = distinct !DILexicalBlock(scope: !1622, file: !373, line: 213, column: 1)
!1625 = !DILocation(line: 0, scope: !385, inlinedAt: !1626)
!1626 = distinct !DILocation(line: 213, column: 1, scope: !1624)
!1627 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1626)
!1628 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1626)
!1629 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1626)
!1630 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1626)
!1631 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1626)
!1632 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1626)
!1633 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1626)
!1634 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1626)
!1635 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1626)
!1636 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1626)
!1637 = !DILocation(line: 213, column: 1, scope: !1638)
!1638 = distinct !DILexicalBlock(scope: !1612, file: !373, line: 213, column: 1)
!1639 = !DILocation(line: 213, column: 1, scope: !1640)
!1640 = distinct !DILexicalBlock(scope: !1638, file: !373, line: 213, column: 1)
!1641 = !DILocation(line: 0, scope: !385, inlinedAt: !1642)
!1642 = distinct !DILocation(line: 213, column: 1, scope: !1640)
!1643 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1642)
!1644 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1642)
!1645 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1642)
!1646 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1642)
!1647 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1642)
!1648 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1642)
!1649 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1642)
!1650 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1642)
!1651 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1642)
!1652 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1642)
!1653 = distinct !DISubprogram(name: "f_gamma", scope: !373, file: !373, line: 218, type: !374, scopeLine: 218, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1654)
!1654 = !{!1655, !1656, !1657}
!1655 = !DILocalVariable(name: "jq", arg: 1, scope: !1653, file: !373, line: 218, type: !201)
!1656 = !DILocalVariable(name: "input", arg: 2, scope: !1653, file: !373, line: 218, type: !112)
!1657 = !DILocalVariable(name: "ret", scope: !1653, file: !373, line: 218, type: !112)
!1658 = !DILocation(line: 0, scope: !1653)
!1659 = !DILocation(line: 218, column: 1, scope: !1660)
!1660 = distinct !DILexicalBlock(scope: !1653, file: !373, line: 218, column: 1)
!1661 = !DILocation(line: 218, column: 1, scope: !1653)
!1662 = !DILocation(line: 0, scope: !385, inlinedAt: !1663)
!1663 = distinct !DILocation(line: 218, column: 1, scope: !1664)
!1664 = distinct !DILexicalBlock(scope: !1660, file: !373, line: 218, column: 1)
!1665 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1663)
!1666 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1663)
!1667 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1663)
!1668 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1663)
!1669 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1663)
!1670 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1663)
!1671 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1663)
!1672 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1663)
!1673 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1663)
!1674 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1663)
!1675 = !DILocation(line: 218, column: 1, scope: !1664)
!1676 = distinct !DISubprogram(name: "f_lgamma", scope: !373, file: !373, line: 223, type: !374, scopeLine: 223, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1677)
!1677 = !{!1678, !1679, !1680}
!1678 = !DILocalVariable(name: "jq", arg: 1, scope: !1676, file: !373, line: 223, type: !201)
!1679 = !DILocalVariable(name: "input", arg: 2, scope: !1676, file: !373, line: 223, type: !112)
!1680 = !DILocalVariable(name: "ret", scope: !1676, file: !373, line: 223, type: !112)
!1681 = !DILocation(line: 0, scope: !1676)
!1682 = !DILocation(line: 223, column: 1, scope: !1683)
!1683 = distinct !DILexicalBlock(scope: !1676, file: !373, line: 223, column: 1)
!1684 = !DILocation(line: 223, column: 1, scope: !1676)
!1685 = !DILocation(line: 0, scope: !385, inlinedAt: !1686)
!1686 = distinct !DILocation(line: 223, column: 1, scope: !1687)
!1687 = distinct !DILexicalBlock(scope: !1683, file: !373, line: 223, column: 1)
!1688 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1686)
!1689 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1686)
!1690 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1686)
!1691 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1686)
!1692 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1686)
!1693 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1686)
!1694 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1686)
!1695 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1686)
!1696 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1686)
!1697 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1686)
!1698 = !DILocation(line: 223, column: 1, scope: !1687)
!1699 = distinct !DISubprogram(name: "f_log1p", scope: !373, file: !373, line: 228, type: !374, scopeLine: 228, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1700)
!1700 = !{!1701, !1702, !1703}
!1701 = !DILocalVariable(name: "jq", arg: 1, scope: !1699, file: !373, line: 228, type: !201)
!1702 = !DILocalVariable(name: "input", arg: 2, scope: !1699, file: !373, line: 228, type: !112)
!1703 = !DILocalVariable(name: "ret", scope: !1699, file: !373, line: 228, type: !112)
!1704 = !DILocation(line: 0, scope: !1699)
!1705 = !DILocation(line: 228, column: 1, scope: !1706)
!1706 = distinct !DILexicalBlock(scope: !1699, file: !373, line: 228, column: 1)
!1707 = !DILocation(line: 228, column: 1, scope: !1699)
!1708 = !DILocation(line: 0, scope: !385, inlinedAt: !1709)
!1709 = distinct !DILocation(line: 228, column: 1, scope: !1710)
!1710 = distinct !DILexicalBlock(scope: !1706, file: !373, line: 228, column: 1)
!1711 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1709)
!1712 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1709)
!1713 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1709)
!1714 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1709)
!1715 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1709)
!1716 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1709)
!1717 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1709)
!1718 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1709)
!1719 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1709)
!1720 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1709)
!1721 = !DILocation(line: 228, column: 1, scope: !1710)
!1722 = distinct !DISubprogram(name: "f_logb", scope: !373, file: !373, line: 233, type: !374, scopeLine: 233, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1723)
!1723 = !{!1724, !1725, !1726}
!1724 = !DILocalVariable(name: "jq", arg: 1, scope: !1722, file: !373, line: 233, type: !201)
!1725 = !DILocalVariable(name: "input", arg: 2, scope: !1722, file: !373, line: 233, type: !112)
!1726 = !DILocalVariable(name: "ret", scope: !1722, file: !373, line: 233, type: !112)
!1727 = !DILocation(line: 0, scope: !1722)
!1728 = !DILocation(line: 233, column: 1, scope: !1729)
!1729 = distinct !DILexicalBlock(scope: !1722, file: !373, line: 233, column: 1)
!1730 = !DILocation(line: 233, column: 1, scope: !1722)
!1731 = !DILocation(line: 0, scope: !385, inlinedAt: !1732)
!1732 = distinct !DILocation(line: 233, column: 1, scope: !1733)
!1733 = distinct !DILexicalBlock(scope: !1729, file: !373, line: 233, column: 1)
!1734 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1732)
!1735 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1732)
!1736 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1732)
!1737 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1732)
!1738 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1732)
!1739 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1732)
!1740 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1732)
!1741 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1732)
!1742 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1732)
!1743 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1732)
!1744 = !DILocation(line: 233, column: 1, scope: !1733)
!1745 = distinct !DISubprogram(name: "f_nearbyint", scope: !373, file: !373, line: 238, type: !374, scopeLine: 238, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1746)
!1746 = !{!1747, !1748, !1749}
!1747 = !DILocalVariable(name: "jq", arg: 1, scope: !1745, file: !373, line: 238, type: !201)
!1748 = !DILocalVariable(name: "input", arg: 2, scope: !1745, file: !373, line: 238, type: !112)
!1749 = !DILocalVariable(name: "ret", scope: !1745, file: !373, line: 238, type: !112)
!1750 = !DILocation(line: 0, scope: !1745)
!1751 = !DILocation(line: 238, column: 1, scope: !1752)
!1752 = distinct !DILexicalBlock(scope: !1745, file: !373, line: 238, column: 1)
!1753 = !DILocation(line: 238, column: 1, scope: !1745)
!1754 = !DILocation(line: 0, scope: !385, inlinedAt: !1755)
!1755 = distinct !DILocation(line: 238, column: 1, scope: !1756)
!1756 = distinct !DILexicalBlock(scope: !1752, file: !373, line: 238, column: 1)
!1757 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1755)
!1758 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1755)
!1759 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1755)
!1760 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1755)
!1761 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1755)
!1762 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1755)
!1763 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1755)
!1764 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1755)
!1765 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1755)
!1766 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1755)
!1767 = !DILocation(line: 238, column: 1, scope: !1756)
!1768 = distinct !DISubprogram(name: "f_nextafter", scope: !373, file: !373, line: 243, type: !502, scopeLine: 243, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1769)
!1769 = !{!1770, !1771, !1772, !1773, !1774}
!1770 = !DILocalVariable(name: "jq", arg: 1, scope: !1768, file: !373, line: 243, type: !201)
!1771 = !DILocalVariable(name: "input", arg: 2, scope: !1768, file: !373, line: 243, type: !112)
!1772 = !DILocalVariable(name: "a", arg: 3, scope: !1768, file: !373, line: 243, type: !112)
!1773 = !DILocalVariable(name: "b", arg: 4, scope: !1768, file: !373, line: 243, type: !112)
!1774 = !DILocalVariable(name: "ret", scope: !1768, file: !373, line: 243, type: !112)
!1775 = !DILocation(line: 0, scope: !1768)
!1776 = !DILocation(line: 243, column: 1, scope: !1768)
!1777 = !DILocation(line: 243, column: 1, scope: !1778)
!1778 = distinct !DILexicalBlock(scope: !1768, file: !373, line: 243, column: 1)
!1779 = !DILocation(line: 243, column: 1, scope: !1780)
!1780 = distinct !DILexicalBlock(scope: !1778, file: !373, line: 243, column: 1)
!1781 = !DILocation(line: 0, scope: !385, inlinedAt: !1782)
!1782 = distinct !DILocation(line: 243, column: 1, scope: !1780)
!1783 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1782)
!1784 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1782)
!1785 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1782)
!1786 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1782)
!1787 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1782)
!1788 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1782)
!1789 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1782)
!1790 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1782)
!1791 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1782)
!1792 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1782)
!1793 = !DILocation(line: 243, column: 1, scope: !1794)
!1794 = distinct !DILexicalBlock(scope: !1768, file: !373, line: 243, column: 1)
!1795 = !DILocation(line: 243, column: 1, scope: !1796)
!1796 = distinct !DILexicalBlock(scope: !1794, file: !373, line: 243, column: 1)
!1797 = !DILocation(line: 0, scope: !385, inlinedAt: !1798)
!1798 = distinct !DILocation(line: 243, column: 1, scope: !1796)
!1799 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1798)
!1800 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1798)
!1801 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1798)
!1802 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1798)
!1803 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1798)
!1804 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1798)
!1805 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1798)
!1806 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1798)
!1807 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1798)
!1808 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1798)
!1809 = distinct !DISubprogram(name: "f_nexttoward", scope: !373, file: !373, line: 248, type: !502, scopeLine: 248, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1810)
!1810 = !{!1811, !1812, !1813, !1814, !1815}
!1811 = !DILocalVariable(name: "jq", arg: 1, scope: !1809, file: !373, line: 248, type: !201)
!1812 = !DILocalVariable(name: "input", arg: 2, scope: !1809, file: !373, line: 248, type: !112)
!1813 = !DILocalVariable(name: "a", arg: 3, scope: !1809, file: !373, line: 248, type: !112)
!1814 = !DILocalVariable(name: "b", arg: 4, scope: !1809, file: !373, line: 248, type: !112)
!1815 = !DILocalVariable(name: "ret", scope: !1809, file: !373, line: 248, type: !112)
!1816 = !DILocation(line: 0, scope: !1809)
!1817 = !DILocation(line: 248, column: 1, scope: !1809)
!1818 = !DILocation(line: 248, column: 1, scope: !1819)
!1819 = distinct !DILexicalBlock(scope: !1809, file: !373, line: 248, column: 1)
!1820 = !DILocation(line: 248, column: 1, scope: !1821)
!1821 = distinct !DILexicalBlock(scope: !1819, file: !373, line: 248, column: 1)
!1822 = !DILocation(line: 0, scope: !385, inlinedAt: !1823)
!1823 = distinct !DILocation(line: 248, column: 1, scope: !1821)
!1824 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1823)
!1825 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1823)
!1826 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1823)
!1827 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1823)
!1828 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1823)
!1829 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1823)
!1830 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1823)
!1831 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1823)
!1832 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1823)
!1833 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1823)
!1834 = !DILocation(line: 248, column: 1, scope: !1835)
!1835 = distinct !DILexicalBlock(scope: !1809, file: !373, line: 248, column: 1)
!1836 = !DILocation(line: 248, column: 1, scope: !1837)
!1837 = distinct !DILexicalBlock(scope: !1835, file: !373, line: 248, column: 1)
!1838 = !DILocation(line: 0, scope: !385, inlinedAt: !1839)
!1839 = distinct !DILocation(line: 248, column: 1, scope: !1837)
!1840 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1839)
!1841 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1839)
!1842 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1839)
!1843 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1839)
!1844 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1839)
!1845 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1839)
!1846 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1839)
!1847 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1839)
!1848 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1839)
!1849 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1839)
!1850 = distinct !DISubprogram(name: "f_rint", scope: !373, file: !373, line: 258, type: !374, scopeLine: 258, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1851)
!1851 = !{!1852, !1853, !1854}
!1852 = !DILocalVariable(name: "jq", arg: 1, scope: !1850, file: !373, line: 258, type: !201)
!1853 = !DILocalVariable(name: "input", arg: 2, scope: !1850, file: !373, line: 258, type: !112)
!1854 = !DILocalVariable(name: "ret", scope: !1850, file: !373, line: 258, type: !112)
!1855 = !DILocation(line: 0, scope: !1850)
!1856 = !DILocation(line: 258, column: 1, scope: !1857)
!1857 = distinct !DILexicalBlock(scope: !1850, file: !373, line: 258, column: 1)
!1858 = !DILocation(line: 258, column: 1, scope: !1850)
!1859 = !DILocation(line: 0, scope: !385, inlinedAt: !1860)
!1860 = distinct !DILocation(line: 258, column: 1, scope: !1861)
!1861 = distinct !DILexicalBlock(scope: !1857, file: !373, line: 258, column: 1)
!1862 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1860)
!1863 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1860)
!1864 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1860)
!1865 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1860)
!1866 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1860)
!1867 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1860)
!1868 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1860)
!1869 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1860)
!1870 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1860)
!1871 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1860)
!1872 = !DILocation(line: 258, column: 1, scope: !1861)
!1873 = distinct !DISubprogram(name: "f_round", scope: !373, file: !373, line: 263, type: !374, scopeLine: 263, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1874)
!1874 = !{!1875, !1876, !1877}
!1875 = !DILocalVariable(name: "jq", arg: 1, scope: !1873, file: !373, line: 263, type: !201)
!1876 = !DILocalVariable(name: "input", arg: 2, scope: !1873, file: !373, line: 263, type: !112)
!1877 = !DILocalVariable(name: "ret", scope: !1873, file: !373, line: 263, type: !112)
!1878 = !DILocation(line: 0, scope: !1873)
!1879 = !DILocation(line: 263, column: 1, scope: !1880)
!1880 = distinct !DILexicalBlock(scope: !1873, file: !373, line: 263, column: 1)
!1881 = !DILocation(line: 263, column: 1, scope: !1873)
!1882 = !DILocation(line: 0, scope: !385, inlinedAt: !1883)
!1883 = distinct !DILocation(line: 263, column: 1, scope: !1884)
!1884 = distinct !DILexicalBlock(scope: !1880, file: !373, line: 263, column: 1)
!1885 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1883)
!1886 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1883)
!1887 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1883)
!1888 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1883)
!1889 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1883)
!1890 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1883)
!1891 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1883)
!1892 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1883)
!1893 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1883)
!1894 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1883)
!1895 = !DILocation(line: 263, column: 1, scope: !1884)
!1896 = distinct !DISubprogram(name: "f_scalb", scope: !373, file: !373, line: 268, type: !502, scopeLine: 268, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1897)
!1897 = !{!1898, !1899, !1900, !1901, !1902}
!1898 = !DILocalVariable(name: "jq", arg: 1, scope: !1896, file: !373, line: 268, type: !201)
!1899 = !DILocalVariable(name: "input", arg: 2, scope: !1896, file: !373, line: 268, type: !112)
!1900 = !DILocalVariable(name: "a", arg: 3, scope: !1896, file: !373, line: 268, type: !112)
!1901 = !DILocalVariable(name: "b", arg: 4, scope: !1896, file: !373, line: 268, type: !112)
!1902 = !DILocalVariable(name: "ret", scope: !1896, file: !373, line: 268, type: !112)
!1903 = !DILocation(line: 0, scope: !1896)
!1904 = !DILocation(line: 268, column: 1, scope: !1896)
!1905 = !DILocation(line: 268, column: 1, scope: !1906)
!1906 = distinct !DILexicalBlock(scope: !1896, file: !373, line: 268, column: 1)
!1907 = !DILocation(line: 268, column: 1, scope: !1908)
!1908 = distinct !DILexicalBlock(scope: !1906, file: !373, line: 268, column: 1)
!1909 = !DILocation(line: 0, scope: !385, inlinedAt: !1910)
!1910 = distinct !DILocation(line: 268, column: 1, scope: !1908)
!1911 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1910)
!1912 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1910)
!1913 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1910)
!1914 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1910)
!1915 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1910)
!1916 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1910)
!1917 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1910)
!1918 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1910)
!1919 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1910)
!1920 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1910)
!1921 = !DILocation(line: 268, column: 1, scope: !1922)
!1922 = distinct !DILexicalBlock(scope: !1896, file: !373, line: 268, column: 1)
!1923 = !DILocation(line: 268, column: 1, scope: !1924)
!1924 = distinct !DILexicalBlock(scope: !1922, file: !373, line: 268, column: 1)
!1925 = !DILocation(line: 0, scope: !385, inlinedAt: !1926)
!1926 = distinct !DILocation(line: 268, column: 1, scope: !1924)
!1927 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1926)
!1928 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1926)
!1929 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1926)
!1930 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1926)
!1931 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1926)
!1932 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1926)
!1933 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1926)
!1934 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1926)
!1935 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1926)
!1936 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1926)
!1937 = distinct !DISubprogram(name: "f_scalbln", scope: !373, file: !373, line: 273, type: !502, scopeLine: 273, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1938)
!1938 = !{!1939, !1940, !1941, !1942, !1943}
!1939 = !DILocalVariable(name: "jq", arg: 1, scope: !1937, file: !373, line: 273, type: !201)
!1940 = !DILocalVariable(name: "input", arg: 2, scope: !1937, file: !373, line: 273, type: !112)
!1941 = !DILocalVariable(name: "a", arg: 3, scope: !1937, file: !373, line: 273, type: !112)
!1942 = !DILocalVariable(name: "b", arg: 4, scope: !1937, file: !373, line: 273, type: !112)
!1943 = !DILocalVariable(name: "ret", scope: !1937, file: !373, line: 273, type: !112)
!1944 = !DILocation(line: 0, scope: !1937)
!1945 = !DILocation(line: 273, column: 1, scope: !1937)
!1946 = !DILocation(line: 273, column: 1, scope: !1947)
!1947 = distinct !DILexicalBlock(scope: !1937, file: !373, line: 273, column: 1)
!1948 = !DILocation(line: 273, column: 1, scope: !1949)
!1949 = distinct !DILexicalBlock(scope: !1947, file: !373, line: 273, column: 1)
!1950 = !DILocation(line: 0, scope: !385, inlinedAt: !1951)
!1951 = distinct !DILocation(line: 273, column: 1, scope: !1949)
!1952 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1951)
!1953 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1951)
!1954 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1951)
!1955 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1951)
!1956 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1951)
!1957 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1951)
!1958 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1951)
!1959 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1951)
!1960 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1951)
!1961 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1951)
!1962 = !DILocation(line: 273, column: 1, scope: !1963)
!1963 = distinct !DILexicalBlock(scope: !1937, file: !373, line: 273, column: 1)
!1964 = !DILocation(line: 273, column: 1, scope: !1965)
!1965 = distinct !DILexicalBlock(scope: !1963, file: !373, line: 273, column: 1)
!1966 = !DILocation(line: 0, scope: !385, inlinedAt: !1967)
!1967 = distinct !DILocation(line: 273, column: 1, scope: !1965)
!1968 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1967)
!1969 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1967)
!1970 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1967)
!1971 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1967)
!1972 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1967)
!1973 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1967)
!1974 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1967)
!1975 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1967)
!1976 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1967)
!1977 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1967)
!1978 = distinct !DISubprogram(name: "f_significand", scope: !373, file: !373, line: 278, type: !374, scopeLine: 278, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1979)
!1979 = !{!1980, !1981, !1982}
!1980 = !DILocalVariable(name: "jq", arg: 1, scope: !1978, file: !373, line: 278, type: !201)
!1981 = !DILocalVariable(name: "input", arg: 2, scope: !1978, file: !373, line: 278, type: !112)
!1982 = !DILocalVariable(name: "ret", scope: !1978, file: !373, line: 278, type: !112)
!1983 = !DILocation(line: 0, scope: !1978)
!1984 = !DILocation(line: 278, column: 1, scope: !1985)
!1985 = distinct !DILexicalBlock(scope: !1978, file: !373, line: 278, column: 1)
!1986 = !DILocation(line: 278, column: 1, scope: !1978)
!1987 = !DILocation(line: 0, scope: !385, inlinedAt: !1988)
!1988 = distinct !DILocation(line: 278, column: 1, scope: !1989)
!1989 = distinct !DILexicalBlock(scope: !1985, file: !373, line: 278, column: 1)
!1990 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !1988)
!1991 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !1988)
!1992 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !1988)
!1993 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !1988)
!1994 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !1988)
!1995 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !1988)
!1996 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !1988)
!1997 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !1988)
!1998 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !1988)
!1999 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !1988)
!2000 = !DILocation(line: 278, column: 1, scope: !1989)
!2001 = distinct !DISubprogram(name: "f_trunc", scope: !373, file: !373, line: 283, type: !374, scopeLine: 283, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2002)
!2002 = !{!2003, !2004, !2005}
!2003 = !DILocalVariable(name: "jq", arg: 1, scope: !2001, file: !373, line: 283, type: !201)
!2004 = !DILocalVariable(name: "input", arg: 2, scope: !2001, file: !373, line: 283, type: !112)
!2005 = !DILocalVariable(name: "ret", scope: !2001, file: !373, line: 283, type: !112)
!2006 = !DILocation(line: 0, scope: !2001)
!2007 = !DILocation(line: 283, column: 1, scope: !2008)
!2008 = distinct !DILexicalBlock(scope: !2001, file: !373, line: 283, column: 1)
!2009 = !DILocation(line: 283, column: 1, scope: !2001)
!2010 = !DILocation(line: 0, scope: !385, inlinedAt: !2011)
!2011 = distinct !DILocation(line: 283, column: 1, scope: !2012)
!2012 = distinct !DILexicalBlock(scope: !2008, file: !373, line: 283, column: 1)
!2013 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2011)
!2014 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2011)
!2015 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2011)
!2016 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2011)
!2017 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2011)
!2018 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2011)
!2019 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2011)
!2020 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2011)
!2021 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2011)
!2022 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2011)
!2023 = !DILocation(line: 283, column: 1, scope: !2012)
!2024 = distinct !DISubprogram(name: "f_ldexp", scope: !373, file: !373, line: 288, type: !502, scopeLine: 288, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2025)
!2025 = !{!2026, !2027, !2028, !2029, !2030}
!2026 = !DILocalVariable(name: "jq", arg: 1, scope: !2024, file: !373, line: 288, type: !201)
!2027 = !DILocalVariable(name: "input", arg: 2, scope: !2024, file: !373, line: 288, type: !112)
!2028 = !DILocalVariable(name: "a", arg: 3, scope: !2024, file: !373, line: 288, type: !112)
!2029 = !DILocalVariable(name: "b", arg: 4, scope: !2024, file: !373, line: 288, type: !112)
!2030 = !DILocalVariable(name: "ret", scope: !2024, file: !373, line: 288, type: !112)
!2031 = !DILocation(line: 0, scope: !2024)
!2032 = !DILocation(line: 288, column: 1, scope: !2024)
!2033 = !DILocation(line: 288, column: 1, scope: !2034)
!2034 = distinct !DILexicalBlock(scope: !2024, file: !373, line: 288, column: 1)
!2035 = !DILocation(line: 288, column: 1, scope: !2036)
!2036 = distinct !DILexicalBlock(scope: !2034, file: !373, line: 288, column: 1)
!2037 = !DILocation(line: 0, scope: !385, inlinedAt: !2038)
!2038 = distinct !DILocation(line: 288, column: 1, scope: !2036)
!2039 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2038)
!2040 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2038)
!2041 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2038)
!2042 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2038)
!2043 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2038)
!2044 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2038)
!2045 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2038)
!2046 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2038)
!2047 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2038)
!2048 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2038)
!2049 = !DILocation(line: 288, column: 1, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !2024, file: !373, line: 288, column: 1)
!2051 = !DILocation(line: 288, column: 1, scope: !2052)
!2052 = distinct !DILexicalBlock(scope: !2050, file: !373, line: 288, column: 1)
!2053 = !DILocation(line: 0, scope: !385, inlinedAt: !2054)
!2054 = distinct !DILocation(line: 288, column: 1, scope: !2052)
!2055 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2054)
!2056 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2054)
!2057 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2054)
!2058 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2054)
!2059 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2054)
!2060 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2054)
!2061 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2054)
!2062 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2054)
!2063 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2054)
!2064 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2054)
!2065 = distinct !DISubprogram(name: "f_frexp", scope: !3, file: !3, line: 210, type: !374, scopeLine: 210, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2066)
!2066 = !{!2067, !2068, !2069, !2070, !2071}
!2067 = !DILocalVariable(name: "jq", arg: 1, scope: !2065, file: !3, line: 210, type: !201)
!2068 = !DILocalVariable(name: "input", arg: 2, scope: !2065, file: !3, line: 210, type: !112)
!2069 = !DILocalVariable(name: "exp", scope: !2065, file: !3, line: 214, type: !98)
!2070 = !DILocalVariable(name: "d", scope: !2065, file: !3, line: 215, type: !127)
!2071 = !DILocalVariable(name: "ret", scope: !2065, file: !3, line: 216, type: !112)
!2072 = !DILocation(line: 0, scope: !2065)
!2073 = !DILocation(line: 211, column: 7, scope: !2074)
!2074 = distinct !DILexicalBlock(scope: !2065, file: !3, line: 211, column: 7)
!2075 = !DILocation(line: 211, column: 26, scope: !2074)
!2076 = !DILocation(line: 211, column: 7, scope: !2065)
!2077 = !DILocation(line: 0, scope: !385, inlinedAt: !2078)
!2078 = distinct !DILocation(line: 212, column: 12, scope: !2079)
!2079 = distinct !DILexicalBlock(scope: !2074, file: !3, line: 211, column: 45)
!2080 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2078)
!2081 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2078)
!2082 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2078)
!2083 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2078)
!2084 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2078)
!2085 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2078)
!2086 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2078)
!2087 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2078)
!2088 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2078)
!2089 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2078)
!2090 = !DILocation(line: 212, column: 5, scope: !2079)
!2091 = !DILocation(line: 214, column: 3, scope: !2065)
!2092 = !DILocation(line: 215, column: 20, scope: !2065)
!2093 = !DILocation(line: 215, column: 14, scope: !2065)
!2094 = !DILocation(line: 216, column: 12, scope: !2065)
!2095 = !{!2096, !2096, i64 0}
!2096 = !{!"int", !302, i64 0}
!2097 = !DILocation(line: 217, column: 3, scope: !2065)
!2098 = !DILocation(line: 219, column: 1, scope: !2065)
!2099 = distinct !DISubprogram(name: "f_modf", scope: !3, file: !3, line: 222, type: !374, scopeLine: 222, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2100)
!2100 = !{!2101, !2102, !2103, !2104}
!2101 = !DILocalVariable(name: "jq", arg: 1, scope: !2099, file: !3, line: 222, type: !201)
!2102 = !DILocalVariable(name: "input", arg: 2, scope: !2099, file: !3, line: 222, type: !112)
!2103 = !DILocalVariable(name: "i", scope: !2099, file: !3, line: 226, type: !127)
!2104 = !DILocalVariable(name: "ret", scope: !2099, file: !3, line: 227, type: !112)
!2105 = !DILocation(line: 0, scope: !2099)
!2106 = !DILocation(line: 223, column: 7, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2099, file: !3, line: 223, column: 7)
!2108 = !DILocation(line: 223, column: 26, scope: !2107)
!2109 = !DILocation(line: 223, column: 7, scope: !2099)
!2110 = !DILocation(line: 0, scope: !385, inlinedAt: !2111)
!2111 = distinct !DILocation(line: 224, column: 12, scope: !2112)
!2112 = distinct !DILexicalBlock(scope: !2107, file: !3, line: 223, column: 45)
!2113 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2111)
!2114 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2111)
!2115 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2111)
!2116 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2111)
!2117 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2111)
!2118 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2111)
!2119 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2111)
!2120 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2111)
!2121 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2111)
!2122 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2111)
!2123 = !DILocation(line: 224, column: 5, scope: !2112)
!2124 = !DILocation(line: 226, column: 3, scope: !2099)
!2125 = !DILocation(line: 227, column: 12, scope: !2099)
!2126 = !DILocation(line: 228, column: 3, scope: !2099)
!2127 = !DILocation(line: 229, column: 41, scope: !2099)
!2128 = !{!2129, !2129, i64 0}
!2129 = !{!"double", !302, i64 0}
!2130 = !DILocation(line: 229, column: 31, scope: !2099)
!2131 = !DILocation(line: 229, column: 10, scope: !2099)
!2132 = !DILocation(line: 230, column: 1, scope: !2099)
!2133 = distinct !DISubprogram(name: "f_lgamma_r", scope: !3, file: !3, line: 233, type: !374, scopeLine: 233, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2134)
!2134 = !{!2135, !2136, !2137, !2138}
!2135 = !DILocalVariable(name: "jq", arg: 1, scope: !2133, file: !3, line: 233, type: !201)
!2136 = !DILocalVariable(name: "input", arg: 2, scope: !2133, file: !3, line: 233, type: !112)
!2137 = !DILocalVariable(name: "sign", scope: !2133, file: !3, line: 237, type: !98)
!2138 = !DILocalVariable(name: "ret", scope: !2133, file: !3, line: 238, type: !112)
!2139 = !DILocation(line: 0, scope: !2133)
!2140 = !DILocation(line: 234, column: 7, scope: !2141)
!2141 = distinct !DILexicalBlock(scope: !2133, file: !3, line: 234, column: 7)
!2142 = !DILocation(line: 234, column: 26, scope: !2141)
!2143 = !DILocation(line: 234, column: 7, scope: !2133)
!2144 = !DILocation(line: 0, scope: !385, inlinedAt: !2145)
!2145 = distinct !DILocation(line: 235, column: 12, scope: !2146)
!2146 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 234, column: 45)
!2147 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2145)
!2148 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2145)
!2149 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2145)
!2150 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2145)
!2151 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2145)
!2152 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2145)
!2153 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2145)
!2154 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2145)
!2155 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2145)
!2156 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2145)
!2157 = !DILocation(line: 235, column: 5, scope: !2146)
!2158 = !DILocation(line: 237, column: 3, scope: !2133)
!2159 = !DILocation(line: 238, column: 12, scope: !2133)
!2160 = !DILocation(line: 239, column: 3, scope: !2133)
!2161 = !DILocation(line: 240, column: 41, scope: !2133)
!2162 = !DILocation(line: 240, column: 31, scope: !2133)
!2163 = !DILocation(line: 240, column: 10, scope: !2133)
!2164 = !DILocation(line: 241, column: 1, scope: !2133)
!2165 = distinct !DISubprogram(name: "f_plus", scope: !3, file: !3, line: 84, type: !502, scopeLine: 84, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2166)
!2166 = !{!2167, !2168, !2169, !2170, !2171}
!2167 = !DILocalVariable(name: "jq", arg: 1, scope: !2165, file: !3, line: 84, type: !201)
!2168 = !DILocalVariable(name: "input", arg: 2, scope: !2165, file: !3, line: 84, type: !112)
!2169 = !DILocalVariable(name: "a", arg: 3, scope: !2165, file: !3, line: 84, type: !112)
!2170 = !DILocalVariable(name: "b", arg: 4, scope: !2165, file: !3, line: 84, type: !112)
!2171 = !DILocalVariable(name: "r", scope: !2172, file: !3, line: 93, type: !112)
!2172 = distinct !DILexicalBlock(scope: !2173, file: !3, line: 92, column: 84)
!2173 = distinct !DILexicalBlock(scope: !2174, file: !3, line: 92, column: 14)
!2174 = distinct !DILexicalBlock(scope: !2175, file: !3, line: 89, column: 14)
!2175 = distinct !DILexicalBlock(scope: !2165, file: !3, line: 86, column: 7)
!2176 = !DILocation(line: 0, scope: !2165)
!2177 = !DILocation(line: 84, column: 51, scope: !2165)
!2178 = !DILocation(line: 85, column: 3, scope: !2165)
!2179 = !DILocation(line: 86, column: 7, scope: !2175)
!2180 = !DILocation(line: 86, column: 22, scope: !2175)
!2181 = !DILocation(line: 86, column: 7, scope: !2165)
!2182 = !DILocation(line: 87, column: 5, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2175, file: !3, line: 86, column: 39)
!2184 = !DILocation(line: 88, column: 12, scope: !2183)
!2185 = !{i64 0, i64 1, !2186, i64 1, i64 1, !2186, i64 2, i64 2, !2187, i64 4, i64 4, !2095, i64 8, i64 8, !300, i64 8, i64 8, !2128}
!2186 = !{!302, !302, i64 0}
!2187 = !{!2188, !2188, i64 0}
!2188 = !{!"short", !302, i64 0}
!2189 = !DILocation(line: 0, scope: !2172)
!2190 = !{i64 0, i64 8, !300, i64 0, i64 8, !2128}
!2191 = !DILocation(line: 88, column: 5, scope: !2183)
!2192 = !DILocation(line: 89, column: 14, scope: !2174)
!2193 = !DILocation(line: 89, column: 29, scope: !2174)
!2194 = !DILocation(line: 89, column: 14, scope: !2175)
!2195 = !DILocation(line: 90, column: 5, scope: !2196)
!2196 = distinct !DILexicalBlock(scope: !2174, file: !3, line: 89, column: 46)
!2197 = !DILocation(line: 91, column: 5, scope: !2196)
!2198 = !DILocation(line: 92, column: 14, scope: !2173)
!2199 = !DILocation(line: 92, column: 29, scope: !2173)
!2200 = !DILocation(line: 92, column: 47, scope: !2173)
!2201 = !DILocation(line: 92, column: 50, scope: !2173)
!2202 = !DILocation(line: 92, column: 65, scope: !2173)
!2203 = !DILocation(line: 92, column: 14, scope: !2174)
!2204 = !DILocation(line: 93, column: 22, scope: !2172)
!2205 = !DILocation(line: 94, column: 22, scope: !2172)
!2206 = !DILocation(line: 93, column: 41, scope: !2172)
!2207 = !DILocation(line: 93, column: 12, scope: !2172)
!2208 = !DILocation(line: 95, column: 5, scope: !2172)
!2209 = !DILocation(line: 96, column: 5, scope: !2172)
!2210 = !DILocation(line: 97, column: 5, scope: !2172)
!2211 = !DILocation(line: 98, column: 14, scope: !2212)
!2212 = distinct !DILexicalBlock(scope: !2173, file: !3, line: 98, column: 14)
!2213 = !DILocation(line: 98, column: 29, scope: !2212)
!2214 = !DILocation(line: 98, column: 47, scope: !2212)
!2215 = !DILocation(line: 98, column: 50, scope: !2212)
!2216 = !DILocation(line: 98, column: 65, scope: !2212)
!2217 = !DILocation(line: 98, column: 14, scope: !2173)
!2218 = !DILocation(line: 99, column: 12, scope: !2219)
!2219 = distinct !DILexicalBlock(scope: !2212, file: !3, line: 98, column: 84)
!2220 = !DILocation(line: 99, column: 5, scope: !2219)
!2221 = !DILocation(line: 100, column: 14, scope: !2222)
!2222 = distinct !DILexicalBlock(scope: !2212, file: !3, line: 100, column: 14)
!2223 = !DILocation(line: 100, column: 29, scope: !2222)
!2224 = !DILocation(line: 100, column: 46, scope: !2222)
!2225 = !DILocation(line: 100, column: 49, scope: !2222)
!2226 = !DILocation(line: 100, column: 64, scope: !2222)
!2227 = !DILocation(line: 100, column: 14, scope: !2212)
!2228 = !DILocation(line: 101, column: 12, scope: !2229)
!2229 = distinct !DILexicalBlock(scope: !2222, file: !3, line: 100, column: 82)
!2230 = !DILocation(line: 101, column: 5, scope: !2229)
!2231 = !DILocation(line: 102, column: 14, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !2222, file: !3, line: 102, column: 14)
!2233 = !DILocation(line: 102, column: 29, scope: !2232)
!2234 = !DILocation(line: 102, column: 47, scope: !2232)
!2235 = !DILocation(line: 102, column: 50, scope: !2232)
!2236 = !DILocation(line: 102, column: 65, scope: !2232)
!2237 = !DILocation(line: 102, column: 14, scope: !2222)
!2238 = !DILocation(line: 103, column: 12, scope: !2239)
!2239 = distinct !DILexicalBlock(scope: !2232, file: !3, line: 102, column: 84)
!2240 = !DILocation(line: 103, column: 5, scope: !2239)
!2241 = !DILocation(line: 105, column: 12, scope: !2242)
!2242 = distinct !DILexicalBlock(scope: !2232, file: !3, line: 104, column: 10)
!2243 = !DILocation(line: 105, column: 5, scope: !2242)
!2244 = !DILocation(line: 0, scope: !2175)
!2245 = !DILocation(line: 107, column: 1, scope: !2165)
!2246 = distinct !DISubprogram(name: "f_negate", scope: !3, file: !3, line: 244, type: !374, scopeLine: 244, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2247)
!2247 = !{!2248, !2249, !2250}
!2248 = !DILocalVariable(name: "jq", arg: 1, scope: !2246, file: !3, line: 244, type: !201)
!2249 = !DILocalVariable(name: "input", arg: 2, scope: !2246, file: !3, line: 244, type: !112)
!2250 = !DILocalVariable(name: "ret", scope: !2246, file: !3, line: 248, type: !112)
!2251 = !DILocation(line: 0, scope: !2246)
!2252 = !DILocation(line: 245, column: 7, scope: !2253)
!2253 = distinct !DILexicalBlock(scope: !2246, file: !3, line: 245, column: 7)
!2254 = !DILocation(line: 245, column: 26, scope: !2253)
!2255 = !DILocation(line: 245, column: 7, scope: !2246)
!2256 = !DILocation(line: 0, scope: !385, inlinedAt: !2257)
!2257 = distinct !DILocation(line: 246, column: 12, scope: !2258)
!2258 = distinct !DILexicalBlock(scope: !2253, file: !3, line: 245, column: 45)
!2259 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2257)
!2260 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2257)
!2261 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2257)
!2262 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2257)
!2263 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2257)
!2264 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2257)
!2265 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2257)
!2266 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2257)
!2267 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2257)
!2268 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2257)
!2269 = !DILocation(line: 246, column: 5, scope: !2258)
!2270 = !DILocation(line: 248, column: 23, scope: !2246)
!2271 = !DILocation(line: 248, column: 22, scope: !2246)
!2272 = !DILocation(line: 248, column: 12, scope: !2246)
!2273 = !DILocation(line: 249, column: 3, scope: !2246)
!2274 = !DILocation(line: 251, column: 1, scope: !2246)
!2275 = distinct !DISubprogram(name: "f_minus", scope: !3, file: !3, line: 315, type: !502, scopeLine: 315, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2276)
!2276 = !{!2277, !2278, !2279, !2280, !2281, !2284, !2287, !2289, !2290, !2291, !2294, !2297, !2299, !2300, !2301}
!2277 = !DILocalVariable(name: "jq", arg: 1, scope: !2275, file: !3, line: 315, type: !201)
!2278 = !DILocalVariable(name: "input", arg: 2, scope: !2275, file: !3, line: 315, type: !112)
!2279 = !DILocalVariable(name: "a", arg: 3, scope: !2275, file: !3, line: 315, type: !112)
!2280 = !DILocalVariable(name: "b", arg: 4, scope: !2275, file: !3, line: 315, type: !112)
!2281 = !DILocalVariable(name: "r", scope: !2282, file: !3, line: 318, type: !112)
!2282 = distinct !DILexicalBlock(scope: !2283, file: !3, line: 317, column: 77)
!2283 = distinct !DILexicalBlock(scope: !2275, file: !3, line: 317, column: 7)
!2284 = !DILocalVariable(name: "out", scope: !2285, file: !3, line: 323, type: !112)
!2285 = distinct !DILexicalBlock(scope: !2286, file: !3, line: 322, column: 82)
!2286 = distinct !DILexicalBlock(scope: !2283, file: !3, line: 322, column: 14)
!2287 = !DILocalVariable(name: "jv_len__", scope: !2288, file: !3, line: 324, type: !98)
!2288 = distinct !DILexicalBlock(scope: !2285, file: !3, line: 324, column: 5)
!2289 = !DILocalVariable(name: "i", scope: !2288, file: !3, line: 324, type: !98)
!2290 = !DILocalVariable(name: "jv_j__", scope: !2288, file: !3, line: 324, type: !98)
!2291 = !DILocalVariable(name: "x", scope: !2292, file: !3, line: 324, type: !112)
!2292 = distinct !DILexicalBlock(scope: !2293, file: !3, line: 324, column: 5)
!2293 = distinct !DILexicalBlock(scope: !2288, file: !3, line: 324, column: 5)
!2294 = !DILocalVariable(name: "include", scope: !2295, file: !3, line: 325, type: !98)
!2295 = distinct !DILexicalBlock(scope: !2296, file: !3, line: 324, column: 31)
!2296 = distinct !DILexicalBlock(scope: !2292, file: !3, line: 324, column: 5)
!2297 = !DILocalVariable(name: "jv_len__", scope: !2298, file: !3, line: 326, type: !98)
!2298 = distinct !DILexicalBlock(scope: !2295, file: !3, line: 326, column: 7)
!2299 = !DILocalVariable(name: "j", scope: !2298, file: !3, line: 326, type: !98)
!2300 = !DILocalVariable(name: "jv_j__", scope: !2298, file: !3, line: 326, type: !98)
!2301 = !DILocalVariable(name: "y", scope: !2302, file: !3, line: 326, type: !112)
!2302 = distinct !DILexicalBlock(scope: !2303, file: !3, line: 326, column: 7)
!2303 = distinct !DILexicalBlock(scope: !2298, file: !3, line: 326, column: 7)
!2304 = !DILocation(line: 0, scope: !2275)
!2305 = !DILocation(line: 315, column: 52, scope: !2275)
!2306 = !DILocation(line: 316, column: 3, scope: !2275)
!2307 = !DILocation(line: 317, column: 7, scope: !2283)
!2308 = !DILocation(line: 317, column: 22, scope: !2283)
!2309 = !DILocation(line: 317, column: 40, scope: !2283)
!2310 = !DILocation(line: 317, column: 43, scope: !2283)
!2311 = !DILocation(line: 317, column: 58, scope: !2283)
!2312 = !DILocation(line: 317, column: 7, scope: !2275)
!2313 = !DILocation(line: 318, column: 22, scope: !2282)
!2314 = !DILocation(line: 318, column: 43, scope: !2282)
!2315 = !DILocation(line: 318, column: 41, scope: !2282)
!2316 = !DILocation(line: 318, column: 12, scope: !2282)
!2317 = !DILocation(line: 0, scope: !2282)
!2318 = !DILocation(line: 0, scope: !2285)
!2319 = !DILocation(line: 319, column: 5, scope: !2282)
!2320 = !DILocation(line: 320, column: 5, scope: !2282)
!2321 = !DILocation(line: 321, column: 5, scope: !2282)
!2322 = !DILocation(line: 322, column: 14, scope: !2286)
!2323 = !DILocation(line: 322, column: 29, scope: !2286)
!2324 = !DILocation(line: 0, scope: !2286)
!2325 = !DILocation(line: 322, column: 46, scope: !2286)
!2326 = !DILocation(line: 322, column: 49, scope: !2286)
!2327 = !DILocation(line: 322, column: 64, scope: !2286)
!2328 = !DILocation(line: 322, column: 14, scope: !2283)
!2329 = !DILocation(line: 323, column: 14, scope: !2285)
!2330 = !DILocation(line: 324, column: 5, scope: !2288)
!2331 = !DILocation(line: 0, scope: !2288)
!2332 = !DILocation(line: 0, scope: !2292)
!2333 = !DILocation(line: 0, scope: !2302)
!2334 = !DILocation(line: 324, column: 5, scope: !2296)
!2335 = !DILocation(line: 336, column: 5, scope: !2285)
!2336 = !DILocation(line: 337, column: 5, scope: !2285)
!2337 = !DILocation(line: 338, column: 5, scope: !2285)
!2338 = !DILocation(line: 0, scope: !2295)
!2339 = !DILocation(line: 326, column: 7, scope: !2298)
!2340 = !DILocation(line: 0, scope: !2298)
!2341 = !DILocation(line: 326, column: 7, scope: !2342)
!2342 = distinct !DILexicalBlock(scope: !2302, file: !3, line: 326, column: 7)
!2343 = !DILocation(line: 327, column: 22, scope: !2344)
!2344 = distinct !DILexicalBlock(scope: !2345, file: !3, line: 327, column: 13)
!2345 = distinct !DILexicalBlock(scope: !2342, file: !3, line: 326, column: 33)
!2346 = !DILocation(line: 327, column: 13, scope: !2344)
!2347 = !DILocation(line: 327, column: 13, scope: !2345)
!2348 = distinct !{!2348, !2349, !2350, !2351}
!2349 = !DILocation(line: 326, column: 7, scope: !2302)
!2350 = !DILocation(line: 331, column: 7, scope: !2302)
!2351 = !{!"llvm.loop.mustprogress"}
!2352 = !DILocation(line: 333, column: 36, scope: !2353)
!2353 = distinct !DILexicalBlock(scope: !2295, file: !3, line: 332, column: 11)
!2354 = !DILocation(line: 333, column: 15, scope: !2353)
!2355 = !DILocation(line: 333, column: 9, scope: !2353)
!2356 = !DILocation(line: 334, column: 7, scope: !2295)
!2357 = distinct !{!2357, !2358, !2359, !2351}
!2358 = !DILocation(line: 324, column: 5, scope: !2292)
!2359 = !DILocation(line: 335, column: 5, scope: !2292)
!2360 = !DILocation(line: 340, column: 12, scope: !2361)
!2361 = distinct !DILexicalBlock(scope: !2286, file: !3, line: 339, column: 10)
!2362 = !DILocation(line: 340, column: 5, scope: !2361)
!2363 = !DILocation(line: 0, scope: !2283)
!2364 = !DILocation(line: 342, column: 1, scope: !2275)
!2365 = distinct !DISubprogram(name: "f_multiply", scope: !3, file: !3, line: 344, type: !502, scopeLine: 344, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2366)
!2366 = !{!2367, !2368, !2369, !2370, !2371, !2373, !2374, !2377, !2380, !2381, !2382, !2383}
!2367 = !DILocalVariable(name: "jq", arg: 1, scope: !2365, file: !3, line: 344, type: !201)
!2368 = !DILocalVariable(name: "input", arg: 2, scope: !2365, file: !3, line: 344, type: !112)
!2369 = !DILocalVariable(name: "a", arg: 3, scope: !2365, file: !3, line: 344, type: !112)
!2370 = !DILocalVariable(name: "b", arg: 4, scope: !2365, file: !3, line: 344, type: !112)
!2371 = !DILocalVariable(name: "ak", scope: !2365, file: !3, line: 345, type: !2372)
!2372 = !DIDerivedType(tag: DW_TAG_typedef, name: "jv_kind", file: !61, line: 17, baseType: !60)
!2373 = !DILocalVariable(name: "bk", scope: !2365, file: !3, line: 346, type: !2372)
!2374 = !DILocalVariable(name: "r", scope: !2375, file: !3, line: 349, type: !112)
!2375 = distinct !DILexicalBlock(scope: !2376, file: !3, line: 348, column: 53)
!2376 = distinct !DILexicalBlock(scope: !2365, file: !3, line: 348, column: 7)
!2377 = !DILocalVariable(name: "str", scope: !2378, file: !3, line: 355, type: !112)
!2378 = distinct !DILexicalBlock(scope: !2379, file: !3, line: 354, column: 62)
!2379 = distinct !DILexicalBlock(scope: !2376, file: !3, line: 353, column: 14)
!2380 = !DILocalVariable(name: "num", scope: !2378, file: !3, line: 356, type: !112)
!2381 = !DILocalVariable(name: "res", scope: !2378, file: !3, line: 361, type: !112)
!2382 = !DILocalVariable(name: "n", scope: !2378, file: !3, line: 362, type: !98)
!2383 = !DILocalVariable(name: "alen", scope: !2384, file: !3, line: 364, type: !2386)
!2384 = distinct !DILexicalBlock(scope: !2385, file: !3, line: 363, column: 16)
!2385 = distinct !DILexicalBlock(scope: !2378, file: !3, line: 363, column: 9)
!2386 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2387, line: 46, baseType: !2388)
!2387 = !DIFile(filename: "/usr/lib/clang/13.0.1/include/stddef.h", directory: "")
!2388 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2389 = !DILocation(line: 0, scope: !2365)
!2390 = !DILocation(line: 344, column: 55, scope: !2365)
!2391 = !DILocation(line: 345, column: 16, scope: !2365)
!2392 = !DILocation(line: 346, column: 16, scope: !2365)
!2393 = !DILocation(line: 347, column: 3, scope: !2365)
!2394 = !DILocation(line: 348, column: 10, scope: !2376)
!2395 = !DILocation(line: 348, column: 28, scope: !2376)
!2396 = !DILocation(line: 349, column: 22, scope: !2375)
!2397 = !DILocation(line: 349, column: 43, scope: !2375)
!2398 = !DILocation(line: 349, column: 41, scope: !2375)
!2399 = !DILocation(line: 349, column: 12, scope: !2375)
!2400 = !DILocation(line: 0, scope: !2375)
!2401 = !DILocation(line: 0, scope: !2378)
!2402 = !DILocation(line: 350, column: 5, scope: !2375)
!2403 = !DILocation(line: 351, column: 5, scope: !2375)
!2404 = !DILocation(line: 352, column: 5, scope: !2375)
!2405 = !DILocation(line: 353, column: 18, scope: !2379)
!2406 = !DILocation(line: 353, column: 36, scope: !2379)
!2407 = !DILocation(line: 354, column: 36, scope: !2379)
!2408 = !DILocation(line: 357, column: 9, scope: !2378)
!2409 = !DILocation(line: 360, column: 5, scope: !2410)
!2410 = distinct !DILexicalBlock(scope: !2411, file: !3, line: 357, column: 31)
!2411 = distinct !DILexicalBlock(scope: !2378, file: !3, line: 357, column: 9)
!2412 = !DILocation(line: 361, column: 14, scope: !2378)
!2413 = !DILocation(line: 362, column: 13, scope: !2378)
!2414 = !DILocation(line: 363, column: 11, scope: !2385)
!2415 = !DILocation(line: 363, column: 9, scope: !2378)
!2416 = !DILocation(line: 364, column: 44, scope: !2384)
!2417 = !DILocation(line: 364, column: 21, scope: !2384)
!2418 = !DILocation(line: 0, scope: !2384)
!2419 = !DILocation(line: 365, column: 34, scope: !2384)
!2420 = !DILocation(line: 365, column: 13, scope: !2384)
!2421 = !DILocation(line: 366, column: 7, scope: !2422)
!2422 = distinct !DILexicalBlock(scope: !2384, file: !3, line: 366, column: 7)
!2423 = !DILocation(line: 367, column: 41, scope: !2424)
!2424 = distinct !DILexicalBlock(scope: !2425, file: !3, line: 366, column: 26)
!2425 = distinct !DILexicalBlock(scope: !2422, file: !3, line: 366, column: 7)
!2426 = !DILocation(line: 367, column: 15, scope: !2424)
!2427 = !DILocation(line: 366, column: 22, scope: !2425)
!2428 = !DILocation(line: 366, column: 16, scope: !2425)
!2429 = distinct !{!2429, !2421, !2430, !2351}
!2430 = !DILocation(line: 368, column: 7, scope: !2422)
!2431 = !DILocation(line: 370, column: 5, scope: !2378)
!2432 = !DILocation(line: 371, column: 5, scope: !2378)
!2433 = !DILocation(line: 373, column: 17, scope: !2434)
!2434 = distinct !DILexicalBlock(scope: !2379, file: !3, line: 373, column: 14)
!2435 = !DILocation(line: 373, column: 35, scope: !2434)
!2436 = !DILocation(line: 374, column: 12, scope: !2437)
!2437 = distinct !DILexicalBlock(scope: !2434, file: !3, line: 373, column: 60)
!2438 = !DILocation(line: 374, column: 5, scope: !2437)
!2439 = !DILocation(line: 376, column: 12, scope: !2440)
!2440 = distinct !DILexicalBlock(scope: !2434, file: !3, line: 375, column: 10)
!2441 = !DILocation(line: 376, column: 5, scope: !2440)
!2442 = !DILocation(line: 378, column: 1, scope: !2365)
!2443 = distinct !DISubprogram(name: "f_divide", scope: !3, file: !3, line: 380, type: !502, scopeLine: 380, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2444)
!2444 = !{!2445, !2446, !2447, !2448, !2449}
!2445 = !DILocalVariable(name: "jq", arg: 1, scope: !2443, file: !3, line: 380, type: !201)
!2446 = !DILocalVariable(name: "input", arg: 2, scope: !2443, file: !3, line: 380, type: !112)
!2447 = !DILocalVariable(name: "a", arg: 3, scope: !2443, file: !3, line: 380, type: !112)
!2448 = !DILocalVariable(name: "b", arg: 4, scope: !2443, file: !3, line: 380, type: !112)
!2449 = !DILocalVariable(name: "r", scope: !2450, file: !3, line: 385, type: !112)
!2450 = distinct !DILexicalBlock(scope: !2451, file: !3, line: 382, column: 77)
!2451 = distinct !DILexicalBlock(scope: !2443, file: !3, line: 382, column: 7)
!2452 = !DILocation(line: 0, scope: !2443)
!2453 = !DILocation(line: 380, column: 53, scope: !2443)
!2454 = !DILocation(line: 381, column: 3, scope: !2443)
!2455 = !DILocation(line: 382, column: 7, scope: !2451)
!2456 = !DILocation(line: 382, column: 22, scope: !2451)
!2457 = !DILocation(line: 382, column: 40, scope: !2451)
!2458 = !DILocation(line: 382, column: 43, scope: !2451)
!2459 = !DILocation(line: 382, column: 58, scope: !2451)
!2460 = !DILocation(line: 382, column: 7, scope: !2443)
!2461 = !DILocation(line: 383, column: 9, scope: !2462)
!2462 = distinct !DILexicalBlock(scope: !2450, file: !3, line: 383, column: 9)
!2463 = !DILocation(line: 383, column: 28, scope: !2462)
!2464 = !DILocation(line: 383, column: 9, scope: !2450)
!2465 = !DILocation(line: 384, column: 14, scope: !2462)
!2466 = !DILocation(line: 384, column: 7, scope: !2462)
!2467 = !DILocation(line: 385, column: 22, scope: !2450)
!2468 = !DILocation(line: 385, column: 43, scope: !2450)
!2469 = !DILocation(line: 385, column: 41, scope: !2450)
!2470 = !DILocation(line: 385, column: 12, scope: !2450)
!2471 = !DILocation(line: 0, scope: !2450)
!2472 = !DILocation(line: 386, column: 5, scope: !2450)
!2473 = !DILocation(line: 387, column: 5, scope: !2450)
!2474 = !DILocation(line: 389, column: 14, scope: !2475)
!2475 = distinct !DILexicalBlock(scope: !2451, file: !3, line: 389, column: 14)
!2476 = !DILocation(line: 389, column: 29, scope: !2475)
!2477 = !DILocation(line: 0, scope: !2475)
!2478 = !DILocation(line: 389, column: 47, scope: !2475)
!2479 = !DILocation(line: 389, column: 50, scope: !2475)
!2480 = !DILocation(line: 389, column: 65, scope: !2475)
!2481 = !DILocation(line: 389, column: 14, scope: !2451)
!2482 = !DILocation(line: 390, column: 12, scope: !2483)
!2483 = distinct !DILexicalBlock(scope: !2475, file: !3, line: 389, column: 84)
!2484 = !DILocation(line: 390, column: 5, scope: !2483)
!2485 = !DILocation(line: 392, column: 12, scope: !2486)
!2486 = distinct !DILexicalBlock(scope: !2475, file: !3, line: 391, column: 10)
!2487 = !DILocation(line: 392, column: 5, scope: !2486)
!2488 = !DILocation(line: 394, column: 1, scope: !2443)
!2489 = distinct !DISubprogram(name: "f_mod", scope: !3, file: !3, line: 396, type: !502, scopeLine: 396, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2490)
!2490 = !{!2491, !2492, !2493, !2494, !2495}
!2491 = !DILocalVariable(name: "jq", arg: 1, scope: !2489, file: !3, line: 396, type: !201)
!2492 = !DILocalVariable(name: "input", arg: 2, scope: !2489, file: !3, line: 396, type: !112)
!2493 = !DILocalVariable(name: "a", arg: 3, scope: !2489, file: !3, line: 396, type: !112)
!2494 = !DILocalVariable(name: "b", arg: 4, scope: !2489, file: !3, line: 396, type: !112)
!2495 = !DILocalVariable(name: "r", scope: !2496, file: !3, line: 401, type: !112)
!2496 = distinct !DILexicalBlock(scope: !2497, file: !3, line: 398, column: 77)
!2497 = distinct !DILexicalBlock(scope: !2489, file: !3, line: 398, column: 7)
!2498 = !DILocation(line: 0, scope: !2489)
!2499 = !DILocation(line: 396, column: 50, scope: !2489)
!2500 = !DILocation(line: 397, column: 3, scope: !2489)
!2501 = !DILocation(line: 398, column: 7, scope: !2497)
!2502 = !DILocation(line: 398, column: 22, scope: !2497)
!2503 = !DILocation(line: 0, scope: !2497)
!2504 = !DILocation(line: 398, column: 40, scope: !2497)
!2505 = !DILocation(line: 398, column: 43, scope: !2497)
!2506 = !DILocation(line: 398, column: 58, scope: !2497)
!2507 = !DILocation(line: 398, column: 7, scope: !2489)
!2508 = !DILocation(line: 399, column: 19, scope: !2509)
!2509 = distinct !DILexicalBlock(scope: !2496, file: !3, line: 399, column: 9)
!2510 = !DILocation(line: 399, column: 9, scope: !2509)
!2511 = !DILocation(line: 399, column: 38, scope: !2509)
!2512 = !DILocation(line: 399, column: 9, scope: !2496)
!2513 = !DILocation(line: 400, column: 14, scope: !2509)
!2514 = !DILocation(line: 400, column: 7, scope: !2509)
!2515 = !DILocation(line: 401, column: 32, scope: !2496)
!2516 = !DILocation(line: 401, column: 22, scope: !2496)
!2517 = !DILocation(line: 401, column: 63, scope: !2496)
!2518 = !DILocation(line: 401, column: 53, scope: !2496)
!2519 = !DILocation(line: 401, column: 51, scope: !2496)
!2520 = !DILocation(line: 401, column: 12, scope: !2496)
!2521 = !DILocation(line: 0, scope: !2496)
!2522 = !DILocation(line: 402, column: 5, scope: !2496)
!2523 = !DILocation(line: 403, column: 5, scope: !2496)
!2524 = !DILocation(line: 406, column: 12, scope: !2525)
!2525 = distinct !DILexicalBlock(scope: !2497, file: !3, line: 405, column: 10)
!2526 = !DILocation(line: 406, column: 5, scope: !2525)
!2527 = !DILocation(line: 408, column: 1, scope: !2489)
!2528 = distinct !DISubprogram(name: "f_dump", scope: !3, file: !3, line: 460, type: !374, scopeLine: 460, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2529)
!2529 = !{!2530, !2531}
!2530 = !DILocalVariable(name: "jq", arg: 1, scope: !2528, file: !3, line: 460, type: !201)
!2531 = !DILocalVariable(name: "input", arg: 2, scope: !2528, file: !3, line: 460, type: !112)
!2532 = !DILocation(line: 0, scope: !2528)
!2533 = !DILocation(line: 461, column: 10, scope: !2528)
!2534 = !DILocation(line: 461, column: 3, scope: !2528)
!2535 = distinct !DISubprogram(name: "f_json_parse", scope: !3, file: !3, line: 464, type: !374, scopeLine: 464, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2536)
!2536 = !{!2537, !2538, !2539}
!2537 = !DILocalVariable(name: "jq", arg: 1, scope: !2535, file: !3, line: 464, type: !201)
!2538 = !DILocalVariable(name: "input", arg: 2, scope: !2535, file: !3, line: 464, type: !112)
!2539 = !DILocalVariable(name: "res", scope: !2535, file: !3, line: 467, type: !112)
!2540 = !DILocation(line: 0, scope: !2535)
!2541 = !DILocation(line: 465, column: 7, scope: !2542)
!2542 = distinct !DILexicalBlock(scope: !2535, file: !3, line: 465, column: 7)
!2543 = !DILocation(line: 465, column: 26, scope: !2542)
!2544 = !DILocation(line: 465, column: 7, scope: !2535)
!2545 = !DILocation(line: 0, scope: !385, inlinedAt: !2546)
!2546 = distinct !DILocation(line: 466, column: 12, scope: !2542)
!2547 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2546)
!2548 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2546)
!2549 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2546)
!2550 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2546)
!2551 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2546)
!2552 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2546)
!2553 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2546)
!2554 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2546)
!2555 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2546)
!2556 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2546)
!2557 = !DILocation(line: 466, column: 5, scope: !2542)
!2558 = !DILocation(line: 467, column: 27, scope: !2535)
!2559 = !DILocation(line: 468, column: 50, scope: !2535)
!2560 = !DILocation(line: 468, column: 27, scope: !2535)
!2561 = !DILocation(line: 467, column: 12, scope: !2535)
!2562 = !DILocation(line: 469, column: 3, scope: !2535)
!2563 = !DILocation(line: 471, column: 1, scope: !2535)
!2564 = distinct !DISubprogram(name: "f_tonumber", scope: !3, file: !3, line: 473, type: !374, scopeLine: 473, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2565)
!2565 = !{!2566, !2567, !2568}
!2566 = !DILocalVariable(name: "jq", arg: 1, scope: !2564, file: !3, line: 473, type: !201)
!2567 = !DILocalVariable(name: "input", arg: 2, scope: !2564, file: !3, line: 473, type: !112)
!2568 = !DILocalVariable(name: "parsed", scope: !2569, file: !3, line: 478, type: !112)
!2569 = distinct !DILexicalBlock(scope: !2570, file: !3, line: 477, column: 45)
!2570 = distinct !DILexicalBlock(scope: !2564, file: !3, line: 477, column: 7)
!2571 = !DILocation(line: 0, scope: !2564)
!2572 = !DILocation(line: 474, column: 7, scope: !2573)
!2573 = distinct !DILexicalBlock(scope: !2564, file: !3, line: 474, column: 7)
!2574 = !DILocation(line: 474, column: 26, scope: !2573)
!2575 = !DILocation(line: 474, column: 7, scope: !2564)
!2576 = !DILocation(line: 477, column: 7, scope: !2570)
!2577 = !DILocation(line: 477, column: 26, scope: !2570)
!2578 = !DILocation(line: 477, column: 7, scope: !2564)
!2579 = !DILocation(line: 478, column: 26, scope: !2569)
!2580 = !DILocation(line: 478, column: 17, scope: !2569)
!2581 = !DILocation(line: 0, scope: !2569)
!2582 = !DILocalVariable(name: "x", arg: 1, scope: !2583, file: !61, line: 41, type: !112)
!2583 = distinct !DISubprogram(name: "jv_is_valid", scope: !61, file: !61, line: 41, type: !2584, scopeLine: 41, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2586)
!2584 = !DISubroutineType(types: !2585)
!2585 = !{!98, !112}
!2586 = !{!2582}
!2587 = !DILocation(line: 0, scope: !2583, inlinedAt: !2588)
!2588 = distinct !DILocation(line: 479, column: 10, scope: !2589)
!2589 = distinct !DILexicalBlock(scope: !2569, file: !3, line: 479, column: 9)
!2590 = !DILocation(line: 41, column: 39, scope: !2583, inlinedAt: !2588)
!2591 = !DILocation(line: 41, column: 54, scope: !2583, inlinedAt: !2588)
!2592 = !DILocation(line: 479, column: 30, scope: !2589)
!2593 = !DILocation(line: 479, column: 33, scope: !2589)
!2594 = !DILocation(line: 479, column: 53, scope: !2589)
!2595 = !DILocation(line: 479, column: 9, scope: !2569)
!2596 = !DILocation(line: 480, column: 7, scope: !2597)
!2597 = distinct !DILexicalBlock(scope: !2589, file: !3, line: 479, column: 72)
!2598 = !DILocation(line: 481, column: 7, scope: !2597)
!2599 = !DILocation(line: 0, scope: !385, inlinedAt: !2600)
!2600 = distinct !DILocation(line: 484, column: 10, scope: !2564)
!2601 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2600)
!2602 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2600)
!2603 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2600)
!2604 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2600)
!2605 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2600)
!2606 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2600)
!2607 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2600)
!2608 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2600)
!2609 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2600)
!2610 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2600)
!2611 = !DILocation(line: 484, column: 10, scope: !2564)
!2612 = !DILocation(line: 484, column: 3, scope: !2564)
!2613 = !DILocation(line: 485, column: 1, scope: !2564)
!2614 = distinct !DISubprogram(name: "f_tostring", scope: !3, file: !3, line: 506, type: !374, scopeLine: 506, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2615)
!2615 = !{!2616, !2617}
!2616 = !DILocalVariable(name: "jq", arg: 1, scope: !2614, file: !3, line: 506, type: !201)
!2617 = !DILocalVariable(name: "input", arg: 2, scope: !2614, file: !3, line: 506, type: !112)
!2618 = !DILocation(line: 0, scope: !2614)
!2619 = !DILocation(line: 507, column: 7, scope: !2620)
!2620 = distinct !DILexicalBlock(scope: !2614, file: !3, line: 507, column: 7)
!2621 = !DILocation(line: 507, column: 26, scope: !2620)
!2622 = !DILocation(line: 507, column: 7, scope: !2614)
!2623 = !DILocation(line: 510, column: 12, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2620, file: !3, line: 509, column: 10)
!2625 = !DILocation(line: 510, column: 5, scope: !2624)
!2626 = !DILocation(line: 0, scope: !2620)
!2627 = !DILocation(line: 512, column: 1, scope: !2614)
!2628 = distinct !DISubprogram(name: "f_keys", scope: !3, file: !3, line: 760, type: !374, scopeLine: 760, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2629)
!2629 = !{!2630, !2631}
!2630 = !DILocalVariable(name: "jq", arg: 1, scope: !2628, file: !3, line: 760, type: !201)
!2631 = !DILocalVariable(name: "input", arg: 2, scope: !2628, file: !3, line: 760, type: !112)
!2632 = !DILocation(line: 0, scope: !2628)
!2633 = !DILocation(line: 761, column: 7, scope: !2634)
!2634 = distinct !DILexicalBlock(scope: !2628, file: !3, line: 761, column: 7)
!2635 = !DILocation(line: 761, column: 26, scope: !2634)
!2636 = !DILocation(line: 761, column: 44, scope: !2634)
!2637 = !DILocation(line: 761, column: 47, scope: !2634)
!2638 = !DILocation(line: 761, column: 66, scope: !2634)
!2639 = !DILocation(line: 761, column: 7, scope: !2628)
!2640 = !DILocation(line: 762, column: 12, scope: !2641)
!2641 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 761, column: 84)
!2642 = !DILocation(line: 762, column: 5, scope: !2641)
!2643 = !DILocation(line: 0, scope: !385, inlinedAt: !2644)
!2644 = distinct !DILocation(line: 764, column: 12, scope: !2645)
!2645 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 763, column: 10)
!2646 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2644)
!2647 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2644)
!2648 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2644)
!2649 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2644)
!2650 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2644)
!2651 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2644)
!2652 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2644)
!2653 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2644)
!2654 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2644)
!2655 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2644)
!2656 = !DILocation(line: 764, column: 5, scope: !2645)
!2657 = !DILocation(line: 766, column: 1, scope: !2628)
!2658 = distinct !DISubprogram(name: "f_keys_unsorted", scope: !3, file: !3, line: 768, type: !374, scopeLine: 768, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2659)
!2659 = !{!2660, !2661}
!2660 = !DILocalVariable(name: "jq", arg: 1, scope: !2658, file: !3, line: 768, type: !201)
!2661 = !DILocalVariable(name: "input", arg: 2, scope: !2658, file: !3, line: 768, type: !112)
!2662 = !DILocation(line: 0, scope: !2658)
!2663 = !DILocation(line: 769, column: 7, scope: !2664)
!2664 = distinct !DILexicalBlock(scope: !2658, file: !3, line: 769, column: 7)
!2665 = !DILocation(line: 769, column: 26, scope: !2664)
!2666 = !DILocation(line: 769, column: 44, scope: !2664)
!2667 = !DILocation(line: 769, column: 47, scope: !2664)
!2668 = !DILocation(line: 769, column: 66, scope: !2664)
!2669 = !DILocation(line: 769, column: 7, scope: !2658)
!2670 = !DILocation(line: 770, column: 12, scope: !2671)
!2671 = distinct !DILexicalBlock(scope: !2664, file: !3, line: 769, column: 84)
!2672 = !DILocation(line: 770, column: 5, scope: !2671)
!2673 = !DILocation(line: 0, scope: !385, inlinedAt: !2674)
!2674 = distinct !DILocation(line: 772, column: 12, scope: !2675)
!2675 = distinct !DILexicalBlock(scope: !2664, file: !3, line: 771, column: 10)
!2676 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !2674)
!2677 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !2674)
!2678 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !2674)
!2679 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !2674)
!2680 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !2674)
!2681 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !2674)
!2682 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !2674)
!2683 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !2674)
!2684 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !2674)
!2685 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !2674)
!2686 = !DILocation(line: 772, column: 5, scope: !2675)
!2687 = !DILocation(line: 774, column: 1, scope: !2658)
!2688 = distinct !DISubprogram(name: "f_startswith", scope: !3, file: !3, line: 253, type: !2689, scopeLine: 253, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2691)
!2689 = !DISubroutineType(types: !2690)
!2690 = !{!112, !201, !112, !112}
!2691 = !{!2692, !2693, !2694, !2695, !2696, !2697}
!2692 = !DILocalVariable(name: "jq", arg: 1, scope: !2688, file: !3, line: 253, type: !201)
!2693 = !DILocalVariable(name: "a", arg: 2, scope: !2688, file: !3, line: 253, type: !112)
!2694 = !DILocalVariable(name: "b", arg: 3, scope: !2688, file: !3, line: 253, type: !112)
!2695 = !DILocalVariable(name: "alen", scope: !2688, file: !3, line: 256, type: !98)
!2696 = !DILocalVariable(name: "blen", scope: !2688, file: !3, line: 257, type: !98)
!2697 = !DILocalVariable(name: "ret", scope: !2688, file: !3, line: 258, type: !112)
!2698 = !DILocation(line: 0, scope: !2688)
!2699 = !DILocation(line: 254, column: 7, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2688, file: !3, line: 254, column: 7)
!2701 = !DILocation(line: 254, column: 22, scope: !2700)
!2702 = !DILocation(line: 254, column: 40, scope: !2700)
!2703 = !DILocation(line: 254, column: 43, scope: !2700)
!2704 = !DILocation(line: 254, column: 58, scope: !2700)
!2705 = !DILocation(line: 254, column: 7, scope: !2688)
!2706 = !DILocation(line: 255, column: 29, scope: !2700)
!2707 = !DILocalVariable(name: "bad1", arg: 1, scope: !2708, file: !3, line: 78, type: !112)
!2708 = distinct !DISubprogram(name: "ret_error2", scope: !3, file: !3, line: 78, type: !2709, scopeLine: 78, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2711)
!2709 = !DISubroutineType(types: !2710)
!2710 = !{!112, !112, !112, !112}
!2711 = !{!2707, !2712, !2713}
!2712 = !DILocalVariable(name: "bad2", arg: 2, scope: !2708, file: !3, line: 78, type: !112)
!2713 = !DILocalVariable(name: "msg", arg: 3, scope: !2708, file: !3, line: 78, type: !112)
!2714 = !DILocation(line: 0, scope: !2708, inlinedAt: !2715)
!2715 = distinct !DILocation(line: 255, column: 12, scope: !2700)
!2716 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !2715)
!2717 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !2715)
!2718 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !2715)
!2719 = !DILocation(line: 255, column: 5, scope: !2700)
!2720 = !DILocation(line: 256, column: 37, scope: !2688)
!2721 = !DILocation(line: 256, column: 14, scope: !2688)
!2722 = !DILocation(line: 257, column: 37, scope: !2688)
!2723 = !DILocation(line: 257, column: 14, scope: !2688)
!2724 = !DILocation(line: 260, column: 12, scope: !2725)
!2725 = distinct !DILexicalBlock(scope: !2688, file: !3, line: 260, column: 7)
!2726 = !DILocation(line: 260, column: 20, scope: !2725)
!2727 = !DILocation(line: 260, column: 30, scope: !2725)
!2728 = !DILocation(line: 260, column: 50, scope: !2725)
!2729 = !DILocation(line: 260, column: 70, scope: !2725)
!2730 = !DILocation(line: 260, column: 23, scope: !2725)
!2731 = !DILocation(line: 260, column: 76, scope: !2725)
!2732 = !DILocation(line: 260, column: 7, scope: !2688)
!2733 = !DILocation(line: 261, column: 11, scope: !2725)
!2734 = !DILocation(line: 261, column: 5, scope: !2725)
!2735 = !DILocation(line: 263, column: 11, scope: !2725)
!2736 = !DILocation(line: 264, column: 3, scope: !2688)
!2737 = !DILocation(line: 265, column: 3, scope: !2688)
!2738 = !DILocation(line: 267, column: 1, scope: !2688)
!2739 = distinct !DISubprogram(name: "f_endswith", scope: !3, file: !3, line: 269, type: !2689, scopeLine: 269, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2740)
!2740 = !{!2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748}
!2741 = !DILocalVariable(name: "jq", arg: 1, scope: !2739, file: !3, line: 269, type: !201)
!2742 = !DILocalVariable(name: "a", arg: 2, scope: !2739, file: !3, line: 269, type: !112)
!2743 = !DILocalVariable(name: "b", arg: 3, scope: !2739, file: !3, line: 269, type: !112)
!2744 = !DILocalVariable(name: "astr", scope: !2739, file: !3, line: 272, type: !109)
!2745 = !DILocalVariable(name: "bstr", scope: !2739, file: !3, line: 273, type: !109)
!2746 = !DILocalVariable(name: "alen", scope: !2739, file: !3, line: 274, type: !2386)
!2747 = !DILocalVariable(name: "blen", scope: !2739, file: !3, line: 275, type: !2386)
!2748 = !DILocalVariable(name: "ret", scope: !2739, file: !3, line: 276, type: !112)
!2749 = !DILocation(line: 0, scope: !2739)
!2750 = !DILocation(line: 270, column: 7, scope: !2751)
!2751 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 270, column: 7)
!2752 = !DILocation(line: 270, column: 22, scope: !2751)
!2753 = !DILocation(line: 270, column: 40, scope: !2751)
!2754 = !DILocation(line: 270, column: 43, scope: !2751)
!2755 = !DILocation(line: 270, column: 58, scope: !2751)
!2756 = !DILocation(line: 270, column: 7, scope: !2739)
!2757 = !DILocation(line: 271, column: 29, scope: !2751)
!2758 = !DILocation(line: 0, scope: !2708, inlinedAt: !2759)
!2759 = distinct !DILocation(line: 271, column: 12, scope: !2751)
!2760 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !2759)
!2761 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !2759)
!2762 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !2759)
!2763 = !DILocation(line: 271, column: 5, scope: !2751)
!2764 = !DILocation(line: 272, column: 22, scope: !2739)
!2765 = !DILocation(line: 273, column: 22, scope: !2739)
!2766 = !DILocation(line: 274, column: 40, scope: !2739)
!2767 = !DILocation(line: 274, column: 17, scope: !2739)
!2768 = !DILocation(line: 275, column: 40, scope: !2739)
!2769 = !DILocation(line: 275, column: 17, scope: !2739)
!2770 = !DILocation(line: 278, column: 12, scope: !2771)
!2771 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 278, column: 7)
!2772 = !DILocation(line: 278, column: 19, scope: !2771)
!2773 = !DILocation(line: 279, column: 26, scope: !2771)
!2774 = !DILocation(line: 279, column: 18, scope: !2771)
!2775 = !DILocation(line: 279, column: 6, scope: !2771)
!2776 = !DILocation(line: 279, column: 47, scope: !2771)
!2777 = !DILocation(line: 278, column: 7, scope: !2739)
!2778 = !DILocation(line: 280, column: 11, scope: !2771)
!2779 = !DILocation(line: 280, column: 5, scope: !2771)
!2780 = !DILocation(line: 282, column: 11, scope: !2771)
!2781 = !DILocation(line: 283, column: 3, scope: !2739)
!2782 = !DILocation(line: 284, column: 3, scope: !2739)
!2783 = !DILocation(line: 286, column: 1, scope: !2739)
!2784 = distinct !DISubprogram(name: "f_ltrimstr", scope: !3, file: !3, line: 288, type: !2689, scopeLine: 288, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2785)
!2785 = !{!2786, !2787, !2788, !2789, !2790}
!2786 = !DILocalVariable(name: "jq", arg: 1, scope: !2784, file: !3, line: 288, type: !201)
!2787 = !DILocalVariable(name: "input", arg: 2, scope: !2784, file: !3, line: 288, type: !112)
!2788 = !DILocalVariable(name: "left", arg: 3, scope: !2784, file: !3, line: 288, type: !112)
!2789 = !DILocalVariable(name: "prefixlen", scope: !2784, file: !3, line: 297, type: !98)
!2790 = !DILocalVariable(name: "res", scope: !2784, file: !3, line: 298, type: !112)
!2791 = !DILocation(line: 0, scope: !2784)
!2792 = !DILocation(line: 289, column: 36, scope: !2793)
!2793 = distinct !DILexicalBlock(scope: !2784, file: !3, line: 289, column: 7)
!2794 = !DILocation(line: 289, column: 52, scope: !2793)
!2795 = !DILocation(line: 289, column: 19, scope: !2793)
!2796 = !DILocation(line: 289, column: 7, scope: !2793)
!2797 = !DILocation(line: 289, column: 68, scope: !2793)
!2798 = !DILocation(line: 289, column: 7, scope: !2784)
!2799 = !DILocation(line: 290, column: 5, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2793, file: !3, line: 289, column: 85)
!2801 = !DILocation(line: 291, column: 5, scope: !2800)
!2802 = !DILocation(line: 297, column: 19, scope: !2784)
!2803 = !DILocation(line: 298, column: 28, scope: !2784)
!2804 = !DILocation(line: 298, column: 51, scope: !2784)
!2805 = !DILocation(line: 299, column: 51, scope: !2784)
!2806 = !DILocation(line: 299, column: 28, scope: !2784)
!2807 = !DILocation(line: 299, column: 67, scope: !2784)
!2808 = !DILocation(line: 298, column: 12, scope: !2784)
!2809 = !DILocation(line: 300, column: 3, scope: !2784)
!2810 = !DILocation(line: 302, column: 1, scope: !2784)
!2811 = distinct !DISubprogram(name: "f_rtrimstr", scope: !3, file: !3, line: 304, type: !2689, scopeLine: 304, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2812)
!2812 = !{!2813, !2814, !2815, !2816}
!2813 = !DILocalVariable(name: "jq", arg: 1, scope: !2811, file: !3, line: 304, type: !201)
!2814 = !DILocalVariable(name: "input", arg: 2, scope: !2811, file: !3, line: 304, type: !112)
!2815 = !DILocalVariable(name: "right", arg: 3, scope: !2811, file: !3, line: 304, type: !112)
!2816 = !DILocalVariable(name: "res", scope: !2817, file: !3, line: 306, type: !112)
!2817 = distinct !DILexicalBlock(scope: !2818, file: !3, line: 305, column: 84)
!2818 = distinct !DILexicalBlock(scope: !2811, file: !3, line: 305, column: 7)
!2819 = !DILocation(line: 0, scope: !2811)
!2820 = !DILocation(line: 305, column: 34, scope: !2818)
!2821 = !DILocation(line: 305, column: 50, scope: !2818)
!2822 = !DILocation(line: 305, column: 19, scope: !2818)
!2823 = !DILocation(line: 305, column: 7, scope: !2818)
!2824 = !DILocation(line: 305, column: 67, scope: !2818)
!2825 = !DILocation(line: 305, column: 7, scope: !2811)
!2826 = !DILocation(line: 306, column: 30, scope: !2817)
!2827 = !DILocation(line: 307, column: 53, scope: !2817)
!2828 = !DILocation(line: 307, column: 30, scope: !2817)
!2829 = !DILocation(line: 307, column: 71, scope: !2817)
!2830 = !DILocation(line: 307, column: 69, scope: !2817)
!2831 = !DILocation(line: 306, column: 14, scope: !2817)
!2832 = !DILocation(line: 0, scope: !2817)
!2833 = !DILocation(line: 308, column: 5, scope: !2817)
!2834 = !DILocation(line: 309, column: 5, scope: !2817)
!2835 = !DILocation(line: 311, column: 3, scope: !2811)
!2836 = !DILocation(line: 312, column: 3, scope: !2811)
!2837 = !DILocation(line: 313, column: 1, scope: !2811)
!2838 = distinct !DISubprogram(name: "f_string_split", scope: !3, file: !3, line: 1167, type: !2689, scopeLine: 1167, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2839)
!2839 = !{!2840, !2841, !2842}
!2840 = !DILocalVariable(name: "jq", arg: 1, scope: !2838, file: !3, line: 1167, type: !201)
!2841 = !DILocalVariable(name: "a", arg: 2, scope: !2838, file: !3, line: 1167, type: !112)
!2842 = !DILocalVariable(name: "b", arg: 3, scope: !2838, file: !3, line: 1167, type: !112)
!2843 = !DILocation(line: 0, scope: !2838)
!2844 = !DILocation(line: 1168, column: 7, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2838, file: !3, line: 1168, column: 7)
!2846 = !DILocation(line: 1168, column: 22, scope: !2845)
!2847 = !DILocation(line: 1168, column: 40, scope: !2845)
!2848 = !DILocation(line: 1168, column: 43, scope: !2845)
!2849 = !DILocation(line: 1168, column: 58, scope: !2845)
!2850 = !DILocation(line: 1168, column: 7, scope: !2838)
!2851 = !DILocation(line: 1169, column: 29, scope: !2852)
!2852 = distinct !DILexicalBlock(scope: !2845, file: !3, line: 1168, column: 77)
!2853 = !DILocation(line: 0, scope: !2708, inlinedAt: !2854)
!2854 = distinct !DILocation(line: 1169, column: 12, scope: !2852)
!2855 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !2854)
!2856 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !2854)
!2857 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !2854)
!2858 = !DILocation(line: 1169, column: 5, scope: !2852)
!2859 = !DILocation(line: 1171, column: 10, scope: !2838)
!2860 = !DILocation(line: 1171, column: 3, scope: !2838)
!2861 = !DILocation(line: 1172, column: 1, scope: !2838)
!2862 = distinct !DISubprogram(name: "f_string_explode", scope: !3, file: !3, line: 1174, type: !374, scopeLine: 1174, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2863)
!2863 = !{!2864, !2865}
!2864 = !DILocalVariable(name: "jq", arg: 1, scope: !2862, file: !3, line: 1174, type: !201)
!2865 = !DILocalVariable(name: "a", arg: 2, scope: !2862, file: !3, line: 1174, type: !112)
!2866 = !DILocation(line: 0, scope: !2862)
!2867 = !DILocation(line: 1175, column: 7, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2862, file: !3, line: 1175, column: 7)
!2869 = !DILocation(line: 1175, column: 22, scope: !2868)
!2870 = !DILocation(line: 1175, column: 7, scope: !2862)
!2871 = !DILocation(line: 1176, column: 25, scope: !2872)
!2872 = distinct !DILexicalBlock(scope: !2868, file: !3, line: 1175, column: 41)
!2873 = !DILocalVariable(name: "bad", arg: 1, scope: !2874, file: !3, line: 73, type: !112)
!2874 = distinct !DISubprogram(name: "ret_error", scope: !3, file: !3, line: 73, type: !2875, scopeLine: 73, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2877)
!2875 = !DISubroutineType(types: !2876)
!2876 = !{!112, !112, !112}
!2877 = !{!2873, !2878}
!2878 = !DILocalVariable(name: "msg", arg: 2, scope: !2874, file: !3, line: 73, type: !112)
!2879 = !DILocation(line: 0, scope: !2874, inlinedAt: !2880)
!2880 = distinct !DILocation(line: 1176, column: 12, scope: !2872)
!2881 = !DILocation(line: 74, column: 3, scope: !2874, inlinedAt: !2880)
!2882 = !DILocation(line: 75, column: 10, scope: !2874, inlinedAt: !2880)
!2883 = !DILocation(line: 1176, column: 5, scope: !2872)
!2884 = !DILocation(line: 1178, column: 10, scope: !2862)
!2885 = !DILocation(line: 1178, column: 3, scope: !2862)
!2886 = !DILocation(line: 1179, column: 1, scope: !2862)
!2887 = distinct !DISubprogram(name: "f_string_implode", scope: !3, file: !3, line: 1185, type: !374, scopeLine: 1185, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2888)
!2888 = !{!2889, !2890}
!2889 = !DILocalVariable(name: "jq", arg: 1, scope: !2887, file: !3, line: 1185, type: !201)
!2890 = !DILocalVariable(name: "a", arg: 2, scope: !2887, file: !3, line: 1185, type: !112)
!2891 = !DILocation(line: 0, scope: !2887)
!2892 = !DILocation(line: 1186, column: 7, scope: !2893)
!2893 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 1186, column: 7)
!2894 = !DILocation(line: 1186, column: 22, scope: !2893)
!2895 = !DILocation(line: 1186, column: 7, scope: !2887)
!2896 = !DILocation(line: 1187, column: 25, scope: !2897)
!2897 = distinct !DILexicalBlock(scope: !2893, file: !3, line: 1186, column: 40)
!2898 = !DILocation(line: 0, scope: !2874, inlinedAt: !2899)
!2899 = distinct !DILocation(line: 1187, column: 12, scope: !2897)
!2900 = !DILocation(line: 74, column: 3, scope: !2874, inlinedAt: !2899)
!2901 = !DILocation(line: 75, column: 10, scope: !2874, inlinedAt: !2899)
!2902 = !DILocation(line: 1187, column: 5, scope: !2897)
!2903 = !DILocation(line: 1189, column: 10, scope: !2887)
!2904 = !DILocation(line: 1189, column: 3, scope: !2887)
!2905 = !DILocation(line: 1190, column: 1, scope: !2887)
!2906 = distinct !DISubprogram(name: "f_string_indexes", scope: !3, file: !3, line: 1181, type: !2689, scopeLine: 1181, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2907)
!2907 = !{!2908, !2909, !2910}
!2908 = !DILocalVariable(name: "jq", arg: 1, scope: !2906, file: !3, line: 1181, type: !201)
!2909 = !DILocalVariable(name: "a", arg: 2, scope: !2906, file: !3, line: 1181, type: !112)
!2910 = !DILocalVariable(name: "b", arg: 3, scope: !2906, file: !3, line: 1181, type: !112)
!2911 = !DILocation(line: 0, scope: !2906)
!2912 = !DILocation(line: 1182, column: 10, scope: !2906)
!2913 = !DILocation(line: 1182, column: 3, scope: !2906)
!2914 = distinct !DISubprogram(name: "f_setpath", scope: !3, file: !3, line: 1192, type: !502, scopeLine: 1192, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2915)
!2915 = !{!2916, !2917, !2918, !2919}
!2916 = !DILocalVariable(name: "jq", arg: 1, scope: !2914, file: !3, line: 1192, type: !201)
!2917 = !DILocalVariable(name: "a", arg: 2, scope: !2914, file: !3, line: 1192, type: !112)
!2918 = !DILocalVariable(name: "b", arg: 3, scope: !2914, file: !3, line: 1192, type: !112)
!2919 = !DILocalVariable(name: "c", arg: 4, scope: !2914, file: !3, line: 1192, type: !112)
!2920 = !DILocation(line: 0, scope: !2914)
!2921 = !DILocation(line: 1192, column: 50, scope: !2914)
!2922 = !DILocation(line: 1192, column: 62, scope: !2914)
!2923 = !DILocation(line: 1192, column: 55, scope: !2914)
!2924 = distinct !DISubprogram(name: "f_getpath", scope: !3, file: !3, line: 1194, type: !2689, scopeLine: 1194, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2925)
!2925 = !{!2926, !2927, !2928}
!2926 = !DILocalVariable(name: "jq", arg: 1, scope: !2924, file: !3, line: 1194, type: !201)
!2927 = !DILocalVariable(name: "a", arg: 2, scope: !2924, file: !3, line: 1194, type: !112)
!2928 = !DILocalVariable(name: "b", arg: 3, scope: !2924, file: !3, line: 1194, type: !112)
!2929 = !DILocation(line: 0, scope: !2924)
!2930 = !DILocation(line: 1195, column: 47, scope: !2924)
!2931 = !DILocation(line: 1195, column: 59, scope: !2924)
!2932 = !DILocation(line: 1195, column: 36, scope: !2924)
!2933 = !DILocation(line: 1195, column: 10, scope: !2924)
!2934 = !DILocation(line: 1195, column: 3, scope: !2924)
!2935 = distinct !DISubprogram(name: "f_delpaths", scope: !3, file: !3, line: 1197, type: !2689, scopeLine: 1197, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2936)
!2936 = !{!2937, !2938, !2939}
!2937 = !DILocalVariable(name: "jq", arg: 1, scope: !2935, file: !3, line: 1197, type: !201)
!2938 = !DILocalVariable(name: "a", arg: 2, scope: !2935, file: !3, line: 1197, type: !112)
!2939 = !DILocalVariable(name: "b", arg: 3, scope: !2935, file: !3, line: 1197, type: !112)
!2940 = !DILocation(line: 0, scope: !2935)
!2941 = !DILocation(line: 1197, column: 57, scope: !2935)
!2942 = !DILocation(line: 1197, column: 50, scope: !2935)
!2943 = distinct !DISubprogram(name: "f_has", scope: !3, file: !3, line: 1198, type: !2689, scopeLine: 1198, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2944)
!2944 = !{!2945, !2946, !2947}
!2945 = !DILocalVariable(name: "jq", arg: 1, scope: !2943, file: !3, line: 1198, type: !201)
!2946 = !DILocalVariable(name: "a", arg: 2, scope: !2943, file: !3, line: 1198, type: !112)
!2947 = !DILocalVariable(name: "b", arg: 3, scope: !2943, file: !3, line: 1198, type: !112)
!2948 = !DILocation(line: 0, scope: !2943)
!2949 = !DILocation(line: 1198, column: 52, scope: !2943)
!2950 = !DILocation(line: 1198, column: 45, scope: !2943)
!2951 = distinct !DISubprogram(name: "f_equal", scope: !3, file: !3, line: 410, type: !502, scopeLine: 410, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2952)
!2952 = !{!2953, !2954, !2955, !2956}
!2953 = !DILocalVariable(name: "jq", arg: 1, scope: !2951, file: !3, line: 410, type: !201)
!2954 = !DILocalVariable(name: "input", arg: 2, scope: !2951, file: !3, line: 410, type: !112)
!2955 = !DILocalVariable(name: "a", arg: 3, scope: !2951, file: !3, line: 410, type: !112)
!2956 = !DILocalVariable(name: "b", arg: 4, scope: !2951, file: !3, line: 410, type: !112)
!2957 = !DILocation(line: 0, scope: !2951)
!2958 = !DILocation(line: 410, column: 52, scope: !2951)
!2959 = !DILocation(line: 411, column: 3, scope: !2951)
!2960 = !DILocation(line: 412, column: 18, scope: !2951)
!2961 = !DILocation(line: 412, column: 10, scope: !2951)
!2962 = !DILocation(line: 412, column: 3, scope: !2951)
!2963 = distinct !DISubprogram(name: "f_notequal", scope: !3, file: !3, line: 415, type: !502, scopeLine: 415, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2964)
!2964 = !{!2965, !2966, !2967, !2968}
!2965 = !DILocalVariable(name: "jq", arg: 1, scope: !2963, file: !3, line: 415, type: !201)
!2966 = !DILocalVariable(name: "input", arg: 2, scope: !2963, file: !3, line: 415, type: !112)
!2967 = !DILocalVariable(name: "a", arg: 3, scope: !2963, file: !3, line: 415, type: !112)
!2968 = !DILocalVariable(name: "b", arg: 4, scope: !2963, file: !3, line: 415, type: !112)
!2969 = !DILocation(line: 0, scope: !2963)
!2970 = !DILocation(line: 415, column: 55, scope: !2963)
!2971 = !DILocation(line: 416, column: 3, scope: !2963)
!2972 = !DILocation(line: 417, column: 19, scope: !2963)
!2973 = !DILocation(line: 417, column: 18, scope: !2963)
!2974 = !DILocation(line: 417, column: 10, scope: !2963)
!2975 = !DILocation(line: 417, column: 3, scope: !2963)
!2976 = distinct !DISubprogram(name: "f_less", scope: !3, file: !3, line: 436, type: !502, scopeLine: 436, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2977)
!2977 = !{!2978, !2979, !2980, !2981}
!2978 = !DILocalVariable(name: "jq", arg: 1, scope: !2976, file: !3, line: 436, type: !201)
!2979 = !DILocalVariable(name: "input", arg: 2, scope: !2976, file: !3, line: 436, type: !112)
!2980 = !DILocalVariable(name: "a", arg: 3, scope: !2976, file: !3, line: 436, type: !112)
!2981 = !DILocalVariable(name: "b", arg: 4, scope: !2976, file: !3, line: 436, type: !112)
!2982 = !DILocation(line: 0, scope: !2976)
!2983 = !DILocation(line: 436, column: 51, scope: !2976)
!2984 = !DILocation(line: 437, column: 10, scope: !2976)
!2985 = !DILocalVariable(name: "input", arg: 1, scope: !2986, file: !3, line: 427, type: !112)
!2986 = distinct !DISubprogram(name: "order_cmp", scope: !3, file: !3, line: 427, type: !2987, scopeLine: 427, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2989)
!2987 = !DISubroutineType(types: !2988)
!2988 = !{!112, !112, !112, !112, !71}
!2989 = !{!2985, !2990, !2991, !2992, !2993}
!2990 = !DILocalVariable(name: "a", arg: 2, scope: !2986, file: !3, line: 427, type: !112)
!2991 = !DILocalVariable(name: "b", arg: 3, scope: !2986, file: !3, line: 427, type: !112)
!2992 = !DILocalVariable(name: "op", arg: 4, scope: !2986, file: !3, line: 427, type: !71)
!2993 = !DILocalVariable(name: "r", scope: !2986, file: !3, line: 429, type: !98)
!2994 = !DILocation(line: 0, scope: !2986, inlinedAt: !2995)
!2995 = distinct !DILocation(line: 437, column: 10, scope: !2976)
!2996 = !DILocation(line: 428, column: 3, scope: !2986, inlinedAt: !2995)
!2997 = !DILocation(line: 429, column: 11, scope: !2986, inlinedAt: !2995)
!2998 = !DILocation(line: 430, column: 37, scope: !2986, inlinedAt: !2995)
!2999 = !DILocation(line: 430, column: 10, scope: !2986, inlinedAt: !2995)
!3000 = !DILocation(line: 437, column: 3, scope: !2976)
!3001 = distinct !DISubprogram(name: "f_greater", scope: !3, file: !3, line: 440, type: !502, scopeLine: 440, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3002)
!3002 = !{!3003, !3004, !3005, !3006}
!3003 = !DILocalVariable(name: "jq", arg: 1, scope: !3001, file: !3, line: 440, type: !201)
!3004 = !DILocalVariable(name: "input", arg: 2, scope: !3001, file: !3, line: 440, type: !112)
!3005 = !DILocalVariable(name: "a", arg: 3, scope: !3001, file: !3, line: 440, type: !112)
!3006 = !DILocalVariable(name: "b", arg: 4, scope: !3001, file: !3, line: 440, type: !112)
!3007 = !DILocation(line: 0, scope: !3001)
!3008 = !DILocation(line: 440, column: 54, scope: !3001)
!3009 = !DILocation(line: 441, column: 10, scope: !3001)
!3010 = !DILocation(line: 0, scope: !2986, inlinedAt: !3011)
!3011 = distinct !DILocation(line: 441, column: 10, scope: !3001)
!3012 = !DILocation(line: 428, column: 3, scope: !2986, inlinedAt: !3011)
!3013 = !DILocation(line: 429, column: 11, scope: !2986, inlinedAt: !3011)
!3014 = !DILocation(line: 433, column: 40, scope: !2986, inlinedAt: !3011)
!3015 = !DILocation(line: 430, column: 10, scope: !2986, inlinedAt: !3011)
!3016 = !DILocation(line: 441, column: 3, scope: !3001)
!3017 = distinct !DISubprogram(name: "f_lesseq", scope: !3, file: !3, line: 444, type: !502, scopeLine: 444, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3018)
!3018 = !{!3019, !3020, !3021, !3022}
!3019 = !DILocalVariable(name: "jq", arg: 1, scope: !3017, file: !3, line: 444, type: !201)
!3020 = !DILocalVariable(name: "input", arg: 2, scope: !3017, file: !3, line: 444, type: !112)
!3021 = !DILocalVariable(name: "a", arg: 3, scope: !3017, file: !3, line: 444, type: !112)
!3022 = !DILocalVariable(name: "b", arg: 4, scope: !3017, file: !3, line: 444, type: !112)
!3023 = !DILocation(line: 0, scope: !3017)
!3024 = !DILocation(line: 444, column: 53, scope: !3017)
!3025 = !DILocation(line: 445, column: 10, scope: !3017)
!3026 = !DILocation(line: 0, scope: !2986, inlinedAt: !3027)
!3027 = distinct !DILocation(line: 445, column: 10, scope: !3017)
!3028 = !DILocation(line: 428, column: 3, scope: !2986, inlinedAt: !3027)
!3029 = !DILocation(line: 429, column: 11, scope: !2986, inlinedAt: !3027)
!3030 = !DILocation(line: 431, column: 39, scope: !2986, inlinedAt: !3027)
!3031 = !DILocation(line: 430, column: 10, scope: !2986, inlinedAt: !3027)
!3032 = !DILocation(line: 445, column: 3, scope: !3017)
!3033 = distinct !DISubprogram(name: "f_greatereq", scope: !3, file: !3, line: 448, type: !502, scopeLine: 448, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3034)
!3034 = !{!3035, !3036, !3037, !3038}
!3035 = !DILocalVariable(name: "jq", arg: 1, scope: !3033, file: !3, line: 448, type: !201)
!3036 = !DILocalVariable(name: "input", arg: 2, scope: !3033, file: !3, line: 448, type: !112)
!3037 = !DILocalVariable(name: "a", arg: 3, scope: !3033, file: !3, line: 448, type: !112)
!3038 = !DILocalVariable(name: "b", arg: 4, scope: !3033, file: !3, line: 448, type: !112)
!3039 = !DILocation(line: 0, scope: !3033)
!3040 = !DILocation(line: 448, column: 56, scope: !3033)
!3041 = !DILocation(line: 449, column: 10, scope: !3033)
!3042 = !DILocation(line: 0, scope: !2986, inlinedAt: !3043)
!3043 = distinct !DILocation(line: 449, column: 10, scope: !3033)
!3044 = !DILocation(line: 428, column: 3, scope: !2986, inlinedAt: !3043)
!3045 = !DILocation(line: 429, column: 11, scope: !2986, inlinedAt: !3043)
!3046 = !DILocation(line: 432, column: 42, scope: !2986, inlinedAt: !3043)
!3047 = !DILocation(line: 430, column: 10, scope: !2986, inlinedAt: !3043)
!3048 = !DILocation(line: 449, column: 3, scope: !3033)
!3049 = distinct !DISubprogram(name: "f_contains", scope: !3, file: !3, line: 452, type: !2689, scopeLine: 452, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3050)
!3050 = !{!3051, !3052, !3053}
!3051 = !DILocalVariable(name: "jq", arg: 1, scope: !3049, file: !3, line: 452, type: !201)
!3052 = !DILocalVariable(name: "a", arg: 2, scope: !3049, file: !3, line: 452, type: !112)
!3053 = !DILocalVariable(name: "b", arg: 3, scope: !3049, file: !3, line: 452, type: !112)
!3054 = !DILocation(line: 0, scope: !3049)
!3055 = !DILocation(line: 453, column: 7, scope: !3056)
!3056 = distinct !DILexicalBlock(scope: !3049, file: !3, line: 453, column: 7)
!3057 = !DILocation(line: 453, column: 25, scope: !3056)
!3058 = !DILocation(line: 453, column: 22, scope: !3056)
!3059 = !DILocation(line: 453, column: 7, scope: !3049)
!3060 = !DILocation(line: 454, column: 20, scope: !3061)
!3061 = distinct !DILexicalBlock(scope: !3056, file: !3, line: 453, column: 41)
!3062 = !DILocation(line: 454, column: 12, scope: !3061)
!3063 = !DILocation(line: 454, column: 5, scope: !3061)
!3064 = !DILocation(line: 456, column: 12, scope: !3065)
!3065 = distinct !DILexicalBlock(scope: !3056, file: !3, line: 455, column: 10)
!3066 = !DILocation(line: 456, column: 5, scope: !3065)
!3067 = !DILocation(line: 458, column: 1, scope: !3049)
!3068 = distinct !DISubprogram(name: "f_length", scope: !3, file: !3, line: 487, type: !374, scopeLine: 487, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3069)
!3069 = !{!3070, !3071, !3072}
!3070 = !DILocalVariable(name: "jq", arg: 1, scope: !3068, file: !3, line: 487, type: !201)
!3071 = !DILocalVariable(name: "input", arg: 2, scope: !3068, file: !3, line: 487, type: !112)
!3072 = !DILocalVariable(name: "r", scope: !3073, file: !3, line: 495, type: !112)
!3073 = distinct !DILexicalBlock(scope: !3074, file: !3, line: 494, column: 52)
!3074 = distinct !DILexicalBlock(scope: !3075, file: !3, line: 494, column: 14)
!3075 = distinct !DILexicalBlock(scope: !3076, file: !3, line: 492, column: 14)
!3076 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 490, column: 14)
!3077 = distinct !DILexicalBlock(scope: !3068, file: !3, line: 488, column: 7)
!3078 = !DILocation(line: 0, scope: !3068)
!3079 = !DILocation(line: 488, column: 7, scope: !3077)
!3080 = !DILocation(line: 488, column: 26, scope: !3077)
!3081 = !DILocation(line: 488, column: 7, scope: !3068)
!3082 = !DILocation(line: 489, column: 22, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 488, column: 44)
!3084 = !DILocation(line: 489, column: 12, scope: !3083)
!3085 = !DILocation(line: 0, scope: !3073)
!3086 = !DILocation(line: 489, column: 5, scope: !3083)
!3087 = !DILocation(line: 490, column: 14, scope: !3076)
!3088 = !DILocation(line: 490, column: 33, scope: !3076)
!3089 = !DILocation(line: 490, column: 14, scope: !3077)
!3090 = !DILocation(line: 491, column: 22, scope: !3091)
!3091 = distinct !DILexicalBlock(scope: !3076, file: !3, line: 490, column: 52)
!3092 = !DILocation(line: 491, column: 12, scope: !3091)
!3093 = !DILocation(line: 491, column: 5, scope: !3091)
!3094 = !DILocation(line: 492, column: 14, scope: !3075)
!3095 = !DILocation(line: 492, column: 33, scope: !3075)
!3096 = !DILocation(line: 492, column: 14, scope: !3076)
!3097 = !DILocation(line: 493, column: 22, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3075, file: !3, line: 492, column: 52)
!3099 = !DILocation(line: 493, column: 12, scope: !3098)
!3100 = !DILocation(line: 493, column: 5, scope: !3098)
!3101 = !DILocation(line: 494, column: 14, scope: !3074)
!3102 = !DILocation(line: 494, column: 33, scope: !3074)
!3103 = !DILocation(line: 494, column: 14, scope: !3075)
!3104 = !DILocation(line: 495, column: 27, scope: !3073)
!3105 = !DILocation(line: 495, column: 22, scope: !3073)
!3106 = !DILocation(line: 495, column: 12, scope: !3073)
!3107 = !DILocation(line: 496, column: 5, scope: !3073)
!3108 = !DILocation(line: 497, column: 5, scope: !3073)
!3109 = !DILocation(line: 498, column: 14, scope: !3110)
!3110 = distinct !DILexicalBlock(scope: !3074, file: !3, line: 498, column: 14)
!3111 = !DILocation(line: 498, column: 33, scope: !3110)
!3112 = !DILocation(line: 498, column: 14, scope: !3074)
!3113 = !DILocation(line: 499, column: 5, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 498, column: 50)
!3115 = !DILocation(line: 500, column: 12, scope: !3114)
!3116 = !DILocation(line: 500, column: 5, scope: !3114)
!3117 = !DILocation(line: 0, scope: !385, inlinedAt: !3118)
!3118 = distinct !DILocation(line: 502, column: 12, scope: !3119)
!3119 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 501, column: 10)
!3120 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !3118)
!3121 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !3118)
!3122 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !3118)
!3123 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !3118)
!3124 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !3118)
!3125 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !3118)
!3126 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !3118)
!3127 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !3118)
!3128 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !3118)
!3129 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !3118)
!3130 = !DILocation(line: 502, column: 5, scope: !3119)
!3131 = !DILocation(line: 504, column: 1, scope: !3068)
!3132 = distinct !DISubprogram(name: "f_utf8bytelength", scope: !3, file: !3, line: 514, type: !374, scopeLine: 514, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3133)
!3133 = !{!3134, !3135}
!3134 = !DILocalVariable(name: "jq", arg: 1, scope: !3132, file: !3, line: 514, type: !201)
!3135 = !DILocalVariable(name: "input", arg: 2, scope: !3132, file: !3, line: 514, type: !112)
!3136 = !DILocation(line: 0, scope: !3132)
!3137 = !DILocation(line: 515, column: 7, scope: !3138)
!3138 = distinct !DILexicalBlock(scope: !3132, file: !3, line: 515, column: 7)
!3139 = !DILocation(line: 515, column: 26, scope: !3138)
!3140 = !DILocation(line: 515, column: 7, scope: !3132)
!3141 = !DILocation(line: 0, scope: !385, inlinedAt: !3142)
!3142 = distinct !DILocation(line: 516, column: 12, scope: !3138)
!3143 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !3142)
!3144 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !3142)
!3145 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !3142)
!3146 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !3142)
!3147 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !3142)
!3148 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !3142)
!3149 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !3142)
!3150 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !3142)
!3151 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !3142)
!3152 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !3142)
!3153 = !DILocation(line: 516, column: 5, scope: !3138)
!3154 = !DILocation(line: 517, column: 20, scope: !3132)
!3155 = !DILocation(line: 517, column: 10, scope: !3132)
!3156 = !DILocation(line: 517, column: 3, scope: !3132)
!3157 = !DILocation(line: 518, column: 1, scope: !3132)
!3158 = distinct !DISubprogram(name: "f_type", scope: !3, file: !3, line: 1064, type: !374, scopeLine: 1064, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3159)
!3159 = !{!3160, !3161, !3162}
!3160 = !DILocalVariable(name: "jq", arg: 1, scope: !3158, file: !3, line: 1064, type: !201)
!3161 = !DILocalVariable(name: "input", arg: 2, scope: !3158, file: !3, line: 1064, type: !112)
!3162 = !DILocalVariable(name: "out", scope: !3158, file: !3, line: 1065, type: !112)
!3163 = !DILocation(line: 0, scope: !3158)
!3164 = !DILocation(line: 1065, column: 35, scope: !3158)
!3165 = !DILocation(line: 1065, column: 22, scope: !3158)
!3166 = !DILocation(line: 1065, column: 12, scope: !3158)
!3167 = !DILocation(line: 1066, column: 3, scope: !3158)
!3168 = !DILocation(line: 1067, column: 3, scope: !3158)
!3169 = distinct !DISubprogram(name: "f_isinfinite", scope: !3, file: !3, line: 1070, type: !374, scopeLine: 1070, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3170)
!3170 = !{!3171, !3172, !3173, !3174}
!3171 = !DILocalVariable(name: "jq", arg: 1, scope: !3169, file: !3, line: 1070, type: !201)
!3172 = !DILocalVariable(name: "input", arg: 2, scope: !3169, file: !3, line: 1070, type: !112)
!3173 = !DILocalVariable(name: "k", scope: !3169, file: !3, line: 1071, type: !2372)
!3174 = !DILocalVariable(name: "n", scope: !3169, file: !3, line: 1076, type: !127)
!3175 = !DILocation(line: 0, scope: !3169)
!3176 = !DILocation(line: 1071, column: 15, scope: !3169)
!3177 = !DILocation(line: 1072, column: 9, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3169, file: !3, line: 1072, column: 7)
!3179 = !DILocation(line: 1072, column: 7, scope: !3169)
!3180 = !DILocation(line: 1073, column: 5, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 1072, column: 28)
!3182 = !DILocation(line: 1074, column: 12, scope: !3181)
!3183 = !DILocation(line: 1074, column: 5, scope: !3181)
!3184 = !DILocation(line: 1076, column: 14, scope: !3169)
!3185 = !DILocation(line: 1077, column: 3, scope: !3169)
!3186 = !DILocation(line: 1078, column: 10, scope: !3169)
!3187 = !DILocation(line: 1078, column: 21, scope: !3169)
!3188 = !DILocation(line: 1078, column: 33, scope: !3169)
!3189 = !DILocation(line: 1079, column: 1, scope: !3169)
!3190 = distinct !DISubprogram(name: "f_isnan", scope: !3, file: !3, line: 1081, type: !374, scopeLine: 1081, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3191)
!3191 = !{!3192, !3193, !3194, !3195}
!3192 = !DILocalVariable(name: "jq", arg: 1, scope: !3190, file: !3, line: 1081, type: !201)
!3193 = !DILocalVariable(name: "input", arg: 2, scope: !3190, file: !3, line: 1081, type: !112)
!3194 = !DILocalVariable(name: "k", scope: !3190, file: !3, line: 1082, type: !2372)
!3195 = !DILocalVariable(name: "n", scope: !3190, file: !3, line: 1087, type: !127)
!3196 = !DILocation(line: 0, scope: !3190)
!3197 = !DILocation(line: 1082, column: 15, scope: !3190)
!3198 = !DILocation(line: 1083, column: 9, scope: !3199)
!3199 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 1083, column: 7)
!3200 = !DILocation(line: 1083, column: 7, scope: !3190)
!3201 = !DILocation(line: 1084, column: 5, scope: !3202)
!3202 = distinct !DILexicalBlock(scope: !3199, file: !3, line: 1083, column: 28)
!3203 = !DILocation(line: 1085, column: 12, scope: !3202)
!3204 = !DILocation(line: 1085, column: 5, scope: !3202)
!3205 = !DILocation(line: 1087, column: 14, scope: !3190)
!3206 = !DILocation(line: 1088, column: 3, scope: !3190)
!3207 = !DILocation(line: 1089, column: 10, scope: !3190)
!3208 = !DILocation(line: 1089, column: 21, scope: !3190)
!3209 = !DILocation(line: 1089, column: 33, scope: !3190)
!3210 = !DILocation(line: 1090, column: 1, scope: !3190)
!3211 = distinct !DISubprogram(name: "f_isnormal", scope: !3, file: !3, line: 1092, type: !374, scopeLine: 1092, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3212)
!3212 = !{!3213, !3214, !3215, !3216}
!3213 = !DILocalVariable(name: "jq", arg: 1, scope: !3211, file: !3, line: 1092, type: !201)
!3214 = !DILocalVariable(name: "input", arg: 2, scope: !3211, file: !3, line: 1092, type: !112)
!3215 = !DILocalVariable(name: "k", scope: !3211, file: !3, line: 1093, type: !2372)
!3216 = !DILocalVariable(name: "n", scope: !3211, file: !3, line: 1098, type: !127)
!3217 = !DILocation(line: 0, scope: !3211)
!3218 = !DILocation(line: 1093, column: 15, scope: !3211)
!3219 = !DILocation(line: 1094, column: 9, scope: !3220)
!3220 = distinct !DILexicalBlock(scope: !3211, file: !3, line: 1094, column: 7)
!3221 = !DILocation(line: 1094, column: 7, scope: !3211)
!3222 = !DILocation(line: 1095, column: 5, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3220, file: !3, line: 1094, column: 28)
!3224 = !DILocation(line: 1096, column: 12, scope: !3223)
!3225 = !DILocation(line: 1096, column: 5, scope: !3223)
!3226 = !DILocation(line: 1098, column: 14, scope: !3211)
!3227 = !DILocation(line: 1099, column: 3, scope: !3211)
!3228 = !DILocation(line: 1100, column: 10, scope: !3211)
!3229 = !DILocation(line: 1100, column: 24, scope: !3211)
!3230 = !DILocation(line: 1100, column: 36, scope: !3211)
!3231 = !DILocation(line: 1101, column: 1, scope: !3211)
!3232 = distinct !DISubprogram(name: "f_infinite", scope: !3, file: !3, line: 1103, type: !374, scopeLine: 1103, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3233)
!3233 = !{!3234, !3235}
!3234 = !DILocalVariable(name: "jq", arg: 1, scope: !3232, file: !3, line: 1103, type: !201)
!3235 = !DILocalVariable(name: "input", arg: 2, scope: !3232, file: !3, line: 1103, type: !112)
!3236 = !DILocation(line: 0, scope: !3232)
!3237 = !DILocation(line: 1104, column: 3, scope: !3232)
!3238 = !DILocation(line: 1105, column: 10, scope: !3232)
!3239 = !DILocation(line: 1105, column: 3, scope: !3232)
!3240 = distinct !DISubprogram(name: "f_nan", scope: !3, file: !3, line: 1108, type: !374, scopeLine: 1108, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3241)
!3241 = !{!3242, !3243}
!3242 = !DILocalVariable(name: "jq", arg: 1, scope: !3240, file: !3, line: 1108, type: !201)
!3243 = !DILocalVariable(name: "input", arg: 2, scope: !3240, file: !3, line: 1108, type: !112)
!3244 = !DILocation(line: 0, scope: !3240)
!3245 = !DILocation(line: 1109, column: 3, scope: !3240)
!3246 = !DILocation(line: 1110, column: 10, scope: !3240)
!3247 = !DILocation(line: 1110, column: 3, scope: !3240)
!3248 = distinct !DISubprogram(name: "f_sort", scope: !3, file: !3, line: 776, type: !374, scopeLine: 776, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3249)
!3249 = !{!3250, !3251}
!3250 = !DILocalVariable(name: "jq", arg: 1, scope: !3248, file: !3, line: 776, type: !201)
!3251 = !DILocalVariable(name: "input", arg: 2, scope: !3248, file: !3, line: 776, type: !112)
!3252 = !DILocation(line: 0, scope: !3248)
!3253 = !DILocation(line: 777, column: 7, scope: !3254)
!3254 = distinct !DILexicalBlock(scope: !3248, file: !3, line: 777, column: 7)
!3255 = !DILocation(line: 777, column: 26, scope: !3254)
!3256 = !DILocation(line: 777, column: 7, scope: !3248)
!3257 = !DILocation(line: 778, column: 27, scope: !3258)
!3258 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 777, column: 44)
!3259 = !DILocation(line: 778, column: 12, scope: !3258)
!3260 = !DILocation(line: 778, column: 5, scope: !3258)
!3261 = !DILocation(line: 0, scope: !385, inlinedAt: !3262)
!3262 = distinct !DILocation(line: 780, column: 12, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 779, column: 10)
!3264 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !3262)
!3265 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !3262)
!3266 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !3262)
!3267 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !3262)
!3268 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !3262)
!3269 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !3262)
!3270 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !3262)
!3271 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !3262)
!3272 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !3262)
!3273 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !3262)
!3274 = !DILocation(line: 780, column: 5, scope: !3263)
!3275 = !DILocation(line: 782, column: 1, scope: !3248)
!3276 = distinct !DISubprogram(name: "f_sort_by_impl", scope: !3, file: !3, line: 784, type: !2689, scopeLine: 784, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3277)
!3277 = !{!3278, !3279, !3280}
!3278 = !DILocalVariable(name: "jq", arg: 1, scope: !3276, file: !3, line: 784, type: !201)
!3279 = !DILocalVariable(name: "input", arg: 2, scope: !3276, file: !3, line: 784, type: !112)
!3280 = !DILocalVariable(name: "keys", arg: 3, scope: !3276, file: !3, line: 784, type: !112)
!3281 = !DILocation(line: 0, scope: !3276)
!3282 = !DILocation(line: 785, column: 7, scope: !3283)
!3283 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 785, column: 7)
!3284 = !DILocation(line: 785, column: 26, scope: !3283)
!3285 = !DILocation(line: 785, column: 43, scope: !3283)
!3286 = !DILocation(line: 786, column: 7, scope: !3283)
!3287 = !DILocation(line: 786, column: 25, scope: !3283)
!3288 = !DILocation(line: 786, column: 42, scope: !3283)
!3289 = !DILocation(line: 787, column: 23, scope: !3283)
!3290 = !DILocation(line: 787, column: 7, scope: !3283)
!3291 = !DILocation(line: 787, column: 58, scope: !3283)
!3292 = !DILocation(line: 787, column: 42, scope: !3283)
!3293 = !DILocation(line: 787, column: 39, scope: !3283)
!3294 = !DILocation(line: 785, column: 7, scope: !3276)
!3295 = !DILocation(line: 788, column: 12, scope: !3296)
!3296 = distinct !DILexicalBlock(scope: !3283, file: !3, line: 787, column: 74)
!3297 = !DILocation(line: 788, column: 5, scope: !3296)
!3298 = !DILocation(line: 790, column: 12, scope: !3299)
!3299 = distinct !DILexicalBlock(scope: !3283, file: !3, line: 789, column: 10)
!3300 = !DILocation(line: 790, column: 5, scope: !3299)
!3301 = !DILocation(line: 792, column: 1, scope: !3276)
!3302 = distinct !DISubprogram(name: "f_group_by_impl", scope: !3, file: !3, line: 794, type: !2689, scopeLine: 794, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3303)
!3303 = !{!3304, !3305, !3306}
!3304 = !DILocalVariable(name: "jq", arg: 1, scope: !3302, file: !3, line: 794, type: !201)
!3305 = !DILocalVariable(name: "input", arg: 2, scope: !3302, file: !3, line: 794, type: !112)
!3306 = !DILocalVariable(name: "keys", arg: 3, scope: !3302, file: !3, line: 794, type: !112)
!3307 = !DILocation(line: 0, scope: !3302)
!3308 = !DILocation(line: 795, column: 7, scope: !3309)
!3309 = distinct !DILexicalBlock(scope: !3302, file: !3, line: 795, column: 7)
!3310 = !DILocation(line: 795, column: 26, scope: !3309)
!3311 = !DILocation(line: 795, column: 43, scope: !3309)
!3312 = !DILocation(line: 796, column: 7, scope: !3309)
!3313 = !DILocation(line: 796, column: 25, scope: !3309)
!3314 = !DILocation(line: 796, column: 42, scope: !3309)
!3315 = !DILocation(line: 797, column: 23, scope: !3309)
!3316 = !DILocation(line: 797, column: 7, scope: !3309)
!3317 = !DILocation(line: 797, column: 58, scope: !3309)
!3318 = !DILocation(line: 797, column: 42, scope: !3309)
!3319 = !DILocation(line: 797, column: 39, scope: !3309)
!3320 = !DILocation(line: 795, column: 7, scope: !3302)
!3321 = !DILocation(line: 798, column: 12, scope: !3322)
!3322 = distinct !DILexicalBlock(scope: !3309, file: !3, line: 797, column: 74)
!3323 = !DILocation(line: 798, column: 5, scope: !3322)
!3324 = !DILocation(line: 800, column: 12, scope: !3325)
!3325 = distinct !DILexicalBlock(scope: !3309, file: !3, line: 799, column: 10)
!3326 = !DILocation(line: 800, column: 5, scope: !3325)
!3327 = !DILocation(line: 802, column: 1, scope: !3302)
!3328 = distinct !DISubprogram(name: "f_min", scope: !3, file: !3, line: 1047, type: !374, scopeLine: 1047, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3329)
!3329 = !{!3330, !3331}
!3330 = !DILocalVariable(name: "jq", arg: 1, scope: !3328, file: !3, line: 1047, type: !201)
!3331 = !DILocalVariable(name: "x", arg: 2, scope: !3328, file: !3, line: 1047, type: !112)
!3332 = !DILocation(line: 0, scope: !3328)
!3333 = !DILocation(line: 1048, column: 23, scope: !3328)
!3334 = !DILocation(line: 1048, column: 10, scope: !3328)
!3335 = !DILocation(line: 1048, column: 3, scope: !3328)
!3336 = distinct !DISubprogram(name: "f_max", scope: !3, file: !3, line: 1051, type: !374, scopeLine: 1051, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3337)
!3337 = !{!3338, !3339}
!3338 = !DILocalVariable(name: "jq", arg: 1, scope: !3336, file: !3, line: 1051, type: !201)
!3339 = !DILocalVariable(name: "x", arg: 2, scope: !3336, file: !3, line: 1051, type: !112)
!3340 = !DILocation(line: 0, scope: !3336)
!3341 = !DILocation(line: 1052, column: 23, scope: !3336)
!3342 = !DILocation(line: 1052, column: 10, scope: !3336)
!3343 = !DILocation(line: 1052, column: 3, scope: !3336)
!3344 = distinct !DISubprogram(name: "f_min_by_impl", scope: !3, file: !3, line: 1055, type: !2689, scopeLine: 1055, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3345)
!3345 = !{!3346, !3347, !3348}
!3346 = !DILocalVariable(name: "jq", arg: 1, scope: !3344, file: !3, line: 1055, type: !201)
!3347 = !DILocalVariable(name: "x", arg: 2, scope: !3344, file: !3, line: 1055, type: !112)
!3348 = !DILocalVariable(name: "y", arg: 3, scope: !3344, file: !3, line: 1055, type: !112)
!3349 = !DILocation(line: 0, scope: !3344)
!3350 = !DILocation(line: 1056, column: 10, scope: !3344)
!3351 = !DILocation(line: 1056, column: 3, scope: !3344)
!3352 = distinct !DISubprogram(name: "f_max_by_impl", scope: !3, file: !3, line: 1059, type: !2689, scopeLine: 1059, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3353)
!3353 = !{!3354, !3355, !3356}
!3354 = !DILocalVariable(name: "jq", arg: 1, scope: !3352, file: !3, line: 1059, type: !201)
!3355 = !DILocalVariable(name: "x", arg: 2, scope: !3352, file: !3, line: 1059, type: !112)
!3356 = !DILocalVariable(name: "y", arg: 3, scope: !3352, file: !3, line: 1059, type: !112)
!3357 = !DILocation(line: 0, scope: !3352)
!3358 = !DILocation(line: 1060, column: 10, scope: !3352)
!3359 = !DILocation(line: 1060, column: 3, scope: !3352)
!3360 = distinct !DISubprogram(name: "f_error", scope: !3, file: !3, line: 1113, type: !374, scopeLine: 1113, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3361)
!3361 = !{!3362, !3363}
!3362 = !DILocalVariable(name: "jq", arg: 1, scope: !3360, file: !3, line: 1113, type: !201)
!3363 = !DILocalVariable(name: "input", arg: 2, scope: !3360, file: !3, line: 1113, type: !112)
!3364 = !DILocation(line: 0, scope: !3360)
!3365 = !DILocation(line: 1114, column: 10, scope: !3360)
!3366 = !DILocation(line: 1114, column: 3, scope: !3360)
!3367 = distinct !DISubprogram(name: "f_format", scope: !3, file: !3, line: 570, type: !2689, scopeLine: 570, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3368)
!3368 = !{!3369, !3370, !3371, !3372, !3373, !3378, !3379, !3380, !3381, !3382, !3384, !3385, !3386, !3389, !3396, !3397, !3398, !3399, !3401, !3404, !3407, !3409, !3410, !3411, !3414, !3417, !3418, !3419, !3421, !3427, !3428, !3430, !3434, !3436, !3439, !3440, !3441, !3442, !3443, !3444, !3445, !3447}
!3369 = !DILocalVariable(name: "jq", arg: 1, scope: !3367, file: !3, line: 570, type: !201)
!3370 = !DILocalVariable(name: "input", arg: 2, scope: !3367, file: !3, line: 570, type: !112)
!3371 = !DILocalVariable(name: "fmt", arg: 3, scope: !3367, file: !3, line: 570, type: !112)
!3372 = !DILocalVariable(name: "fmt_s", scope: !3367, file: !3, line: 575, type: !109)
!3373 = !DILocalVariable(name: "quotes", scope: !3374, file: !3, line: 583, type: !109)
!3374 = distinct !DILexicalBlock(scope: !3375, file: !3, line: 582, column: 62)
!3375 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 582, column: 14)
!3376 = distinct !DILexicalBlock(scope: !3377, file: !3, line: 579, column: 14)
!3377 = distinct !DILexicalBlock(scope: !3367, file: !3, line: 576, column: 7)
!3378 = !DILocalVariable(name: "sep", scope: !3374, file: !3, line: 583, type: !109)
!3379 = !DILocalVariable(name: "escapings", scope: !3374, file: !3, line: 583, type: !109)
!3380 = !DILocalVariable(name: "msg", scope: !3374, file: !3, line: 584, type: !109)
!3381 = !DILocalVariable(name: "line", scope: !3374, file: !3, line: 600, type: !112)
!3382 = !DILocalVariable(name: "jv_len__", scope: !3383, file: !3, line: 601, type: !98)
!3383 = distinct !DILexicalBlock(scope: !3374, file: !3, line: 601, column: 5)
!3384 = !DILocalVariable(name: "i", scope: !3383, file: !3, line: 601, type: !98)
!3385 = !DILocalVariable(name: "jv_j__", scope: !3383, file: !3, line: 601, type: !98)
!3386 = !DILocalVariable(name: "x", scope: !3387, file: !3, line: 601, type: !112)
!3387 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 601, column: 5)
!3388 = distinct !DILexicalBlock(scope: !3383, file: !3, line: 601, column: 5)
!3389 = !DILocalVariable(name: "unreserved", scope: !3390, file: !3, line: 641, type: !3393)
!3390 = distinct !DILexicalBlock(scope: !3391, file: !3, line: 637, column: 37)
!3391 = distinct !DILexicalBlock(scope: !3392, file: !3, line: 637, column: 14)
!3392 = distinct !DILexicalBlock(scope: !3375, file: !3, line: 634, column: 14)
!3393 = !DICompositeType(tag: DW_TAG_array_type, baseType: !98, size: 4096, elements: !3394)
!3394 = !{!3395}
!3395 = !DISubrange(count: 128)
!3396 = !DILocalVariable(name: "p", scope: !3390, file: !3, line: 642, type: !109)
!3397 = !DILocalVariable(name: "line", scope: !3390, file: !3, line: 645, type: !112)
!3398 = !DILocalVariable(name: "s", scope: !3390, file: !3, line: 646, type: !109)
!3399 = !DILocalVariable(name: "i", scope: !3400, file: !3, line: 647, type: !98)
!3400 = distinct !DILexicalBlock(scope: !3390, file: !3, line: 647, column: 5)
!3401 = !DILocalVariable(name: "ch", scope: !3402, file: !3, line: 648, type: !7)
!3402 = distinct !DILexicalBlock(scope: !3403, file: !3, line: 647, column: 66)
!3403 = distinct !DILexicalBlock(scope: !3400, file: !3, line: 647, column: 5)
!3404 = !DILocalVariable(name: "line", scope: !3405, file: !3, line: 662, type: !112)
!3405 = distinct !DILexicalBlock(scope: !3406, file: !3, line: 658, column: 36)
!3406 = distinct !DILexicalBlock(scope: !3391, file: !3, line: 658, column: 14)
!3407 = !DILocalVariable(name: "jv_len__", scope: !3408, file: !3, line: 663, type: !98)
!3408 = distinct !DILexicalBlock(scope: !3405, file: !3, line: 663, column: 5)
!3409 = !DILocalVariable(name: "i", scope: !3408, file: !3, line: 663, type: !98)
!3410 = !DILocalVariable(name: "jv_j__", scope: !3408, file: !3, line: 663, type: !98)
!3411 = !DILocalVariable(name: "x", scope: !3412, file: !3, line: 663, type: !112)
!3412 = distinct !DILexicalBlock(scope: !3413, file: !3, line: 663, column: 5)
!3413 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 663, column: 5)
!3414 = !DILocalVariable(name: "line", scope: !3415, file: !3, line: 691, type: !112)
!3415 = distinct !DILexicalBlock(scope: !3416, file: !3, line: 688, column: 40)
!3416 = distinct !DILexicalBlock(scope: !3406, file: !3, line: 688, column: 14)
!3417 = !DILocalVariable(name: "data", scope: !3415, file: !3, line: 692, type: !100)
!3418 = !DILocalVariable(name: "len", scope: !3415, file: !3, line: 693, type: !98)
!3419 = !DILocalVariable(name: "i", scope: !3420, file: !3, line: 694, type: !98)
!3420 = distinct !DILexicalBlock(scope: !3415, file: !3, line: 694, column: 5)
!3421 = !DILocalVariable(name: "code", scope: !3422, file: !3, line: 695, type: !3424)
!3422 = distinct !DILexicalBlock(scope: !3423, file: !3, line: 694, column: 32)
!3423 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 694, column: 5)
!3424 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !3425, line: 26, baseType: !3426)
!3425 = !DIFile(filename: "/usr/include/bits/stdint-uintn.h", directory: "")
!3426 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !96, line: 42, baseType: !7)
!3427 = !DILocalVariable(name: "n", scope: !3422, file: !3, line: 696, type: !98)
!3428 = !DILocalVariable(name: "j", scope: !3429, file: !3, line: 697, type: !98)
!3429 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 697, column: 7)
!3430 = !DILocalVariable(name: "buf", scope: !3422, file: !3, line: 701, type: !3431)
!3431 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 32, elements: !3432)
!3432 = !{!3433}
!3433 = !DISubrange(count: 4)
!3434 = !DILocalVariable(name: "j", scope: !3435, file: !3, line: 702, type: !98)
!3435 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 702, column: 7)
!3436 = !DILocalVariable(name: "data", scope: !3437, file: !3, line: 714, type: !100)
!3437 = distinct !DILexicalBlock(scope: !3438, file: !3, line: 711, column: 41)
!3438 = distinct !DILexicalBlock(scope: !3416, file: !3, line: 711, column: 14)
!3439 = !DILocalVariable(name: "len", scope: !3437, file: !3, line: 715, type: !98)
!3440 = !DILocalVariable(name: "decoded_len", scope: !3437, file: !3, line: 716, type: !2386)
!3441 = !DILocalVariable(name: "result", scope: !3437, file: !3, line: 717, type: !107)
!3442 = !DILocalVariable(name: "ri", scope: !3437, file: !3, line: 719, type: !3424)
!3443 = !DILocalVariable(name: "input_bytes_read", scope: !3437, file: !3, line: 720, type: !98)
!3444 = !DILocalVariable(name: "code", scope: !3437, file: !3, line: 721, type: !3424)
!3445 = !DILocalVariable(name: "i", scope: !3446, file: !3, line: 722, type: !98)
!3446 = distinct !DILexicalBlock(scope: !3437, file: !3, line: 722, column: 5)
!3447 = !DILocalVariable(name: "line", scope: !3437, file: !3, line: 750, type: !112)
!3448 = !DILocation(line: 0, scope: !3367)
!3449 = !DILocation(line: 571, column: 7, scope: !3450)
!3450 = distinct !DILexicalBlock(scope: !3367, file: !3, line: 571, column: 7)
!3451 = !DILocation(line: 571, column: 24, scope: !3450)
!3452 = !DILocation(line: 571, column: 7, scope: !3367)
!3453 = !DILocation(line: 572, column: 5, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 571, column: 43)
!3455 = !DILocation(line: 0, scope: !385, inlinedAt: !3456)
!3456 = distinct !DILocation(line: 573, column: 12, scope: !3454)
!3457 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !3456)
!3458 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !3456)
!3459 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !3456)
!3460 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !3456)
!3461 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !3456)
!3462 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !3456)
!3463 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !3456)
!3464 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !3456)
!3465 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !3456)
!3466 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !3456)
!3467 = !DILocation(line: 573, column: 12, scope: !3454)
!3468 = !DILocation(line: 0, scope: !3390)
!3469 = !DILocation(line: 0, scope: !3415)
!3470 = !DILocation(line: 573, column: 5, scope: !3454)
!3471 = !DILocation(line: 575, column: 23, scope: !3367)
!3472 = !DILocation(line: 576, column: 8, scope: !3377)
!3473 = !DILocation(line: 576, column: 7, scope: !3367)
!3474 = !DILocation(line: 577, column: 5, scope: !3475)
!3475 = distinct !DILexicalBlock(scope: !3377, file: !3, line: 576, column: 31)
!3476 = !DILocation(line: 578, column: 12, scope: !3475)
!3477 = !DILocation(line: 578, column: 5, scope: !3475)
!3478 = !DILocation(line: 579, column: 15, scope: !3376)
!3479 = !DILocation(line: 579, column: 14, scope: !3377)
!3480 = !DILocation(line: 580, column: 5, scope: !3481)
!3481 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 579, column: 38)
!3482 = !DILocation(line: 0, scope: !2614, inlinedAt: !3483)
!3483 = distinct !DILocation(line: 581, column: 12, scope: !3481)
!3484 = !DILocation(line: 507, column: 7, scope: !2620, inlinedAt: !3483)
!3485 = !DILocation(line: 507, column: 26, scope: !2620, inlinedAt: !3483)
!3486 = !DILocation(line: 507, column: 7, scope: !2614, inlinedAt: !3483)
!3487 = !DILocation(line: 510, column: 12, scope: !2624, inlinedAt: !3483)
!3488 = !DILocation(line: 510, column: 5, scope: !2624, inlinedAt: !3483)
!3489 = !DILocation(line: 582, column: 15, scope: !3375)
!3490 = !DILocation(line: 582, column: 36, scope: !3375)
!3491 = !DILocation(line: 582, column: 40, scope: !3375)
!3492 = !DILocation(line: 582, column: 14, scope: !3376)
!3493 = !DILocation(line: 0, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3374, file: !3, line: 585, column: 9)
!3495 = !DILocation(line: 0, scope: !3374)
!3496 = !DILocation(line: 597, column: 5, scope: !3374)
!3497 = !DILocation(line: 598, column: 9, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3374, file: !3, line: 598, column: 9)
!3499 = !DILocation(line: 598, column: 28, scope: !3498)
!3500 = !DILocation(line: 598, column: 9, scope: !3374)
!3501 = !DILocation(line: 0, scope: !385, inlinedAt: !3502)
!3502 = distinct !DILocation(line: 599, column: 14, scope: !3498)
!3503 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !3502)
!3504 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !3502)
!3505 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !3502)
!3506 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !3502)
!3507 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !3502)
!3508 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !3502)
!3509 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !3502)
!3510 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !3502)
!3511 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !3502)
!3512 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !3502)
!3513 = !DILocation(line: 599, column: 14, scope: !3498)
!3514 = !DILocation(line: 599, column: 7, scope: !3498)
!3515 = !DILocation(line: 600, column: 15, scope: !3374)
!3516 = !DILocation(line: 601, column: 5, scope: !3383)
!3517 = !DILocation(line: 0, scope: !3383)
!3518 = !DILocation(line: 0, scope: !3387)
!3519 = !DILocation(line: 601, column: 5, scope: !3520)
!3520 = distinct !DILexicalBlock(scope: !3387, file: !3, line: 601, column: 5)
!3521 = !DILocation(line: 602, column: 11, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3523, file: !3, line: 602, column: 11)
!3523 = distinct !DILexicalBlock(scope: !3520, file: !3, line: 601, column: 35)
!3524 = !DILocation(line: 602, column: 11, scope: !3523)
!3525 = !DILocation(line: 602, column: 21, scope: !3522)
!3526 = !DILocation(line: 602, column: 14, scope: !3522)
!3527 = !DILocation(line: 603, column: 15, scope: !3523)
!3528 = !DILocation(line: 603, column: 7, scope: !3523)
!3529 = !DILocation(line: 606, column: 9, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3523, file: !3, line: 603, column: 31)
!3531 = !DILocation(line: 607, column: 9, scope: !3530)
!3532 = !DILocation(line: 610, column: 39, scope: !3530)
!3533 = !DILocation(line: 610, column: 16, scope: !3530)
!3534 = !DILocation(line: 611, column: 9, scope: !3530)
!3535 = !DILocation(line: 613, column: 13, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3530, file: !3, line: 613, column: 13)
!3537 = !DILocation(line: 613, column: 35, scope: !3536)
!3538 = !DILocation(line: 613, column: 32, scope: !3536)
!3539 = !DILocation(line: 613, column: 13, scope: !3530)
!3540 = !DILocation(line: 615, column: 11, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3536, file: !3, line: 613, column: 55)
!3542 = !DILocation(line: 616, column: 9, scope: !3541)
!3543 = !DILocation(line: 617, column: 41, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !3536, file: !3, line: 616, column: 16)
!3545 = !DILocation(line: 617, column: 18, scope: !3544)
!3546 = !DILocation(line: 621, column: 16, scope: !3547)
!3547 = distinct !DILexicalBlock(scope: !3530, file: !3, line: 620, column: 28)
!3548 = !DILocation(line: 622, column: 39, scope: !3547)
!3549 = !DILocation(line: 622, column: 16, scope: !3547)
!3550 = !DILocation(line: 623, column: 16, scope: !3547)
!3551 = !DILocation(line: 624, column: 9, scope: !3547)
!3552 = !DILocation(line: 0, scope: !3523)
!3553 = distinct !{!3553, !3554, !3555, !2351}
!3554 = !DILocation(line: 601, column: 5, scope: !3387)
!3555 = !DILocation(line: 631, column: 5, scope: !3387)
!3556 = !DILocation(line: 627, column: 9, scope: !3530)
!3557 = !DILocation(line: 628, column: 9, scope: !3530)
!3558 = !DILocation(line: 0, scope: !385, inlinedAt: !3559)
!3559 = distinct !DILocation(line: 629, column: 16, scope: !3530)
!3560 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !3559)
!3561 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !3559)
!3562 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !3559)
!3563 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !3559)
!3564 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !3559)
!3565 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !3559)
!3566 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !3559)
!3567 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !3559)
!3568 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !3559)
!3569 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !3559)
!3570 = !DILocation(line: 629, column: 16, scope: !3530)
!3571 = !DILocation(line: 632, column: 5, scope: !3374)
!3572 = !DILocation(line: 633, column: 5, scope: !3374)
!3573 = !DILocation(line: 634, column: 15, scope: !3392)
!3574 = !DILocation(line: 634, column: 14, scope: !3375)
!3575 = !DILocation(line: 635, column: 5, scope: !3576)
!3576 = distinct !DILexicalBlock(scope: !3392, file: !3, line: 634, column: 38)
!3577 = !DILocation(line: 0, scope: !2614, inlinedAt: !3578)
!3578 = distinct !DILocation(line: 636, column: 26, scope: !3576)
!3579 = !DILocation(line: 507, column: 7, scope: !2620, inlinedAt: !3578)
!3580 = !DILocation(line: 507, column: 26, scope: !2620, inlinedAt: !3578)
!3581 = !DILocation(line: 507, column: 7, scope: !2614, inlinedAt: !3578)
!3582 = !DILocation(line: 510, column: 12, scope: !2624, inlinedAt: !3578)
!3583 = !DILocation(line: 510, column: 5, scope: !2624, inlinedAt: !3578)
!3584 = !DILocation(line: 0, scope: !2620, inlinedAt: !3578)
!3585 = !DILocation(line: 636, column: 12, scope: !3576)
!3586 = !DILocation(line: 636, column: 5, scope: !3576)
!3587 = !DILocation(line: 637, column: 15, scope: !3391)
!3588 = !DILocation(line: 637, column: 14, scope: !3392)
!3589 = !DILocation(line: 638, column: 5, scope: !3390)
!3590 = !DILocation(line: 639, column: 13, scope: !3390)
!3591 = !DILocation(line: 641, column: 5, scope: !3390)
!3592 = !DILocation(line: 641, column: 9, scope: !3390)
!3593 = !DILocation(line: 643, column: 5, scope: !3390)
!3594 = !DILocation(line: 643, column: 34, scope: !3390)
!3595 = !DILocation(line: 643, column: 16, scope: !3390)
!3596 = !DILocation(line: 643, column: 38, scope: !3390)
!3597 = !DILocation(line: 643, column: 12, scope: !3390)
!3598 = distinct !{!3598, !3593, !3599, !2351}
!3599 = !DILocation(line: 643, column: 40, scope: !3390)
!3600 = !DILocation(line: 645, column: 15, scope: !3390)
!3601 = !DILocation(line: 646, column: 21, scope: !3390)
!3602 = !DILocation(line: 0, scope: !3400)
!3603 = !DILocation(line: 647, column: 44, scope: !3403)
!3604 = !DILocation(line: 647, column: 21, scope: !3403)
!3605 = !DILocation(line: 647, column: 20, scope: !3403)
!3606 = !DILocation(line: 647, column: 5, scope: !3400)
!3607 = !DILocation(line: 656, column: 5, scope: !3390)
!3608 = !DILocation(line: 658, column: 3, scope: !3391)
!3609 = !DILocation(line: 648, column: 46, scope: !3402)
!3610 = !DILocation(line: 648, column: 21, scope: !3402)
!3611 = !DILocation(line: 0, scope: !3402)
!3612 = !DILocation(line: 649, column: 14, scope: !3613)
!3613 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 649, column: 11)
!3614 = !DILocation(line: 649, column: 20, scope: !3613)
!3615 = !DILocation(line: 649, column: 23, scope: !3613)
!3616 = !DILocation(line: 649, column: 11, scope: !3402)
!3617 = !DILocation(line: 650, column: 16, scope: !3618)
!3618 = distinct !DILexicalBlock(scope: !3613, file: !3, line: 649, column: 39)
!3619 = !DILocation(line: 651, column: 7, scope: !3618)
!3620 = !DILocation(line: 652, column: 39, scope: !3621)
!3621 = distinct !DILexicalBlock(scope: !3613, file: !3, line: 651, column: 14)
!3622 = !DILocation(line: 652, column: 16, scope: !3621)
!3623 = !DILocation(line: 654, column: 8, scope: !3402)
!3624 = !DILocation(line: 647, column: 62, scope: !3403)
!3625 = distinct !{!3625, !3606, !3626, !2351}
!3626 = !DILocation(line: 655, column: 5, scope: !3400)
!3627 = !DILocation(line: 658, column: 15, scope: !3406)
!3628 = !DILocation(line: 658, column: 14, scope: !3391)
!3629 = !DILocation(line: 659, column: 5, scope: !3405)
!3630 = !DILocation(line: 660, column: 9, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3405, file: !3, line: 660, column: 9)
!3632 = !DILocation(line: 660, column: 28, scope: !3631)
!3633 = !DILocation(line: 660, column: 9, scope: !3405)
!3634 = !DILocation(line: 661, column: 28, scope: !3631)
!3635 = !DILocation(line: 661, column: 15, scope: !3631)
!3636 = !DILocation(line: 661, column: 7, scope: !3631)
!3637 = !DILocation(line: 662, column: 15, scope: !3405)
!3638 = !DILocation(line: 0, scope: !3405)
!3639 = !DILocation(line: 663, column: 5, scope: !3408)
!3640 = !DILocation(line: 0, scope: !3408)
!3641 = !DILocation(line: 0, scope: !3412)
!3642 = !DILocation(line: 663, column: 5, scope: !3643)
!3643 = distinct !DILexicalBlock(scope: !3412, file: !3, line: 663, column: 5)
!3644 = !DILocation(line: 664, column: 11, scope: !3645)
!3645 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 664, column: 11)
!3646 = distinct !DILexicalBlock(scope: !3643, file: !3, line: 663, column: 35)
!3647 = !DILocation(line: 664, column: 11, scope: !3646)
!3648 = !DILocation(line: 664, column: 21, scope: !3645)
!3649 = !DILocation(line: 664, column: 14, scope: !3645)
!3650 = !DILocation(line: 665, column: 15, scope: !3646)
!3651 = !DILocation(line: 665, column: 7, scope: !3646)
!3652 = !DILocation(line: 670, column: 39, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 665, column: 31)
!3654 = !DILocation(line: 670, column: 16, scope: !3653)
!3655 = !DILocation(line: 671, column: 9, scope: !3653)
!3656 = !DILocation(line: 674, column: 16, scope: !3657)
!3657 = distinct !DILexicalBlock(scope: !3653, file: !3, line: 673, column: 28)
!3658 = !DILocation(line: 675, column: 39, scope: !3657)
!3659 = !DILocation(line: 675, column: 16, scope: !3657)
!3660 = !DILocation(line: 676, column: 16, scope: !3657)
!3661 = !DILocation(line: 677, column: 9, scope: !3657)
!3662 = !DILocation(line: 0, scope: !3653)
!3663 = distinct !{!3663, !3664, !3665, !2351}
!3664 = !DILocation(line: 663, column: 5, scope: !3412)
!3665 = !DILocation(line: 685, column: 5, scope: !3412)
!3666 = !DILocation(line: 681, column: 9, scope: !3653)
!3667 = !DILocation(line: 682, column: 9, scope: !3653)
!3668 = !DILocation(line: 0, scope: !385, inlinedAt: !3669)
!3669 = distinct !DILocation(line: 683, column: 16, scope: !3653)
!3670 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !3669)
!3671 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !3669)
!3672 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !3669)
!3673 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !3669)
!3674 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !3669)
!3675 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !3669)
!3676 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !3669)
!3677 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !3669)
!3678 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !3669)
!3679 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !3669)
!3680 = !DILocation(line: 683, column: 16, scope: !3653)
!3681 = !DILocation(line: 686, column: 5, scope: !3405)
!3682 = !DILocation(line: 687, column: 5, scope: !3405)
!3683 = !DILocation(line: 688, column: 15, scope: !3416)
!3684 = !DILocation(line: 688, column: 14, scope: !3406)
!3685 = !DILocation(line: 689, column: 5, scope: !3415)
!3686 = !DILocation(line: 690, column: 13, scope: !3415)
!3687 = !DILocation(line: 691, column: 15, scope: !3415)
!3688 = !DILocation(line: 692, column: 55, scope: !3415)
!3689 = !DILocation(line: 693, column: 38, scope: !3415)
!3690 = !DILocation(line: 693, column: 15, scope: !3415)
!3691 = !DILocation(line: 0, scope: !3420)
!3692 = !DILocation(line: 694, column: 20, scope: !3423)
!3693 = !DILocation(line: 694, column: 5, scope: !3420)
!3694 = !DILocation(line: 709, column: 5, scope: !3415)
!3695 = !DILocation(line: 0, scope: !3422)
!3696 = !DILocation(line: 696, column: 19, scope: !3422)
!3697 = !DILocation(line: 696, column: 15, scope: !3422)
!3698 = !DILocation(line: 0, scope: !3429)
!3699 = !DILocation(line: 699, column: 19, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3701, file: !3, line: 697, column: 31)
!3701 = distinct !DILexicalBlock(scope: !3429, file: !3, line: 697, column: 7)
!3702 = !DILocation(line: 699, column: 17, scope: !3700)
!3703 = !DILocation(line: 699, column: 35, scope: !3700)
!3704 = !DILocation(line: 699, column: 25, scope: !3700)
!3705 = !DILocation(line: 698, column: 14, scope: !3700)
!3706 = !DILocation(line: 706, column: 25, scope: !3707)
!3707 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 706, column: 11)
!3708 = !DILocation(line: 706, column: 18, scope: !3707)
!3709 = !DILocation(line: 707, column: 14, scope: !3422)
!3710 = !DILocation(line: 708, column: 5, scope: !3423)
!3711 = !DILocation(line: 694, column: 27, scope: !3423)
!3712 = distinct !{!3712, !3693, !3713, !2351}
!3713 = !DILocation(line: 708, column: 5, scope: !3420)
!3714 = !DILocation(line: 711, column: 15, scope: !3438)
!3715 = !DILocation(line: 711, column: 14, scope: !3416)
!3716 = !DILocation(line: 712, column: 5, scope: !3437)
!3717 = !DILocation(line: 713, column: 13, scope: !3437)
!3718 = !DILocation(line: 714, column: 55, scope: !3437)
!3719 = !DILocation(line: 0, scope: !3437)
!3720 = !DILocation(line: 715, column: 38, scope: !3437)
!3721 = !DILocation(line: 715, column: 15, scope: !3437)
!3722 = !DILocation(line: 716, column: 29, scope: !3437)
!3723 = !DILocation(line: 716, column: 36, scope: !3437)
!3724 = !DILocation(line: 716, column: 26, scope: !3437)
!3725 = !DILocation(line: 717, column: 20, scope: !3437)
!3726 = !DILocation(line: 718, column: 5, scope: !3437)
!3727 = !DILocation(line: 0, scope: !3446)
!3728 = !DILocation(line: 722, column: 20, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3446, file: !3, line: 722, column: 5)
!3730 = !DILocation(line: 722, column: 25, scope: !3729)
!3731 = !DILocation(line: 722, column: 5, scope: !3446)
!3732 = !DILocation(line: 722, column: 28, scope: !3729)
!3733 = !DILocation(line: 722, column: 36, scope: !3729)
!3734 = !DILocation(line: 723, column: 11, scope: !3735)
!3735 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 723, column: 11)
!3736 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 722, column: 49)
!3737 = !DILocation(line: 723, column: 40, scope: !3735)
!3738 = !DILocation(line: 723, column: 11, scope: !3736)
!3739 = !DILocation(line: 728, column: 12, scope: !3736)
!3740 = !DILocation(line: 729, column: 12, scope: !3736)
!3741 = !DILocation(line: 730, column: 23, scope: !3736)
!3742 = !DILocation(line: 732, column: 28, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 732, column: 11)
!3744 = !DILocation(line: 732, column: 11, scope: !3736)
!3745 = !DILocation(line: 733, column: 30, scope: !3746)
!3746 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 732, column: 34)
!3747 = !DILocation(line: 733, column: 24, scope: !3746)
!3748 = !DILocation(line: 733, column: 18, scope: !3746)
!3749 = !DILocation(line: 733, column: 9, scope: !3746)
!3750 = !DILocation(line: 733, column: 22, scope: !3746)
!3751 = !DILocation(line: 734, column: 30, scope: !3746)
!3752 = !DILocation(line: 734, column: 24, scope: !3746)
!3753 = !DILocation(line: 734, column: 18, scope: !3746)
!3754 = !DILocation(line: 734, column: 9, scope: !3746)
!3755 = !DILocation(line: 734, column: 22, scope: !3746)
!3756 = !DILocation(line: 735, column: 24, scope: !3746)
!3757 = !DILocation(line: 735, column: 18, scope: !3746)
!3758 = !DILocation(line: 735, column: 9, scope: !3746)
!3759 = !DILocation(line: 735, column: 22, scope: !3746)
!3760 = !DILocation(line: 738, column: 7, scope: !3746)
!3761 = !DILocation(line: 0, scope: !3736)
!3762 = !DILocation(line: 722, column: 45, scope: !3729)
!3763 = distinct !{!3763, !3731, !3764, !2351}
!3764 = !DILocation(line: 739, column: 5, scope: !3446)
!3765 = !DILocation(line: 724, column: 9, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3735, file: !3, line: 723, column: 65)
!3767 = !DILocation(line: 725, column: 16, scope: !3766)
!3768 = !DILocation(line: 740, column: 9, scope: !3437)
!3769 = !DILocation(line: 741, column: 28, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3771, file: !3, line: 740, column: 32)
!3771 = distinct !DILexicalBlock(scope: !3437, file: !3, line: 740, column: 9)
!3772 = !DILocation(line: 741, column: 22, scope: !3770)
!3773 = !DILocation(line: 741, column: 16, scope: !3770)
!3774 = !DILocation(line: 741, column: 7, scope: !3770)
!3775 = !DILocation(line: 741, column: 20, scope: !3770)
!3776 = !DILocation(line: 743, column: 5, scope: !3770)
!3777 = !DILocation(line: 746, column: 7, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3779, file: !3, line: 745, column: 39)
!3779 = distinct !DILexicalBlock(scope: !3780, file: !3, line: 745, column: 16)
!3780 = distinct !DILexicalBlock(scope: !3771, file: !3, line: 743, column: 16)
!3781 = !DILocation(line: 747, column: 14, scope: !3778)
!3782 = !DILocation(line: 747, column: 7, scope: !3778)
!3783 = !DILocation(line: 0, scope: !3771)
!3784 = !DILocation(line: 750, column: 15, scope: !3437)
!3785 = !DILocation(line: 751, column: 5, scope: !3437)
!3786 = !DILocation(line: 752, column: 5, scope: !3437)
!3787 = !DILocation(line: 755, column: 5, scope: !3788)
!3788 = distinct !DILexicalBlock(scope: !3438, file: !3, line: 754, column: 10)
!3789 = !DILocation(line: 756, column: 54, scope: !3788)
!3790 = !DILocation(line: 756, column: 32, scope: !3788)
!3791 = !DILocation(line: 756, column: 12, scope: !3788)
!3792 = !DILocation(line: 756, column: 5, scope: !3788)
!3793 = !DILocation(line: 758, column: 1, scope: !3367)
!3794 = !DILocation(line: 699, column: 41, scope: !3700)
!3795 = !DILocation(line: 699, column: 14, scope: !3700)
!3796 = !DILocation(line: 701, column: 7, scope: !3422)
!3797 = !DILocation(line: 701, column: 12, scope: !3422)
!3798 = !DILocation(line: 0, scope: !3435)
!3799 = !DILocation(line: 703, column: 44, scope: !3800)
!3800 = distinct !DILexicalBlock(scope: !3801, file: !3, line: 702, column: 31)
!3801 = distinct !DILexicalBlock(scope: !3435, file: !3, line: 702, column: 7)
!3802 = !DILocation(line: 703, column: 18, scope: !3800)
!3803 = !DILocation(line: 703, column: 16, scope: !3800)
!3804 = !DILocation(line: 703, column: 59, scope: !3800)
!3805 = !DILocation(line: 705, column: 11, scope: !3422)
!3806 = !DILocation(line: 706, column: 13, scope: !3707)
!3807 = !DILocation(line: 706, column: 11, scope: !3422)
!3808 = distinct !DISubprogram(name: "f_env", scope: !3, file: !3, line: 1122, type: !374, scopeLine: 1122, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3809)
!3809 = !{!3810, !3811, !3812, !3813, !3814, !3815}
!3810 = !DILocalVariable(name: "jq", arg: 1, scope: !3808, file: !3, line: 1122, type: !201)
!3811 = !DILocalVariable(name: "input", arg: 2, scope: !3808, file: !3, line: 1122, type: !112)
!3812 = !DILocalVariable(name: "env", scope: !3808, file: !3, line: 1124, type: !112)
!3813 = !DILocalVariable(name: "var", scope: !3808, file: !3, line: 1125, type: !109)
!3814 = !DILocalVariable(name: "val", scope: !3808, file: !3, line: 1125, type: !109)
!3815 = !DILocalVariable(name: "e", scope: !3816, file: !3, line: 1126, type: !3817)
!3816 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 1126, column: 3)
!3817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!3818 = !DILocation(line: 0, scope: !3808)
!3819 = !DILocation(line: 1123, column: 3, scope: !3808)
!3820 = !DILocation(line: 1124, column: 12, scope: !3808)
!3821 = !DILocation(line: 1126, column: 19, scope: !3816)
!3822 = !DILocation(line: 0, scope: !3816)
!3823 = !DILocation(line: 1126, column: 28, scope: !3824)
!3824 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 1126, column: 3)
!3825 = !DILocation(line: 1126, column: 31, scope: !3824)
!3826 = !DILocation(line: 1126, column: 3, scope: !3816)
!3827 = !DILocation(line: 1135, column: 1, scope: !3808)
!3828 = !DILocation(line: 1128, column: 11, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 1126, column: 45)
!3830 = !DILocation(line: 1129, column: 13, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3829, file: !3, line: 1129, column: 9)
!3832 = !DILocation(line: 1129, column: 9, scope: !3829)
!3833 = !DILocation(line: 1130, column: 32, scope: !3831)
!3834 = !DILocation(line: 1130, column: 48, scope: !3831)
!3835 = !DILocation(line: 1130, column: 13, scope: !3831)
!3836 = !DILocation(line: 1130, column: 7, scope: !3831)
!3837 = !DILocation(line: 1131, column: 18, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3831, file: !3, line: 1131, column: 14)
!3839 = !DILocation(line: 1131, column: 24, scope: !3838)
!3840 = !DILocation(line: 1131, column: 14, scope: !3831)
!3841 = !DILocation(line: 1132, column: 57, scope: !3838)
!3842 = !DILocation(line: 1132, column: 53, scope: !3838)
!3843 = !DILocation(line: 1132, column: 32, scope: !3838)
!3844 = !DILocation(line: 1132, column: 79, scope: !3838)
!3845 = !DILocation(line: 1132, column: 65, scope: !3838)
!3846 = !DILocation(line: 1132, column: 13, scope: !3838)
!3847 = !DILocation(line: 1132, column: 7, scope: !3838)
!3848 = !DILocation(line: 1126, column: 41, scope: !3824)
!3849 = distinct !{!3849, !3826, !3850, !2351}
!3850 = !DILocation(line: 1133, column: 3, scope: !3816)
!3851 = distinct !DISubprogram(name: "f_halt", scope: !3, file: !3, line: 1137, type: !374, scopeLine: 1137, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3852)
!3852 = !{!3853, !3854}
!3853 = !DILocalVariable(name: "jq", arg: 1, scope: !3851, file: !3, line: 1137, type: !201)
!3854 = !DILocalVariable(name: "input", arg: 2, scope: !3851, file: !3, line: 1137, type: !112)
!3855 = !DILocation(line: 0, scope: !3851)
!3856 = !DILocation(line: 1138, column: 3, scope: !3851)
!3857 = !DILocation(line: 1139, column: 15, scope: !3851)
!3858 = !DILocation(line: 1139, column: 29, scope: !3851)
!3859 = !DILocation(line: 1139, column: 3, scope: !3851)
!3860 = !DILocation(line: 1140, column: 10, scope: !3851)
!3861 = !DILocation(line: 1140, column: 3, scope: !3851)
!3862 = distinct !DISubprogram(name: "f_halt_error", scope: !3, file: !3, line: 1143, type: !2689, scopeLine: 1143, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3863)
!3863 = !{!3864, !3865, !3866}
!3864 = !DILocalVariable(name: "jq", arg: 1, scope: !3862, file: !3, line: 1143, type: !201)
!3865 = !DILocalVariable(name: "input", arg: 2, scope: !3862, file: !3, line: 1143, type: !112)
!3866 = !DILocalVariable(name: "a", arg: 3, scope: !3862, file: !3, line: 1143, type: !112)
!3867 = !DILocation(line: 0, scope: !3862)
!3868 = !DILocation(line: 1144, column: 7, scope: !3869)
!3869 = distinct !DILexicalBlock(scope: !3862, file: !3, line: 1144, column: 7)
!3870 = !DILocation(line: 1144, column: 22, scope: !3869)
!3871 = !DILocation(line: 1144, column: 7, scope: !3862)
!3872 = !DILocation(line: 1145, column: 5, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3869, file: !3, line: 1144, column: 41)
!3874 = !DILocation(line: 0, scope: !385, inlinedAt: !3875)
!3875 = distinct !DILocation(line: 1146, column: 12, scope: !3873)
!3876 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !3875)
!3877 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !3875)
!3878 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !3875)
!3879 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !3875)
!3880 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !3875)
!3881 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !3875)
!3882 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !3875)
!3883 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !3875)
!3884 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !3875)
!3885 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !3875)
!3886 = !DILocation(line: 1146, column: 5, scope: !3873)
!3887 = !DILocation(line: 1148, column: 3, scope: !3862)
!3888 = !DILocation(line: 1149, column: 10, scope: !3862)
!3889 = !DILocation(line: 1149, column: 3, scope: !3862)
!3890 = !DILocation(line: 1150, column: 1, scope: !3862)
!3891 = distinct !DISubprogram(name: "f_get_search_list", scope: !3, file: !3, line: 1152, type: !374, scopeLine: 1152, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3892)
!3892 = !{!3893, !3894}
!3893 = !DILocalVariable(name: "jq", arg: 1, scope: !3891, file: !3, line: 1152, type: !201)
!3894 = !DILocalVariable(name: "input", arg: 2, scope: !3891, file: !3, line: 1152, type: !112)
!3895 = !DILocation(line: 0, scope: !3891)
!3896 = !DILocation(line: 1153, column: 3, scope: !3891)
!3897 = !DILocation(line: 1154, column: 10, scope: !3891)
!3898 = !DILocation(line: 1154, column: 3, scope: !3891)
!3899 = distinct !DISubprogram(name: "f_get_prog_origin", scope: !3, file: !3, line: 1157, type: !374, scopeLine: 1157, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3900)
!3900 = !{!3901, !3902}
!3901 = !DILocalVariable(name: "jq", arg: 1, scope: !3899, file: !3, line: 1157, type: !201)
!3902 = !DILocalVariable(name: "input", arg: 2, scope: !3899, file: !3, line: 1157, type: !112)
!3903 = !DILocation(line: 0, scope: !3899)
!3904 = !DILocation(line: 1158, column: 3, scope: !3899)
!3905 = !DILocation(line: 1159, column: 10, scope: !3899)
!3906 = !DILocation(line: 1159, column: 3, scope: !3899)
!3907 = distinct !DISubprogram(name: "f_get_jq_origin", scope: !3, file: !3, line: 1162, type: !374, scopeLine: 1162, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3908)
!3908 = !{!3909, !3910}
!3909 = !DILocalVariable(name: "jq", arg: 1, scope: !3907, file: !3, line: 1162, type: !201)
!3910 = !DILocalVariable(name: "input", arg: 2, scope: !3907, file: !3, line: 1162, type: !112)
!3911 = !DILocation(line: 0, scope: !3907)
!3912 = !DILocation(line: 1163, column: 3, scope: !3907)
!3913 = !DILocation(line: 1164, column: 10, scope: !3907)
!3914 = !DILocation(line: 1164, column: 3, scope: !3907)
!3915 = distinct !DISubprogram(name: "f_match", scope: !3, file: !3, line: 821, type: !1471, scopeLine: 821, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3916)
!3916 = !{!3917, !3918, !3919, !3920, !3921, !3922, !3923, !3924, !3925, !3926, !4083, !4090, !4112, !4113, !4116, !4118, !4119, !4120, !4123, !4129, !4130, !4131, !4133, !4134, !4140, !4141, !4142, !4143, !4144, !4145, !4146, !4147, !4148, !4150, !4155, !4156}
!3917 = !DILocalVariable(name: "jq", arg: 1, scope: !3915, file: !3, line: 821, type: !201)
!3918 = !DILocalVariable(name: "input", arg: 2, scope: !3915, file: !3, line: 821, type: !112)
!3919 = !DILocalVariable(name: "regex", arg: 3, scope: !3915, file: !3, line: 821, type: !112)
!3920 = !DILocalVariable(name: "modifiers", arg: 4, scope: !3915, file: !3, line: 821, type: !112)
!3921 = !DILocalVariable(name: "testmode", arg: 5, scope: !3915, file: !3, line: 821, type: !112)
!3922 = !DILocalVariable(name: "test", scope: !3915, file: !3, line: 822, type: !98)
!3923 = !DILocalVariable(name: "result", scope: !3915, file: !3, line: 823, type: !112)
!3924 = !DILocalVariable(name: "onigret", scope: !3915, file: !3, line: 824, type: !98)
!3925 = !DILocalVariable(name: "global", scope: !3915, file: !3, line: 825, type: !98)
!3926 = !DILocalVariable(name: "reg", scope: !3915, file: !3, line: 826, type: !3927)
!3927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3928, size: 64)
!3928 = !DIDerivedType(tag: DW_TAG_typedef, name: "regex_t", file: !106, line: 708, baseType: !3929)
!3929 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigRegexType", file: !106, line: 703, baseType: !3930)
!3930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "re_pattern_buffer", file: !106, line: 662, size: 3456, elements: !3931)
!3931 = !{!3932, !3934, !3935, !3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3944, !3945, !3946, !3953, !4041, !4043, !4062, !4063, !4064, !4065, !4066, !4067, !4069, !4070, !4071, !4072, !4073, !4077, !4078, !4079, !4080, !4081}
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !3930, file: !106, line: 664, baseType: !3933, size: 64)
!3933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !99, size: 64)
!3934 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3930, file: !106, line: 665, baseType: !7, size: 32, offset: 64)
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3930, file: !106, line: 666, baseType: !7, size: 32, offset: 96)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "num_mem", scope: !3930, file: !106, line: 668, baseType: !98, size: 32, offset: 128)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "num_repeat", scope: !3930, file: !106, line: 669, baseType: !98, size: 32, offset: 160)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "num_null_check", scope: !3930, file: !106, line: 670, baseType: !98, size: 32, offset: 192)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "num_comb_exp_check", scope: !3930, file: !106, line: 671, baseType: !98, size: 32, offset: 224)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "num_call", scope: !3930, file: !106, line: 672, baseType: !98, size: 32, offset: 256)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "capture_history", scope: !3930, file: !106, line: 673, baseType: !7, size: 32, offset: 288)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "bt_mem_start", scope: !3930, file: !106, line: 674, baseType: !7, size: 32, offset: 320)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "bt_mem_end", scope: !3930, file: !106, line: 675, baseType: !7, size: 32, offset: 352)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "stack_pop_level", scope: !3930, file: !106, line: 676, baseType: !98, size: 32, offset: 384)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "repeat_range_alloc", scope: !3930, file: !106, line: 677, baseType: !98, size: 32, offset: 416)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "repeat_range", scope: !3930, file: !106, line: 678, baseType: !3947, size: 64, offset: 448)
!3947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3948, size: 64)
!3948 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigRepeatRange", file: !106, line: 654, baseType: !3949)
!3949 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 651, size: 64, elements: !3950)
!3950 = !{!3951, !3952}
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "lower", scope: !3949, file: !106, line: 652, baseType: !98, size: 32)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "upper", scope: !3949, file: !106, line: 653, baseType: !98, size: 32, offset: 32)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "enc", scope: !3930, file: !106, line: 680, baseType: !3954, size: 64, offset: 512)
!3954 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigEncoding", file: !106, line: 171, baseType: !3955)
!3955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3956, size: 64)
!3956 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigEncodingType", file: !106, line: 169, baseType: !3957)
!3957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OnigEncodingTypeST", file: !106, line: 149, size: 1152, elements: !3958)
!3958 = !{!3959, !3963, !3964, !3965, !3966, !3970, !3975, !3979, !3984, !3990, !3999, !4013, !4018, !4023, !4030, !4034, !4035, !4039, !4040}
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "mbc_enc_len", scope: !3957, file: !106, line: 150, baseType: !3960, size: 64)
!3960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3961, size: 64)
!3961 = !DISubroutineType(types: !3962)
!3962 = !{!98, !103}
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3957, file: !106, line: 151, baseType: !109, size: 64, offset: 64)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "max_enc_len", scope: !3957, file: !106, line: 152, baseType: !98, size: 32, offset: 128)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "min_enc_len", scope: !3957, file: !106, line: 153, baseType: !98, size: 32, offset: 160)
!3966 = !DIDerivedType(tag: DW_TAG_member, name: "is_mbc_newline", scope: !3957, file: !106, line: 154, baseType: !3967, size: 64, offset: 192)
!3967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3968, size: 64)
!3968 = !DISubroutineType(types: !3969)
!3969 = !{!98, !103, !103}
!3970 = !DIDerivedType(tag: DW_TAG_member, name: "mbc_to_code", scope: !3957, file: !106, line: 155, baseType: !3971, size: 64, offset: 256)
!3971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3972, size: 64)
!3972 = !DISubroutineType(types: !3973)
!3973 = !{!3974, !103, !103}
!3974 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigCodePoint", file: !106, line: 103, baseType: !7)
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "code_to_mbclen", scope: !3957, file: !106, line: 156, baseType: !3976, size: 64, offset: 320)
!3976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3977, size: 64)
!3977 = !DISubroutineType(types: !3978)
!3978 = !{!98, !3974}
!3979 = !DIDerivedType(tag: DW_TAG_member, name: "code_to_mbc", scope: !3957, file: !106, line: 157, baseType: !3980, size: 64, offset: 384)
!3980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3981, size: 64)
!3981 = !DISubroutineType(types: !3982)
!3982 = !{!98, !3974, !3983}
!3983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 64)
!3984 = !DIDerivedType(tag: DW_TAG_member, name: "mbc_case_fold", scope: !3957, file: !106, line: 158, baseType: !3985, size: 64, offset: 448)
!3985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3986, size: 64)
!3986 = !DISubroutineType(types: !3987)
!3987 = !{!98, !3988, !3989, !103, !3983}
!3988 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigCaseFoldType", file: !106, line: 110, baseType: !7)
!3989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !103, size: 64)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "apply_all_case_fold", scope: !3957, file: !106, line: 159, baseType: !3991, size: 64, offset: 512)
!3991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3992, size: 64)
!3992 = !DISubroutineType(types: !3993)
!3993 = !{!98, !3988, !3994, !102}
!3994 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigApplyAllCaseFoldFunc", file: !106, line: 147, baseType: !3995)
!3995 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3996, size: 64)
!3996 = !DISubroutineType(types: !3997)
!3997 = !{!98, !3974, !3998, !98, !102}
!3998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3974, size: 64)
!3999 = !DIDerivedType(tag: DW_TAG_member, name: "get_case_fold_codes_by_str", scope: !3957, file: !106, line: 160, baseType: !4000, size: 64, offset: 576)
!4000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4001, size: 64)
!4001 = !DISubroutineType(types: !4002)
!4002 = !{!98, !3988, !103, !103, !4003}
!4003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4004, size: 64)
!4004 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigCaseFoldCodeItem", file: !106, line: 136, baseType: !4005)
!4005 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 132, size: 160, elements: !4006)
!4006 = !{!4007, !4008, !4009}
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "byte_len", scope: !4005, file: !106, line: 133, baseType: !98, size: 32)
!4008 = !DIDerivedType(tag: DW_TAG_member, name: "code_len", scope: !4005, file: !106, line: 134, baseType: !98, size: 32, offset: 32)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !4005, file: !106, line: 135, baseType: !4010, size: 96, offset: 64)
!4010 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3974, size: 96, elements: !4011)
!4011 = !{!4012}
!4012 = !DISubrange(count: 3)
!4013 = !DIDerivedType(tag: DW_TAG_member, name: "property_name_to_ctype", scope: !3957, file: !106, line: 161, baseType: !4014, size: 64, offset: 640)
!4014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4015, size: 64)
!4015 = !DISubroutineType(types: !4016)
!4016 = !{!98, !4017, !3983, !3983}
!4017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3957, size: 64)
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "is_code_ctype", scope: !3957, file: !106, line: 162, baseType: !4019, size: 64, offset: 704)
!4019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4020, size: 64)
!4020 = !DISubroutineType(types: !4021)
!4021 = !{!98, !3974, !4022}
!4022 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigCtype", file: !106, line: 105, baseType: !7)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "get_ctype_code_range", scope: !3957, file: !106, line: 163, baseType: !4024, size: 64, offset: 768)
!4024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4025, size: 64)
!4025 = !DISubroutineType(types: !4026)
!4026 = !{!98, !4022, !3998, !4027}
!4027 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4028, size: 64)
!4028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4029, size: 64)
!4029 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3974)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "left_adjust_char_head", scope: !3957, file: !106, line: 164, baseType: !4031, size: 64, offset: 832)
!4031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4032, size: 64)
!4032 = !DISubroutineType(types: !4033)
!4033 = !{!3983, !103, !103}
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "is_allowed_reverse_match", scope: !3957, file: !106, line: 165, baseType: !3967, size: 64, offset: 896)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !3957, file: !106, line: 166, baseType: !4036, size: 64, offset: 960)
!4036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4037, size: 64)
!4037 = !DISubroutineType(types: !4038)
!4038 = !{!98}
!4039 = !DIDerivedType(tag: DW_TAG_member, name: "is_initialized", scope: !3957, file: !106, line: 167, baseType: !4036, size: 64, offset: 1024)
!4040 = !DIDerivedType(tag: DW_TAG_member, name: "is_valid_mbc_string", scope: !3957, file: !106, line: 168, baseType: !3967, size: 64, offset: 1088)
!4041 = !DIDerivedType(tag: DW_TAG_member, name: "options", scope: !3930, file: !106, line: 681, baseType: !4042, size: 32, offset: 576)
!4042 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigOptionType", file: !106, line: 382, baseType: !7)
!4043 = !DIDerivedType(tag: DW_TAG_member, name: "syntax", scope: !3930, file: !106, line: 682, baseType: !4044, size: 64, offset: 640)
!4044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4045, size: 64)
!4045 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigSyntaxType", file: !106, line: 415, baseType: !4046)
!4046 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 409, size: 320, elements: !4047)
!4047 = !{!4048, !4049, !4050, !4051, !4052}
!4048 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !4046, file: !106, line: 410, baseType: !7, size: 32)
!4049 = !DIDerivedType(tag: DW_TAG_member, name: "op2", scope: !4046, file: !106, line: 411, baseType: !7, size: 32, offset: 32)
!4050 = !DIDerivedType(tag: DW_TAG_member, name: "behavior", scope: !4046, file: !106, line: 412, baseType: !7, size: 32, offset: 64)
!4051 = !DIDerivedType(tag: DW_TAG_member, name: "options", scope: !4046, file: !106, line: 413, baseType: !4042, size: 32, offset: 96)
!4052 = !DIDerivedType(tag: DW_TAG_member, name: "meta_char_table", scope: !4046, file: !106, line: 414, baseType: !4053, size: 192, offset: 128)
!4053 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigMetaCharTableType", file: !106, line: 145, baseType: !4054)
!4054 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 138, size: 192, elements: !4055)
!4055 = !{!4056, !4057, !4058, !4059, !4060, !4061}
!4056 = !DIDerivedType(tag: DW_TAG_member, name: "esc", scope: !4054, file: !106, line: 139, baseType: !3974, size: 32)
!4057 = !DIDerivedType(tag: DW_TAG_member, name: "anychar", scope: !4054, file: !106, line: 140, baseType: !3974, size: 32, offset: 32)
!4058 = !DIDerivedType(tag: DW_TAG_member, name: "anytime", scope: !4054, file: !106, line: 141, baseType: !3974, size: 32, offset: 64)
!4059 = !DIDerivedType(tag: DW_TAG_member, name: "zero_or_one_time", scope: !4054, file: !106, line: 142, baseType: !3974, size: 32, offset: 96)
!4060 = !DIDerivedType(tag: DW_TAG_member, name: "one_or_more_time", scope: !4054, file: !106, line: 143, baseType: !3974, size: 32, offset: 128)
!4061 = !DIDerivedType(tag: DW_TAG_member, name: "anychar_anytime", scope: !4054, file: !106, line: 144, baseType: !3974, size: 32, offset: 160)
!4062 = !DIDerivedType(tag: DW_TAG_member, name: "case_fold_flag", scope: !3930, file: !106, line: 683, baseType: !3988, size: 32, offset: 704)
!4063 = !DIDerivedType(tag: DW_TAG_member, name: "name_table", scope: !3930, file: !106, line: 684, baseType: !102, size: 64, offset: 768)
!4064 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3930, file: !106, line: 687, baseType: !98, size: 32, offset: 832)
!4065 = !DIDerivedType(tag: DW_TAG_member, name: "threshold_len", scope: !3930, file: !106, line: 688, baseType: !98, size: 32, offset: 864)
!4066 = !DIDerivedType(tag: DW_TAG_member, name: "anchor", scope: !3930, file: !106, line: 689, baseType: !98, size: 32, offset: 896)
!4067 = !DIDerivedType(tag: DW_TAG_member, name: "anchor_dmin", scope: !3930, file: !106, line: 690, baseType: !4068, size: 32, offset: 928)
!4068 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigLen", file: !106, line: 106, baseType: !7)
!4069 = !DIDerivedType(tag: DW_TAG_member, name: "anchor_dmax", scope: !3930, file: !106, line: 691, baseType: !4068, size: 32, offset: 960)
!4070 = !DIDerivedType(tag: DW_TAG_member, name: "sub_anchor", scope: !3930, file: !106, line: 692, baseType: !98, size: 32, offset: 992)
!4071 = !DIDerivedType(tag: DW_TAG_member, name: "exact", scope: !3930, file: !106, line: 693, baseType: !3933, size: 64, offset: 1024)
!4072 = !DIDerivedType(tag: DW_TAG_member, name: "exact_end", scope: !3930, file: !106, line: 694, baseType: !3933, size: 64, offset: 1088)
!4073 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !3930, file: !106, line: 695, baseType: !4074, size: 2048, offset: 1152)
!4074 = !DICompositeType(tag: DW_TAG_array_type, baseType: !99, size: 2048, elements: !4075)
!4075 = !{!4076}
!4076 = !DISubrange(count: 256)
!4077 = !DIDerivedType(tag: DW_TAG_member, name: "int_map", scope: !3930, file: !106, line: 696, baseType: !228, size: 64, offset: 3200)
!4078 = !DIDerivedType(tag: DW_TAG_member, name: "int_map_backward", scope: !3930, file: !106, line: 697, baseType: !228, size: 64, offset: 3264)
!4079 = !DIDerivedType(tag: DW_TAG_member, name: "dmin", scope: !3930, file: !106, line: 698, baseType: !4068, size: 32, offset: 3328)
!4080 = !DIDerivedType(tag: DW_TAG_member, name: "dmax", scope: !3930, file: !106, line: 699, baseType: !4068, size: 32, offset: 3360)
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !3930, file: !106, line: 702, baseType: !4082, size: 64, offset: 3392)
!4082 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3930, size: 64)
!4083 = !DILocalVariable(name: "einfo", scope: !3915, file: !3, line: 827, type: !4084)
!4084 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigErrorInfo", file: !106, line: 649, baseType: !4085)
!4085 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 645, size: 192, elements: !4086)
!4086 = !{!4087, !4088, !4089}
!4087 = !DIDerivedType(tag: DW_TAG_member, name: "enc", scope: !4085, file: !106, line: 646, baseType: !3954, size: 64)
!4088 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !4085, file: !106, line: 647, baseType: !3983, size: 64, offset: 64)
!4089 = !DIDerivedType(tag: DW_TAG_member, name: "par_end", scope: !4085, file: !106, line: 648, baseType: !3983, size: 64, offset: 128)
!4090 = !DILocalVariable(name: "region", scope: !3915, file: !3, line: 828, type: !4091)
!4091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4092, size: 64)
!4092 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigRegion", file: !106, line: 643, baseType: !4093)
!4093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "re_registers", file: !106, line: 625, size: 256, elements: !4094)
!4094 = !{!4095, !4096, !4097, !4098, !4099}
!4095 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !4093, file: !106, line: 626, baseType: !98, size: 32)
!4096 = !DIDerivedType(tag: DW_TAG_member, name: "num_regs", scope: !4093, file: !106, line: 627, baseType: !98, size: 32, offset: 32)
!4097 = !DIDerivedType(tag: DW_TAG_member, name: "beg", scope: !4093, file: !106, line: 628, baseType: !228, size: 64, offset: 64)
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "end", scope: !4093, file: !106, line: 629, baseType: !228, size: 64, offset: 128)
!4099 = !DIDerivedType(tag: DW_TAG_member, name: "history_root", scope: !4093, file: !106, line: 631, baseType: !4100, size: 64, offset: 192)
!4100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4101, size: 64)
!4101 = !DIDerivedType(tag: DW_TAG_typedef, name: "OnigCaptureTreeNode", file: !106, line: 622, baseType: !4102)
!4102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OnigCaptureTreeNodeStruct", file: !106, line: 615, size: 256, elements: !4103)
!4103 = !{!4104, !4105, !4106, !4107, !4108, !4109}
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !4102, file: !106, line: 616, baseType: !98, size: 32)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "beg", scope: !4102, file: !106, line: 617, baseType: !98, size: 32, offset: 32)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "end", scope: !4102, file: !106, line: 618, baseType: !98, size: 32, offset: 64)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !4102, file: !106, line: 619, baseType: !98, size: 32, offset: 96)
!4108 = !DIDerivedType(tag: DW_TAG_member, name: "num_childs", scope: !4102, file: !106, line: 620, baseType: !98, size: 32, offset: 128)
!4109 = !DIDerivedType(tag: DW_TAG_member, name: "childs", scope: !4102, file: !106, line: 621, baseType: !4110, size: 64, offset: 192)
!4110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4111, size: 64)
!4111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4102, size: 64)
!4112 = !DILocalVariable(name: "options", scope: !3915, file: !3, line: 842, type: !4042)
!4113 = !DILocalVariable(name: "modarray", scope: !4114, file: !3, line: 845, type: !112)
!4114 = distinct !DILexicalBlock(scope: !4115, file: !3, line: 844, column: 49)
!4115 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 844, column: 7)
!4116 = !DILocalVariable(name: "jv_len__", scope: !4117, file: !3, line: 846, type: !98)
!4117 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 846, column: 5)
!4118 = !DILocalVariable(name: "i", scope: !4117, file: !3, line: 846, type: !98)
!4119 = !DILocalVariable(name: "jv_j__", scope: !4117, file: !3, line: 846, type: !98)
!4120 = !DILocalVariable(name: "mod", scope: !4121, file: !3, line: 846, type: !112)
!4121 = distinct !DILexicalBlock(scope: !4122, file: !3, line: 846, column: 5)
!4122 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 846, column: 5)
!4123 = !DILocalVariable(name: "ebuf", scope: !4124, file: !3, line: 894, type: !4126)
!4124 = distinct !DILexicalBlock(scope: !4125, file: !3, line: 893, column: 31)
!4125 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 893, column: 7)
!4126 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 720, elements: !4127)
!4127 = !{!4128}
!4128 = !DISubrange(count: 90)
!4129 = !DILocalVariable(name: "input_string", scope: !3915, file: !3, line: 902, type: !109)
!4130 = !DILocalVariable(name: "start", scope: !3915, file: !3, line: 903, type: !103)
!4131 = !DILocalVariable(name: "length", scope: !3915, file: !3, line: 904, type: !4132)
!4132 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2388)
!4133 = !DILocalVariable(name: "end", scope: !3915, file: !3, line: 905, type: !103)
!4134 = !DILocalVariable(name: "idx", scope: !4135, file: !3, line: 920, type: !2388)
!4135 = distinct !DILexicalBlock(scope: !4136, file: !3, line: 919, column: 45)
!4136 = distinct !DILexicalBlock(scope: !4137, file: !3, line: 919, column: 11)
!4137 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 912, column: 23)
!4138 = distinct !DILexicalBlock(scope: !4139, file: !3, line: 912, column: 9)
!4139 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 907, column: 6)
!4140 = !DILocalVariable(name: "fr", scope: !4135, file: !3, line: 921, type: !109)
!4141 = !DILocalVariable(name: "match", scope: !4135, file: !3, line: 925, type: !112)
!4142 = !DILocalVariable(name: "idx", scope: !4137, file: !3, line: 934, type: !2388)
!4143 = !DILocalVariable(name: "len", scope: !4137, file: !3, line: 935, type: !2388)
!4144 = !DILocalVariable(name: "fr", scope: !4137, file: !3, line: 936, type: !109)
!4145 = !DILocalVariable(name: "match", scope: !4137, file: !3, line: 943, type: !112)
!4146 = !DILocalVariable(name: "blen", scope: !4137, file: !3, line: 945, type: !2388)
!4147 = !DILocalVariable(name: "captures", scope: !4137, file: !3, line: 948, type: !112)
!4148 = !DILocalVariable(name: "i", scope: !4149, file: !3, line: 949, type: !98)
!4149 = distinct !DILexicalBlock(scope: !4137, file: !3, line: 949, column: 7)
!4150 = !DILocalVariable(name: "cap", scope: !4151, file: !3, line: 953, type: !112)
!4151 = distinct !DILexicalBlock(scope: !4152, file: !3, line: 951, column: 47)
!4152 = distinct !DILexicalBlock(scope: !4153, file: !3, line: 951, column: 13)
!4153 = distinct !DILexicalBlock(scope: !4154, file: !3, line: 949, column: 50)
!4154 = distinct !DILexicalBlock(scope: !4149, file: !3, line: 949, column: 7)
!4155 = !DILocalVariable(name: "cap", scope: !4153, file: !3, line: 977, type: !112)
!4156 = !DILocalVariable(name: "ebuf", scope: !4157, file: !3, line: 991, type: !4126)
!4157 = distinct !DILexicalBlock(scope: !4158, file: !3, line: 990, column: 12)
!4158 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 988, column: 16)
!4159 = !DILocation(line: 0, scope: !3915)
!4160 = !DILocation(line: 821, column: 56, scope: !3915)
!4161 = !DILocation(line: 821, column: 70, scope: !3915)
!4162 = !DILocation(line: 822, column: 33, scope: !3915)
!4163 = !DILocation(line: 822, column: 14, scope: !3915)
!4164 = !DILocation(line: 826, column: 3, scope: !3915)
!4165 = !DILocation(line: 827, column: 3, scope: !3915)
!4166 = !DILocation(line: 827, column: 17, scope: !3915)
!4167 = !DILocation(line: 830, column: 7, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 830, column: 7)
!4169 = !DILocation(line: 830, column: 26, scope: !4168)
!4170 = !DILocation(line: 830, column: 7, scope: !3915)
!4171 = !DILocation(line: 831, column: 5, scope: !4172)
!4172 = distinct !DILexicalBlock(scope: !4168, file: !3, line: 830, column: 45)
!4173 = !DILocation(line: 832, column: 5, scope: !4172)
!4174 = !DILocation(line: 0, scope: !385, inlinedAt: !4175)
!4175 = distinct !DILocation(line: 833, column: 12, scope: !4172)
!4176 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !4175)
!4177 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !4175)
!4178 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !4175)
!4179 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !4175)
!4180 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !4175)
!4181 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !4175)
!4182 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !4175)
!4183 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !4175)
!4184 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !4175)
!4185 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !4175)
!4186 = !DILocation(line: 833, column: 12, scope: !4172)
!4187 = !DILocation(line: 833, column: 5, scope: !4172)
!4188 = !DILocation(line: 836, column: 7, scope: !4189)
!4189 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 836, column: 7)
!4190 = !DILocation(line: 836, column: 26, scope: !4189)
!4191 = !DILocation(line: 836, column: 7, scope: !3915)
!4192 = !DILocation(line: 837, column: 5, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4189, file: !3, line: 836, column: 45)
!4194 = !DILocation(line: 838, column: 5, scope: !4193)
!4195 = !DILocation(line: 0, scope: !385, inlinedAt: !4196)
!4196 = distinct !DILocation(line: 839, column: 12, scope: !4193)
!4197 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !4196)
!4198 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !4196)
!4199 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !4196)
!4200 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !4196)
!4201 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !4196)
!4202 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !4196)
!4203 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !4196)
!4204 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !4196)
!4205 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !4196)
!4206 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !4196)
!4207 = !DILocation(line: 839, column: 12, scope: !4193)
!4208 = !DILocation(line: 839, column: 5, scope: !4193)
!4209 = !DILocation(line: 844, column: 7, scope: !4115)
!4210 = !DILocation(line: 844, column: 30, scope: !4115)
!4211 = !DILocation(line: 844, column: 7, scope: !3915)
!4212 = !DILocation(line: 845, column: 37, scope: !4114)
!4213 = !DILocation(line: 845, column: 19, scope: !4114)
!4214 = !DILocation(line: 0, scope: !4114)
!4215 = !DILocation(line: 846, column: 5, scope: !4117)
!4216 = !DILocation(line: 0, scope: !4117)
!4217 = !DILocation(line: 0, scope: !4121)
!4218 = !DILocation(line: 846, column: 5, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4121, file: !3, line: 846, column: 5)
!4220 = !DILocation(line: 847, column: 20, scope: !4221)
!4221 = distinct !DILexicalBlock(scope: !4219, file: !3, line: 846, column: 40)
!4222 = !DILocation(line: 847, column: 15, scope: !4221)
!4223 = !DILocation(line: 847, column: 7, scope: !4221)
!4224 = !DILocation(line: 852, column: 19, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4221, file: !3, line: 847, column: 42)
!4226 = !DILocation(line: 853, column: 11, scope: !4225)
!4227 = !DILocation(line: 855, column: 19, scope: !4225)
!4228 = !DILocation(line: 856, column: 11, scope: !4225)
!4229 = !DILocation(line: 858, column: 19, scope: !4225)
!4230 = !DILocation(line: 859, column: 11, scope: !4225)
!4231 = !DILocation(line: 861, column: 19, scope: !4225)
!4232 = !DILocation(line: 862, column: 11, scope: !4225)
!4233 = !DILocation(line: 864, column: 19, scope: !4225)
!4234 = !DILocation(line: 865, column: 11, scope: !4225)
!4235 = !DILocation(line: 867, column: 19, scope: !4225)
!4236 = !DILocation(line: 868, column: 11, scope: !4225)
!4237 = !DILocation(line: 870, column: 19, scope: !4225)
!4238 = !DILocation(line: 871, column: 11, scope: !4225)
!4239 = distinct !{!4239, !4240, !4241, !2351}
!4240 = !DILocation(line: 846, column: 5, scope: !4121)
!4241 = !DILocation(line: 879, column: 5, scope: !4121)
!4242 = !DILocation(line: 873, column: 11, scope: !4225)
!4243 = !DILocation(line: 874, column: 11, scope: !4225)
!4244 = !DILocation(line: 875, column: 11, scope: !4225)
!4245 = !DILocation(line: 877, column: 17, scope: !4225)
!4246 = !DILocation(line: 876, column: 38, scope: !4225)
!4247 = !DILocation(line: 876, column: 18, scope: !4225)
!4248 = !DILocation(line: 842, column: 18, scope: !3915)
!4249 = !DILocation(line: 825, column: 7, scope: !3915)
!4250 = !DILocation(line: 880, column: 5, scope: !4114)
!4251 = !DILocation(line: 881, column: 14, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4115, file: !3, line: 881, column: 14)
!4253 = !DILocation(line: 881, column: 37, scope: !4252)
!4254 = !DILocation(line: 881, column: 14, scope: !4115)
!4255 = !DILocation(line: 883, column: 5, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4252, file: !3, line: 881, column: 54)
!4257 = !DILocation(line: 884, column: 5, scope: !4256)
!4258 = !DILocation(line: 0, scope: !385, inlinedAt: !4259)
!4259 = distinct !DILocation(line: 885, column: 12, scope: !4256)
!4260 = !DILocation(line: 51, column: 3, scope: !385, inlinedAt: !4259)
!4261 = !DILocation(line: 51, column: 8, scope: !385, inlinedAt: !4259)
!4262 = !DILocation(line: 53, column: 59, scope: !385, inlinedAt: !4259)
!4263 = !DILocation(line: 53, column: 46, scope: !385, inlinedAt: !4259)
!4264 = !DILocation(line: 54, column: 67, scope: !385, inlinedAt: !4259)
!4265 = !DILocation(line: 54, column: 46, scope: !385, inlinedAt: !4259)
!4266 = !DILocation(line: 52, column: 32, scope: !385, inlinedAt: !4259)
!4267 = !DILocation(line: 52, column: 12, scope: !385, inlinedAt: !4259)
!4268 = !DILocation(line: 56, column: 3, scope: !385, inlinedAt: !4259)
!4269 = !DILocation(line: 58, column: 1, scope: !385, inlinedAt: !4259)
!4270 = !DILocation(line: 885, column: 12, scope: !4256)
!4271 = !DILocation(line: 885, column: 5, scope: !4256)
!4272 = !DILocation(line: 888, column: 3, scope: !3915)
!4273 = !DILocation(line: 890, column: 42, scope: !3915)
!4274 = !DILocation(line: 891, column: 22, scope: !3915)
!4275 = !DILocation(line: 891, column: 70, scope: !3915)
!4276 = !DILocation(line: 891, column: 47, scope: !3915)
!4277 = !DILocation(line: 891, column: 45, scope: !3915)
!4278 = !DILocation(line: 890, column: 13, scope: !3915)
!4279 = !DILocation(line: 893, column: 15, scope: !4125)
!4280 = !DILocation(line: 893, column: 7, scope: !3915)
!4281 = !DILocation(line: 894, column: 5, scope: !4124)
!4282 = !DILocation(line: 894, column: 11, scope: !4124)
!4283 = !DILocation(line: 895, column: 5, scope: !4124)
!4284 = !DILocation(line: 896, column: 5, scope: !4124)
!4285 = !DILocation(line: 897, column: 5, scope: !4124)
!4286 = !DILocation(line: 898, column: 49, scope: !4124)
!4287 = !DILocation(line: 899, column: 11, scope: !4124)
!4288 = !DILocation(line: 898, column: 32, scope: !4124)
!4289 = !DILocation(line: 898, column: 12, scope: !4124)
!4290 = !DILocation(line: 900, column: 3, scope: !4125)
!4291 = !DILocation(line: 901, column: 12, scope: !3915)
!4292 = !DILocation(line: 901, column: 19, scope: !3915)
!4293 = !DILocation(line: 901, column: 32, scope: !3915)
!4294 = !DILocation(line: 902, column: 30, scope: !3915)
!4295 = !DILocation(line: 903, column: 38, scope: !3915)
!4296 = !DILocation(line: 904, column: 55, scope: !3915)
!4297 = !DILocation(line: 904, column: 32, scope: !3915)
!4298 = !DILocation(line: 905, column: 28, scope: !3915)
!4299 = !DILocation(line: 906, column: 12, scope: !3915)
!4300 = !DILocation(line: 907, column: 3, scope: !3915)
!4301 = !DILocation(line: 908, column: 27, scope: !4139)
!4302 = !DILocation(line: 909, column: 23, scope: !4139)
!4303 = !DILocation(line: 908, column: 15, scope: !4139)
!4304 = !DILocation(line: 912, column: 17, scope: !4138)
!4305 = !DILocation(line: 912, column: 9, scope: !4139)
!4306 = !DILocation(line: 913, column: 11, scope: !4137)
!4307 = !DILocation(line: 914, column: 18, scope: !4308)
!4308 = distinct !DILexicalBlock(scope: !4309, file: !3, line: 913, column: 17)
!4309 = distinct !DILexicalBlock(scope: !4137, file: !3, line: 913, column: 11)
!4310 = !DILocation(line: 915, column: 9, scope: !4308)
!4311 = !DILocation(line: 919, column: 19, scope: !4136)
!4312 = !{!4313, !301, i64 16}
!4313 = !{!"re_registers", !2096, i64 0, !2096, i64 4, !301, i64 8, !301, i64 16, !301, i64 24}
!4314 = !DILocation(line: 919, column: 11, scope: !4136)
!4315 = !DILocation(line: 919, column: 37, scope: !4136)
!4316 = !{!4313, !301, i64 8}
!4317 = !DILocation(line: 919, column: 29, scope: !4136)
!4318 = !DILocation(line: 919, column: 26, scope: !4136)
!4319 = !DILocation(line: 0, scope: !4137)
!4320 = !DILocation(line: 919, column: 11, scope: !4137)
!4321 = !DILocation(line: 938, column: 7, scope: !4322)
!4322 = distinct !DILexicalBlock(scope: !4137, file: !3, line: 938, column: 7)
!4323 = !DILocation(line: 940, column: 38, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 938, column: 68)
!4325 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 938, column: 7)
!4326 = !DILocation(line: 940, column: 15, scope: !4324)
!4327 = !DILocation(line: 938, column: 53, scope: !4325)
!4328 = !DILocation(line: 938, column: 45, scope: !4325)
!4329 = !DILocation(line: 938, column: 30, scope: !4325)
!4330 = distinct !{!4330, !4321, !4331, !2351}
!4331 = !DILocation(line: 941, column: 7, scope: !4322)
!4332 = !DILocation(line: 940, column: 12, scope: !4324)
!4333 = !DILocation(line: 0, scope: !4135)
!4334 = !DILocation(line: 922, column: 9, scope: !4335)
!4335 = distinct !DILexicalBlock(scope: !4135, file: !3, line: 922, column: 9)
!4336 = !DILocation(line: 923, column: 40, scope: !4337)
!4337 = distinct !DILexicalBlock(scope: !4338, file: !3, line: 922, column: 64)
!4338 = distinct !DILexicalBlock(scope: !4335, file: !3, line: 922, column: 9)
!4339 = !DILocation(line: 923, column: 17, scope: !4337)
!4340 = !DILocation(line: 923, column: 14, scope: !4337)
!4341 = !DILocation(line: 922, column: 60, scope: !4338)
!4342 = !DILocation(line: 922, column: 49, scope: !4338)
!4343 = !DILocation(line: 922, column: 41, scope: !4338)
!4344 = !DILocation(line: 922, column: 40, scope: !4338)
!4345 = !DILocation(line: 922, column: 26, scope: !4338)
!4346 = distinct !{!4346, !4334, !4347, !2351}
!4347 = !DILocation(line: 924, column: 9, scope: !4335)
!4348 = !DILocation(line: 0, scope: !4335)
!4349 = !DILocation(line: 925, column: 34, scope: !4135)
!4350 = !DILocation(line: 925, column: 47, scope: !4135)
!4351 = !DILocation(line: 925, column: 78, scope: !4135)
!4352 = !DILocation(line: 925, column: 68, scope: !4135)
!4353 = !DILocation(line: 925, column: 20, scope: !4135)
!4354 = !DILocation(line: 926, column: 38, scope: !4135)
!4355 = !DILocation(line: 926, column: 59, scope: !4135)
!4356 = !DILocation(line: 926, column: 17, scope: !4135)
!4357 = !DILocation(line: 927, column: 38, scope: !4135)
!4358 = !DILocation(line: 927, column: 59, scope: !4135)
!4359 = !DILocation(line: 927, column: 17, scope: !4135)
!4360 = !DILocation(line: 928, column: 38, scope: !4135)
!4361 = !DILocation(line: 928, column: 61, scope: !4135)
!4362 = !DILocation(line: 928, column: 17, scope: !4135)
!4363 = !DILocation(line: 929, column: 18, scope: !4135)
!4364 = !DILocation(line: 930, column: 15, scope: !4135)
!4365 = !DILocation(line: 939, column: 40, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4324, file: !3, line: 939, column: 13)
!4367 = !DILocation(line: 939, column: 32, scope: !4366)
!4368 = !DILocation(line: 939, column: 31, scope: !4366)
!4369 = !DILocation(line: 939, column: 16, scope: !4366)
!4370 = !DILocation(line: 939, column: 13, scope: !4324)
!4371 = !DILocation(line: 938, column: 64, scope: !4325)
!4372 = !DILocation(line: 938, column: 44, scope: !4325)
!4373 = !DILocation(line: 0, scope: !4322)
!4374 = !DILocation(line: 943, column: 32, scope: !4137)
!4375 = !DILocation(line: 943, column: 45, scope: !4137)
!4376 = !DILocation(line: 943, column: 76, scope: !4137)
!4377 = !DILocation(line: 943, column: 66, scope: !4137)
!4378 = !DILocation(line: 943, column: 18, scope: !4137)
!4379 = !DILocation(line: 945, column: 36, scope: !4137)
!4380 = !DILocation(line: 945, column: 28, scope: !4137)
!4381 = !DILocation(line: 945, column: 51, scope: !4137)
!4382 = !DILocation(line: 945, column: 43, scope: !4137)
!4383 = !DILocation(line: 945, column: 42, scope: !4137)
!4384 = !DILocation(line: 946, column: 36, scope: !4137)
!4385 = !DILocation(line: 946, column: 67, scope: !4137)
!4386 = !DILocation(line: 946, column: 57, scope: !4137)
!4387 = !DILocation(line: 946, column: 15, scope: !4137)
!4388 = !DILocation(line: 947, column: 36, scope: !4137)
!4389 = !DILocation(line: 947, column: 94, scope: !4137)
!4390 = !DILocation(line: 947, column: 86, scope: !4137)
!4391 = !DILocation(line: 947, column: 85, scope: !4137)
!4392 = !DILocation(line: 947, column: 57, scope: !4137)
!4393 = !DILocation(line: 947, column: 15, scope: !4137)
!4394 = !DILocation(line: 948, column: 7, scope: !4137)
!4395 = !DILocation(line: 948, column: 10, scope: !4137)
!4396 = !DILocation(line: 948, column: 21, scope: !4137)
!4397 = !DILocation(line: 0, scope: !4149)
!4398 = !DILocation(line: 949, column: 35, scope: !4154)
!4399 = !{!4313, !2096, i64 4}
!4400 = !DILocation(line: 949, column: 25, scope: !4154)
!4401 = !DILocation(line: 949, column: 7, scope: !4149)
!4402 = !DILocation(line: 983, column: 25, scope: !4137)
!4403 = !DILocation(line: 983, column: 7, scope: !4137)
!4404 = !DILocation(line: 984, column: 36, scope: !4137)
!4405 = !DILocation(line: 984, column: 15, scope: !4137)
!4406 = !DILocation(line: 985, column: 16, scope: !4137)
!4407 = !DILocation(line: 986, column: 51, scope: !4137)
!4408 = !DILocation(line: 986, column: 43, scope: !4137)
!4409 = !DILocation(line: 986, column: 42, scope: !4137)
!4410 = !DILocation(line: 987, column: 7, scope: !4137)
!4411 = !DILocation(line: 988, column: 5, scope: !4138)
!4412 = !DILocation(line: 998, column: 3, scope: !4139)
!4413 = !DILocation(line: 951, column: 21, scope: !4152)
!4414 = !DILocation(line: 951, column: 13, scope: !4152)
!4415 = !DILocation(line: 951, column: 39, scope: !4152)
!4416 = !DILocation(line: 951, column: 31, scope: !4152)
!4417 = !DILocation(line: 951, column: 28, scope: !4152)
!4418 = !DILocation(line: 951, column: 13, scope: !4153)
!4419 = !DILocation(line: 971, column: 32, scope: !4420)
!4420 = distinct !DILexicalBlock(scope: !4421, file: !3, line: 971, column: 9)
!4421 = distinct !DILexicalBlock(scope: !4153, file: !3, line: 971, column: 9)
!4422 = !DILocation(line: 971, column: 9, scope: !4421)
!4423 = !DILocation(line: 973, column: 40, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !4420, file: !3, line: 971, column: 70)
!4425 = !DILocation(line: 973, column: 17, scope: !4424)
!4426 = !DILocation(line: 971, column: 55, scope: !4420)
!4427 = !DILocation(line: 971, column: 47, scope: !4420)
!4428 = distinct !{!4428, !4422, !4429, !2351}
!4429 = !DILocation(line: 974, column: 9, scope: !4421)
!4430 = !DILocation(line: 973, column: 14, scope: !4424)
!4431 = !DILocation(line: 954, column: 30, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 954, column: 15)
!4433 = !DILocation(line: 954, column: 15, scope: !4151)
!4434 = !DILocation(line: 959, column: 30, scope: !4435)
!4435 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 959, column: 13)
!4436 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 959, column: 13)
!4437 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 957, column: 18)
!4438 = !DILocation(line: 959, column: 13, scope: !4436)
!4439 = !DILocation(line: 955, column: 33, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 954, column: 37)
!4441 = !DILocation(line: 955, column: 46, scope: !4440)
!4442 = !DILocation(line: 955, column: 67, scope: !4440)
!4443 = !DILocation(line: 955, column: 19, scope: !4440)
!4444 = !DILocation(line: 0, scope: !4151)
!4445 = !DILocation(line: 956, column: 38, scope: !4440)
!4446 = !DILocation(line: 956, column: 59, scope: !4440)
!4447 = !DILocation(line: 956, column: 19, scope: !4440)
!4448 = !DILocation(line: 957, column: 11, scope: !4440)
!4449 = !DILocation(line: 960, column: 44, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4435, file: !3, line: 959, column: 68)
!4451 = !DILocation(line: 960, column: 21, scope: !4450)
!4452 = !DILocation(line: 960, column: 18, scope: !4450)
!4453 = !DILocation(line: 959, column: 64, scope: !4435)
!4454 = !DILocation(line: 959, column: 53, scope: !4435)
!4455 = !DILocation(line: 959, column: 45, scope: !4435)
!4456 = !DILocation(line: 959, column: 44, scope: !4435)
!4457 = distinct !{!4457, !4438, !4458, !2351}
!4458 = !DILocation(line: 961, column: 13, scope: !4436)
!4459 = !DILocation(line: 0, scope: !4436)
!4460 = !DILocation(line: 962, column: 33, scope: !4437)
!4461 = !DILocation(line: 962, column: 46, scope: !4437)
!4462 = !DILocation(line: 962, column: 77, scope: !4437)
!4463 = !DILocation(line: 962, column: 67, scope: !4437)
!4464 = !DILocation(line: 962, column: 19, scope: !4437)
!4465 = !DILocation(line: 963, column: 38, scope: !4437)
!4466 = !DILocation(line: 963, column: 59, scope: !4437)
!4467 = !DILocation(line: 963, column: 19, scope: !4437)
!4468 = !DILocation(line: 0, scope: !4432)
!4469 = !DILocation(line: 965, column: 36, scope: !4151)
!4470 = !DILocation(line: 965, column: 57, scope: !4151)
!4471 = !DILocation(line: 965, column: 17, scope: !4151)
!4472 = !DILocation(line: 966, column: 36, scope: !4151)
!4473 = !DILocation(line: 966, column: 55, scope: !4151)
!4474 = !DILocation(line: 966, column: 17, scope: !4151)
!4475 = !DILocation(line: 967, column: 22, scope: !4151)
!4476 = !DILocation(line: 972, column: 42, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4424, file: !3, line: 972, column: 15)
!4478 = !DILocation(line: 972, column: 34, scope: !4477)
!4479 = !DILocation(line: 972, column: 33, scope: !4477)
!4480 = !DILocation(line: 972, column: 18, scope: !4477)
!4481 = !DILocation(line: 972, column: 15, scope: !4424)
!4482 = !DILocation(line: 971, column: 66, scope: !4420)
!4483 = !DILocation(line: 971, column: 46, scope: !4420)
!4484 = !DILocation(line: 976, column: 39, scope: !4153)
!4485 = !DILocation(line: 976, column: 31, scope: !4153)
!4486 = !DILocation(line: 0, scope: !4421)
!4487 = !DILocation(line: 976, column: 30, scope: !4153)
!4488 = !DILocation(line: 977, column: 32, scope: !4153)
!4489 = !DILocation(line: 977, column: 45, scope: !4153)
!4490 = !DILocation(line: 977, column: 76, scope: !4153)
!4491 = !DILocation(line: 977, column: 66, scope: !4153)
!4492 = !DILocation(line: 977, column: 18, scope: !4153)
!4493 = !DILocation(line: 0, scope: !4153)
!4494 = !DILocation(line: 978, column: 34, scope: !4153)
!4495 = !DILocation(line: 978, column: 65, scope: !4153)
!4496 = !DILocation(line: 978, column: 55, scope: !4153)
!4497 = !DILocation(line: 978, column: 15, scope: !4153)
!4498 = !DILocation(line: 979, column: 34, scope: !4153)
!4499 = !DILocation(line: 979, column: 92, scope: !4153)
!4500 = !DILocation(line: 979, column: 84, scope: !4153)
!4501 = !DILocation(line: 979, column: 83, scope: !4153)
!4502 = !DILocation(line: 979, column: 55, scope: !4153)
!4503 = !DILocation(line: 979, column: 15, scope: !4153)
!4504 = !DILocation(line: 980, column: 34, scope: !4153)
!4505 = !DILocation(line: 980, column: 53, scope: !4153)
!4506 = !DILocation(line: 980, column: 15, scope: !4153)
!4507 = !DILocation(line: 981, column: 20, scope: !4153)
!4508 = !DILocation(line: 982, column: 7, scope: !4153)
!4509 = !DILocation(line: 949, column: 45, scope: !4154)
!4510 = distinct !{!4510, !4401, !4511, !2351}
!4511 = !DILocation(line: 982, column: 7, scope: !4149)
!4512 = !DILocation(line: 988, column: 24, scope: !4158)
!4513 = !DILocation(line: 988, column: 16, scope: !4138)
!4514 = !DILocation(line: 991, column: 7, scope: !4157)
!4515 = !DILocation(line: 991, column: 13, scope: !4157)
!4516 = !DILocation(line: 992, column: 7, scope: !4157)
!4517 = !DILocation(line: 993, column: 7, scope: !4157)
!4518 = !DILocation(line: 994, column: 53, scope: !4157)
!4519 = !DILocation(line: 995, column: 13, scope: !4157)
!4520 = !DILocation(line: 994, column: 36, scope: !4157)
!4521 = !DILocation(line: 994, column: 16, scope: !4157)
!4522 = !DILocation(line: 997, column: 5, scope: !4158)
!4523 = !DILocation(line: 998, column: 19, scope: !3915)
!4524 = distinct !{!4524, !4300, !4525, !2351}
!4525 = !DILocation(line: 998, column: 34, scope: !3915)
!4526 = !DILocation(line: 999, column: 3, scope: !3915)
!4527 = !DILocation(line: 1003, column: 13, scope: !3915)
!4528 = !DILocation(line: 1003, column: 3, scope: !3915)
!4529 = !DILocation(line: 1004, column: 3, scope: !3915)
!4530 = !DILocation(line: 1005, column: 3, scope: !3915)
!4531 = !DILocation(line: 1007, column: 1, scope: !3915)
!4532 = distinct !DISubprogram(name: "f_modulemeta", scope: !3, file: !3, line: 1200, type: !374, scopeLine: 1200, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4533)
!4533 = !{!4534, !4535}
!4534 = !DILocalVariable(name: "jq", arg: 1, scope: !4532, file: !3, line: 1200, type: !201)
!4535 = !DILocalVariable(name: "a", arg: 2, scope: !4532, file: !3, line: 1200, type: !112)
!4536 = !DILocation(line: 0, scope: !4532)
!4537 = !DILocation(line: 1201, column: 7, scope: !4538)
!4538 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 1201, column: 7)
!4539 = !DILocation(line: 1201, column: 22, scope: !4538)
!4540 = !DILocation(line: 1201, column: 7, scope: !4532)
!4541 = !DILocation(line: 1202, column: 25, scope: !4542)
!4542 = distinct !DILexicalBlock(scope: !4538, file: !3, line: 1201, column: 41)
!4543 = !DILocation(line: 0, scope: !2874, inlinedAt: !4544)
!4544 = distinct !DILocation(line: 1202, column: 12, scope: !4542)
!4545 = !DILocation(line: 74, column: 3, scope: !2874, inlinedAt: !4544)
!4546 = !DILocation(line: 75, column: 10, scope: !2874, inlinedAt: !4544)
!4547 = !DILocation(line: 1202, column: 5, scope: !4542)
!4548 = !DILocation(line: 1204, column: 10, scope: !4532)
!4549 = !DILocation(line: 1204, column: 3, scope: !4532)
!4550 = !DILocation(line: 1205, column: 1, scope: !4532)
!4551 = distinct !DISubprogram(name: "f_input", scope: !3, file: !3, line: 1207, type: !374, scopeLine: 1207, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4552)
!4552 = !{!4553, !4554, !4555, !4560, !4561}
!4553 = !DILocalVariable(name: "jq", arg: 1, scope: !4551, file: !3, line: 1207, type: !201)
!4554 = !DILocalVariable(name: "input", arg: 2, scope: !4551, file: !3, line: 1207, type: !112)
!4555 = !DILocalVariable(name: "cb", scope: !4551, file: !3, line: 1209, type: !4556)
!4556 = !DIDerivedType(tag: DW_TAG_typedef, name: "jq_input_cb", file: !203, line: 34, baseType: !4557)
!4557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4558, size: 64)
!4558 = !DISubroutineType(types: !4559)
!4559 = !{!112, !201, !102}
!4560 = !DILocalVariable(name: "data", scope: !4551, file: !3, line: 1210, type: !102)
!4561 = !DILocalVariable(name: "v", scope: !4551, file: !3, line: 1214, type: !112)
!4562 = !DILocation(line: 0, scope: !4551)
!4563 = !DILocation(line: 1208, column: 3, scope: !4551)
!4564 = !DILocation(line: 1209, column: 3, scope: !4551)
!4565 = !DILocation(line: 1210, column: 3, scope: !4551)
!4566 = !DILocation(line: 1211, column: 3, scope: !4551)
!4567 = !DILocation(line: 1212, column: 7, scope: !4568)
!4568 = distinct !DILexicalBlock(scope: !4551, file: !3, line: 1212, column: 7)
!4569 = !DILocation(line: 1212, column: 10, scope: !4568)
!4570 = !DILocation(line: 1212, column: 7, scope: !4551)
!4571 = !DILocation(line: 1214, column: 17, scope: !4551)
!4572 = !DILocation(line: 1214, column: 10, scope: !4551)
!4573 = !DILocation(line: 0, scope: !2583, inlinedAt: !4574)
!4574 = distinct !DILocation(line: 1215, column: 7, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4551, file: !3, line: 1215, column: 7)
!4576 = !DILocation(line: 41, column: 39, scope: !2583, inlinedAt: !4574)
!4577 = !DILocation(line: 41, column: 54, scope: !2583, inlinedAt: !4574)
!4578 = !DILocation(line: 1215, column: 22, scope: !4575)
!4579 = !DILocation(line: 1215, column: 44, scope: !4575)
!4580 = !DILocation(line: 1215, column: 25, scope: !4575)
!4581 = !DILocation(line: 1215, column: 7, scope: !4551)
!4582 = !DILocation(line: 1218, column: 1, scope: !4551)
!4583 = distinct !DISubprogram(name: "f_debug", scope: !3, file: !3, line: 1220, type: !374, scopeLine: 1220, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4584)
!4584 = !{!4585, !4586, !4587, !4592}
!4585 = !DILocalVariable(name: "jq", arg: 1, scope: !4583, file: !3, line: 1220, type: !201)
!4586 = !DILocalVariable(name: "input", arg: 2, scope: !4583, file: !3, line: 1220, type: !112)
!4587 = !DILocalVariable(name: "cb", scope: !4583, file: !3, line: 1221, type: !4588)
!4588 = !DIDerivedType(tag: DW_TAG_typedef, name: "jq_msg_cb", file: !203, line: 14, baseType: !4589)
!4589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4590, size: 64)
!4590 = !DISubroutineType(types: !4591)
!4591 = !{null, !102, !112}
!4592 = !DILocalVariable(name: "data", scope: !4583, file: !3, line: 1222, type: !102)
!4593 = !DILocation(line: 0, scope: !4583)
!4594 = !DILocation(line: 1221, column: 3, scope: !4583)
!4595 = !DILocation(line: 1222, column: 3, scope: !4583)
!4596 = !DILocation(line: 1223, column: 3, scope: !4583)
!4597 = !DILocation(line: 1224, column: 7, scope: !4598)
!4598 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 1224, column: 7)
!4599 = !DILocation(line: 1224, column: 10, scope: !4598)
!4600 = !DILocation(line: 1224, column: 7, scope: !4583)
!4601 = !DILocation(line: 1225, column: 8, scope: !4598)
!4602 = !DILocation(line: 1225, column: 14, scope: !4598)
!4603 = !DILocation(line: 1225, column: 5, scope: !4598)
!4604 = !DILocation(line: 1227, column: 1, scope: !4583)
!4605 = distinct !DISubprogram(name: "f_stderr", scope: !3, file: !3, line: 1229, type: !374, scopeLine: 1229, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4606)
!4606 = !{!4607, !4608}
!4607 = !DILocalVariable(name: "jq", arg: 1, scope: !4605, file: !3, line: 1229, type: !201)
!4608 = !DILocalVariable(name: "input", arg: 2, scope: !4605, file: !3, line: 1229, type: !112)
!4609 = !DILocation(line: 0, scope: !4605)
!4610 = !DILocation(line: 1230, column: 12, scope: !4605)
!4611 = !DILocation(line: 1230, column: 28, scope: !4605)
!4612 = !DILocation(line: 1230, column: 3, scope: !4605)
!4613 = !DILocation(line: 1231, column: 3, scope: !4605)
!4614 = distinct !DISubprogram(name: "f_strptime", scope: !3, file: !3, line: 1386, type: !2689, scopeLine: 1386, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4615)
!4615 = !{!4616, !4617, !4618, !4619, !4620, !4621, !4622, !4623}
!4616 = !DILocalVariable(name: "jq", arg: 1, scope: !4614, file: !3, line: 1386, type: !201)
!4617 = !DILocalVariable(name: "a", arg: 2, scope: !4614, file: !3, line: 1386, type: !112)
!4618 = !DILocalVariable(name: "b", arg: 3, scope: !4614, file: !3, line: 1386, type: !112)
!4619 = !DILocalVariable(name: "tm", scope: !4614, file: !3, line: 1391, type: !165)
!4620 = !DILocalVariable(name: "input", scope: !4614, file: !3, line: 1395, type: !109)
!4621 = !DILocalVariable(name: "fmt", scope: !4614, file: !3, line: 1396, type: !109)
!4622 = !DILocalVariable(name: "end", scope: !4614, file: !3, line: 1403, type: !109)
!4623 = !DILocalVariable(name: "r", scope: !4614, file: !3, line: 1434, type: !112)
!4624 = !DILocation(line: 0, scope: !4614)
!4625 = !DILocation(line: 1387, column: 7, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 1387, column: 7)
!4627 = !DILocation(line: 1387, column: 22, scope: !4626)
!4628 = !DILocation(line: 1387, column: 40, scope: !4626)
!4629 = !DILocation(line: 1387, column: 43, scope: !4626)
!4630 = !DILocation(line: 1387, column: 58, scope: !4626)
!4631 = !DILocation(line: 1387, column: 7, scope: !4614)
!4632 = !DILocation(line: 1388, column: 29, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 1387, column: 77)
!4634 = !DILocation(line: 0, scope: !2708, inlinedAt: !4635)
!4635 = distinct !DILocation(line: 1388, column: 12, scope: !4633)
!4636 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !4635)
!4637 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !4635)
!4638 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !4635)
!4639 = !DILocation(line: 1388, column: 12, scope: !4633)
!4640 = !DILocation(line: 1388, column: 5, scope: !4633)
!4641 = !DILocation(line: 1391, column: 3, scope: !4614)
!4642 = !DILocation(line: 1391, column: 13, scope: !4614)
!4643 = !DILocation(line: 1392, column: 3, scope: !4614)
!4644 = !DILocation(line: 1393, column: 6, scope: !4614)
!4645 = !DILocation(line: 1393, column: 14, scope: !4614)
!4646 = !{!4647, !2096, i64 24}
!4647 = !{!"tm", !2096, i64 0, !2096, i64 4, !2096, i64 8, !2096, i64 12, !2096, i64 16, !2096, i64 20, !2096, i64 24, !2096, i64 28, !2096, i64 32, !4648, i64 40, !301, i64 48}
!4648 = !{!"long", !302, i64 0}
!4649 = !DILocation(line: 1394, column: 6, scope: !4614)
!4650 = !DILocation(line: 1394, column: 14, scope: !4614)
!4651 = !{!4647, !2096, i64 28}
!4652 = !DILocation(line: 1395, column: 23, scope: !4614)
!4653 = !DILocation(line: 1396, column: 21, scope: !4614)
!4654 = !DILocation(line: 1403, column: 21, scope: !4614)
!4655 = !DILocation(line: 1404, column: 11, scope: !4656)
!4656 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 1404, column: 7)
!4657 = !DILocation(line: 1404, column: 19, scope: !4656)
!4658 = !DILocation(line: 1404, column: 23, scope: !4656)
!4659 = !DILocation(line: 1404, column: 28, scope: !4656)
!4660 = !DILocation(line: 1404, column: 36, scope: !4656)
!4661 = !DILocation(line: 1404, column: 40, scope: !4656)
!4662 = !DILocation(line: 1404, column: 7, scope: !4614)
!4663 = !DILocation(line: 1405, column: 29, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4656, file: !3, line: 1404, column: 56)
!4665 = !DILocation(line: 0, scope: !2708, inlinedAt: !4666)
!4666 = distinct !DILocation(line: 1405, column: 12, scope: !4664)
!4667 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !4666)
!4668 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !4666)
!4669 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !4666)
!4670 = !DILocation(line: 1405, column: 12, scope: !4664)
!4671 = !DILocation(line: 1405, column: 5, scope: !4664)
!4672 = !DILocation(line: 1407, column: 3, scope: !4614)
!4673 = !DILocation(line: 1429, column: 10, scope: !4674)
!4674 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 1429, column: 7)
!4675 = !DILocation(line: 1429, column: 18, scope: !4674)
!4676 = !DILocation(line: 1429, column: 23, scope: !4674)
!4677 = !DILocation(line: 1429, column: 29, scope: !4674)
!4678 = !{!4647, !2096, i64 12}
!4679 = !DILocation(line: 1429, column: 37, scope: !4674)
!4680 = !DILocation(line: 1429, column: 42, scope: !4674)
!4681 = !DILocation(line: 1429, column: 48, scope: !4674)
!4682 = !{!4647, !2096, i64 16}
!4683 = !DILocation(line: 1429, column: 60, scope: !4674)
!4684 = !DILocation(line: 1430, column: 5, scope: !4674)
!4685 = !DILocation(line: 1431, column: 10, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 1431, column: 7)
!4687 = !DILocation(line: 1431, column: 18, scope: !4686)
!4688 = !DILocation(line: 1431, column: 25, scope: !4686)
!4689 = !DILocation(line: 1431, column: 31, scope: !4686)
!4690 = !DILocation(line: 1431, column: 39, scope: !4686)
!4691 = !DILocation(line: 1431, column: 44, scope: !4686)
!4692 = !DILocation(line: 1431, column: 50, scope: !4686)
!4693 = !DILocation(line: 1431, column: 62, scope: !4686)
!4694 = !DILocation(line: 1432, column: 5, scope: !4686)
!4695 = !DILocation(line: 1434, column: 10, scope: !4614)
!4696 = !DILocation(line: 1435, column: 7, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 1435, column: 7)
!4698 = !DILocation(line: 1435, column: 12, scope: !4697)
!4699 = !DILocation(line: 1435, column: 7, scope: !4614)
!4700 = !DILocation(line: 1436, column: 28, scope: !4697)
!4701 = !DILocation(line: 1436, column: 9, scope: !4697)
!4702 = !DILocation(line: 1436, column: 5, scope: !4697)
!4703 = !DILocation(line: 1437, column: 3, scope: !4614)
!4704 = !DILocation(line: 1439, column: 1, scope: !4614)
!4705 = distinct !DISubprogram(name: "f_strftime", scope: !3, file: !3, line: 1569, type: !2689, scopeLine: 1569, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4706)
!4706 = !{!4707, !4708, !4709, !4710, !4711, !4712, !4713, !4714}
!4707 = !DILocalVariable(name: "jq", arg: 1, scope: !4705, file: !3, line: 1569, type: !201)
!4708 = !DILocalVariable(name: "a", arg: 2, scope: !4705, file: !3, line: 1569, type: !112)
!4709 = !DILocalVariable(name: "b", arg: 3, scope: !4705, file: !3, line: 1569, type: !112)
!4710 = !DILocalVariable(name: "tm", scope: !4705, file: !3, line: 1581, type: !165)
!4711 = !DILocalVariable(name: "fmt", scope: !4705, file: !3, line: 1585, type: !109)
!4712 = !DILocalVariable(name: "alloced", scope: !4705, file: !3, line: 1586, type: !2386)
!4713 = !DILocalVariable(name: "buf", scope: !4705, file: !3, line: 1587, type: !107)
!4714 = !DILocalVariable(name: "n", scope: !4705, file: !3, line: 1588, type: !2386)
!4715 = !DILocation(line: 0, scope: !4705)
!4716 = !DILocation(line: 1570, column: 7, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 1570, column: 7)
!4718 = !DILocation(line: 1570, column: 22, scope: !4717)
!4719 = !DILocation(line: 1570, column: 7, scope: !4705)
!4720 = !DILocation(line: 1571, column: 9, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4717, file: !3, line: 1570, column: 41)
!4722 = !DILocation(line: 0, scope: !2583, inlinedAt: !4723)
!4723 = distinct !DILocation(line: 1572, column: 10, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 1572, column: 9)
!4725 = !DILocation(line: 41, column: 39, scope: !2583, inlinedAt: !4723)
!4726 = !DILocation(line: 41, column: 54, scope: !2583, inlinedAt: !4723)
!4727 = !DILocation(line: 1572, column: 9, scope: !4721)
!4728 = !DILocation(line: 1573, column: 7, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 1572, column: 26)
!4730 = !DILocation(line: 1574, column: 7, scope: !4729)
!4731 = !DILocation(line: 1576, column: 14, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4717, file: !3, line: 1576, column: 14)
!4733 = !DILocation(line: 1576, column: 29, scope: !4732)
!4734 = !DILocation(line: 1576, column: 14, scope: !4717)
!4735 = !DILocation(line: 1577, column: 29, scope: !4736)
!4736 = distinct !DILexicalBlock(scope: !4732, file: !3, line: 1576, column: 47)
!4737 = !DILocation(line: 0, scope: !2708, inlinedAt: !4738)
!4738 = distinct !DILocation(line: 1577, column: 12, scope: !4736)
!4739 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !4738)
!4740 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !4738)
!4741 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !4738)
!4742 = !DILocation(line: 1577, column: 5, scope: !4736)
!4743 = !DILocation(line: 1578, column: 14, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4732, file: !3, line: 1578, column: 14)
!4745 = !DILocation(line: 1578, column: 29, scope: !4744)
!4746 = !DILocation(line: 1578, column: 14, scope: !4732)
!4747 = !DILocation(line: 1579, column: 29, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !4744, file: !3, line: 1578, column: 48)
!4749 = !DILocation(line: 0, scope: !2708, inlinedAt: !4750)
!4750 = distinct !DILocation(line: 1579, column: 12, scope: !4748)
!4751 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !4750)
!4752 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !4750)
!4753 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !4750)
!4754 = !DILocation(line: 1579, column: 5, scope: !4748)
!4755 = !DILocation(line: 1581, column: 3, scope: !4705)
!4756 = !DILocation(line: 1581, column: 13, scope: !4705)
!4757 = !DILocation(line: 1582, column: 8, scope: !4758)
!4758 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 1582, column: 7)
!4759 = !DILocation(line: 1582, column: 7, scope: !4705)
!4760 = !DILocation(line: 1583, column: 25, scope: !4758)
!4761 = !DILocation(line: 0, scope: !2874, inlinedAt: !4762)
!4762 = distinct !DILocation(line: 1583, column: 12, scope: !4758)
!4763 = !DILocation(line: 74, column: 3, scope: !2874, inlinedAt: !4762)
!4764 = !DILocation(line: 75, column: 10, scope: !2874, inlinedAt: !4762)
!4765 = !DILocation(line: 1583, column: 5, scope: !4758)
!4766 = !DILocation(line: 1585, column: 21, scope: !4705)
!4767 = !DILocation(line: 1586, column: 20, scope: !4705)
!4768 = !DILocation(line: 1586, column: 32, scope: !4705)
!4769 = !DILocation(line: 1587, column: 15, scope: !4705)
!4770 = !DILocation(line: 1588, column: 14, scope: !4705)
!4771 = !DILocation(line: 1589, column: 3, scope: !4705)
!4772 = !DILocation(line: 1591, column: 9, scope: !4773)
!4773 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 1591, column: 7)
!4774 = !DILocation(line: 1591, column: 14, scope: !4773)
!4775 = !DILocation(line: 1592, column: 32, scope: !4773)
!4776 = !DILocation(line: 1592, column: 12, scope: !4773)
!4777 = !DILocation(line: 1592, column: 5, scope: !4773)
!4778 = !DILocation(line: 1593, column: 10, scope: !4705)
!4779 = !DILocation(line: 1593, column: 3, scope: !4705)
!4780 = !DILocation(line: 1594, column: 1, scope: !4705)
!4781 = distinct !DISubprogram(name: "f_strflocaltime", scope: !3, file: !3, line: 1604, type: !2689, scopeLine: 1604, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4782)
!4782 = !{!4783, !4784, !4785, !4786, !4787, !4788, !4789, !4790}
!4783 = !DILocalVariable(name: "jq", arg: 1, scope: !4781, file: !3, line: 1604, type: !201)
!4784 = !DILocalVariable(name: "a", arg: 2, scope: !4781, file: !3, line: 1604, type: !112)
!4785 = !DILocalVariable(name: "b", arg: 3, scope: !4781, file: !3, line: 1604, type: !112)
!4786 = !DILocalVariable(name: "tm", scope: !4781, file: !3, line: 1612, type: !165)
!4787 = !DILocalVariable(name: "fmt", scope: !4781, file: !3, line: 1615, type: !109)
!4788 = !DILocalVariable(name: "alloced", scope: !4781, file: !3, line: 1616, type: !2386)
!4789 = !DILocalVariable(name: "buf", scope: !4781, file: !3, line: 1617, type: !107)
!4790 = !DILocalVariable(name: "n", scope: !4781, file: !3, line: 1618, type: !2386)
!4791 = !DILocation(line: 0, scope: !4781)
!4792 = !DILocation(line: 1605, column: 7, scope: !4793)
!4793 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 1605, column: 7)
!4794 = !DILocation(line: 1605, column: 22, scope: !4793)
!4795 = !DILocation(line: 1605, column: 7, scope: !4781)
!4796 = !DILocation(line: 1606, column: 9, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4793, file: !3, line: 1605, column: 41)
!4798 = !DILocation(line: 1607, column: 3, scope: !4797)
!4799 = !DILocation(line: 1607, column: 14, scope: !4800)
!4800 = distinct !DILexicalBlock(scope: !4793, file: !3, line: 1607, column: 14)
!4801 = !DILocation(line: 1607, column: 29, scope: !4800)
!4802 = !DILocation(line: 1607, column: 14, scope: !4793)
!4803 = !DILocation(line: 1608, column: 29, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4800, file: !3, line: 1607, column: 47)
!4805 = !DILocation(line: 0, scope: !2708, inlinedAt: !4806)
!4806 = distinct !DILocation(line: 1608, column: 12, scope: !4804)
!4807 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !4806)
!4808 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !4806)
!4809 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !4806)
!4810 = !DILocation(line: 1608, column: 5, scope: !4804)
!4811 = !DILocation(line: 1609, column: 14, scope: !4812)
!4812 = distinct !DILexicalBlock(scope: !4800, file: !3, line: 1609, column: 14)
!4813 = !DILocation(line: 1609, column: 29, scope: !4812)
!4814 = !DILocation(line: 1609, column: 14, scope: !4800)
!4815 = !DILocation(line: 1610, column: 29, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4812, file: !3, line: 1609, column: 48)
!4817 = !DILocation(line: 0, scope: !2708, inlinedAt: !4818)
!4818 = distinct !DILocation(line: 1610, column: 12, scope: !4816)
!4819 = !DILocation(line: 79, column: 3, scope: !2708, inlinedAt: !4818)
!4820 = !DILocation(line: 80, column: 3, scope: !2708, inlinedAt: !4818)
!4821 = !DILocation(line: 81, column: 10, scope: !2708, inlinedAt: !4818)
!4822 = !DILocation(line: 1610, column: 5, scope: !4816)
!4823 = !DILocation(line: 1612, column: 3, scope: !4781)
!4824 = !DILocation(line: 1612, column: 13, scope: !4781)
!4825 = !DILocation(line: 1613, column: 8, scope: !4826)
!4826 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 1613, column: 7)
!4827 = !DILocation(line: 1613, column: 7, scope: !4781)
!4828 = !DILocation(line: 1614, column: 32, scope: !4826)
!4829 = !DILocation(line: 1614, column: 12, scope: !4826)
!4830 = !DILocation(line: 1614, column: 5, scope: !4826)
!4831 = !DILocation(line: 1615, column: 21, scope: !4781)
!4832 = !DILocation(line: 1616, column: 20, scope: !4781)
!4833 = !DILocation(line: 1616, column: 32, scope: !4781)
!4834 = !DILocation(line: 1617, column: 15, scope: !4781)
!4835 = !DILocation(line: 1618, column: 14, scope: !4781)
!4836 = !DILocation(line: 1619, column: 3, scope: !4781)
!4837 = !DILocation(line: 1621, column: 9, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 1621, column: 7)
!4839 = !DILocation(line: 1621, column: 14, scope: !4838)
!4840 = !DILocation(line: 1622, column: 32, scope: !4838)
!4841 = !DILocation(line: 1622, column: 12, scope: !4838)
!4842 = !DILocation(line: 1622, column: 5, scope: !4838)
!4843 = !DILocation(line: 1623, column: 10, scope: !4781)
!4844 = !DILocation(line: 1623, column: 3, scope: !4781)
!4845 = !DILocation(line: 1624, column: 1, scope: !4781)
!4846 = distinct !DISubprogram(name: "f_mktime", scope: !3, file: !3, line: 1478, type: !374, scopeLine: 1478, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4847)
!4847 = !{!4848, !4849, !4850, !4851}
!4848 = !DILocalVariable(name: "jq", arg: 1, scope: !4846, file: !3, line: 1478, type: !201)
!4849 = !DILocalVariable(name: "a", arg: 2, scope: !4846, file: !3, line: 1478, type: !112)
!4850 = !DILocalVariable(name: "tm", scope: !4846, file: !3, line: 1483, type: !165)
!4851 = !DILocalVariable(name: "t", scope: !4846, file: !3, line: 1486, type: !128)
!4852 = !DILocation(line: 0, scope: !4846)
!4853 = !DILocation(line: 1479, column: 7, scope: !4854)
!4854 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 1479, column: 7)
!4855 = !DILocation(line: 1479, column: 22, scope: !4854)
!4856 = !DILocation(line: 1479, column: 7, scope: !4846)
!4857 = !DILocation(line: 1480, column: 25, scope: !4854)
!4858 = !DILocation(line: 0, scope: !2874, inlinedAt: !4859)
!4859 = distinct !DILocation(line: 1480, column: 12, scope: !4854)
!4860 = !DILocation(line: 74, column: 3, scope: !2874, inlinedAt: !4859)
!4861 = !DILocation(line: 75, column: 10, scope: !2874, inlinedAt: !4859)
!4862 = !DILocation(line: 1480, column: 5, scope: !4854)
!4863 = !DILocation(line: 1481, column: 23, scope: !4864)
!4864 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 1481, column: 7)
!4865 = !DILocation(line: 1481, column: 7, scope: !4864)
!4866 = !DILocation(line: 1481, column: 35, scope: !4864)
!4867 = !DILocation(line: 1481, column: 7, scope: !4846)
!4868 = !DILocation(line: 1482, column: 25, scope: !4864)
!4869 = !DILocation(line: 0, scope: !2874, inlinedAt: !4870)
!4870 = distinct !DILocation(line: 1482, column: 12, scope: !4864)
!4871 = !DILocation(line: 74, column: 3, scope: !2874, inlinedAt: !4870)
!4872 = !DILocation(line: 75, column: 10, scope: !2874, inlinedAt: !4870)
!4873 = !DILocation(line: 1482, column: 5, scope: !4864)
!4874 = !DILocation(line: 1483, column: 3, scope: !4846)
!4875 = !DILocation(line: 1483, column: 13, scope: !4846)
!4876 = !DILocation(line: 1484, column: 8, scope: !4877)
!4877 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 1484, column: 7)
!4878 = !DILocation(line: 1484, column: 7, scope: !4846)
!4879 = !DILocation(line: 1485, column: 32, scope: !4877)
!4880 = !DILocation(line: 1485, column: 12, scope: !4877)
!4881 = !DILocation(line: 1485, column: 5, scope: !4877)
!4882 = !DILocalVariable(name: "tm", arg: 1, scope: !4883, file: !3, line: 1281, type: !164)
!4883 = distinct !DISubprogram(name: "my_mktime", scope: !3, file: !3, line: 1281, type: !4884, scopeLine: 1281, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4886)
!4884 = !DISubroutineType(types: !4885)
!4885 = !{!128, !164}
!4886 = !{!4882}
!4887 = !DILocation(line: 0, scope: !4883, inlinedAt: !4888)
!4888 = distinct !DILocation(line: 1486, column: 14, scope: !4846)
!4889 = !DILocation(line: 1283, column: 10, scope: !4883, inlinedAt: !4888)
!4890 = !DILocation(line: 1487, column: 7, scope: !4846)
!4891 = !DILocation(line: 1488, column: 32, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 1487, column: 7)
!4893 = !DILocation(line: 1488, column: 12, scope: !4892)
!4894 = !DILocation(line: 1488, column: 5, scope: !4892)
!4895 = !DILocation(line: 1490, column: 32, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 1489, column: 7)
!4897 = !DILocation(line: 1490, column: 12, scope: !4896)
!4898 = !DILocation(line: 1490, column: 5, scope: !4896)
!4899 = !DILocation(line: 1491, column: 20, scope: !4846)
!4900 = !DILocation(line: 1491, column: 10, scope: !4846)
!4901 = !DILocation(line: 1491, column: 3, scope: !4846)
!4902 = !DILocation(line: 1492, column: 1, scope: !4846)
!4903 = distinct !DISubprogram(name: "f_gmtime", scope: !3, file: !3, line: 1495, type: !374, scopeLine: 1495, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4904)
!4904 = !{!4905, !4906, !4907, !4908, !4909, !4910}
!4905 = !DILocalVariable(name: "jq", arg: 1, scope: !4903, file: !3, line: 1495, type: !201)
!4906 = !DILocalVariable(name: "a", arg: 2, scope: !4903, file: !3, line: 1495, type: !112)
!4907 = !DILocalVariable(name: "tm", scope: !4903, file: !3, line: 1498, type: !165)
!4908 = !DILocalVariable(name: "tmp", scope: !4903, file: !3, line: 1498, type: !164)
!4909 = !DILocalVariable(name: "fsecs", scope: !4903, file: !3, line: 1500, type: !127)
!4910 = !DILocalVariable(name: "secs", scope: !4903, file: !3, line: 1501, type: !128)
!4911 = !DILocation(line: 0, scope: !4903)
!4912 = !DILocation(line: 1496, column: 7, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4903, file: !3, line: 1496, column: 7)
!4914 = !DILocation(line: 1496, column: 22, scope: !4913)
!4915 = !DILocation(line: 1496, column: 7, scope: !4903)
!4916 = !DILocation(line: 1497, column: 25, scope: !4913)
!4917 = !DILocation(line: 0, scope: !2874, inlinedAt: !4918)
!4918 = distinct !DILocation(line: 1497, column: 12, scope: !4913)
!4919 = !DILocation(line: 74, column: 3, scope: !2874, inlinedAt: !4918)
!4920 = !DILocation(line: 75, column: 10, scope: !2874, inlinedAt: !4918)
!4921 = !DILocation(line: 1497, column: 5, scope: !4913)
!4922 = !DILocation(line: 1498, column: 3, scope: !4903)
!4923 = !DILocation(line: 1498, column: 13, scope: !4903)
!4924 = !DILocation(line: 1499, column: 3, scope: !4903)
!4925 = !DILocation(line: 1500, column: 18, scope: !4903)
!4926 = !DILocation(line: 1501, column: 3, scope: !4903)
!4927 = !DILocation(line: 1501, column: 17, scope: !4903)
!4928 = !DILocation(line: 1501, column: 10, scope: !4903)
!4929 = !{!4648, !4648, i64 0}
!4930 = !DILocation(line: 1502, column: 3, scope: !4903)
!4931 = !DILocation(line: 1503, column: 9, scope: !4903)
!4932 = !DILocation(line: 1504, column: 11, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4903, file: !3, line: 1504, column: 7)
!4934 = !DILocation(line: 1504, column: 7, scope: !4903)
!4935 = !DILocation(line: 1505, column: 32, scope: !4933)
!4936 = !DILocation(line: 1505, column: 12, scope: !4933)
!4937 = !DILocation(line: 1505, column: 5, scope: !4933)
!4938 = !DILocation(line: 1506, column: 7, scope: !4903)
!4939 = !DILocation(line: 1507, column: 68, scope: !4903)
!4940 = !DILocation(line: 1507, column: 55, scope: !4903)
!4941 = !DILocation(line: 1507, column: 39, scope: !4903)
!4942 = !DILocation(line: 1507, column: 95, scope: !4903)
!4943 = !DILocation(line: 1507, column: 93, scope: !4903)
!4944 = !DILocation(line: 1507, column: 84, scope: !4903)
!4945 = !DILocation(line: 1507, column: 29, scope: !4903)
!4946 = !DILocation(line: 1507, column: 10, scope: !4903)
!4947 = !DILocation(line: 1507, column: 3, scope: !4903)
!4948 = !DILocation(line: 1508, column: 1, scope: !4903)
!4949 = distinct !DISubprogram(name: "f_localtime", scope: !3, file: !3, line: 1532, type: !374, scopeLine: 1532, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4950)
!4950 = !{!4951, !4952, !4953, !4954, !4955, !4956}
!4951 = !DILocalVariable(name: "jq", arg: 1, scope: !4949, file: !3, line: 1532, type: !201)
!4952 = !DILocalVariable(name: "a", arg: 2, scope: !4949, file: !3, line: 1532, type: !112)
!4953 = !DILocalVariable(name: "tm", scope: !4949, file: !3, line: 1535, type: !165)
!4954 = !DILocalVariable(name: "tmp", scope: !4949, file: !3, line: 1535, type: !164)
!4955 = !DILocalVariable(name: "fsecs", scope: !4949, file: !3, line: 1537, type: !127)
!4956 = !DILocalVariable(name: "secs", scope: !4949, file: !3, line: 1538, type: !128)
!4957 = !DILocation(line: 0, scope: !4949)
!4958 = !DILocation(line: 1533, column: 7, scope: !4959)
!4959 = distinct !DILexicalBlock(scope: !4949, file: !3, line: 1533, column: 7)
!4960 = !DILocation(line: 1533, column: 22, scope: !4959)
!4961 = !DILocation(line: 1533, column: 7, scope: !4949)
!4962 = !DILocation(line: 1534, column: 25, scope: !4959)
!4963 = !DILocation(line: 0, scope: !2874, inlinedAt: !4964)
!4964 = distinct !DILocation(line: 1534, column: 12, scope: !4959)
!4965 = !DILocation(line: 74, column: 3, scope: !2874, inlinedAt: !4964)
!4966 = !DILocation(line: 75, column: 10, scope: !2874, inlinedAt: !4964)
!4967 = !DILocation(line: 1534, column: 5, scope: !4959)
!4968 = !DILocation(line: 1535, column: 3, scope: !4949)
!4969 = !DILocation(line: 1535, column: 13, scope: !4949)
!4970 = !DILocation(line: 1536, column: 3, scope: !4949)
!4971 = !DILocation(line: 1537, column: 18, scope: !4949)
!4972 = !DILocation(line: 1538, column: 3, scope: !4949)
!4973 = !DILocation(line: 1538, column: 17, scope: !4949)
!4974 = !DILocation(line: 1538, column: 10, scope: !4949)
!4975 = !DILocation(line: 1539, column: 3, scope: !4949)
!4976 = !DILocation(line: 1540, column: 9, scope: !4949)
!4977 = !DILocation(line: 1541, column: 11, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4949, file: !3, line: 1541, column: 7)
!4979 = !DILocation(line: 1541, column: 7, scope: !4949)
!4980 = !DILocation(line: 1542, column: 32, scope: !4978)
!4981 = !DILocation(line: 1542, column: 12, scope: !4978)
!4982 = !DILocation(line: 1542, column: 5, scope: !4978)
!4983 = !DILocation(line: 1543, column: 7, scope: !4949)
!4984 = !DILocation(line: 1544, column: 68, scope: !4949)
!4985 = !DILocation(line: 1544, column: 55, scope: !4949)
!4986 = !DILocation(line: 1544, column: 39, scope: !4949)
!4987 = !DILocation(line: 1544, column: 95, scope: !4949)
!4988 = !DILocation(line: 1544, column: 93, scope: !4949)
!4989 = !DILocation(line: 1544, column: 84, scope: !4949)
!4990 = !DILocation(line: 1544, column: 29, scope: !4949)
!4991 = !DILocation(line: 1544, column: 10, scope: !4949)
!4992 = !DILocation(line: 1544, column: 3, scope: !4949)
!4993 = !DILocation(line: 1545, column: 1, scope: !4949)
!4994 = distinct !DISubprogram(name: "f_now", scope: !3, file: !3, line: 1634, type: !374, scopeLine: 1634, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4995)
!4995 = !{!4996, !4997, !4998}
!4996 = !DILocalVariable(name: "jq", arg: 1, scope: !4994, file: !3, line: 1634, type: !201)
!4997 = !DILocalVariable(name: "a", arg: 2, scope: !4994, file: !3, line: 1634, type: !112)
!4998 = !DILocalVariable(name: "tv", scope: !4994, file: !3, line: 1636, type: !4999)
!4999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !5000, line: 8, size: 128, elements: !5001)
!5000 = !DIFile(filename: "/usr/include/bits/types/struct_timeval.h", directory: "")
!5001 = !{!5002, !5003}
!5002 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !4999, file: !5000, line: 14, baseType: !130, size: 64)
!5003 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !4999, file: !5000, line: 15, baseType: !5004, size: 64, offset: 64)
!5004 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !96, line: 162, baseType: !97)
!5005 = !DILocation(line: 0, scope: !4994)
!5006 = !DILocation(line: 1635, column: 3, scope: !4994)
!5007 = !DILocation(line: 1636, column: 3, scope: !4994)
!5008 = !DILocation(line: 1636, column: 18, scope: !4994)
!5009 = !DILocation(line: 1637, column: 7, scope: !5010)
!5010 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1637, column: 7)
!5011 = !DILocation(line: 1637, column: 31, scope: !5010)
!5012 = !DILocation(line: 1637, column: 7, scope: !4994)
!5013 = !DILocation(line: 1638, column: 22, scope: !5010)
!5014 = !DILocation(line: 1638, column: 5, scope: !5010)
!5015 = !DILocation(line: 1639, column: 23, scope: !4994)
!5016 = !{!5017, !4648, i64 0}
!5017 = !{!"timeval", !4648, i64 0, !4648, i64 8}
!5018 = !DILocation(line: 1639, column: 20, scope: !4994)
!5019 = !DILocation(line: 1639, column: 35, scope: !4994)
!5020 = !{!5017, !4648, i64 8}
!5021 = !DILocation(line: 1639, column: 32, scope: !4994)
!5022 = !DILocation(line: 1639, column: 43, scope: !4994)
!5023 = !DILocation(line: 1639, column: 30, scope: !4994)
!5024 = !DILocation(line: 1639, column: 3, scope: !4994)
!5025 = !DILocation(line: 1640, column: 1, scope: !4994)
!5026 = distinct !DISubprogram(name: "f_current_filename", scope: !3, file: !3, line: 1648, type: !374, scopeLine: 1648, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5027)
!5027 = !{!5028, !5029, !5030}
!5028 = !DILocalVariable(name: "jq", arg: 1, scope: !5026, file: !3, line: 1648, type: !201)
!5029 = !DILocalVariable(name: "a", arg: 2, scope: !5026, file: !3, line: 1648, type: !112)
!5030 = !DILocalVariable(name: "r", scope: !5026, file: !3, line: 1651, type: !112)
!5031 = !DILocation(line: 0, scope: !5026)
!5032 = !DILocation(line: 1649, column: 3, scope: !5026)
!5033 = !DILocation(line: 1651, column: 10, scope: !5026)
!5034 = !DILocation(line: 0, scope: !2583, inlinedAt: !5035)
!5035 = distinct !DILocation(line: 1652, column: 7, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !5026, file: !3, line: 1652, column: 7)
!5037 = !DILocation(line: 41, column: 39, scope: !2583, inlinedAt: !5035)
!5038 = !DILocation(line: 41, column: 54, scope: !2583, inlinedAt: !5035)
!5039 = !DILocation(line: 1652, column: 7, scope: !5026)
!5040 = !DILocation(line: 1654, column: 3, scope: !5026)
!5041 = !DILocation(line: 1655, column: 10, scope: !5026)
!5042 = !DILocation(line: 1655, column: 3, scope: !5026)
!5043 = !DILocation(line: 1656, column: 1, scope: !5026)
!5044 = distinct !DISubprogram(name: "f_current_line", scope: !3, file: !3, line: 1657, type: !374, scopeLine: 1657, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5045)
!5045 = !{!5046, !5047}
!5046 = !DILocalVariable(name: "jq", arg: 1, scope: !5044, file: !3, line: 1657, type: !201)
!5047 = !DILocalVariable(name: "a", arg: 2, scope: !5044, file: !3, line: 1657, type: !112)
!5048 = !DILocation(line: 0, scope: !5044)
!5049 = !DILocation(line: 1658, column: 3, scope: !5044)
!5050 = !DILocation(line: 1659, column: 10, scope: !5044)
!5051 = !DILocation(line: 1659, column: 3, scope: !5044)
!5052 = !DISubprogram(name: "jv_get_kind", scope: !61, file: !61, line: 39, type: !5053, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5053 = !DISubroutineType(types: !5054)
!5054 = !{!60, !113}
!5055 = !DILocation(line: 0, scope: !385)
!5056 = !DILocation(line: 51, column: 3, scope: !385)
!5057 = !DILocation(line: 51, column: 8, scope: !385)
!5058 = !DILocation(line: 53, column: 59, scope: !385)
!5059 = !DILocation(line: 53, column: 46, scope: !385)
!5060 = !DILocation(line: 54, column: 67, scope: !385)
!5061 = !DILocation(line: 54, column: 46, scope: !385)
!5062 = !DILocation(line: 52, column: 32, scope: !385)
!5063 = !DILocation(line: 52, column: 12, scope: !385)
!5064 = !DILocation(line: 56, column: 3, scope: !385)
!5065 = !DILocation(line: 58, column: 1, scope: !385)
!5066 = !DISubprogram(name: "jv_number", scope: !61, file: !61, line: 62, type: !5067, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5067 = !DISubroutineType(types: !5068)
!5068 = !{!113, !127}
!5069 = !DISubprogram(name: "jv_number_value", scope: !61, file: !61, line: 64, type: !5070, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5070 = !DISubroutineType(types: !5071)
!5071 = !{!127, !113}
!5072 = !DISubprogram(name: "jv_free", scope: !61, file: !61, line: 44, type: !5073, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5073 = !DISubroutineType(types: !5074)
!5074 = !{null, !113}
!5075 = !DISubprogram(name: "jv_invalid_with_msg", scope: !61, file: !61, line: 53, type: !5076, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5076 = !DISubroutineType(types: !5077)
!5077 = !{!113, !113}
!5078 = !DISubprogram(name: "jv_string_fmt", scope: !61, file: !61, line: 119, type: !5079, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5079 = !DISubroutineType(types: !5080)
!5080 = !{!112, !109, null}
!5081 = !DISubprogram(name: "jv_kind_name", scope: !61, file: !61, line: 40, type: !5082, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5082 = !DISubroutineType(types: !5083)
!5083 = !{!109, !60}
!5084 = !DISubprogram(name: "jv_dump_string_trunc", scope: !61, file: !61, line: 220, type: !5085, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5085 = !DISubroutineType(types: !5086)
!5086 = !{!107, !113, !107, !2388}
!5087 = !DISubprogram(name: "jv_copy", scope: !61, file: !61, line: 43, type: !5076, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5088 = !DISubprogram(name: "j0", scope: !5089, file: !5089, line: 220, type: !5090, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5089 = !DIFile(filename: "/usr/include/bits/mathcalls.h", directory: "")
!5090 = !DISubroutineType(types: !5091)
!5091 = !{!127, !127}
!5092 = !DISubprogram(name: "j1", scope: !5089, file: !5089, line: 221, type: !5090, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5093 = !DISubprogram(name: "y0", scope: !5089, file: !5089, line: 223, type: !5090, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5094 = !DISubprogram(name: "y1", scope: !5089, file: !5089, line: 224, type: !5090, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5095 = !DISubprogram(name: "jn", scope: !5089, file: !5089, line: 222, type: !5096, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5096 = !DISubroutineType(types: !5097)
!5097 = !{!127, !98, !127}
!5098 = !DISubprogram(name: "yn", scope: !5089, file: !5089, line: 225, type: !5096, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5099 = !DISubprogram(name: "drem", scope: !5089, file: !5089, line: 187, type: !5100, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5100 = !DISubroutineType(types: !5101)
!5101 = !{!127, !127, !127}
!5102 = !DISubprogram(name: "exp10", scope: !5089, file: !5089, line: 114, type: !5090, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5103 = !DISubprogram(name: "gamma", scope: !5089, file: !5089, line: 244, type: !5090, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5104 = !DISubprogram(name: "scalb", scope: !5089, file: !5089, line: 435, type: !5100, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5105 = !DISubprogram(name: "significand", scope: !5089, file: !5089, line: 191, type: !5090, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5106 = !DISubprogram(name: "jv_array_append", scope: !61, file: !61, line: 75, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5107 = !DISubroutineType(types: !5108)
!5108 = !{!113, !113, !113}
!5109 = !DISubprogram(name: "jv_array", scope: !61, file: !61, line: 70, type: !353, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5110 = !DISubprogram(name: "lgamma_r", scope: !5089, file: !5089, line: 252, type: !5111, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5111 = !DISubroutineType(types: !5112)
!5112 = !{!127, !127, !228}
!5113 = !DISubprogram(name: "jv_string_concat", scope: !61, file: !61, line: 117, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5114 = !DISubprogram(name: "jv_array_concat", scope: !61, file: !61, line: 76, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5115 = !DISubprogram(name: "jv_object_merge", scope: !61, file: !61, line: 133, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5116 = distinct !DISubprogram(name: "type_error2", scope: !3, file: !3, line: 60, type: !5117, scopeLine: 60, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5119)
!5117 = !DISubroutineType(types: !5118)
!5118 = !{!112, !112, !112, !109}
!5119 = !{!5120, !5121, !5122, !5123, !5124, !5125}
!5120 = !DILocalVariable(name: "bad1", arg: 1, scope: !5116, file: !3, line: 60, type: !112)
!5121 = !DILocalVariable(name: "bad2", arg: 2, scope: !5116, file: !3, line: 60, type: !112)
!5122 = !DILocalVariable(name: "msg", arg: 3, scope: !5116, file: !3, line: 60, type: !109)
!5123 = !DILocalVariable(name: "errbuf1", scope: !5116, file: !3, line: 61, type: !391)
!5124 = !DILocalVariable(name: "errbuf2", scope: !5116, file: !3, line: 61, type: !391)
!5125 = !DILocalVariable(name: "err", scope: !5116, file: !3, line: 62, type: !112)
!5126 = !DILocation(line: 0, scope: !5116)
!5127 = !DILocation(line: 61, column: 3, scope: !5116)
!5128 = !DILocation(line: 61, column: 8, scope: !5116)
!5129 = !DILocation(line: 61, column: 20, scope: !5116)
!5130 = !DILocation(line: 63, column: 59, scope: !5116)
!5131 = !DILocation(line: 63, column: 46, scope: !5116)
!5132 = !DILocation(line: 64, column: 67, scope: !5116)
!5133 = !DILocation(line: 64, column: 46, scope: !5116)
!5134 = !DILocation(line: 65, column: 59, scope: !5116)
!5135 = !DILocation(line: 65, column: 46, scope: !5116)
!5136 = !DILocation(line: 66, column: 67, scope: !5116)
!5137 = !DILocation(line: 66, column: 46, scope: !5116)
!5138 = !DILocation(line: 62, column: 32, scope: !5116)
!5139 = !DILocation(line: 62, column: 12, scope: !5116)
!5140 = !DILocation(line: 68, column: 3, scope: !5116)
!5141 = !DILocation(line: 69, column: 3, scope: !5116)
!5142 = !DILocation(line: 71, column: 1, scope: !5116)
!5143 = !DISubprogram(name: "jv_array_length", scope: !61, file: !61, line: 72, type: !5144, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5144 = !DISubroutineType(types: !5145)
!5145 = !{!98, !113}
!5146 = !DISubprogram(name: "jv_array_get", scope: !61, file: !61, line: 73, type: !5147, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5147 = !DISubroutineType(types: !5148)
!5148 = !{!113, !113, !98}
!5149 = !DISubprogram(name: "jv_equal", scope: !61, file: !61, line: 48, type: !5150, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5150 = !DISubroutineType(types: !5151)
!5151 = !{!98, !113, !113}
!5152 = !DISubprogram(name: "jv_null", scope: !61, file: !61, line: 57, type: !353, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5153 = !DISubprogram(name: "jv_string_length_bytes", scope: !61, file: !61, line: 111, type: !5144, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5154 = !DISubprogram(name: "jv_string_empty", scope: !61, file: !61, line: 110, type: !5155, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5155 = !DISubroutineType(types: !5156)
!5156 = !{!113, !98}
!5157 = !DISubprogram(name: "jv_string_append_buf", scope: !61, file: !61, line: 121, type: !5158, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5158 = !DISubroutineType(types: !5159)
!5159 = !{!113, !113, !109, !98}
!5160 = !DISubprogram(name: "jv_string_value", scope: !61, file: !61, line: 114, type: !5161, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5161 = !DISubroutineType(types: !5162)
!5162 = !{!109, !113}
!5163 = !DISubprogram(name: "jv_object_merge_recursive", scope: !61, file: !61, line: 134, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5164 = !DISubprogram(name: "jv_string_split", scope: !61, file: !61, line: 123, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5165 = !DISubprogram(name: "jv_dump_string", scope: !61, file: !61, line: 219, type: !5147, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5166 = !DISubprogram(name: "jv_parse_sized", scope: !61, file: !61, line: 229, type: !5167, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5167 = !DISubroutineType(types: !5168)
!5168 = !{!113, !109, !98}
!5169 = !DISubprogram(name: "jv_parse", scope: !61, file: !61, line: 228, type: !5170, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5170 = !DISubroutineType(types: !5171)
!5171 = !{!113, !109}
!5172 = !DISubprogram(name: "jv_keys", scope: !61, file: !61, line: 249, type: !5076, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5173 = !DISubprogram(name: "jv_keys_unsorted", scope: !61, file: !61, line: 250, type: !5076, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5174 = !DISubprogram(name: "jv_string", scope: !61, file: !61, line: 108, type: !5170, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5175 = !DISubprogram(name: "jv_string_sized", scope: !61, file: !61, line: 109, type: !5167, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5176 = !DISubprogram(name: "jv_string_explode", scope: !61, file: !61, line: 124, type: !5076, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5177 = !DISubprogram(name: "jv_string_implode", scope: !61, file: !61, line: 125, type: !5076, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5178 = !DISubprogram(name: "jv_string_indexes", scope: !61, file: !61, line: 115, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5179 = !DISubprogram(name: "jv_setpath", scope: !61, file: !61, line: 246, type: !5180, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5180 = !DISubroutineType(types: !5181)
!5181 = !{!113, !113, !113, !113}
!5182 = !DISubprogram(name: "jv_getpath", scope: !61, file: !61, line: 247, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5183 = !DISubprogram(name: "jv_delpaths", scope: !61, file: !61, line: 248, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5184 = !DISubprogram(name: "jv_has", scope: !61, file: !61, line: 245, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5185 = !DISubprogram(name: "jv_bool", scope: !61, file: !61, line: 60, type: !5155, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5186 = !DISubprogram(name: "jv_cmp", scope: !61, file: !61, line: 251, type: !5150, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5187 = !DISubprogram(name: "jv_contains", scope: !61, file: !61, line: 50, type: !5150, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5188 = !DISubprogram(name: "jv_object_length", scope: !61, file: !61, line: 132, type: !5144, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5189 = !DISubprogram(name: "jv_string_length_codepoints", scope: !61, file: !61, line: 112, type: !5144, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5190 = !DISubprogram(name: "jv_sort", scope: !61, file: !61, line: 253, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5191 = !DISubprogram(name: "jv_group", scope: !61, file: !61, line: 252, type: !5107, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5192 = distinct !DISubprogram(name: "minmax_by", scope: !3, file: !3, line: 1014, type: !5193, scopeLine: 1014, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5195)
!5193 = !DISubroutineType(types: !5194)
!5194 = !{!112, !112, !112, !98}
!5195 = !{!5196, !5197, !5198, !5199, !5200, !5201, !5203, !5206}
!5196 = !DILocalVariable(name: "values", arg: 1, scope: !5192, file: !3, line: 1014, type: !112)
!5197 = !DILocalVariable(name: "keys", arg: 2, scope: !5192, file: !3, line: 1014, type: !112)
!5198 = !DILocalVariable(name: "is_min", arg: 3, scope: !5192, file: !3, line: 1014, type: !98)
!5199 = !DILocalVariable(name: "ret", scope: !5192, file: !3, line: 1027, type: !112)
!5200 = !DILocalVariable(name: "retkey", scope: !5192, file: !3, line: 1028, type: !112)
!5201 = !DILocalVariable(name: "i", scope: !5202, file: !3, line: 1029, type: !98)
!5202 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 1029, column: 3)
!5203 = !DILocalVariable(name: "item", scope: !5204, file: !3, line: 1030, type: !112)
!5204 = distinct !DILexicalBlock(scope: !5205, file: !3, line: 1029, column: 58)
!5205 = distinct !DILexicalBlock(scope: !5202, file: !3, line: 1029, column: 3)
!5206 = !DILocalVariable(name: "cmp", scope: !5204, file: !3, line: 1031, type: !98)
!5207 = !DILocation(line: 0, scope: !5192)
!5208 = !DILocation(line: 1015, column: 7, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 1015, column: 7)
!5210 = !DILocation(line: 1015, column: 27, scope: !5209)
!5211 = !DILocation(line: 1015, column: 7, scope: !5192)
!5212 = !DILocation(line: 1016, column: 12, scope: !5209)
!5213 = !DILocation(line: 1016, column: 5, scope: !5209)
!5214 = !DILocation(line: 1017, column: 7, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 1017, column: 7)
!5216 = !DILocation(line: 1017, column: 25, scope: !5215)
!5217 = !DILocation(line: 1017, column: 7, scope: !5192)
!5218 = !DILocation(line: 1018, column: 12, scope: !5215)
!5219 = !DILocation(line: 1018, column: 5, scope: !5215)
!5220 = !DILocation(line: 1019, column: 23, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 1019, column: 7)
!5222 = !DILocation(line: 1019, column: 7, scope: !5221)
!5223 = !DILocation(line: 1019, column: 59, scope: !5221)
!5224 = !DILocation(line: 1019, column: 43, scope: !5221)
!5225 = !DILocation(line: 1019, column: 40, scope: !5221)
!5226 = !DILocation(line: 1019, column: 7, scope: !5192)
!5227 = !DILocation(line: 1020, column: 12, scope: !5221)
!5228 = !DILocation(line: 1020, column: 5, scope: !5221)
!5229 = !DILocation(line: 1022, column: 23, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 1022, column: 7)
!5231 = !DILocation(line: 1022, column: 7, scope: !5230)
!5232 = !DILocation(line: 1022, column: 40, scope: !5230)
!5233 = !DILocation(line: 1022, column: 7, scope: !5192)
!5234 = !DILocation(line: 1023, column: 5, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 1022, column: 46)
!5236 = !DILocation(line: 1024, column: 5, scope: !5235)
!5237 = !DILocation(line: 1025, column: 12, scope: !5235)
!5238 = !DILocation(line: 1025, column: 5, scope: !5235)
!5239 = !DILocation(line: 1027, column: 25, scope: !5192)
!5240 = !DILocation(line: 1027, column: 12, scope: !5192)
!5241 = !DILocation(line: 1028, column: 28, scope: !5192)
!5242 = !DILocation(line: 1028, column: 15, scope: !5192)
!5243 = !DILocation(line: 0, scope: !5202)
!5244 = !DILocation(line: 1029, column: 35, scope: !5205)
!5245 = !DILocation(line: 1029, column: 19, scope: !5205)
!5246 = !DILocation(line: 1029, column: 18, scope: !5205)
!5247 = !DILocation(line: 1029, column: 3, scope: !5202)
!5248 = !DILocation(line: 1041, column: 3, scope: !5192)
!5249 = !DILocation(line: 1042, column: 3, scope: !5192)
!5250 = !DILocation(line: 1043, column: 3, scope: !5192)
!5251 = !DILocation(line: 1030, column: 28, scope: !5204)
!5252 = !DILocation(line: 1030, column: 15, scope: !5204)
!5253 = !DILocation(line: 0, scope: !5204)
!5254 = !DILocation(line: 1031, column: 22, scope: !5204)
!5255 = !DILocation(line: 1031, column: 37, scope: !5204)
!5256 = !DILocation(line: 1031, column: 15, scope: !5204)
!5257 = !DILocation(line: 1032, column: 14, scope: !5258)
!5258 = distinct !DILexicalBlock(scope: !5204, file: !3, line: 1032, column: 9)
!5259 = !DILocation(line: 1032, column: 19, scope: !5258)
!5260 = !DILocation(line: 1032, column: 9, scope: !5204)
!5261 = !DILocation(line: 1033, column: 7, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5258, file: !3, line: 1032, column: 37)
!5263 = !DILocation(line: 1035, column: 7, scope: !5262)
!5264 = !DILocation(line: 1036, column: 26, scope: !5262)
!5265 = !DILocation(line: 1036, column: 13, scope: !5262)
!5266 = !DILocation(line: 1037, column: 5, scope: !5262)
!5267 = !DILocation(line: 1038, column: 7, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5258, file: !3, line: 1037, column: 12)
!5269 = !DILocation(line: 1029, column: 54, scope: !5205)
!5270 = distinct !{!5270, !5247, !5271, !2351}
!5271 = !DILocation(line: 1040, column: 3, scope: !5202)
!5272 = !DILocation(line: 1045, column: 1, scope: !5192)
!5273 = !DISubprogram(name: "jv_string_append_str", scope: !61, file: !61, line: 122, type: !5274, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5274 = !DISubroutineType(types: !5275)
!5275 = !{!113, !113, !109}
!5276 = distinct !DISubprogram(name: "escape_string", scope: !3, file: !3, line: 540, type: !386, scopeLine: 540, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5277)
!5277 = !{!5278, !5279, !5280, !5282, !5283, !5284, !5285, !5286, !5287}
!5278 = !DILocalVariable(name: "input", arg: 1, scope: !5276, file: !3, line: 540, type: !112)
!5279 = !DILocalVariable(name: "escapings", arg: 2, scope: !5276, file: !3, line: 540, type: !109)
!5280 = !DILocalVariable(name: "lookup", scope: !5276, file: !3, line: 543, type: !5281)
!5281 = !DICompositeType(tag: DW_TAG_array_type, baseType: !109, size: 8192, elements: !3394)
!5282 = !DILocalVariable(name: "p", scope: !5276, file: !3, line: 544, type: !109)
!5283 = !DILocalVariable(name: "ret", scope: !5276, file: !3, line: 553, type: !112)
!5284 = !DILocalVariable(name: "i", scope: !5276, file: !3, line: 554, type: !109)
!5285 = !DILocalVariable(name: "end", scope: !5276, file: !3, line: 555, type: !109)
!5286 = !DILocalVariable(name: "cstart", scope: !5276, file: !3, line: 556, type: !109)
!5287 = !DILocalVariable(name: "c", scope: !5276, file: !3, line: 557, type: !98)
!5288 = !DILocation(line: 0, scope: !5276)
!5289 = !DILocation(line: 542, column: 3, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 542, column: 3)
!5291 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 542, column: 3)
!5292 = !DILocation(line: 542, column: 3, scope: !5291)
!5293 = !DILocation(line: 543, column: 3, scope: !5276)
!5294 = !DILocation(line: 543, column: 15, scope: !5276)
!5295 = !DILocation(line: 545, column: 3, scope: !5276)
!5296 = !DILocation(line: 545, column: 13, scope: !5276)
!5297 = !DILocation(line: 546, column: 10, scope: !5276)
!5298 = !DILocation(line: 546, column: 3, scope: !5276)
!5299 = !DILocation(line: 547, column: 24, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 546, column: 14)
!5301 = !DILocation(line: 547, column: 5, scope: !5300)
!5302 = !DILocation(line: 547, column: 21, scope: !5300)
!5303 = !DILocation(line: 549, column: 10, scope: !5300)
!5304 = !DILocation(line: 550, column: 6, scope: !5300)
!5305 = distinct !{!5305, !5298, !5306, !2351}
!5306 = !DILocation(line: 551, column: 3, scope: !5276)
!5307 = !DILocation(line: 553, column: 12, scope: !5276)
!5308 = !DILocation(line: 554, column: 19, scope: !5276)
!5309 = !DILocation(line: 555, column: 48, scope: !5276)
!5310 = !DILocation(line: 555, column: 25, scope: !5276)
!5311 = !DILocation(line: 555, column: 23, scope: !5276)
!5312 = !DILocation(line: 557, column: 3, scope: !5276)
!5313 = !DILocation(line: 557, column: 7, scope: !5276)
!5314 = !DILocation(line: 558, column: 15, scope: !5276)
!5315 = !DILocation(line: 558, column: 3, scope: !5276)
!5316 = !DILocation(line: 559, column: 9, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !5318, file: !3, line: 559, column: 9)
!5318 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 558, column: 54)
!5319 = !DILocation(line: 559, column: 11, scope: !5317)
!5320 = !DILocation(line: 559, column: 17, scope: !5317)
!5321 = !DILocation(line: 559, column: 20, scope: !5317)
!5322 = !DILocation(line: 559, column: 9, scope: !5318)
!5323 = !DILocation(line: 560, column: 13, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5317, file: !3, line: 559, column: 31)
!5325 = !DILocation(line: 561, column: 5, scope: !5324)
!5326 = !DILocation(line: 562, column: 49, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5317, file: !3, line: 561, column: 12)
!5328 = !DILocation(line: 562, column: 47, scope: !5327)
!5329 = !DILocation(line: 562, column: 13, scope: !5327)
!5330 = distinct !{!5330, !5315, !5331, !2351}
!5331 = !DILocation(line: 564, column: 3, scope: !5276)
!5332 = !DILocation(line: 565, column: 3, scope: !5276)
!5333 = !DILocation(line: 568, column: 1, scope: !5276)
!5334 = !DISubprogram(name: "jv_array_set", scope: !61, file: !61, line: 74, type: !5335, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5335 = !DISubroutineType(types: !5336)
!5336 = !{!113, !113, !98, !113}
!5337 = !DISubprogram(name: "jv_mem_calloc", scope: !5338, file: !5338, line: 20, type: !5339, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5338 = !DIFile(filename: "./src/jv_alloc.h", directory: "/home/jonas/Repos/jq")
!5339 = !DISubroutineType(types: !5340)
!5340 = !{!102, !2388, !2388}
!5341 = !DISubprogram(name: "jvp_utf8_next", scope: !5342, file: !5342, line: 5, type: !5343, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5342 = !DIFile(filename: "./src/jv_unicode.h", directory: "/home/jonas/Repos/jq")
!5343 = !DISubroutineType(types: !5344)
!5344 = !{!109, !109, !109, !228}
!5345 = !DISubprogram(name: "jv_object", scope: !61, file: !61, line: 127, type: !353, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5346 = !DISubprogram(name: "jv_object_set", scope: !61, file: !61, line: 130, type: !5180, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5347 = !DISubprogram(name: "jq_halt", scope: !203, file: !203, line: 29, type: !5348, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5348 = !DISubroutineType(types: !5349)
!5349 = !{null, !323, !113, !113}
!5350 = !DISubprogram(name: "jv_invalid", scope: !61, file: !61, line: 52, type: !353, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5351 = !DISubprogram(name: "jq_get_lib_dirs", scope: !203, file: !203, line: 45, type: !5352, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5352 = !DISubroutineType(types: !5353)
!5353 = !{!113, !323}
!5354 = !DISubprogram(name: "jq_get_prog_origin", scope: !203, file: !203, line: 44, type: !5352, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5355 = !DISubprogram(name: "jq_get_jq_origin", scope: !203, file: !203, line: 43, type: !5352, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5356 = !DISubprogram(name: "onig_new", scope: !106, file: !106, line: 735, type: !5357, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5357 = !DISubroutineType(types: !5358)
!5358 = !{!98, !5359, !100, !100, !7, !4017, !5360, !5361}
!5359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4082, size: 64)
!5360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4046, size: 64)
!5361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4085, size: 64)
!5362 = !DISubprogram(name: "onig_region_new", scope: !106, file: !106, line: 752, type: !5363, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5363 = !DISubroutineType(types: !5364)
!5364 = !{!5365}
!5365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4093, size: 64)
!5366 = !DISubprogram(name: "onig_search", scope: !106, file: !106, line: 748, type: !5367, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5367 = !DISubroutineType(types: !5368)
!5368 = !{!98, !4082, !100, !100, !100, !100, !5365, !7}
!5369 = !DISubprogram(name: "jvp_utf8_decode_length", scope: !5342, file: !5342, line: 8, type: !5370, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5370 = !DISubroutineType(types: !5371)
!5371 = !{!98, !108}
!5372 = !DISubprogram(name: "onig_foreach_name", scope: !106, file: !106, line: 770, type: !5373, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5373 = !DISubroutineType(types: !5374)
!5374 = !{!98, !4082, !5375, !102}
!5375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5376, size: 64)
!5376 = !DISubroutineType(types: !5377)
!5377 = !{!98, !100, !100, !98, !228, !4082, !102}
!5378 = distinct !DISubprogram(name: "f_match_name_iter", scope: !3, file: !3, line: 805, type: !5379, scopeLine: 806, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5381)
!5379 = !DISubroutineType(types: !5380)
!5380 = !{!98, !103, !103, !98, !228, !3927, !102}
!5381 = !{!5382, !5383, !5384, !5385, !5386, !5387, !5388, !5389, !5391}
!5382 = !DILocalVariable(name: "name", arg: 1, scope: !5378, file: !3, line: 805, type: !103)
!5383 = !DILocalVariable(name: "name_end", arg: 2, scope: !5378, file: !3, line: 805, type: !103)
!5384 = !DILocalVariable(name: "ngroups", arg: 3, scope: !5378, file: !3, line: 805, type: !98)
!5385 = !DILocalVariable(name: "groups", arg: 4, scope: !5378, file: !3, line: 806, type: !228)
!5386 = !DILocalVariable(name: "reg", arg: 5, scope: !5378, file: !3, line: 806, type: !3927)
!5387 = !DILocalVariable(name: "arg", arg: 6, scope: !5378, file: !3, line: 806, type: !102)
!5388 = !DILocalVariable(name: "captures", scope: !5378, file: !3, line: 807, type: !112)
!5389 = !DILocalVariable(name: "i", scope: !5390, file: !3, line: 808, type: !98)
!5390 = distinct !DILexicalBlock(scope: !5378, file: !3, line: 808, column: 3)
!5391 = !DILocalVariable(name: "cap", scope: !5392, file: !3, line: 809, type: !112)
!5392 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 808, column: 37)
!5393 = distinct !DILexicalBlock(scope: !5390, file: !3, line: 808, column: 3)
!5394 = !DILocation(line: 0, scope: !5378)
!5395 = !DILocation(line: 807, column: 17, scope: !5378)
!5396 = !DILocation(line: 0, scope: !5390)
!5397 = !DILocation(line: 808, column: 21, scope: !5393)
!5398 = !DILocation(line: 808, column: 3, scope: !5390)
!5399 = !DILocation(line: 817, column: 16, scope: !5378)
!5400 = !DILocation(line: 818, column: 3, scope: !5378)
!5401 = !DILocation(line: 809, column: 27, scope: !5392)
!5402 = !DILocation(line: 809, column: 45, scope: !5392)
!5403 = !DILocation(line: 809, column: 54, scope: !5392)
!5404 = !DILocation(line: 809, column: 14, scope: !5392)
!5405 = !DILocation(line: 0, scope: !5392)
!5406 = !DILocation(line: 810, column: 9, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 810, column: 9)
!5408 = !DILocation(line: 810, column: 26, scope: !5407)
!5409 = !DILocation(line: 810, column: 9, scope: !5392)
!5410 = !DILocation(line: 811, column: 32, scope: !5411)
!5411 = distinct !DILexicalBlock(scope: !5407, file: !3, line: 810, column: 45)
!5412 = !DILocation(line: 811, column: 51, scope: !5411)
!5413 = !DILocation(line: 811, column: 13, scope: !5411)
!5414 = !DILocation(line: 812, column: 40, scope: !5411)
!5415 = !DILocation(line: 812, column: 49, scope: !5411)
!5416 = !DILocation(line: 812, column: 18, scope: !5411)
!5417 = !DILocation(line: 813, column: 5, scope: !5411)
!5418 = !DILocation(line: 814, column: 7, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5407, file: !3, line: 813, column: 12)
!5420 = !DILocation(line: 808, column: 32, scope: !5393)
!5421 = distinct !{!5421, !5398, !5422, !2351}
!5422 = !DILocation(line: 816, column: 3, scope: !5390)
!5423 = !DISubprogram(name: "onig_region_free", scope: !106, file: !106, line: 756, type: !5424, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5424 = !DISubroutineType(types: !5425)
!5425 = !{null, !5365, !98}
!5426 = !DISubprogram(name: "onig_free", scope: !106, file: !106, line: 742, type: !5427, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5427 = !DISubroutineType(types: !5428)
!5428 = !{null, !4082}
!5429 = !DISubprogram(name: "load_module_meta", scope: !5430, file: !5430, line: 5, type: !5431, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5430 = !DIFile(filename: "./src/linker.h", directory: "/home/jonas/Repos/jq")
!5431 = !DISubroutineType(types: !5432)
!5432 = !{!113, !323, !113}
!5433 = !DISubprogram(name: "jq_get_input_cb", scope: !203, file: !203, line: 36, type: !5434, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5434 = !DISubroutineType(types: !5435)
!5435 = !{null, !323, !5436, !5440}
!5436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5437, size: 64)
!5437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5438, size: 64)
!5438 = !DISubroutineType(types: !5439)
!5439 = !{!113, !323, !102}
!5440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !102, size: 64)
!5441 = !DISubprogram(name: "jv_invalid_has_msg", scope: !61, file: !61, line: 55, type: !5144, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5442 = !DISubprogram(name: "jq_get_debug_cb", scope: !203, file: !203, line: 39, type: !5443, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5443 = !DISubroutineType(types: !5444)
!5444 = !{null, !323, !5445, !5440}
!5445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5446, size: 64)
!5446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5447, size: 64)
!5447 = !DISubroutineType(types: !5448)
!5448 = !{null, !102, !113}
!5449 = !DISubprogram(name: "jv_dumpf", scope: !61, file: !61, line: 216, type: !5450, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5450 = !DISubroutineType(types: !5451)
!5451 = !{null, !113, !5452, !98}
!5452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5453, size: 64)
!5453 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5454, line: 49, size: 1728, elements: !5455)
!5454 = !DIFile(filename: "/usr/include/bits/types/struct_FILE.h", directory: "")
!5455 = !{!5456, !5457, !5458, !5459, !5460, !5461, !5462, !5463, !5464, !5465, !5466, !5467, !5468, !5471, !5472, !5473, !5474, !5476, !5477, !5479, !5481, !5484, !5486, !5489, !5492, !5493, !5494, !5495, !5496}
!5456 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5453, file: !5454, line: 51, baseType: !98, size: 32)
!5457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5453, file: !5454, line: 54, baseType: !107, size: 64, offset: 64)
!5458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5453, file: !5454, line: 55, baseType: !107, size: 64, offset: 128)
!5459 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5453, file: !5454, line: 56, baseType: !107, size: 64, offset: 192)
!5460 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5453, file: !5454, line: 57, baseType: !107, size: 64, offset: 256)
!5461 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5453, file: !5454, line: 58, baseType: !107, size: 64, offset: 320)
!5462 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5453, file: !5454, line: 59, baseType: !107, size: 64, offset: 384)
!5463 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5453, file: !5454, line: 60, baseType: !107, size: 64, offset: 448)
!5464 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5453, file: !5454, line: 61, baseType: !107, size: 64, offset: 512)
!5465 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5453, file: !5454, line: 64, baseType: !107, size: 64, offset: 576)
!5466 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5453, file: !5454, line: 65, baseType: !107, size: 64, offset: 640)
!5467 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5453, file: !5454, line: 66, baseType: !107, size: 64, offset: 704)
!5468 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5453, file: !5454, line: 68, baseType: !5469, size: 64, offset: 768)
!5469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5470, size: 64)
!5470 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !5454, line: 36, flags: DIFlagFwdDecl)
!5471 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5453, file: !5454, line: 70, baseType: !5452, size: 64, offset: 832)
!5472 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5453, file: !5454, line: 72, baseType: !98, size: 32, offset: 896)
!5473 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5453, file: !5454, line: 73, baseType: !98, size: 32, offset: 928)
!5474 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5453, file: !5454, line: 74, baseType: !5475, size: 64, offset: 960)
!5475 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !96, line: 152, baseType: !97)
!5476 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5453, file: !5454, line: 77, baseType: !118, size: 16, offset: 1024)
!5477 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5453, file: !5454, line: 78, baseType: !5478, size: 8, offset: 1040)
!5478 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!5479 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5453, file: !5454, line: 79, baseType: !5480, size: 8, offset: 1048)
!5480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 8, elements: !265)
!5481 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5453, file: !5454, line: 81, baseType: !5482, size: 64, offset: 1088)
!5482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5483, size: 64)
!5483 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !5454, line: 43, baseType: null)
!5484 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5453, file: !5454, line: 89, baseType: !5485, size: 64, offset: 1152)
!5485 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !96, line: 153, baseType: !97)
!5486 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5453, file: !5454, line: 91, baseType: !5487, size: 64, offset: 1216)
!5487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5488, size: 64)
!5488 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !5454, line: 37, flags: DIFlagFwdDecl)
!5489 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5453, file: !5454, line: 92, baseType: !5490, size: 64, offset: 1280)
!5490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5491, size: 64)
!5491 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !5454, line: 38, flags: DIFlagFwdDecl)
!5492 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5453, file: !5454, line: 93, baseType: !5452, size: 64, offset: 1344)
!5493 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5453, file: !5454, line: 94, baseType: !102, size: 64, offset: 1408)
!5494 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5453, file: !5454, line: 95, baseType: !2386, size: 64, offset: 1472)
!5495 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5453, file: !5454, line: 96, baseType: !98, size: 32, offset: 1536)
!5496 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5453, file: !5454, line: 98, baseType: !5497, size: 160, offset: 1568)
!5497 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 160, elements: !5498)
!5498 = !{!5499}
!5499 = !DISubrange(count: 20)
!5500 = !DISubprogram(name: "strptime", scope: !5501, file: !5501, line: 107, type: !5502, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5501 = !DIFile(filename: "/usr/include/time.h", directory: "")
!5502 = !DISubroutineType(types: !5503)
!5503 = !{!107, !109, !109, !164}
!5504 = distinct !DISubprogram(name: "set_tm_wday", scope: !3, file: !3, line: 1311, type: !162, scopeLine: 1311, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5505)
!5505 = !{!5506, !5507, !5508, !5509, !5510}
!5506 = !DILocalVariable(name: "tm", arg: 1, scope: !5504, file: !3, line: 1311, type: !164)
!5507 = !DILocalVariable(name: "century", scope: !5504, file: !3, line: 1322, type: !98)
!5508 = !DILocalVariable(name: "year", scope: !5504, file: !3, line: 1323, type: !98)
!5509 = !DILocalVariable(name: "mon", scope: !5504, file: !3, line: 1330, type: !98)
!5510 = !DILocalVariable(name: "wday", scope: !5504, file: !3, line: 1333, type: !98)
!5511 = !DILocation(line: 0, scope: !5504)
!5512 = !DILocation(line: 1322, column: 29, scope: !5504)
!5513 = !{!4647, !2096, i64 20}
!5514 = !DILocation(line: 1322, column: 23, scope: !5504)
!5515 = !DILocation(line: 1322, column: 38, scope: !5504)
!5516 = !DILocation(line: 1323, column: 35, scope: !5504)
!5517 = !DILocation(line: 1324, column: 11, scope: !5518)
!5518 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 1324, column: 7)
!5519 = !DILocation(line: 1324, column: 18, scope: !5518)
!5520 = !DILocation(line: 1324, column: 7, scope: !5504)
!5521 = !DILocation(line: 1331, column: 7, scope: !5504)
!5522 = !DILocation(line: 1334, column: 10, scope: !5504)
!5523 = !DILocation(line: 1334, column: 38, scope: !5504)
!5524 = !DILocation(line: 1334, column: 36, scope: !5504)
!5525 = !DILocation(line: 1334, column: 42, scope: !5504)
!5526 = !DILocation(line: 1334, column: 25, scope: !5504)
!5527 = !DILocation(line: 1334, column: 20, scope: !5504)
!5528 = !DILocation(line: 1334, column: 70, scope: !5504)
!5529 = !DILocation(line: 1334, column: 75, scope: !5504)
!5530 = !DILocation(line: 1334, column: 64, scope: !5504)
!5531 = !DILocation(line: 1334, column: 59, scope: !5504)
!5532 = !DILocation(line: 1334, column: 95, scope: !5504)
!5533 = !DILocation(line: 1334, column: 103, scope: !5504)
!5534 = !DILocation(line: 1334, column: 89, scope: !5504)
!5535 = !DILocation(line: 1334, column: 84, scope: !5504)
!5536 = !DILocation(line: 1334, column: 114, scope: !5504)
!5537 = !DILocation(line: 1334, column: 18, scope: !5504)
!5538 = !DILocation(line: 1334, column: 50, scope: !5504)
!5539 = !DILocation(line: 1334, column: 57, scope: !5504)
!5540 = !DILocation(line: 1334, column: 82, scope: !5504)
!5541 = !DILocation(line: 1334, column: 110, scope: !5504)
!5542 = !DILocation(line: 1334, column: 125, scope: !5504)
!5543 = !DILocation(line: 1335, column: 12, scope: !5544)
!5544 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 1335, column: 7)
!5545 = !DILocation(line: 1335, column: 7, scope: !5504)
!5546 = !DILocation(line: 1341, column: 7, scope: !5504)
!5547 = !DILocation(line: 1341, column: 15, scope: !5504)
!5548 = !DILocation(line: 1342, column: 1, scope: !5504)
!5549 = !DILocation(line: 0, scope: !161)
!5550 = !DILocation(line: 1349, column: 17, scope: !161)
!5551 = !DILocation(line: 1350, column: 25, scope: !161)
!5552 = !DILocation(line: 1350, column: 19, scope: !161)
!5553 = !DILocation(line: 1352, column: 18, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !161, file: !3, line: 1352, column: 7)
!5555 = !DILocation(line: 1352, column: 22, scope: !5554)
!5556 = !DILocation(line: 1353, column: 18, scope: !5554)
!5557 = !DILocation(line: 1353, column: 23, scope: !5554)
!5558 = !DILocation(line: 1357, column: 7, scope: !161)
!5559 = !DILocation(line: 1359, column: 11, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !161, file: !3, line: 1359, column: 7)
!5561 = !DILocation(line: 1359, column: 7, scope: !161)
!5562 = !DILocation(line: 1362, column: 14, scope: !161)
!5563 = !DILocation(line: 1362, column: 38, scope: !161)
!5564 = !DILocation(line: 1362, column: 32, scope: !161)
!5565 = !DILocation(line: 1362, column: 46, scope: !161)
!5566 = !DILocation(line: 1363, column: 3, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5568, file: !3, line: 1363, column: 3)
!5568 = distinct !DILexicalBlock(scope: !161, file: !3, line: 1363, column: 3)
!5569 = !DILocation(line: 1364, column: 15, scope: !161)
!5570 = !DILocation(line: 1365, column: 1, scope: !161)
!5571 = distinct !DISubprogram(name: "tm2jv", scope: !3, file: !3, line: 1234, type: !5572, scopeLine: 1234, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5574)
!5572 = !DISubroutineType(types: !5573)
!5573 = !{!112, !164}
!5574 = !{!5575}
!5575 = !DILocalVariable(name: "tm", arg: 1, scope: !5571, file: !3, line: 1234, type: !164)
!5576 = !DILocation(line: 0, scope: !5571)
!5577 = !DILocation(line: 1235, column: 10, scope: !5571)
!5578 = !{!4647, !2096, i64 8}
!5579 = !{!4647, !2096, i64 4}
!5580 = !{!4647, !2096, i64 0}
!5581 = !DILocation(line: 1235, column: 3, scope: !5571)
!5582 = distinct !DISubprogram(name: "jv2tm", scope: !3, file: !3, line: 1452, type: !5583, scopeLine: 1452, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5585)
!5583 = !DISubroutineType(types: !5584)
!5584 = !{!98, !112, !164}
!5585 = !{!5586, !5587, !5588, !5590, !5592, !5594, !5596, !5598, !5600, !5602}
!5586 = !DILocalVariable(name: "a", arg: 1, scope: !5582, file: !3, line: 1452, type: !112)
!5587 = !DILocalVariable(name: "tm", arg: 2, scope: !5582, file: !3, line: 1452, type: !164)
!5588 = !DILocalVariable(name: "n", scope: !5589, file: !3, line: 1454, type: !112)
!5589 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1454, column: 3)
!5590 = !DILocalVariable(name: "n", scope: !5591, file: !3, line: 1456, type: !112)
!5591 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1456, column: 3)
!5592 = !DILocalVariable(name: "n", scope: !5593, file: !3, line: 1457, type: !112)
!5593 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1457, column: 3)
!5594 = !DILocalVariable(name: "n", scope: !5595, file: !3, line: 1458, type: !112)
!5595 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1458, column: 3)
!5596 = !DILocalVariable(name: "n", scope: !5597, file: !3, line: 1459, type: !112)
!5597 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1459, column: 3)
!5598 = !DILocalVariable(name: "n", scope: !5599, file: !3, line: 1460, type: !112)
!5599 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1460, column: 3)
!5600 = !DILocalVariable(name: "n", scope: !5601, file: !3, line: 1461, type: !112)
!5601 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1461, column: 3)
!5602 = !DILocalVariable(name: "n", scope: !5603, file: !3, line: 1462, type: !112)
!5603 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1462, column: 3)
!5604 = !DILocation(line: 0, scope: !5582)
!5605 = !DILocation(line: 1453, column: 3, scope: !5582)
!5606 = !DILocation(line: 1454, column: 3, scope: !5589)
!5607 = !DILocation(line: 0, scope: !5589)
!5608 = !DILocation(line: 1454, column: 3, scope: !5609)
!5609 = distinct !DILexicalBlock(scope: !5589, file: !3, line: 1454, column: 3)
!5610 = !DILocation(line: 1455, column: 15, scope: !5582)
!5611 = !DILocation(line: 1456, column: 3, scope: !5591)
!5612 = !DILocation(line: 0, scope: !5591)
!5613 = !DILocation(line: 1456, column: 3, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5591, file: !3, line: 1456, column: 3)
!5615 = !DILocation(line: 1457, column: 3, scope: !5593)
!5616 = !DILocation(line: 0, scope: !5593)
!5617 = !DILocation(line: 1457, column: 3, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5593, file: !3, line: 1457, column: 3)
!5619 = !DILocation(line: 1458, column: 3, scope: !5595)
!5620 = !DILocation(line: 0, scope: !5595)
!5621 = !DILocation(line: 1458, column: 3, scope: !5622)
!5622 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1458, column: 3)
!5623 = !DILocation(line: 1459, column: 3, scope: !5597)
!5624 = !DILocation(line: 0, scope: !5597)
!5625 = !DILocation(line: 1459, column: 3, scope: !5626)
!5626 = distinct !DILexicalBlock(scope: !5597, file: !3, line: 1459, column: 3)
!5627 = !DILocation(line: 1460, column: 3, scope: !5599)
!5628 = !DILocation(line: 0, scope: !5599)
!5629 = !DILocation(line: 1460, column: 3, scope: !5630)
!5630 = distinct !DILexicalBlock(scope: !5599, file: !3, line: 1460, column: 3)
!5631 = !DILocation(line: 1461, column: 3, scope: !5601)
!5632 = !DILocation(line: 0, scope: !5601)
!5633 = !DILocation(line: 1461, column: 3, scope: !5634)
!5634 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 1461, column: 3)
!5635 = !DILocation(line: 1462, column: 3, scope: !5603)
!5636 = !DILocation(line: 0, scope: !5603)
!5637 = !DILocation(line: 1462, column: 3, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5603, file: !3, line: 1462, column: 3)
!5639 = !DILocation(line: 1473, column: 3, scope: !5582)
!5640 = !DILocation(line: 1474, column: 1, scope: !5582)
!5641 = !DISubprogram(name: "strftime", scope: !5501, file: !5501, line: 100, type: !5642, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5642 = !DISubroutineType(types: !5643)
!5643 = !{!2388, !107, !2388, !109, !5644}
!5644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5645, size: 64)
!5645 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !165)
!5646 = !DISubprogram(name: "timegm", scope: !5501, file: !5501, line: 249, type: !5647, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5647 = !DISubroutineType(types: !5648)
!5648 = !{!97, !164}
!5649 = !DISubprogram(name: "gmtime_r", scope: !5501, file: !5501, line: 154, type: !5650, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5650 = !DISubroutineType(types: !5651)
!5651 = !{!164, !5652, !164}
!5652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5653, size: 64)
!5653 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !97)
!5654 = !DISubprogram(name: "localtime_r", scope: !5501, file: !5501, line: 159, type: !5650, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5655 = !DISubprogram(name: "gettimeofday", scope: !5656, file: !5656, line: 67, type: !5657, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5656 = !DIFile(filename: "/usr/include/sys/time.h", directory: "")
!5657 = !DISubroutineType(types: !5658)
!5658 = !{!98, !5659, !102}
!5659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4999, size: 64)
!5660 = !DISubprogram(name: "time", scope: !5501, file: !5501, line: 76, type: !5661, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5661 = !DISubroutineType(types: !5662)
!5662 = !{!97, !5663}
!5663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !97, size: 64)
!5664 = !DISubprogram(name: "jq_util_input_get_current_filename", scope: !203, file: !203, line: 66, type: !5352, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5665 = !DISubprogram(name: "jq_util_input_get_current_line", scope: !203, file: !203, line: 67, type: !5352, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5666 = !DISubprogram(name: "block_list_funcs", scope: !207, file: !207, line: 81, type: !5667, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !324)
!5667 = !DISubroutineType(types: !5668)
!5668 = !{!113, !208, !98}
