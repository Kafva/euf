TranslationUnitDecl 0x5608c10a4778 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5608c10a5040 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5608c10a4d20 '__int128'
|-TypedefDecl 0x5608c10a50b0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5608c10a4d40 'unsigned __int128'
|-TypedefDecl 0x5608c10a53b8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x5608c10a5190 'struct __NSConstantString_tag'
|   `-Record 0x5608c10a5108 '__NSConstantString_tag'
|-TypedefDecl 0x5608c10a5450 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5608c10a5410 'char *'
|   `-BuiltinType 0x5608c10a4820 'char'
|-TypedefDecl 0x5608c10e64b0 <<invalid sloc>> <invalid sloc> implicit referenced __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x5608c10a56f0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x5608c10a5530 'struct __va_list_tag'
|     `-Record 0x5608c10a54a8 '__va_list_tag'
|-TypedefDecl 0x5608c10e6520 </usr/include/bits/types.h:31:1, col:23> col:23 referenced __u_char 'unsigned char'
| `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c10e6590 <line:32:1, col:28> col:28 referenced __u_short 'unsigned short'
| `-BuiltinType 0x5608c10a4900 'unsigned short'
|-TypedefDecl 0x5608c10e6600 <line:33:1, col:22> col:22 referenced __u_int 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c10e6670 <line:34:1, col:27> col:27 referenced __u_long 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e66e0 <line:37:1, col:21> col:21 referenced __int8_t 'signed char'
| `-BuiltinType 0x5608c10a4840 'signed char'
|-TypedefDecl 0x5608c10e6750 <line:38:1, col:23> col:23 referenced __uint8_t 'unsigned char'
| `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c10e67c0 <line:39:1, col:26> col:26 referenced __int16_t 'short'
| `-BuiltinType 0x5608c10a4860 'short'
|-TypedefDecl 0x5608c10e6830 <line:40:1, col:28> col:28 referenced __uint16_t 'unsigned short'
| `-BuiltinType 0x5608c10a4900 'unsigned short'
|-TypedefDecl 0x5608c10e68a0 <line:41:1, col:20> col:20 referenced __int32_t 'int'
| `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c10e6910 <line:42:1, col:22> col:22 referenced __uint32_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c10e6980 <line:44:1, col:25> col:25 referenced __int64_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c10e69f0 <line:45:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e6a80 <line:52:1, col:18> col:18 referenced __int_least8_t '__int8_t':'signed char'
| `-TypedefType 0x5608c10e6a50 '__int8_t' sugar
|   |-Typedef 0x5608c10e66e0 '__int8_t'
|   `-BuiltinType 0x5608c10a4840 'signed char'
|-TypedefDecl 0x5608c10e6b10 <line:53:1, col:19> col:19 referenced __uint_least8_t '__uint8_t':'unsigned char'
| `-TypedefType 0x5608c10e6ae0 '__uint8_t' sugar
|   |-Typedef 0x5608c10e6750 '__uint8_t'
|   `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c10e6ba0 <line:54:1, col:19> col:19 referenced __int_least16_t '__int16_t':'short'
| `-TypedefType 0x5608c10e6b70 '__int16_t' sugar
|   |-Typedef 0x5608c10e67c0 '__int16_t'
|   `-BuiltinType 0x5608c10a4860 'short'
|-TypedefDecl 0x5608c10e6c30 <line:55:1, col:20> col:20 referenced __uint_least16_t '__uint16_t':'unsigned short'
| `-TypedefType 0x5608c10e6c00 '__uint16_t' sugar
|   |-Typedef 0x5608c10e6830 '__uint16_t'
|   `-BuiltinType 0x5608c10a4900 'unsigned short'
|-TypedefDecl 0x5608c10e6cc0 <line:56:1, col:19> col:19 referenced __int_least32_t '__int32_t':'int'
| `-TypedefType 0x5608c10e6c90 '__int32_t' sugar
|   |-Typedef 0x5608c10e68a0 '__int32_t'
|   `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c10e6d50 <line:57:1, col:20> col:20 referenced __uint_least32_t '__uint32_t':'unsigned int'
| `-TypedefType 0x5608c10e6d20 '__uint32_t' sugar
|   |-Typedef 0x5608c10e6910 '__uint32_t'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c10e6de0 <line:58:1, col:19> col:19 referenced __int_least64_t '__int64_t':'long'
| `-TypedefType 0x5608c10e6db0 '__int64_t' sugar
|   |-Typedef 0x5608c10e6980 '__int64_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c10e6e70 <line:59:1, col:20> col:20 referenced __uint_least64_t '__uint64_t':'unsigned long'
| `-TypedefType 0x5608c10e6e40 '__uint64_t' sugar
|   |-Typedef 0x5608c10e69f0 '__uint64_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e6ee0 <line:63:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c10e6f50 <line:64:1, col:27> col:27 referenced __u_quad_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e6fc0 <line:72:1, col:18> col:18 referenced __intmax_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c10e7030 <line:73:1, col:27> col:27 referenced __uintmax_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e70a0 <line:137:22, line:145:25> col:25 referenced __dev_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e7110 <line:137:22, line:146:25> col:25 referenced __uid_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c10e7180 <line:137:22, line:147:25> col:25 referenced __gid_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c10e71f0 <line:137:22, line:148:25> col:25 referenced __ino_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e7260 <line:137:22, line:149:27> col:27 referenced __ino64_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e72d0 <line:137:22, line:150:26> col:26 referenced __mode_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c10e7340 <line:137:22, line:151:27> col:27 referenced __nlink_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c10e73b0 <line:137:22, line:152:25> col:25 referenced __off_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c10e7420 <line:137:22, line:153:27> col:27 referenced __off64_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1142470 <line:137:22, line:154:25> col:25 referenced __pid_t 'int'
| `-BuiltinType 0x5608c10a4880 'int'
|-RecordDecl 0x5608c11424c8 </usr/include/bits/typesizes.h:73:24, col:47> col:24 struct definition
| `-FieldDecl 0x5608c1142610 <col:33, col:44> col:37 __val 'int [2]'
|-TypedefDecl 0x5608c11426b8 </usr/include/bits/types.h:137:22, line:155:26> col:26 referenced __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x5608c1142660 'struct __fsid_t' sugar
|   `-RecordType 0x5608c1142550 '__fsid_t'
|     `-Record 0x5608c11424c8 ''
|-TypedefDecl 0x5608c1142740 <line:137:22, line:156:27> col:27 referenced __clock_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c11427b0 <line:137:22, line:157:26> col:26 __rlim_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1142820 <line:137:22, line:158:28> col:28 __rlim64_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1142890 <line:137:22, line:159:24> col:24 referenced __id_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c1142900 <line:137:22, line:160:26> col:26 referenced __time_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1142970 <line:137:22, line:161:30> col:30 referenced __useconds_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c11429e0 <line:137:22, line:162:31> col:31 referenced __suseconds_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1142a50 <line:137:22, line:163:33> col:33 __suseconds64_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1142ac0 <line:137:22, line:165:27> col:27 referenced __daddr_t 'int'
| `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c1142b30 <line:137:22, line:166:25> col:25 referenced __key_t 'int'
| `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c1142ba0 <line:137:22, line:169:29> col:29 referenced __clockid_t 'int'
| `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c1142c10 <line:137:22, line:172:27> col:27 referenced __timer_t 'void *'
| `-PointerType 0x5608c10a4fa0 'void *'
|   `-BuiltinType 0x5608c10a47e0 'void'
|-TypedefDecl 0x5608c1142c80 <line:137:22, line:175:29> col:29 referenced __blksize_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1142cf0 <line:137:22, line:180:28> col:28 referenced __blkcnt_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1142d60 <line:137:22, line:181:30> col:30 referenced __blkcnt64_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1142dd0 <line:137:22, line:184:30> col:30 referenced __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1142e40 <line:137:22, line:185:32> col:32 referenced __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1142eb0 <line:137:22, line:188:30> col:30 referenced __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1142f20 <line:137:22, line:189:32> col:32 referenced __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1142f90 <line:137:22, line:192:28> col:28 __fsword_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1143000 <line:137:22, line:194:27> col:27 referenced __ssize_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1143070 <line:137:22, line:197:33> col:33 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c11430e0 <line:137:22, line:199:33> col:33 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1143170 <line:203:1, col:19> col:19 referenced __loff_t '__off64_t':'long'
| `-TypedefType 0x5608c1143140 '__off64_t' sugar
|   |-Typedef 0x5608c10e7420 '__off64_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c11431e0 <line:204:1, col:15> col:15 referenced __caddr_t 'char *'
| `-PointerType 0x5608c10a5410 'char *'
|   `-BuiltinType 0x5608c10a4820 'char'
|-TypedefDecl 0x5608c1143250 <line:137:22, line:207:25> col:25 __intptr_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c11432c0 <line:137:22, line:210:23> col:23 __socklen_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c1143330 <line:215:1, col:13> col:13 __sig_atomic_t 'int'
| `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c11433c0 </usr/include/bits/types/time_t.h:10:1, col:18> col:18 referenced time_t '__time_t':'long'
| `-TypedefType 0x5608c1143390 '__time_t' sugar
|   |-Typedef 0x5608c1142900 '__time_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-RecordDecl 0x5608c1143480 </usr/include/bits/types/struct_timeval.h:8:1, line:17:1> line:8:8 struct timeval definition
| |-FieldDecl 0x5608c1143530 <line:14:3, col:12> col:12 referenced tv_sec '__time_t':'long'
| `-FieldDecl 0x5608c11435b0 <line:15:3, col:17> col:17 referenced tv_usec '__suseconds_t':'long'
|-TypedefDecl 0x5608c1143610 </usr/include/sys/time.h:28:1, col:23> col:23 suseconds_t '__suseconds_t':'long'
| `-TypedefType 0x5608c1143580 '__suseconds_t' sugar
|   |-Typedef 0x5608c11429e0 '__suseconds_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-RecordDecl 0x5608c1143668 </usr/include/bits/types/__sigset_t.h:5:9, line:8:1> line:5:9 struct definition
| `-FieldDecl 0x5608c11438c0 <line:7:3, col:41> col:21 __val 'unsigned long [16]'
|-TypedefDecl 0x5608c1143968 <line:5:1, line:8:3> col:3 referenced __sigset_t 'struct __sigset_t':'__sigset_t'
| `-ElaboratedType 0x5608c1143910 'struct __sigset_t' sugar
|   `-RecordType 0x5608c11436f0 '__sigset_t'
|     `-Record 0x5608c1143668 ''
|-TypedefDecl 0x5608c1143a10 </usr/include/bits/types/sigset_t.h:7:1, col:20> col:20 sigset_t '__sigset_t':'__sigset_t'
| `-TypedefType 0x5608c11439e0 '__sigset_t' sugar
|   |-Typedef 0x5608c1143968 '__sigset_t'
|   `-ElaboratedType 0x5608c1143910 'struct __sigset_t' sugar
|     `-RecordType 0x5608c11436f0 '__sigset_t'
|       `-Record 0x5608c1143668 ''
|-RecordDecl 0x5608c1143a68 </usr/include/bits/types/struct_timespec.h:11:1, line:31:1> line:11:8 struct timespec definition
| |-FieldDecl 0x5608c1143b20 <line:16:3, col:12> col:12 tv_sec '__time_t':'long'
| `-FieldDecl 0x5608c1143ba0 <line:21:3, col:21> col:21 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x5608c1143c08 </usr/include/sys/select.h:49:1, col:18> col:18 referenced __fd_mask 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-RecordDecl 0x5608c1143c60 <line:59:9, line:70:3> line:59:9 struct definition
| `-FieldDecl 0x5608c1143ee8 <line:64:5, col:48> col:15 fds_bits '__fd_mask [16]'
|-TypedefDecl 0x5608c1143f98 <line:59:1, line:70:5> col:5 referenced fd_set 'struct fd_set':'fd_set'
| `-ElaboratedType 0x5608c1143f40 'struct fd_set' sugar
|   `-RecordType 0x5608c1143ce0 'fd_set'
|     `-Record 0x5608c1143c60 ''
|-TypedefDecl 0x5608c1144018 <line:77:1, col:19> col:19 fd_mask '__fd_mask':'long'
| `-TypedefType 0x5608c1143d00 '__fd_mask' sugar
|   |-Typedef 0x5608c1143c08 '__fd_mask'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-FunctionDecl 0x5608c1150190 <line:102:1, line:105:42> line:102:12 select 'int (int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)' extern
| |-ParmVarDecl 0x5608c1144088 <col:20, col:24> col:24 __nfds 'int'
| |-ParmVarDecl 0x5608c1144178 <col:32, col:51> col:51 __readfds 'fd_set *restrict'
| |-ParmVarDecl 0x5608c11441f0 <line:103:6, col:25> col:25 __writefds 'fd_set *restrict'
| |-ParmVarDecl 0x5608c1144268 <line:104:6, col:25> col:25 __exceptfds 'fd_set *restrict'
| `-ParmVarDecl 0x5608c1144380 <line:105:6, col:33> col:33 __timeout 'struct timeval *restrict'
|-FunctionDecl 0x5608c1150790 <line:127:1, line:131:45> line:127:12 pselect 'int (int, fd_set *restrict, fd_set *restrict, fd_set *restrict, const struct timespec *restrict, const __sigset_t *restrict)' extern
| |-ParmVarDecl 0x5608c11502b8 <col:21, col:25> col:25 __nfds 'int'
| |-ParmVarDecl 0x5608c1150330 <col:33, col:52> col:52 __readfds 'fd_set *restrict'
| |-ParmVarDecl 0x5608c11503a8 <line:128:7, col:26> col:26 __writefds 'fd_set *restrict'
| |-ParmVarDecl 0x5608c1150420 <line:129:7, col:26> col:26 __exceptfds 'fd_set *restrict'
| |-ParmVarDecl 0x5608c1150540 <line:130:7, col:41> col:41 __timeout 'const struct timespec *restrict'
| `-ParmVarDecl 0x5608c1150618 <line:131:7, col:36> col:36 __sigmask 'const __sigset_t *restrict'
|-RecordDecl 0x5608c1150860 </usr/include/sys/time.h:52:1, line:56:3> line:52:8 struct timezone definition
| |-FieldDecl 0x5608c1150918 <line:54:5, col:9> col:9 tz_minuteswest 'int'
| `-FieldDecl 0x5608c1150980 <line:55:5, col:9> col:9 tz_dsttime 'int'
|-FunctionDecl 0x5608c1150bb0 <line:67:1, /usr/include/sys/cdefs.h:384:76> /usr/include/sys/time.h:67:12 used gettimeofday 'int (struct timeval *restrict, void *restrict)' extern
| |-ParmVarDecl 0x5608c11509f8 <col:26, col:53> col:53 __tv 'struct timeval *restrict'
| |-ParmVarDecl 0x5608c1150a78 <line:68:5, col:22> col:22 __tz 'void *restrict'
| |-NoThrowAttr 0x5608c1150c60 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1150cb8 <line:384:57, /usr/include/sys/time.h:68:49> 1
|-FunctionDecl 0x5608c1150fc0 <line:86:1, /usr/include/sys/cdefs.h:79:54> /usr/include/sys/time.h:86:12 settimeofday 'int (const struct timeval *, const struct timezone *)' extern
| |-ParmVarDecl 0x5608c1150d80 <col:26, col:48> col:48 __tv 'const struct timeval *'
| |-ParmVarDecl 0x5608c1150ea0 <line:87:5, col:28> col:28 __tz 'const struct timezone *'
| `-NoThrowAttr 0x5608c1151070 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1153970 </usr/include/sys/time.h:94:1, /usr/include/sys/cdefs.h:79:54> /usr/include/sys/time.h:94:12 adjtime 'int (const struct timeval *, struct timeval *)' extern
| |-ParmVarDecl 0x5608c11537c0 <col:21, col:43> col:43 __delta 'const struct timeval *'
| |-ParmVarDecl 0x5608c1153850 <line:95:7, col:23> col:23 __olddelta 'struct timeval *'
| `-NoThrowAttr 0x5608c1153a20 </usr/include/sys/cdefs.h:79:35>
|-EnumDecl 0x5608c1153a78 </usr/include/sys/time.h:114:1, line:126:3> line:114:6 __itimer_which
| |-EnumConstantDecl 0x5608c1153b80 <line:117:5, col:19> col:5 ITIMER_REAL 'int'
| | `-ConstantExpr 0x5608c1153b60 <col:19> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5608c1153b40 <col:19> 'int' 0
| |-EnumConstantDecl 0x5608c1153c10 <line:120:5, col:22> col:5 ITIMER_VIRTUAL 'int'
| | `-ConstantExpr 0x5608c1153bf0 <col:22> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5608c1153bd0 <col:22> 'int' 1
| `-EnumConstantDecl 0x5608c1153ca0 <line:124:5, col:19> col:5 ITIMER_PROF 'int'
|   `-ConstantExpr 0x5608c1153c80 <col:19> 'int'
|     |-value: Int 2
|     `-IntegerLiteral 0x5608c1153c60 <col:19> 'int' 2
|-RecordDecl 0x5608c1153cf0 <line:130:1, line:136:3> line:130:8 struct itimerval definition
| |-FieldDecl 0x5608c1153db0 <line:133:5, col:20> col:20 it_interval 'struct timeval':'struct timeval'
| `-FieldDecl 0x5608c1153e20 <line:135:5, col:20> col:20 it_value 'struct timeval':'struct timeval'
|-TypedefDecl 0x5608c1153f20 <line:141:1, col:29> col:29 referenced __itimer_which_t 'enum __itimer_which':'enum __itimer_which'
| `-ElaboratedType 0x5608c1153ed0 'enum __itimer_which' sugar
|   `-EnumType 0x5608c1153b20 'enum __itimer_which'
|     `-Enum 0x5608c1153a78 '__itimer_which'
|-FunctionDecl 0x5608c11541f0 <line:149:1, /usr/include/sys/cdefs.h:79:54> /usr/include/sys/time.h:149:12 getitimer 'int (__itimer_which_t, struct itimerval *)' extern
| |-ParmVarDecl 0x5608c1153fb0 <col:23, col:40> col:40 __which '__itimer_which_t':'enum __itimer_which'
| |-ParmVarDecl 0x5608c11540d0 <line:150:9, col:27> col:27 __value 'struct itimerval *'
| `-NoThrowAttr 0x5608c11542a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11545b0 </usr/include/sys/time.h:155:1, /usr/include/sys/cdefs.h:79:54> /usr/include/sys/time.h:155:12 setitimer 'int (__itimer_which_t, const struct itimerval *restrict, struct itimerval *restrict)' extern
| |-ParmVarDecl 0x5608c1154308 <col:23, col:40> col:40 __which '__itimer_which_t':'enum __itimer_which'
| |-ParmVarDecl 0x5608c11543f0 <line:156:9, col:44> col:44 __new 'const struct itimerval *restrict'
| |-ParmVarDecl 0x5608c1154480 <line:157:9, col:38> col:38 __old 'struct itimerval *restrict'
| `-NoThrowAttr 0x5608c1154668 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11555c0 </usr/include/sys/time.h:162:1, /usr/include/sys/cdefs.h:384:76> /usr/include/sys/time.h:162:12 utimes 'int (const char *, const struct timeval *)' extern
| |-ParmVarDecl 0x5608c11546d8 <col:20, col:32> col:32 __file 'const char *'
| |-ParmVarDecl 0x5608c1155480 <col:40, col:68> col:61 __tvp 'const struct timeval *':'const struct timeval *'
| |-NoThrowAttr 0x5608c1155670 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11556c8 <line:384:57, /usr/include/sys/time.h:163:27> 1
|-FunctionDecl 0x5608c11558b8 <line:189:1, /usr/include/sys/cdefs.h:384:76> /usr/include/sys/time.h:189:12 lutimes 'int (const char *, const struct timeval *)' extern
| |-ParmVarDecl 0x5608c1155720 <col:21, col:33> col:33 __file 'const char *'
| |-ParmVarDecl 0x5608c11557f8 <col:41, col:69> col:62 __tvp 'const struct timeval *':'const struct timeval *'
| |-NoThrowAttr 0x5608c1155968 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11559c0 <line:384:57, /usr/include/sys/time.h:190:27> 1
|-FunctionDecl 0x5608c1155c00 <line:193:1, /usr/include/sys/cdefs.h:79:54> /usr/include/sys/time.h:193:12 futimes 'int (int, const struct timeval *)' extern
| |-ParmVarDecl 0x5608c1155a10 <col:21, col:25> col:25 __fd 'int'
| |-ParmVarDecl 0x5608c1155ae8 <col:31, col:59> col:52 __tvp 'const struct timeval *':'const struct timeval *'
| `-NoThrowAttr 0x5608c1155cb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1155fa0 </usr/include/sys/time.h:214:1, /usr/include/sys/cdefs.h:79:54> /usr/include/sys/time.h:214:12 futimesat 'int (int, const char *, const struct timeval *)' extern
| |-ParmVarDecl 0x5608c1155d20 <col:23, col:27> col:27 __fd 'int'
| |-ParmVarDecl 0x5608c1155da0 <col:33, col:45> col:45 __file 'const char *'
| |-ParmVarDecl 0x5608c1155e78 <line:215:9, col:37> col:30 __tvp 'const struct timeval *':'const struct timeval *'
| `-NoThrowAttr 0x5608c1156058 </usr/include/sys/cdefs.h:79:35>
|-TypedefDecl 0x5608c11560c8 </usr/lib/clang/13.0.1/include/stddef.h:46:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1156138 <line:74:1, col:24> col:24 referenced wchar_t 'int'
| `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c11561a8 </usr/include/bits/floatn-common.h:214:1, col:15> col:15 referenced _Float32 'float'
| `-BuiltinType 0x5608c10a4980 'float'
|-TypedefDecl 0x5608c1156218 <line:251:1, col:16> col:16 referenced _Float64 'double'
| `-BuiltinType 0x5608c10a49a0 'double'
|-TypedefDecl 0x5608c1156288 <line:268:1, col:16> col:16 referenced _Float32x 'double'
| `-BuiltinType 0x5608c10a49a0 'double'
|-TypedefDecl 0x5608c11562f8 <line:285:1, col:21> col:21 referenced _Float64x 'long double'
| `-BuiltinType 0x5608c10a49c0 'long double'
|-RecordDecl 0x5608c1156350 </usr/include/stdlib.h:59:9, line:63:3> line:59:9 struct definition
| |-FieldDecl 0x5608c1170408 <line:61:5, col:9> col:9 quot 'int'
| `-FieldDecl 0x5608c1170470 <line:62:5, col:9> col:9 rem 'int'
|-TypedefDecl 0x5608c1170518 <line:59:1, line:63:5> col:5 referenced div_t 'struct div_t':'div_t'
| `-ElaboratedType 0x5608c11704c0 'struct div_t' sugar
|   `-RecordType 0x5608c11703d0 'div_t'
|     `-Record 0x5608c1156350 ''
|-RecordDecl 0x5608c1170588 <line:67:9, line:71:3> line:67:9 struct definition
| |-FieldDecl 0x5608c1170648 <line:69:5, col:14> col:14 quot 'long'
| `-FieldDecl 0x5608c11706b0 <line:70:5, col:14> col:14 rem 'long'
|-TypedefDecl 0x5608c1170758 <line:67:1, line:71:5> col:5 referenced ldiv_t 'struct ldiv_t':'ldiv_t'
| `-ElaboratedType 0x5608c1170700 'struct ldiv_t' sugar
|   `-RecordType 0x5608c1170610 'ldiv_t'
|     `-Record 0x5608c1170588 ''
|-RecordDecl 0x5608c11707c8 <line:77:23, line:81:3> line:77:23 struct definition
| |-FieldDecl 0x5608c1170888 <line:79:5, col:19> col:19 quot 'long long'
| `-FieldDecl 0x5608c11708f0 <line:80:5, col:19> col:19 rem 'long long'
|-TypedefDecl 0x5608c1170998 <line:77:15, line:81:5> col:5 referenced lldiv_t 'struct lldiv_t':'lldiv_t'
| `-ElaboratedType 0x5608c1170940 'struct lldiv_t' sugar
|   `-RecordType 0x5608c1170850 'lldiv_t'
|     `-Record 0x5608c11707c8 ''
|-FunctionDecl 0x5608c1170b28 <line:98:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:98:15 __ctype_get_mb_cur_max 'size_t (void)' extern
| `-NoThrowAttr 0x5608c1170bc8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1170d20 </usr/include/stdlib.h:102:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:102:15 atof 'double (const char *)' extern
| |-ParmVarDecl 0x5608c1170c38 <col:21, col:33> col:33 __nptr 'const char *'
| |-NoThrowAttr 0x5608c1170dc8 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1170e20 <line:308:45>
| `-NonNullAttr 0x5608c1170e48 <line:384:57, /usr/include/stdlib.h:103:46> 1
|-FunctionDecl 0x5608c1170f90 <line:105:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:105:12 atoi 'int (const char *)' extern
| |-ParmVarDecl 0x5608c1170ea0 <col:18, col:30> col:30 __nptr 'const char *'
| |-NoThrowAttr 0x5608c1171038 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1171090 <line:308:45>
| `-NonNullAttr 0x5608c11710b8 <line:384:57, /usr/include/stdlib.h:106:46> 1
|-FunctionDecl 0x5608c1171200 <line:108:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:108:17 atol 'long (const char *)' extern
| |-ParmVarDecl 0x5608c1171110 <col:23, col:35> col:35 __nptr 'const char *'
| |-NoThrowAttr 0x5608c11712a8 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1171300 <line:308:45>
| `-NonNullAttr 0x5608c1171328 <line:384:57, /usr/include/stdlib.h:109:46> 1
|-FunctionDecl 0x5608c11724e0 <line:113:15, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:113:36 atoll 'long long (const char *)' extern
| |-ParmVarDecl 0x5608c11723f0 <col:43, col:55> col:55 __nptr 'const char *'
| |-NoThrowAttr 0x5608c1172588 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c11725e0 <line:308:45>
| `-NonNullAttr 0x5608c1172608 <line:384:57, /usr/include/stdlib.h:114:46> 1
|-FunctionDecl 0x5608c1172850 <line:118:15> col:15 implicit used strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x5608c1172948 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c11729b0 <<invalid sloc>> <invalid sloc> 'char **'
| `-BuiltinAttr 0x5608c11728f0 <<invalid sloc>> Implicit 771
|-FunctionDecl 0x5608c1172a28 prev 0x5608c1172850 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:118:15 used strtod 'double (const char *, char **)' extern
| |-ParmVarDecl 0x5608c1172660 <col:23, col:46> col:46 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1172710 <line:119:9, col:27> col:27 __endptr 'char **restrict'
| |-BuiltinAttr 0x5608c1172b68 <<invalid sloc>> Inherited Implicit 771
| |-NoThrowAttr 0x5608c1172ad8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1172b30 <line:384:57, /usr/include/stdlib.h:120:27> 1
|-FunctionDecl 0x5608c1172d60 <line:124:14> col:14 implicit strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x5608c1172e58 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1172ec0 <<invalid sloc>> <invalid sloc> 'char **'
| `-BuiltinAttr 0x5608c1172e00 <<invalid sloc>> Implicit 772
|-FunctionDecl 0x5608c1172f38 prev 0x5608c1172d60 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:124:14 strtof 'float (const char *, char **)' extern
| |-ParmVarDecl 0x5608c1172ba8 <col:22, col:45> col:45 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1172c28 <line:125:8, col:26> col:26 __endptr 'char **restrict'
| |-BuiltinAttr 0x5608c1173078 <<invalid sloc>> Inherited Implicit 772
| |-NoThrowAttr 0x5608c1172fe8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1173040 <line:384:57, /usr/include/stdlib.h:125:57> 1
|-FunctionDecl 0x5608c1173270 <line:127:20> col:20 implicit strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x5608c1173368 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1173400 <<invalid sloc>> <invalid sloc> 'char **'
| `-BuiltinAttr 0x5608c1173310 <<invalid sloc>> Implicit 773
|-FunctionDecl 0x5608c1173478 prev 0x5608c1173270 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:127:20 strtold 'long double (const char *, char **)' extern
| |-ParmVarDecl 0x5608c11730b8 <col:29, col:52> col:52 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1173138 <line:128:8, col:26> col:26 __endptr 'char **restrict'
| |-BuiltinAttr 0x5608c11735b8 <<invalid sloc>> Inherited Implicit 773
| |-NoThrowAttr 0x5608c1173528 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1173580 <line:384:57, /usr/include/stdlib.h:129:27> 1
|-FunctionDecl 0x5608c1173788 <line:141:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:141:17 strtof32 '_Float32 (const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x5608c1173618 <col:27, col:50> col:50 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1173698 <line:142:6, col:24> col:24 __endptr 'char **restrict'
| |-NoThrowAttr 0x5608c1173838 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1173890 <line:384:57, /usr/include/stdlib.h:143:27> 1
|-FunctionDecl 0x5608c1173a78 <line:147:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:147:17 strtof64 '_Float64 (const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x5608c1173908 <col:27, col:50> col:50 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1173988 <line:148:6, col:24> col:24 __endptr 'char **restrict'
| |-NoThrowAttr 0x5608c1173b28 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1173b80 <line:384:57, /usr/include/stdlib.h:149:27> 1
|-FunctionDecl 0x5608c1173d68 <line:159:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:159:18 strtof32x '_Float32x (const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x5608c1173bf8 <col:29, col:52> col:52 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1173c78 <line:160:8, col:26> col:26 __endptr 'char **restrict'
| |-NoThrowAttr 0x5608c1173e18 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1173e70 <line:384:57, /usr/include/stdlib.h:161:27> 1
|-FunctionDecl 0x5608c1174058 <line:165:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:165:18 strtof64x '_Float64x (const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x5608c1173ee8 <col:29, col:52> col:52 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1173f68 <line:166:8, col:26> col:26 __endptr 'char **restrict'
| |-NoThrowAttr 0x5608c1174108 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1174160 <line:384:57, /usr/include/stdlib.h:167:27> 1
|-FunctionDecl 0x5608c1174410 <line:177:17> col:17 implicit used strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x5608c1174508 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1174570 <<invalid sloc>> <invalid sloc> 'char **'
| |-ParmVarDecl 0x5608c11745d8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c11744b0 <<invalid sloc>> Implicit 774
|-FunctionDecl 0x5608c1174658 prev 0x5608c1174410 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:177:17 used strtol 'long (const char *, char **, int)' extern
| |-ParmVarDecl 0x5608c11741b0 <col:25, col:48> col:48 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1174230 <line:178:4, col:22> col:22 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c11742b0 <col:32, col:36> col:36 __base 'int'
| |-BuiltinAttr 0x5608c11747a8 <<invalid sloc>> Inherited Implicit 774
| |-NoThrowAttr 0x5608c1174710 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1174768 <line:384:57, /usr/include/stdlib.h:179:27> 1
|-FunctionDecl 0x5608c1174a30 <line:181:26> col:26 implicit strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x5608c1174b28 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1174b90 <<invalid sloc>> <invalid sloc> 'char **'
| |-ParmVarDecl 0x5608c1174bf8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c1174ad0 <<invalid sloc>> Implicit 776
|-FunctionDecl 0x5608c1174c78 prev 0x5608c1174a30 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:181:26 strtoul 'unsigned long (const char *, char **, int)' extern
| |-ParmVarDecl 0x5608c11747e8 <col:35, col:58> col:58 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1174868 <line:182:7, col:25> col:25 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c11748e8 <col:35, col:39> col:39 __base 'int'
| |-BuiltinAttr 0x5608c1174dc8 <<invalid sloc>> Inherited Implicit 776
| |-NoThrowAttr 0x5608c1174d30 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1174d88 <line:384:57, /usr/include/stdlib.h:183:27> 1
|-FunctionDecl 0x5608c1175050 <line:188:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:188:22 strtoq 'long long (const char *restrict, char **restrict, int)' extern
| |-ParmVarDecl 0x5608c1174e08 <col:30, col:53> col:53 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1174e88 <line:189:9, col:27> col:27 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c1174f08 <col:37, col:41> col:41 __base 'int'
| |-NoThrowAttr 0x5608c1175108 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1175160 <line:384:57, /usr/include/stdlib.h:190:27> 1
|-FunctionDecl 0x5608c1175420 <line:193:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:193:31 strtouq 'unsigned long long (const char *restrict, char **restrict, int)' extern
| |-ParmVarDecl 0x5608c11751b0 <col:40, col:63> col:63 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1175230 <line:194:12, col:30> col:30 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c11752b0 <col:40, col:44> col:44 __base 'int'
| |-NoThrowAttr 0x5608c11754d8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1175530 <line:384:57, /usr/include/stdlib.h:195:27> 1
|-FunctionDecl 0x5608c1175748 <line:201:22> col:22 implicit used strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x5608c1175840 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c11758a8 <<invalid sloc>> <invalid sloc> 'char **'
| |-ParmVarDecl 0x5608c1175910 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c11757e8 <<invalid sloc>> Implicit 775
|-FunctionDecl 0x5608c1175990 prev 0x5608c1175748 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:201:22 used strtoll 'long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x5608c1175580 <col:31, col:54> col:54 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1175600 <line:202:10, col:28> col:28 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c1175680 <col:38, col:42> col:42 __base 'int'
| |-BuiltinAttr 0x5608c1175ad8 <<invalid sloc>> Inherited Implicit 775
| |-NoThrowAttr 0x5608c1175a48 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1175aa0 <line:384:57, /usr/include/stdlib.h:203:27> 1
|-FunctionDecl 0x5608c1175ce0 <line:206:31> col:31 implicit strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x5608c1175dd8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1175e40 <<invalid sloc>> <invalid sloc> 'char **'
| |-ParmVarDecl 0x5608c1175ea8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c1175d80 <<invalid sloc>> Implicit 777
|-FunctionDecl 0x5608c1175f28 prev 0x5608c1175ce0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:206:31 strtoull 'unsigned long long (const char *, char **, int)' extern
| |-ParmVarDecl 0x5608c1175b18 <col:41, col:64> col:64 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c1175b98 <line:207:6, col:24> col:24 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c1175c18 <col:34, col:38> col:38 __base 'int'
| |-BuiltinAttr 0x5608c1176078 <<invalid sloc>> Inherited Implicit 777
| |-NoThrowAttr 0x5608c1175fe0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1176038 <line:384:57, /usr/include/stdlib.h:208:27> 1
|-FunctionDecl 0x5608c1176430 <line:213:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:213:12 strfromd 'int (char *, size_t, const char *, double)' extern
| |-ParmVarDecl 0x5608c11760b8 <col:22, col:28> col:28 __dest 'char *'
| |-ParmVarDecl 0x5608c1176130 <col:36, col:43> col:43 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11761b0 <col:51, col:63> col:63 __format 'const char *'
| |-ParmVarDecl 0x5608c1176230 <line:214:8, col:15> col:15 __f 'double'
| |-NoThrowAttr 0x5608c11764f0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1176548 <line:384:57, /usr/include/stdlib.h:215:27> 3
|-FunctionDecl 0x5608c1176880 <line:217:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:217:12 strfromf 'int (char *, size_t, const char *, float)' extern
| |-ParmVarDecl 0x5608c11765a0 <col:22, col:28> col:28 __dest 'char *'
| |-ParmVarDecl 0x5608c1176618 <col:36, col:43> col:43 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1176698 <col:51, col:63> col:63 __format 'const char *'
| |-ParmVarDecl 0x5608c1176718 <line:218:8, col:14> col:14 __f 'float'
| |-NoThrowAttr 0x5608c1176940 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1176998 <line:384:57, /usr/include/stdlib.h:219:27> 3
|-FunctionDecl 0x5608c1176cd0 <line:221:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:221:12 strfroml 'int (char *, size_t, const char *, long double)' extern
| |-ParmVarDecl 0x5608c11769f0 <col:22, col:28> col:28 __dest 'char *'
| |-ParmVarDecl 0x5608c1176a68 <col:36, col:43> col:43 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1176ae8 <col:51, col:63> col:63 __format 'const char *'
| |-ParmVarDecl 0x5608c1176b68 <line:222:8, col:20> col:20 __f 'long double'
| |-NoThrowAttr 0x5608c1176d90 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1176de8 <line:384:57, /usr/include/stdlib.h:223:27> 3
|-FunctionDecl 0x5608c11770d0 <line:233:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:233:12 strfromf32 'int (char *, size_t, const char *, _Float32)' extern
| |-ParmVarDecl 0x5608c1176e40 <col:24, col:30> col:30 __dest 'char *'
| |-ParmVarDecl 0x5608c1176eb8 <col:38, col:45> col:45 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1176f38 <col:53, col:66> col:66 __format 'const char *'
| |-ParmVarDecl 0x5608c1176fb0 <line:234:10, col:19> col:19 __f '_Float32':'float'
| |-NoThrowAttr 0x5608c1177190 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11771e8 <line:384:57, /usr/include/stdlib.h:235:27> 3
|-FunctionDecl 0x5608c11774f0 <line:239:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:239:12 strfromf64 'int (char *, size_t, const char *, _Float64)' extern
| |-ParmVarDecl 0x5608c1177240 <col:24, col:30> col:30 __dest 'char *'
| |-ParmVarDecl 0x5608c11772b8 <col:38, col:45> col:45 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1177338 <col:53, col:66> col:66 __format 'const char *'
| |-ParmVarDecl 0x5608c11773b0 <line:240:10, col:19> col:19 __f '_Float64':'double'
| |-NoThrowAttr 0x5608c11775b0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1177608 <line:384:57, /usr/include/stdlib.h:241:27> 3
|-FunctionDecl 0x5608c11778f0 <line:251:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:251:12 strfromf32x 'int (char *, size_t, const char *, _Float32x)' extern
| |-ParmVarDecl 0x5608c1177660 <col:25, col:31> col:31 __dest 'char *'
| |-ParmVarDecl 0x5608c11776d8 <col:39, col:46> col:46 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1177758 <col:54, col:67> col:67 __format 'const char *'
| |-ParmVarDecl 0x5608c11777d0 <line:252:4, col:14> col:14 __f '_Float32x':'double'
| |-NoThrowAttr 0x5608c11779b0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1177a08 <line:384:57, /usr/include/stdlib.h:253:27> 3
|-FunctionDecl 0x5608c1177cf0 <line:257:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:257:12 strfromf64x 'int (char *, size_t, const char *, _Float64x)' extern
| |-ParmVarDecl 0x5608c1177a60 <col:25, col:31> col:31 __dest 'char *'
| |-ParmVarDecl 0x5608c1177ad8 <col:39, col:46> col:46 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1177b58 <col:54, col:67> col:67 __format 'const char *'
| |-ParmVarDecl 0x5608c1177bd0 <line:258:4, col:14> col:14 __f '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1177db0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1177e08 <line:384:57, /usr/include/stdlib.h:259:27> 3
|-RecordDecl 0x5608c1177e48 </usr/include/bits/types/__locale_t.h:27:1, line:39:1> line:27:8 struct __locale_struct definition
| |-RecordDecl 0x5608c1177ef0 parent 0x5608c10a4778 <line:30:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x5608c1178130 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x5608c11781c0 <line:33:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x5608c1178228 <line:34:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x5608c1178290 <line:35:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x5608c1178380 <line:38:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x5608c117a4c0 <line:41:1, col:33> col:33 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x5608c117a470 'struct __locale_struct *'
|   `-ElaboratedType 0x5608c11783d0 'struct __locale_struct' sugar
|     `-RecordType 0x5608c1177ed0 'struct __locale_struct'
|       `-Record 0x5608c1177e48 '__locale_struct'
|-TypedefDecl 0x5608c117a550 </usr/include/bits/types/locale_t.h:24:1, col:20> col:20 referenced locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x5608c117a520 '__locale_t' sugar
|   |-Typedef 0x5608c117a4c0 '__locale_t'
|   `-PointerType 0x5608c117a470 'struct __locale_struct *'
|     `-ElaboratedType 0x5608c11783d0 'struct __locale_struct' sugar
|       `-RecordType 0x5608c1177ed0 'struct __locale_struct'
|         `-Record 0x5608c1177e48 '__locale_struct'
|-FunctionDecl 0x5608c117a8f0 </usr/include/stdlib.h:275:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:275:17 strtol_l 'long (const char *restrict, char **restrict, int, locale_t)' extern
| |-ParmVarDecl 0x5608c117a5c0 <col:27, col:50> col:50 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117a640 <line:276:6, col:24> col:24 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117a6c0 <col:34, col:38> col:38 __base 'int'
| |-ParmVarDecl 0x5608c117a760 <line:277:6, col:15> col:15 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117a9b0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117aa08 <line:384:57, /usr/include/stdlib.h:277:46> 1 4
|-FunctionDecl 0x5608c117ad60 <line:279:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:279:26 strtoul_l 'unsigned long (const char *restrict, char **restrict, int, locale_t)' extern
| |-ParmVarDecl 0x5608c117aa60 <col:37, col:60> col:60 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117aae0 <line:280:9, col:27> col:27 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117ab60 <line:281:9, col:13> col:13 __base 'int'
| |-ParmVarDecl 0x5608c117abd8 <col:21, col:30> col:30 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117ae20 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117ae78 <line:384:57, /usr/include/stdlib.h:282:30> 1 4
|-FunctionDecl 0x5608c117b1d0 <line:285:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:285:22 strtoll_l 'long long (const char *restrict, char **restrict, int, locale_t)' extern
| |-ParmVarDecl 0x5608c117aed0 <col:33, col:56> col:56 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117af50 <line:286:5, col:23> col:23 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117afd0 <col:33, col:37> col:37 __base 'int'
| |-ParmVarDecl 0x5608c117b048 <line:287:5, col:14> col:14 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117b290 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117b2e8 <line:384:57, /usr/include/stdlib.h:288:30> 1 4
|-FunctionDecl 0x5608c117b680 <line:291:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:291:31 strtoull_l 'unsigned long long (const char *restrict, char **restrict, int, locale_t)' extern
| |-ParmVarDecl 0x5608c117b340 <col:43, col:66> col:66 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117b3c0 <line:292:8, col:26> col:26 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117b480 <line:293:8, col:12> col:12 __base 'int'
| |-ParmVarDecl 0x5608c117b4f8 <col:20, col:29> col:29 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117b740 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117b798 <line:384:57, /usr/include/stdlib.h:294:30> 1 4
|-FunctionDecl 0x5608c117ba50 <line:296:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:296:15 strtod_l 'double (const char *restrict, char **restrict, locale_t)' extern
| |-ParmVarDecl 0x5608c117b7f0 <col:25, col:48> col:48 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117b870 <line:297:4, col:22> col:22 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117b8e8 <col:32, col:41> col:41 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117bb08 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117bb60 <line:384:57, /usr/include/stdlib.h:298:30> 1 3
|-FunctionDecl 0x5608c117be10 <line:300:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:300:14 strtof_l 'float (const char *restrict, char **restrict, locale_t)' extern
| |-ParmVarDecl 0x5608c117bbb0 <col:24, col:47> col:47 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117bc30 <line:301:10, col:28> col:28 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117bca8 <col:38, col:47> col:47 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117bec8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117bf20 <line:384:57, /usr/include/stdlib.h:302:30> 1 3
|-FunctionDecl 0x5608c117c1d0 <line:304:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:304:20 strtold_l 'long double (const char *restrict, char **restrict, locale_t)' extern
| |-ParmVarDecl 0x5608c117bf70 <col:31, col:54> col:54 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117bff0 <line:305:10, col:28> col:28 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117c068 <line:306:10, col:19> col:19 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117c288 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117c2e0 <line:384:57, /usr/include/stdlib.h:307:30> 1 3
|-FunctionDecl 0x5608c117c5b8 <line:317:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:317:17 strtof32_l '_Float32 (const char *restrict, char **restrict, locale_t)' extern
| |-ParmVarDecl 0x5608c117c330 <col:29, col:52> col:52 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117c3b0 <line:318:8, col:26> col:26 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117c490 <line:319:8, col:17> col:17 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117c670 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117c6c8 <line:384:57, /usr/include/stdlib.h:320:30> 1 3
|-FunctionDecl 0x5608c117c938 <line:324:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:324:17 strtof64_l '_Float64 (const char *restrict, char **restrict, locale_t)' extern
| |-ParmVarDecl 0x5608c117c720 <col:29, col:52> col:52 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117c7a0 <line:325:8, col:26> col:26 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117c818 <line:326:8, col:17> col:17 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117c9f0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117ca48 <line:384:57, /usr/include/stdlib.h:327:30> 1 3
|-FunctionDecl 0x5608c117ccb8 <line:338:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:338:18 strtof32x_l '_Float32x (const char *restrict, char **restrict, locale_t)' extern
| |-ParmVarDecl 0x5608c117caa0 <col:31, col:54> col:54 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117cb20 <line:339:10, col:28> col:28 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117cb98 <line:340:10, col:19> col:19 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117cd70 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117cdc8 <line:384:57, /usr/include/stdlib.h:341:30> 1 3
|-FunctionDecl 0x5608c117d038 <line:345:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:345:18 strtof64x_l '_Float64x (const char *restrict, char **restrict, locale_t)' extern
| |-ParmVarDecl 0x5608c117ce20 <col:31, col:54> col:54 __nptr 'const char *restrict'
| |-ParmVarDecl 0x5608c117cea0 <line:346:10, col:28> col:28 __endptr 'char **restrict'
| |-ParmVarDecl 0x5608c117cf18 <line:347:10, col:19> col:19 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c117d0f0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c117d148 <line:384:57, /usr/include/stdlib.h:348:30> 1 3
|-FunctionDecl 0x5608c117d238 prev 0x5608c1170f90 </usr/include/sys/cdefs.h:451:27, /usr/include/stdlib.h:365:1> line:362:8 atoi 'int (const char *)' extern inline
| |-ParmVarDecl 0x5608c117d1a0 <col:14, col:26> col:26 used __nptr 'const char *'
| |-CompoundStmt 0x5608c117daf0 <line:363:1, line:365:1>
| | `-ReturnStmt 0x5608c117dae0 <line:364:3, col:50>
| |   `-CStyleCastExpr 0x5608c117dab8 <col:10, col:50> 'int' <IntegralCast>
| |     `-CallExpr 0x5608c117da50 <col:16, col:50> 'long'
| |       |-ImplicitCastExpr 0x5608c117da38 <col:16> 'long (*)(const char *, char **, int)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5608c117d3c8 <col:16> 'long (const char *, char **, int)' Function 0x5608c1174658 'strtol' 'long (const char *, char **, int)'
| |       |-ImplicitCastExpr 0x5608c117da88 <col:24> 'const char *' <LValueToRValue>
| |       | `-DeclRefExpr 0x5608c117d3e8 <col:24> 'const char *' lvalue ParmVar 0x5608c117d1a0 '__nptr' 'const char *'
| |       |-CStyleCastExpr 0x5608c117d9a8 <col:32, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'char **' <BitCast>
| |       | `-ParenExpr 0x5608c117d988 <col:16, col:25> 'void *'
| |       |   `-CStyleCastExpr 0x5608c117d440 <col:17, col:24> 'void *' <NullToPointer>
| |       |     `-IntegerLiteral 0x5608c117d408 <col:24> 'int' 0
| |       `-IntegerLiteral 0x5608c117d9d0 </usr/include/stdlib.h:364:48> 'int' 10
| |-PureAttr 0x5608c117d360 </usr/include/sys/cdefs.h:308:45> Inherited
| |-NonNullAttr 0x5608c117d388 <line:384:57, /usr/include/stdlib.h:106:46> Inherited 1
| |-NoThrowAttr 0x5608c117d2e0 </usr/include/sys/cdefs.h:81:38>
| `-GNUInlineAttr 0x5608c117d338 <line:451:59>
|-FunctionDecl 0x5608c117dbb8 prev 0x5608c1171200 <col:27, /usr/include/stdlib.h:370:1> line:367:8 atol 'long (const char *)' extern inline
| |-ParmVarDecl 0x5608c117db20 <col:14, col:26> col:26 used __nptr 'const char *'
| |-CompoundStmt 0x5608c117df18 <line:368:1, line:370:1>
| | `-ReturnStmt 0x5608c117df08 <line:369:3, col:44>
| |   `-CallExpr 0x5608c117deb8 <col:10, col:44> 'long'
| |     |-ImplicitCastExpr 0x5608c117dea0 <col:10> 'long (*)(const char *, char **, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5608c117dd48 <col:10> 'long (const char *, char **, int)' Function 0x5608c1174658 'strtol' 'long (const char *, char **, int)'
| |     |-ImplicitCastExpr 0x5608c117def0 <col:18> 'const char *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5608c117dd68 <col:18> 'const char *' lvalue ParmVar 0x5608c117db20 '__nptr' 'const char *'
| |     |-CStyleCastExpr 0x5608c117de40 <col:26, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'char **' <BitCast>
| |     | `-ParenExpr 0x5608c117de20 <col:16, col:25> 'void *'
| |     |   `-CStyleCastExpr 0x5608c117ddc0 <col:17, col:24> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5608c117dd88 <col:24> 'int' 0
| |     `-IntegerLiteral 0x5608c117de68 </usr/include/stdlib.h:369:42> 'int' 10
| |-PureAttr 0x5608c117dce0 </usr/include/sys/cdefs.h:308:45> Inherited
| |-NonNullAttr 0x5608c117dd08 <line:384:57, /usr/include/stdlib.h:109:46> Inherited 1
| |-NoThrowAttr 0x5608c117dc60 </usr/include/sys/cdefs.h:81:38>
| `-GNUInlineAttr 0x5608c117dcb8 <line:451:59>
|-FunctionDecl 0x5608c117dfe0 prev 0x5608c11724e0 <col:27, /usr/include/stdlib.h:377:1> line:374:8 atoll 'long long (const char *)' extern inline
| |-ParmVarDecl 0x5608c117df48 <col:15, col:27> col:27 used __nptr 'const char *'
| |-CompoundStmt 0x5608c117e360 <line:375:1, line:377:1>
| | `-ReturnStmt 0x5608c117e350 <line:376:3, col:45>
| |   `-CallExpr 0x5608c117e300 <col:10, col:45> 'long long'
| |     |-ImplicitCastExpr 0x5608c117e2e8 <col:10> 'long long (*)(const char *, char **, int)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5608c117e168 <col:10> 'long long (const char *, char **, int)' Function 0x5608c1175990 'strtoll' 'long long (const char *, char **, int)'
| |     |-ImplicitCastExpr 0x5608c117e338 <col:19> 'const char *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5608c117e188 <col:19> 'const char *' lvalue ParmVar 0x5608c117df48 '__nptr' 'const char *'
| |     |-CStyleCastExpr 0x5608c117e260 <col:27, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'char **' <BitCast>
| |     | `-ParenExpr 0x5608c117e240 <col:16, col:25> 'void *'
| |     |   `-CStyleCastExpr 0x5608c117e1e0 <col:17, col:24> 'void *' <NullToPointer>
| |     |     `-IntegerLiteral 0x5608c117e1a8 <col:24> 'int' 0
| |     `-IntegerLiteral 0x5608c117e288 </usr/include/stdlib.h:376:43> 'int' 10
| |-PureAttr 0x5608c117e108 </usr/include/sys/cdefs.h:308:45> Inherited
| |-NonNullAttr 0x5608c117e130 <line:384:57, /usr/include/stdlib.h:114:46> Inherited 1
| |-NoThrowAttr 0x5608c117e088 </usr/include/sys/cdefs.h:81:38>
| `-GNUInlineAttr 0x5608c117e0e0 <line:451:59>
|-FunctionDecl 0x5608c117e460 </usr/include/stdlib.h:386:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:386:14 l64a 'char *(long)' extern
| |-ParmVarDecl 0x5608c117e390 <col:20, col:29> col:29 __n 'long'
| `-NoThrowAttr 0x5608c117e508 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c117e630 </usr/include/stdlib.h:389:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:389:17 a64l 'long (const char *)' extern
| |-ParmVarDecl 0x5608c117e578 <col:23, col:35> col:35 __s 'const char *'
| |-NoThrowAttr 0x5608c117e6d8 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c117e730 <line:308:45>
| `-NonNullAttr 0x5608c117e758 <line:384:57, /usr/include/stdlib.h:390:46> 1
|-TypedefDecl 0x5608c117e7d0 </usr/include/sys/types.h:33:1, col:18> col:18 u_char '__u_char':'unsigned char'
| `-TypedefType 0x5608c117e7a0 '__u_char' sugar
|   |-Typedef 0x5608c10e6520 '__u_char'
|   `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c117e860 <line:34:1, col:19> col:19 u_short '__u_short':'unsigned short'
| `-TypedefType 0x5608c117e830 '__u_short' sugar
|   |-Typedef 0x5608c10e6590 '__u_short'
|   `-BuiltinType 0x5608c10a4900 'unsigned short'
|-TypedefDecl 0x5608c117e8f0 <line:35:1, col:17> col:17 u_int '__u_int':'unsigned int'
| `-TypedefType 0x5608c117e8c0 '__u_int' sugar
|   |-Typedef 0x5608c10e6600 '__u_int'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c1145c20 <line:36:1, col:18> col:18 u_long '__u_long':'unsigned long'
| `-TypedefType 0x5608c117e950 '__u_long' sugar
|   |-Typedef 0x5608c10e6670 '__u_long'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1145cb0 <line:37:1, col:18> col:18 quad_t '__quad_t':'long'
| `-TypedefType 0x5608c1145c80 '__quad_t' sugar
|   |-Typedef 0x5608c10e6ee0 '__quad_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1145d40 <line:38:1, col:20> col:20 u_quad_t '__u_quad_t':'unsigned long'
| `-TypedefType 0x5608c1145d10 '__u_quad_t' sugar
|   |-Typedef 0x5608c10e6f50 '__u_quad_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1145dd0 <line:39:1, col:18> col:18 fsid_t '__fsid_t':'__fsid_t'
| `-TypedefType 0x5608c1145da0 '__fsid_t' sugar
|   |-Typedef 0x5608c11426b8 '__fsid_t'
|   `-ElaboratedType 0x5608c1142660 'struct __fsid_t' sugar
|     `-RecordType 0x5608c1142550 '__fsid_t'
|       `-Record 0x5608c11424c8 ''
|-TypedefDecl 0x5608c1145e60 <line:42:1, col:18> col:18 loff_t '__loff_t':'long'
| `-TypedefType 0x5608c1145e30 '__loff_t' sugar
|   |-Typedef 0x5608c1143170 '__loff_t'
|   `-TypedefType 0x5608c1143140 '__off64_t' sugar
|     |-Typedef 0x5608c10e7420 '__off64_t'
|     `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1145ef0 <line:47:1, col:17> col:17 ino_t '__ino_t':'unsigned long'
| `-TypedefType 0x5608c1145ec0 '__ino_t' sugar
|   |-Typedef 0x5608c10e71f0 '__ino_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1145f80 <line:54:1, col:19> col:19 ino64_t '__ino64_t':'unsigned long'
| `-TypedefType 0x5608c1145f50 '__ino64_t' sugar
|   |-Typedef 0x5608c10e7260 '__ino64_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1146010 <line:59:1, col:17> col:17 dev_t '__dev_t':'unsigned long'
| `-TypedefType 0x5608c1145fe0 '__dev_t' sugar
|   |-Typedef 0x5608c10e70a0 '__dev_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c11460a0 <line:64:1, col:17> col:17 gid_t '__gid_t':'unsigned int'
| `-TypedefType 0x5608c1146070 '__gid_t' sugar
|   |-Typedef 0x5608c10e7180 '__gid_t'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c1146130 <line:69:1, col:18> col:18 mode_t '__mode_t':'unsigned int'
| `-TypedefType 0x5608c1146100 '__mode_t' sugar
|   |-Typedef 0x5608c10e72d0 '__mode_t'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c11461c0 <line:74:1, col:19> col:19 nlink_t '__nlink_t':'unsigned long'
| `-TypedefType 0x5608c1146190 '__nlink_t' sugar
|   |-Typedef 0x5608c10e7340 '__nlink_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1146250 <line:79:1, col:17> col:17 uid_t '__uid_t':'unsigned int'
| `-TypedefType 0x5608c1146220 '__uid_t' sugar
|   |-Typedef 0x5608c10e7110 '__uid_t'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c11462e0 <line:85:1, col:17> col:17 off_t '__off_t':'long'
| `-TypedefType 0x5608c11462b0 '__off_t' sugar
|   |-Typedef 0x5608c10e73b0 '__off_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1146348 <line:92:1, col:19> col:19 off64_t '__off64_t':'long'
| `-TypedefType 0x5608c1143140 '__off64_t' sugar
|   |-Typedef 0x5608c10e7420 '__off64_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c11463d0 <line:97:1, col:17> col:17 referenced pid_t '__pid_t':'int'
| `-TypedefType 0x5608c11463a0 '__pid_t' sugar
|   |-Typedef 0x5608c1142470 '__pid_t'
|   `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c1146460 <line:103:1, col:16> col:16 id_t '__id_t':'unsigned int'
| `-TypedefType 0x5608c1146430 '__id_t' sugar
|   |-Typedef 0x5608c1142890 '__id_t'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c11464f0 <line:108:1, col:19> col:19 ssize_t '__ssize_t':'long'
| `-TypedefType 0x5608c11464c0 '__ssize_t' sugar
|   |-Typedef 0x5608c1143000 '__ssize_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1146580 <line:114:1, col:19> col:19 daddr_t '__daddr_t':'int'
| `-TypedefType 0x5608c1146550 '__daddr_t' sugar
|   |-Typedef 0x5608c1142ac0 '__daddr_t'
|   `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c1146610 <line:115:1, col:19> col:19 caddr_t '__caddr_t':'char *'
| `-TypedefType 0x5608c11465e0 '__caddr_t' sugar
|   |-Typedef 0x5608c11431e0 '__caddr_t'
|   `-PointerType 0x5608c10a5410 'char *'
|     `-BuiltinType 0x5608c10a4820 'char'
|-TypedefDecl 0x5608c11466a0 <line:121:1, col:17> col:17 key_t '__key_t':'int'
| `-TypedefType 0x5608c1146670 '__key_t' sugar
|   |-Typedef 0x5608c1142b30 '__key_t'
|   `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c1146730 </usr/include/bits/types/clock_t.h:7:1, col:19> col:19 referenced clock_t '__clock_t':'long'
| `-TypedefType 0x5608c1146700 '__clock_t' sugar
|   |-Typedef 0x5608c1142740 '__clock_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c11467c0 </usr/include/bits/types/clockid_t.h:7:1, col:21> col:21 referenced clockid_t '__clockid_t':'int'
| `-TypedefType 0x5608c1146790 '__clockid_t' sugar
|   |-Typedef 0x5608c1142ba0 '__clockid_t'
|   `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c1146850 </usr/include/bits/types/timer_t.h:7:1, col:19> col:19 referenced timer_t '__timer_t':'void *'
| `-TypedefType 0x5608c1146820 '__timer_t' sugar
|   |-Typedef 0x5608c1142c10 '__timer_t'
|   `-PointerType 0x5608c10a4fa0 'void *'
|     `-BuiltinType 0x5608c10a47e0 'void'
|-TypedefDecl 0x5608c11468e0 </usr/include/sys/types.h:134:1, col:22> col:22 useconds_t '__useconds_t':'unsigned int'
| `-TypedefType 0x5608c11468b0 '__useconds_t' sugar
|   |-Typedef 0x5608c1142970 '__useconds_t'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c1146950 <line:148:1, col:27> col:27 ulong 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c11469c0 <line:149:1, col:28> col:28 ushort 'unsigned short'
| `-BuiltinType 0x5608c10a4900 'unsigned short'
|-TypedefDecl 0x5608c1146a30 <line:150:1, col:22> col:22 uint 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c1146a98 </usr/include/bits/stdint-intn.h:24:1, col:18> col:18 int8_t '__int8_t':'signed char'
| `-TypedefType 0x5608c10e6a50 '__int8_t' sugar
|   |-Typedef 0x5608c10e66e0 '__int8_t'
|   `-BuiltinType 0x5608c10a4840 'signed char'
|-TypedefDecl 0x5608c1146b00 <line:25:1, col:19> col:19 int16_t '__int16_t':'short'
| `-TypedefType 0x5608c10e6b70 '__int16_t' sugar
|   |-Typedef 0x5608c10e67c0 '__int16_t'
|   `-BuiltinType 0x5608c10a4860 'short'
|-TypedefDecl 0x5608c1146b68 <line:26:1, col:19> col:19 referenced int32_t '__int32_t':'int'
| `-TypedefType 0x5608c10e6c90 '__int32_t' sugar
|   |-Typedef 0x5608c10e68a0 '__int32_t'
|   `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c11885e0 <line:27:1, col:19> col:19 int64_t '__int64_t':'long'
| `-TypedefType 0x5608c10e6db0 '__int64_t' sugar
|   |-Typedef 0x5608c10e6980 '__int64_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1188648 </usr/include/sys/types.h:158:1, col:19> col:19 u_int8_t '__uint8_t':'unsigned char'
| `-TypedefType 0x5608c10e6ae0 '__uint8_t' sugar
|   |-Typedef 0x5608c10e6750 '__uint8_t'
|   `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c11886b0 <line:159:1, col:20> col:20 u_int16_t '__uint16_t':'unsigned short'
| `-TypedefType 0x5608c10e6c00 '__uint16_t' sugar
|   |-Typedef 0x5608c10e6830 '__uint16_t'
|   `-BuiltinType 0x5608c10a4900 'unsigned short'
|-TypedefDecl 0x5608c1188718 <line:160:1, col:20> col:20 u_int32_t '__uint32_t':'unsigned int'
| `-TypedefType 0x5608c10e6d20 '__uint32_t' sugar
|   |-Typedef 0x5608c10e6910 '__uint32_t'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c1188780 <line:161:1, col:20> col:20 u_int64_t '__uint64_t':'unsigned long'
| `-TypedefType 0x5608c10e6e40 '__uint64_t' sugar
|   |-Typedef 0x5608c10e69f0 '__uint64_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1188800 <line:164:1, col:13> col:13 register_t 'long'
| |-BuiltinType 0x5608c10a48a0 'long'
| `-ModeAttr 0x5608c1188868 <col:40, col:58> __word__
|-FunctionDecl 0x5608c11889c8 </usr/include/bits/byteswap.h:33:1, line:41:1> line:34:1 __bswap_16 '__uint16_t (__uint16_t)' static inline
| |-ParmVarDecl 0x5608c11888d8 <col:13, col:24> col:24 used __bsx '__uint16_t':'unsigned short'
| `-CompoundStmt 0x5608c1188d98 <line:35:1, line:41:1>
|   `-ReturnStmt 0x5608c1188d88 <line:39:3, line:31:60>
|     `-ParenExpr 0x5608c1188d68 <col:3, col:60> '__uint16_t':'unsigned short'
|       `-CStyleCastExpr 0x5608c1188d40 <col:4, col:59> '__uint16_t':'unsigned short' <IntegralCast>
|         `-ParenExpr 0x5608c1188d20 <col:17, col:59> 'int'
|           `-BinaryOperator 0x5608c1188cd0 <col:18, col:58> 'int' '|'
|             |-ParenExpr 0x5608c1188b80 <col:18, col:36> 'int'
|             | `-BinaryOperator 0x5608c1188b60 <col:19, col:32> 'int' '&'
|             |   |-ParenExpr 0x5608c1188b20 <col:19, col:28> 'int'
|             |   | `-BinaryOperator 0x5608c1188b00 <col:20, col:27> 'int' '>>'
|             |   |   |-ImplicitCastExpr 0x5608c1188ae8 <col:20, col:22> 'int' <IntegralCast>
|             |   |   | `-ImplicitCastExpr 0x5608c1188ad0 <col:20, col:22> '__uint16_t':'unsigned short' <LValueToRValue>
|             |   |   |   `-ParenExpr 0x5608c1188a90 <col:20, col:22> '__uint16_t':'unsigned short' lvalue
|             |   |   |     `-DeclRefExpr 0x5608c1188a70 <line:39:31> '__uint16_t':'unsigned short' lvalue ParmVar 0x5608c11888d8 '__bsx' '__uint16_t':'unsigned short'
|             |   |   `-IntegerLiteral 0x5608c1188ab0 <line:31:27> 'int' 8
|             |   `-IntegerLiteral 0x5608c1188b40 <col:32> 'int' 255
|             `-ParenExpr 0x5608c1188cb0 <col:40, col:58> 'int'
|               `-BinaryOperator 0x5608c1188c90 <col:41, col:57> 'int' '<<'
|                 |-ParenExpr 0x5608c1188c50 <col:41, col:52> 'int'
|                 | `-BinaryOperator 0x5608c1188c30 <col:42, col:48> 'int' '&'
|                 |   |-ImplicitCastExpr 0x5608c1188c18 <col:42, col:44> 'int' <IntegralCast>
|                 |   | `-ImplicitCastExpr 0x5608c1188c00 <col:42, col:44> '__uint16_t':'unsigned short' <LValueToRValue>
|                 |   |   `-ParenExpr 0x5608c1188bc0 <col:42, col:44> '__uint16_t':'unsigned short' lvalue
|                 |   |     `-DeclRefExpr 0x5608c1188ba0 <line:39:31> '__uint16_t':'unsigned short' lvalue ParmVar 0x5608c11888d8 '__bsx' '__uint16_t':'unsigned short'
|                 |   `-IntegerLiteral 0x5608c1188be0 <line:31:48> 'int' 255
|                 `-IntegerLiteral 0x5608c1188c70 <col:57> 'int' 8
|-FunctionDecl 0x5608c1188eb8 <line:48:1, line:56:1> line:49:1 __bswap_32 '__uint32_t (__uint32_t)' static inline
| |-ParmVarDecl 0x5608c1188dc0 <col:13, col:24> col:24 used __bsx '__uint32_t':'unsigned int'
| `-CompoundStmt 0x5608c1189450 <line:50:1, line:56:1>
|   `-ReturnStmt 0x5608c1189440 <line:54:3, line:46:62>
|     `-ParenExpr 0x5608c1189420 <line:45:3, line:46:62> 'unsigned int'
|       `-BinaryOperator 0x5608c1189400 <line:45:4, line:46:61> 'unsigned int' '|'
|         |-BinaryOperator 0x5608c11892c8 <line:45:4, line:46:31> 'unsigned int' '|'
|         | |-BinaryOperator 0x5608c1189190 <line:45:4, col:59> 'unsigned int' '|'
|         | | |-ParenExpr 0x5608c1189058 <col:4, col:30> 'unsigned int'
|         | | | `-BinaryOperator 0x5608c1189038 <col:5, col:28> 'unsigned int' '>>'
|         | | |   |-ParenExpr 0x5608c1188ff8 <col:5, col:23> 'unsigned int'
|         | | |   | `-BinaryOperator 0x5608c1188fd8 <col:6, col:12> 'unsigned int' '&'
|         | | |   |   |-ImplicitCastExpr 0x5608c1188fc0 <col:6, col:8> '__uint32_t':'unsigned int' <LValueToRValue>
|         | | |   |   | `-ParenExpr 0x5608c1188f80 <col:6, col:8> '__uint32_t':'unsigned int' lvalue
|         | | |   |   |   `-DeclRefExpr 0x5608c1188f60 <line:54:31> '__uint32_t':'unsigned int' lvalue ParmVar 0x5608c1188dc0 '__bsx' '__uint32_t':'unsigned int'
|         | | |   |   `-IntegerLiteral 0x5608c1188fa0 <line:45:12> 'unsigned int' 4278190080
|         | | |   `-IntegerLiteral 0x5608c1189018 <col:28> 'int' 24
|         | | `-ParenExpr 0x5608c1189170 <col:34, col:59> 'unsigned int'
|         | |   `-BinaryOperator 0x5608c1189150 <col:35, col:58> 'unsigned int' '>>'
|         | |     |-ParenExpr 0x5608c1189110 <col:35, col:53> 'unsigned int'
|         | |     | `-BinaryOperator 0x5608c11890f0 <col:36, col:42> 'unsigned int' '&'
|         | |     |   |-ImplicitCastExpr 0x5608c11890d8 <col:36, col:38> '__uint32_t':'unsigned int' <LValueToRValue>
|         | |     |   | `-ParenExpr 0x5608c1189098 <col:36, col:38> '__uint32_t':'unsigned int' lvalue
|         | |     |   |   `-DeclRefExpr 0x5608c1189078 <line:54:31> '__uint32_t':'unsigned int' lvalue ParmVar 0x5608c1188dc0 '__bsx' '__uint32_t':'unsigned int'
|         | |     |   `-IntegerLiteral 0x5608c11890b8 <line:45:42> 'unsigned int' 16711680
|         | |     `-IntegerLiteral 0x5608c1189130 <col:58> 'int' 8
|         | `-ParenExpr 0x5608c11892a8 <line:46:6, col:31> 'unsigned int'
|         |   `-BinaryOperator 0x5608c1189288 <col:7, col:30> 'unsigned int' '<<'
|         |     |-ParenExpr 0x5608c1189248 <col:7, col:25> 'unsigned int'
|         |     | `-BinaryOperator 0x5608c1189228 <col:8, col:14> 'unsigned int' '&'
|         |     |   |-ImplicitCastExpr 0x5608c1189210 <col:8, col:10> '__uint32_t':'unsigned int' <LValueToRValue>
|         |     |   | `-ParenExpr 0x5608c11891d0 <col:8, col:10> '__uint32_t':'unsigned int' lvalue
|         |     |   |   `-DeclRefExpr 0x5608c11891b0 <line:54:31> '__uint32_t':'unsigned int' lvalue ParmVar 0x5608c1188dc0 '__bsx' '__uint32_t':'unsigned int'
|         |     |   `-IntegerLiteral 0x5608c11891f0 <line:46:14> 'unsigned int' 65280
|         |     `-IntegerLiteral 0x5608c1189268 <col:30> 'int' 8
|         `-ParenExpr 0x5608c11893e0 <col:35, col:61> 'unsigned int'
|           `-BinaryOperator 0x5608c11893c0 <col:36, col:59> 'unsigned int' '<<'
|             |-ParenExpr 0x5608c1189380 <col:36, col:54> 'unsigned int'
|             | `-BinaryOperator 0x5608c1189360 <col:37, col:43> 'unsigned int' '&'
|             |   |-ImplicitCastExpr 0x5608c1189348 <col:37, col:39> '__uint32_t':'unsigned int' <LValueToRValue>
|             |   | `-ParenExpr 0x5608c1189308 <col:37, col:39> '__uint32_t':'unsigned int' lvalue
|             |   |   `-DeclRefExpr 0x5608c11892e8 <line:54:31> '__uint32_t':'unsigned int' lvalue ParmVar 0x5608c1188dc0 '__bsx' '__uint32_t':'unsigned int'
|             |   `-IntegerLiteral 0x5608c1189328 <line:46:43> 'unsigned int' 255
|             `-IntegerLiteral 0x5608c11893a0 <col:59> 'int' 24
|-FunctionDecl 0x5608c118e210 <line:69:15, line:77:1> line:70:1 __bswap_64 '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x5608c1189478 <col:13, col:24> col:24 used __bsx '__uint64_t':'unsigned long'
| `-CompoundStmt 0x5608c118ed60 <line:71:1, line:77:1>
|   `-ReturnStmt 0x5608c118ed50 <line:75:3, line:67:43>
|     `-ImplicitCastExpr 0x5608c118ed38 <line:60:3, line:67:43> '__uint64_t':'unsigned long' <IntegralCast>
|       `-ParenExpr 0x5608c118ed18 <line:60:3, line:67:43> 'unsigned long long'
|         `-BinaryOperator 0x5608c118ecf8 <line:60:4, line:67:42> 'unsigned long long' '|'
|           |-BinaryOperator 0x5608c118eba8 <line:60:4, line:66:42> 'unsigned long long' '|'
|           | |-BinaryOperator 0x5608c118ea58 <line:60:4, line:65:42> 'unsigned long long' '|'
|           | | |-BinaryOperator 0x5608c118e908 <line:60:4, line:64:41> 'unsigned long long' '|'
|           | | | |-BinaryOperator 0x5608c118e7b8 <line:60:4, line:63:41> 'unsigned long long' '|'
|           | | | | |-BinaryOperator 0x5608c118e668 <line:60:4, line:62:42> 'unsigned long long' '|'
|           | | | | | |-BinaryOperator 0x5608c118e518 <line:60:4, line:61:42> 'unsigned long long' '|'
|           | | | | | | |-ParenExpr 0x5608c118e3c8 <line:60:4, col:40> 'unsigned long long'
|           | | | | | | | `-BinaryOperator 0x5608c118e3a8 <col:5, col:38> 'unsigned long long' '>>'
|           | | | | | | |   |-ParenExpr 0x5608c118e368 <col:5, col:33> 'unsigned long long'
|           | | | | | | |   | `-BinaryOperator 0x5608c118e348 <col:6, col:12> 'unsigned long long' '&'
|           | | | | | | |   |   |-ImplicitCastExpr 0x5608c118e330 <col:6, col:8> 'unsigned long long' <IntegralCast>
|           | | | | | | |   |   | `-ImplicitCastExpr 0x5608c118e318 <col:6, col:8> '__uint64_t':'unsigned long' <LValueToRValue>
|           | | | | | | |   |   |   `-ParenExpr 0x5608c118e2d8 <col:6, col:8> '__uint64_t':'unsigned long' lvalue
|           | | | | | | |   |   |     `-DeclRefExpr 0x5608c118e2b8 <line:75:31> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c1189478 '__bsx' '__uint64_t':'unsigned long'
|           | | | | | | |   |   `-IntegerLiteral 0x5608c118e2f8 <line:60:12> 'unsigned long long' 18374686479671623680
|           | | | | | | |   `-IntegerLiteral 0x5608c118e388 <col:38> 'int' 56
|           | | | | | | `-ParenExpr 0x5608c118e4f8 <line:61:6, col:42> 'unsigned long long'
|           | | | | | |   `-BinaryOperator 0x5608c118e4d8 <col:7, col:40> 'unsigned long long' '>>'
|           | | | | | |     |-ParenExpr 0x5608c118e498 <col:7, col:35> 'unsigned long long'
|           | | | | | |     | `-BinaryOperator 0x5608c118e478 <col:8, col:14> 'unsigned long long' '&'
|           | | | | | |     |   |-ImplicitCastExpr 0x5608c118e460 <col:8, col:10> 'unsigned long long' <IntegralCast>
|           | | | | | |     |   | `-ImplicitCastExpr 0x5608c118e448 <col:8, col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|           | | | | | |     |   |   `-ParenExpr 0x5608c118e408 <col:8, col:10> '__uint64_t':'unsigned long' lvalue
|           | | | | | |     |   |     `-DeclRefExpr 0x5608c118e3e8 <line:75:31> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c1189478 '__bsx' '__uint64_t':'unsigned long'
|           | | | | | |     |   `-IntegerLiteral 0x5608c118e428 <line:61:14> 'unsigned long long' 71776119061217280
|           | | | | | |     `-IntegerLiteral 0x5608c118e4b8 <col:40> 'int' 40
|           | | | | | `-ParenExpr 0x5608c118e648 <line:62:6, col:42> 'unsigned long long'
|           | | | | |   `-BinaryOperator 0x5608c118e628 <col:7, col:40> 'unsigned long long' '>>'
|           | | | | |     |-ParenExpr 0x5608c118e5e8 <col:7, col:35> 'unsigned long long'
|           | | | | |     | `-BinaryOperator 0x5608c118e5c8 <col:8, col:14> 'unsigned long long' '&'
|           | | | | |     |   |-ImplicitCastExpr 0x5608c118e5b0 <col:8, col:10> 'unsigned long long' <IntegralCast>
|           | | | | |     |   | `-ImplicitCastExpr 0x5608c118e598 <col:8, col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|           | | | | |     |   |   `-ParenExpr 0x5608c118e558 <col:8, col:10> '__uint64_t':'unsigned long' lvalue
|           | | | | |     |   |     `-DeclRefExpr 0x5608c118e538 <line:75:31> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c1189478 '__bsx' '__uint64_t':'unsigned long'
|           | | | | |     |   `-IntegerLiteral 0x5608c118e578 <line:62:14> 'unsigned long long' 280375465082880
|           | | | | |     `-IntegerLiteral 0x5608c118e608 <col:40> 'int' 24
|           | | | | `-ParenExpr 0x5608c118e798 <line:63:6, col:41> 'unsigned long long'
|           | | | |   `-BinaryOperator 0x5608c118e778 <col:7, col:40> 'unsigned long long' '>>'
|           | | | |     |-ParenExpr 0x5608c118e738 <col:7, col:35> 'unsigned long long'
|           | | | |     | `-BinaryOperator 0x5608c118e718 <col:8, col:14> 'unsigned long long' '&'
|           | | | |     |   |-ImplicitCastExpr 0x5608c118e700 <col:8, col:10> 'unsigned long long' <IntegralCast>
|           | | | |     |   | `-ImplicitCastExpr 0x5608c118e6e8 <col:8, col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|           | | | |     |   |   `-ParenExpr 0x5608c118e6a8 <col:8, col:10> '__uint64_t':'unsigned long' lvalue
|           | | | |     |   |     `-DeclRefExpr 0x5608c118e688 <line:75:31> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c1189478 '__bsx' '__uint64_t':'unsigned long'
|           | | | |     |   `-IntegerLiteral 0x5608c118e6c8 <line:63:14> 'unsigned long long' 1095216660480
|           | | | |     `-IntegerLiteral 0x5608c118e758 <col:40> 'int' 8
|           | | | `-ParenExpr 0x5608c118e8e8 <line:64:6, col:41> 'unsigned long long'
|           | | |   `-BinaryOperator 0x5608c118e8c8 <col:7, col:40> 'unsigned long long' '<<'
|           | | |     |-ParenExpr 0x5608c118e888 <col:7, col:35> 'unsigned long long'
|           | | |     | `-BinaryOperator 0x5608c118e868 <col:8, col:14> 'unsigned long long' '&'
|           | | |     |   |-ImplicitCastExpr 0x5608c118e850 <col:8, col:10> 'unsigned long long' <IntegralCast>
|           | | |     |   | `-ImplicitCastExpr 0x5608c118e838 <col:8, col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|           | | |     |   |   `-ParenExpr 0x5608c118e7f8 <col:8, col:10> '__uint64_t':'unsigned long' lvalue
|           | | |     |   |     `-DeclRefExpr 0x5608c118e7d8 <line:75:31> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c1189478 '__bsx' '__uint64_t':'unsigned long'
|           | | |     |   `-IntegerLiteral 0x5608c118e818 <line:64:14> 'unsigned long long' 4278190080
|           | | |     `-IntegerLiteral 0x5608c118e8a8 <col:40> 'int' 8
|           | | `-ParenExpr 0x5608c118ea38 <line:65:6, col:42> 'unsigned long long'
|           | |   `-BinaryOperator 0x5608c118ea18 <col:7, col:40> 'unsigned long long' '<<'
|           | |     |-ParenExpr 0x5608c118e9d8 <col:7, col:35> 'unsigned long long'
|           | |     | `-BinaryOperator 0x5608c118e9b8 <col:8, col:14> 'unsigned long long' '&'
|           | |     |   |-ImplicitCastExpr 0x5608c118e9a0 <col:8, col:10> 'unsigned long long' <IntegralCast>
|           | |     |   | `-ImplicitCastExpr 0x5608c118e988 <col:8, col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|           | |     |   |   `-ParenExpr 0x5608c118e948 <col:8, col:10> '__uint64_t':'unsigned long' lvalue
|           | |     |   |     `-DeclRefExpr 0x5608c118e928 <line:75:31> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c1189478 '__bsx' '__uint64_t':'unsigned long'
|           | |     |   `-IntegerLiteral 0x5608c118e968 <line:65:14> 'unsigned long long' 16711680
|           | |     `-IntegerLiteral 0x5608c118e9f8 <col:40> 'int' 24
|           | `-ParenExpr 0x5608c118eb88 <line:66:6, col:42> 'unsigned long long'
|           |   `-BinaryOperator 0x5608c118eb68 <col:7, col:40> 'unsigned long long' '<<'
|           |     |-ParenExpr 0x5608c118eb28 <col:7, col:35> 'unsigned long long'
|           |     | `-BinaryOperator 0x5608c118eb08 <col:8, col:14> 'unsigned long long' '&'
|           |     |   |-ImplicitCastExpr 0x5608c118eaf0 <col:8, col:10> 'unsigned long long' <IntegralCast>
|           |     |   | `-ImplicitCastExpr 0x5608c118ead8 <col:8, col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|           |     |   |   `-ParenExpr 0x5608c118ea98 <col:8, col:10> '__uint64_t':'unsigned long' lvalue
|           |     |   |     `-DeclRefExpr 0x5608c118ea78 <line:75:31> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c1189478 '__bsx' '__uint64_t':'unsigned long'
|           |     |   `-IntegerLiteral 0x5608c118eab8 <line:66:14> 'unsigned long long' 65280
|           |     `-IntegerLiteral 0x5608c118eb48 <col:40> 'int' 40
|           `-ParenExpr 0x5608c118ecd8 <line:67:6, col:42> 'unsigned long long'
|             `-BinaryOperator 0x5608c118ecb8 <col:7, col:40> 'unsigned long long' '<<'
|               |-ParenExpr 0x5608c118ec78 <col:7, col:35> 'unsigned long long'
|               | `-BinaryOperator 0x5608c118ec58 <col:8, col:14> 'unsigned long long' '&'
|               |   |-ImplicitCastExpr 0x5608c118ec40 <col:8, col:10> 'unsigned long long' <IntegralCast>
|               |   | `-ImplicitCastExpr 0x5608c118ec28 <col:8, col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|               |   |   `-ParenExpr 0x5608c118ebe8 <col:8, col:10> '__uint64_t':'unsigned long' lvalue
|               |   |     `-DeclRefExpr 0x5608c118ebc8 <line:75:31> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c1189478 '__bsx' '__uint64_t':'unsigned long'
|               |   `-IntegerLiteral 0x5608c118ec08 <line:67:14> 'unsigned long long' 255
|               `-IntegerLiteral 0x5608c118ec98 <col:40> 'int' 56
|-FunctionDecl 0x5608c118ee18 </usr/include/bits/uintn-identity.h:32:1, line:36:1> line:33:1 __uint16_identity '__uint16_t (__uint16_t)' static inline
| |-ParmVarDecl 0x5608c118ed88 <col:20, col:31> col:31 used __x '__uint16_t':'unsigned short'
| `-CompoundStmt 0x5608c118ef08 <line:34:1, line:36:1>
|   `-ReturnStmt 0x5608c118eef8 <line:35:3, col:10>
|     `-ImplicitCastExpr 0x5608c118eee0 <col:10> '__uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5608c118eec0 <col:10> '__uint16_t':'unsigned short' lvalue ParmVar 0x5608c118ed88 '__x' '__uint16_t':'unsigned short'
|-FunctionDecl 0x5608c118efc0 <line:38:1, line:42:1> line:39:1 __uint32_identity '__uint32_t (__uint32_t)' static inline
| |-ParmVarDecl 0x5608c118ef30 <col:20, col:31> col:31 used __x '__uint32_t':'unsigned int'
| `-CompoundStmt 0x5608c118f0b0 <line:40:1, line:42:1>
|   `-ReturnStmt 0x5608c118f0a0 <line:41:3, col:10>
|     `-ImplicitCastExpr 0x5608c118f088 <col:10> '__uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5608c118f068 <col:10> '__uint32_t':'unsigned int' lvalue ParmVar 0x5608c118ef30 '__x' '__uint32_t':'unsigned int'
|-FunctionDecl 0x5608c118f168 <line:44:1, line:48:1> line:45:1 __uint64_identity '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x5608c118f0d8 <col:20, col:31> col:31 used __x '__uint64_t':'unsigned long'
| `-CompoundStmt 0x5608c118fff8 <line:46:1, line:48:1>
|   `-ReturnStmt 0x5608c118ffe8 <line:47:3, col:10>
|     `-ImplicitCastExpr 0x5608c118ffd0 <col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5608c118ffb0 <col:10> '__uint64_t':'unsigned long' lvalue ParmVar 0x5608c118f0d8 '__x' '__uint64_t':'unsigned long'
|-TypedefDecl 0x5608c1190040 </usr/include/sys/types.h:185:1, col:21> col:21 blksize_t '__blksize_t':'long'
| `-TypedefType 0x5608c1190010 '__blksize_t' sugar
|   |-Typedef 0x5608c1142c80 '__blksize_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c11900d0 <line:192:1, col:20> col:20 blkcnt_t '__blkcnt_t':'long'
| `-TypedefType 0x5608c11900a0 '__blkcnt_t' sugar
|   |-Typedef 0x5608c1142cf0 '__blkcnt_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1190160 <line:196:1, col:22> col:22 fsblkcnt_t '__fsblkcnt_t':'unsigned long'
| `-TypedefType 0x5608c1190130 '__fsblkcnt_t' sugar
|   |-Typedef 0x5608c1142dd0 '__fsblkcnt_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c11901f0 <line:200:1, col:22> col:22 fsfilcnt_t '__fsfilcnt_t':'unsigned long'
| `-TypedefType 0x5608c11901c0 '__fsfilcnt_t' sugar
|   |-Typedef 0x5608c1142eb0 '__fsfilcnt_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c1190280 <line:219:1, col:22> col:22 blkcnt64_t '__blkcnt64_t':'long'
| `-TypedefType 0x5608c1190250 '__blkcnt64_t' sugar
|   |-Typedef 0x5608c1142d60 '__blkcnt64_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c1190310 <line:220:1, col:24> col:24 fsblkcnt64_t '__fsblkcnt64_t':'unsigned long'
| `-TypedefType 0x5608c11902e0 '__fsblkcnt64_t' sugar
|   |-Typedef 0x5608c1142e40 '__fsblkcnt64_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c11903a0 <line:221:1, col:24> col:24 fsfilcnt64_t '__fsfilcnt64_t':'unsigned long'
| `-TypedefType 0x5608c1190370 '__fsfilcnt64_t' sugar
|   |-Typedef 0x5608c1142f20 '__fsfilcnt64_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-RecordDecl 0x5608c11903f8 </usr/include/bits/atomic_wide_counter.h:25:9, line:33:1> line:25:9 union definition
| |-FieldDecl 0x5608c11904b8 <line:27:17, col:40> col:40 __value64 'unsigned long long'
| |-RecordDecl 0x5608c1190508 <line:28:3, line:32:3> line:28:3 struct definition
| | |-FieldDecl 0x5608c11905c8 <line:30:5, col:18> col:18 __low 'unsigned int'
| | `-FieldDecl 0x5608c1190630 <line:31:5, col:18> col:18 __high 'unsigned int'
| `-FieldDecl 0x5608c11906d8 <line:28:3, line:32:5> col:5 __value32 'struct (unnamed struct at /usr/include/bits/atomic_wide_counter.h:28:3)':'struct __atomic_wide_counter::(unnamed at /usr/include/bits/atomic_wide_counter.h:28:3)'
|-TypedefDecl 0x5608c1190788 <line:25:1, line:33:3> col:3 referenced __atomic_wide_counter 'union __atomic_wide_counter':'__atomic_wide_counter'
| `-ElaboratedType 0x5608c1190730 'union __atomic_wide_counter' sugar
|   `-RecordType 0x5608c1190480 '__atomic_wide_counter'
|     `-Record 0x5608c11903f8 ''
|-RecordDecl 0x5608c11907f8 </usr/include/bits/thread-shared-types.h:51:9, line:55:1> line:51:16 struct __pthread_internal_list definition
| |-FieldDecl 0x5608c1190950 <line:53:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x5608c11909c8 <line:54:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x5608c1190a78 <line:51:1, line:55:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x5608c1190a20 'struct __pthread_internal_list' sugar
|   `-RecordType 0x5608c1190880 'struct __pthread_internal_list'
|     `-Record 0x5608c11907f8 '__pthread_internal_list'
|-RecordDecl 0x5608c1190ae8 <line:57:9, line:60:1> line:57:16 struct __pthread_internal_slist definition
| `-FieldDecl 0x5608c1190c40 <line:59:3, col:36> col:36 __next 'struct __pthread_internal_slist *'
|-TypedefDecl 0x5608c1190ce8 <line:57:1, line:60:3> col:3 __pthread_slist_t 'struct __pthread_internal_slist':'struct __pthread_internal_slist'
| `-ElaboratedType 0x5608c1190c90 'struct __pthread_internal_slist' sugar
|   `-RecordType 0x5608c1190b70 'struct __pthread_internal_slist'
|     `-Record 0x5608c1190ae8 '__pthread_internal_slist'
|-RecordDecl 0x5608c1190d58 </usr/include/bits/struct_mutex.h:22:1, line:53:1> line:22:8 struct __pthread_mutex_s definition
| |-FieldDecl 0x5608c1190e18 <line:24:3, col:7> col:7 __lock 'int'
| |-FieldDecl 0x5608c1190e80 <line:25:3, col:16> col:16 __count 'unsigned int'
| |-FieldDecl 0x5608c1190ee8 <line:26:3, col:7> col:7 __owner 'int'
| |-FieldDecl 0x5608c1190f50 <line:28:3, col:16> col:16 __nusers 'unsigned int'
| |-FieldDecl 0x5608c119a058 <line:32:3, col:7> col:7 __kind 'int'
| |-FieldDecl 0x5608c119a0c0 <line:34:3, col:9> col:9 __spins 'short'
| |-FieldDecl 0x5608c119a128 <line:35:3, col:9> col:9 __elision 'short'
| `-FieldDecl 0x5608c119a1b0 <line:36:3, col:20> col:20 __list '__pthread_list_t':'struct __pthread_internal_list'
|-RecordDecl 0x5608c119a200 </usr/include/bits/struct_rwlock.h:23:1, line:55:1> line:23:8 struct __pthread_rwlock_arch_t definition
| |-FieldDecl 0x5608c119a2b8 <line:25:3, col:16> col:16 __readers 'unsigned int'
| |-FieldDecl 0x5608c119a320 <line:26:3, col:16> col:16 __writers 'unsigned int'
| |-FieldDecl 0x5608c119a388 <line:27:3, col:16> col:16 __wrphase_futex 'unsigned int'
| |-FieldDecl 0x5608c119a3f0 <line:28:3, col:16> col:16 __writers_futex 'unsigned int'
| |-FieldDecl 0x5608c119a458 <line:29:3, col:16> col:16 __pad3 'unsigned int'
| |-FieldDecl 0x5608c119a4c0 <line:30:3, col:16> col:16 __pad4 'unsigned int'
| |-FieldDecl 0x5608c119a528 <line:32:3, col:7> col:7 __cur_writer 'int'
| |-FieldDecl 0x5608c119a590 <line:33:3, col:7> col:7 __shared 'int'
| |-FieldDecl 0x5608c119a5f8 <line:34:3, col:15> col:15 __rwelision 'signed char'
| |-FieldDecl 0x5608c119a6f0 <line:39:3, col:25> col:17 __pad1 'unsigned char [7]'
| |-FieldDecl 0x5608c119a758 <line:42:3, col:21> col:21 __pad2 'unsigned long'
| `-FieldDecl 0x5608c119a7c0 <line:45:3, col:16> col:16 __flags 'unsigned int'
|-RecordDecl 0x5608c119a810 </usr/include/bits/thread-shared-types.h:94:1, line:103:1> line:94:8 struct __pthread_cond_s definition
| |-FieldDecl 0x5608c119a8e0 <line:96:3, col:25> col:25 __wseq '__atomic_wide_counter':'__atomic_wide_counter'
| |-FieldDecl 0x5608c119a940 <line:97:3, col:25> col:25 __g1_start '__atomic_wide_counter':'__atomic_wide_counter'
| |-FieldDecl 0x5608c119aa30 <line:98:3, col:26> col:16 __g_refs 'unsigned int [2]'
| |-FieldDecl 0x5608c119aae8 <line:99:3, col:26> col:16 __g_size 'unsigned int [2]'
| |-FieldDecl 0x5608c119ab50 <line:100:3, col:16> col:16 __g1_orig_size 'unsigned int'
| |-FieldDecl 0x5608c119abb8 <line:101:3, col:16> col:16 __wrefs 'unsigned int'
| `-FieldDecl 0x5608c119ac70 <line:102:3, col:29> col:16 __g_signals 'unsigned int [2]'
|-TypedefDecl 0x5608c119ad98 <line:105:1, col:22> col:22 __tss_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c119ae08 <line:106:1, col:27> col:27 __thrd_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-RecordDecl 0x5608c119ae60 <line:108:9, line:111:1> line:108:9 struct definition
| `-FieldDecl 0x5608c119af18 <line:110:3, col:7> col:7 __data 'int'
|-TypedefDecl 0x5608c119afc8 <line:108:1, line:111:3> col:3 __once_flag 'struct __once_flag':'__once_flag'
| `-ElaboratedType 0x5608c119af70 'struct __once_flag' sugar
|   `-RecordType 0x5608c119aee0 '__once_flag'
|     `-Record 0x5608c119ae60 ''
|-TypedefDecl 0x5608c119c188 </usr/include/bits/pthreadtypes.h:27:1, col:27> col:27 pthread_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-RecordDecl 0x5608c119c1e0 <line:32:9, line:36:1> line:32:9 union definition
| |-FieldDecl 0x5608c119c318 <line:34:3, col:43> col:8 __size 'char [4]'
| `-FieldDecl 0x5608c119c380 <line:35:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x5608c119c428 <line:32:1, line:36:3> col:3 pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x5608c119c3d0 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x5608c119c260 'pthread_mutexattr_t'
|     `-Record 0x5608c119c1e0 ''
|-RecordDecl 0x5608c119c498 <line:41:9, line:45:1> line:41:9 union definition
| |-FieldDecl 0x5608c119c5a0 <line:43:3, col:42> col:8 __size 'char [4]'
| `-FieldDecl 0x5608c119c608 <line:44:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x5608c119c6b8 <line:41:1, line:45:3> col:3 pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x5608c119c660 'union pthread_condattr_t' sugar
|   `-RecordType 0x5608c119c520 'pthread_condattr_t'
|     `-Record 0x5608c119c498 ''
|-TypedefDecl 0x5608c119c740 <line:49:1, col:22> col:22 pthread_key_t 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c119c7b0 <line:53:1, col:30> col:30 pthread_once_t 'int'
| `-BuiltinType 0x5608c10a4880 'int'
|-RecordDecl 0x5608c119c808 <line:56:1, line:60:1> line:56:7 union pthread_attr_t definition
| |-FieldDecl 0x5608c119c948 <line:58:3, col:38> col:8 __size 'char [56]'
| `-FieldDecl 0x5608c119c9b0 <line:59:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5608c119ca50 <line:62:1, col:30> col:30 pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x5608c119ca00 'union pthread_attr_t' sugar
|   `-RecordType 0x5608c119c890 'union pthread_attr_t'
|     `-Record 0x5608c119c808 'pthread_attr_t'
|-RecordDecl 0x5608c119caa8 <line:67:9, line:72:1> line:67:9 union definition
| |-FieldDecl 0x5608c119cba0 <line:69:3, col:28> col:28 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x5608c119cc88 <line:70:3, col:39> col:8 __size 'char [40]'
| `-FieldDecl 0x5608c119ccf0 <line:71:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5608c119ce88 <line:67:1, line:72:3> col:3 pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x5608c119ce30 'union pthread_mutex_t' sugar
|   `-RecordType 0x5608c119cb30 'pthread_mutex_t'
|     `-Record 0x5608c119caa8 ''
|-RecordDecl 0x5608c119cef8 <line:75:9, line:80:1> line:75:9 union definition
| |-FieldDecl 0x5608c119cff0 <line:77:3, col:27> col:27 __data 'struct __pthread_cond_s':'struct __pthread_cond_s'
| |-FieldDecl 0x5608c119d0d8 <line:78:3, col:38> col:8 __size 'char [48]'
| `-FieldDecl 0x5608c11a1190 <line:79:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x5608c11a12c8 <line:75:1, line:80:3> col:3 pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x5608c11a1270 'union pthread_cond_t' sugar
|   `-RecordType 0x5608c119cf80 'pthread_cond_t'
|     `-Record 0x5608c119cef8 ''
|-RecordDecl 0x5608c11a1338 <line:86:9, line:91:1> line:86:9 union definition
| |-FieldDecl 0x5608c11a1430 <line:88:3, col:34> col:34 __data 'struct __pthread_rwlock_arch_t':'struct __pthread_rwlock_arch_t'
| |-FieldDecl 0x5608c11a14e0 <line:89:3, col:40> col:8 __size 'char [56]'
| `-FieldDecl 0x5608c11a1548 <line:90:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5608c11a16a8 <line:86:1, line:91:3> col:3 pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x5608c11a1650 'union pthread_rwlock_t' sugar
|   `-RecordType 0x5608c11a13c0 'pthread_rwlock_t'
|     `-Record 0x5608c11a1338 ''
|-RecordDecl 0x5608c11a1718 <line:93:9, line:97:1> line:93:9 union definition
| |-FieldDecl 0x5608c11a1858 <line:95:3, col:44> col:8 __size 'char [8]'
| `-FieldDecl 0x5608c11a18c0 <line:96:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5608c11a1968 <line:93:1, line:97:3> col:3 pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x5608c11a1910 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x5608c11a17a0 'pthread_rwlockattr_t'
|     `-Record 0x5608c11a1718 ''
|-TypedefDecl 0x5608c11a19f0 <line:103:1, col:22> col:22 pthread_spinlock_t 'volatile int'
| `-QualType 0x5608c10a4884 'volatile int' volatile
|   `-BuiltinType 0x5608c10a4880 'int'
|-RecordDecl 0x5608c11a1a48 <line:108:9, line:112:1> line:108:9 union definition
| |-FieldDecl 0x5608c11a1b88 <line:110:3, col:41> col:8 __size 'char [32]'
| `-FieldDecl 0x5608c11a1bf0 <line:111:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x5608c11a1c98 <line:108:1, line:112:3> col:3 pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x5608c11a1c40 'union pthread_barrier_t' sugar
|   `-RecordType 0x5608c11a1ad0 'pthread_barrier_t'
|     `-Record 0x5608c11a1a48 ''
|-RecordDecl 0x5608c11a1d08 <line:114:9, line:118:1> line:114:9 union definition
| |-FieldDecl 0x5608c11a1e10 <line:116:3, col:45> col:8 __size 'char [4]'
| `-FieldDecl 0x5608c11a1e78 <line:117:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x5608c11a1f28 <line:114:1, line:118:3> col:3 pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x5608c11a1ed0 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x5608c11a1d90 'pthread_barrierattr_t'
|     `-Record 0x5608c11a1d08 ''
|-FunctionDecl 0x5608c11a2060 </usr/include/stdlib.h:402:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:402:17 random 'long (void)' extern
| `-NoThrowAttr 0x5608c11a2100 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a3278 </usr/include/stdlib.h:405:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:405:13 srandom 'void (unsigned int)' extern
| |-ParmVarDecl 0x5608c11a31b0 <col:22, col:35> col:35 __seed 'unsigned int'
| `-NoThrowAttr 0x5608c11a3320 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a35d0 </usr/include/stdlib.h:411:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:411:14 initstate 'char *(unsigned int, char *, size_t)' extern
| |-ParmVarDecl 0x5608c11a3390 <col:25, col:38> col:38 __seed 'unsigned int'
| |-ParmVarDecl 0x5608c11a3410 <col:46, col:52> col:52 __statebuf 'char *'
| |-ParmVarDecl 0x5608c11a3488 <line:412:4, col:11> col:11 __statelen 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c11a3688 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a36e0 <line:384:57, /usr/include/stdlib.h:412:44> 2
|-FunctionDecl 0x5608c11a3820 <line:416:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:416:14 setstate 'char *(char *)' extern
| |-ParmVarDecl 0x5608c11a3730 <col:24, col:30> col:30 __statebuf 'char *'
| |-NoThrowAttr 0x5608c11a38c8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a3920 <line:384:57, /usr/include/stdlib.h:416:63> 1
|-RecordDecl 0x5608c11a3958 <line:424:1, line:433:3> line:424:8 struct random_data definition
| |-FieldDecl 0x5608c11a3a88 <line:426:5, col:14> col:14 fptr 'int32_t *'
| |-FieldDecl 0x5608c11a3ae8 <line:427:5, col:14> col:14 rptr 'int32_t *'
| |-FieldDecl 0x5608c11a3b48 <line:428:5, col:14> col:14 state 'int32_t *'
| |-FieldDecl 0x5608c11a3bb0 <line:429:5, col:9> col:9 rand_type 'int'
| |-FieldDecl 0x5608c11a3c18 <line:430:5, col:9> col:9 rand_deg 'int'
| |-FieldDecl 0x5608c11a3c80 <line:431:5, col:9> col:9 rand_sep 'int'
| `-FieldDecl 0x5608c11a3ce0 <line:432:5, col:14> col:14 end_ptr 'int32_t *'
|-FunctionDecl 0x5608c11a3fb0 <line:435:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:435:12 random_r 'int (struct random_data *restrict, int32_t *restrict)' extern
| |-ParmVarDecl 0x5608c11a3de0 <col:22, col:53> col:53 __buf 'struct random_data *restrict'
| |-ParmVarDecl 0x5608c11a3e58 <line:436:8, col:28> col:28 __result 'int32_t *restrict'
| |-NoThrowAttr 0x5608c11a4060 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a40b8 <line:384:57, /usr/include/stdlib.h:436:62> 1 2
|-FunctionDecl 0x5608c11a4300 <line:438:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:438:12 srandom_r 'int (unsigned int, struct random_data *)' extern
| |-ParmVarDecl 0x5608c11a4110 <col:23, col:36> col:36 __seed 'unsigned int'
| |-ParmVarDecl 0x5608c11a41c0 <col:44, col:64> col:64 __buf 'struct random_data *'
| |-NoThrowAttr 0x5608c11a43b0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a4408 <line:384:57, /usr/include/stdlib.h:439:27> 2
|-FunctionDecl 0x5608c11a4770 <line:441:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:441:12 initstate_r 'int (unsigned int, char *restrict, size_t, struct random_data *restrict)' extern
| |-ParmVarDecl 0x5608c11a4460 <col:25, col:38> col:38 __seed 'unsigned int'
| |-ParmVarDecl 0x5608c11a44e0 <col:46, col:63> col:63 __statebuf 'char *restrict'
| |-ParmVarDecl 0x5608c11a4558 <line:442:4, col:11> col:11 __statelen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11a45e8 <line:443:4, col:35> col:35 __buf 'struct random_data *restrict'
| |-NoThrowAttr 0x5608c11a4830 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a4888 <line:384:57, /usr/include/stdlib.h:444:30> 2 4
|-FunctionDecl 0x5608c11a4ad0 <line:446:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:446:12 setstate_r 'int (char *restrict, struct random_data *restrict)' extern
| |-ParmVarDecl 0x5608c11a48e0 <col:24, col:41> col:41 __statebuf 'char *restrict'
| |-ParmVarDecl 0x5608c11a4970 <line:447:10, col:41> col:41 __buf 'struct random_data *restrict'
| |-NoThrowAttr 0x5608c11a4b80 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a4bd8 <line:384:57, /usr/include/stdlib.h:448:30> 1 2
|-FunctionDecl 0x5608c11a4ce0 <line:454:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:454:12 rand 'int (void)' extern
| `-NoThrowAttr 0x5608c11a4d80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a4e80 </usr/include/stdlib.h:456:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:456:13 srand 'void (unsigned int)' extern
| |-ParmVarDecl 0x5608c11a4df0 <col:20, col:33> col:33 __seed 'unsigned int'
| `-NoThrowAttr 0x5608c11a4f28 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a5090 </usr/include/stdlib.h:460:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:460:12 rand_r 'int (unsigned int *)' extern
| |-ParmVarDecl 0x5608c11a4fc0 <col:20, col:34> col:34 __seed 'unsigned int *'
| `-NoThrowAttr 0x5608c11a5138 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a5290 </usr/include/stdlib.h:468:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:468:15 drand48 'double (void)' extern
| `-NoThrowAttr 0x5608c11a5330 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a55b0 </usr/include/stdlib.h:469:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:469:15 erand48 'double (unsigned short *)' extern
| |-ParmVarDecl 0x5608c11a5490 <col:24, col:52> col:43 __xsubi 'unsigned short *':'unsigned short *'
| |-NoThrowAttr 0x5608c11a5658 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a56b0 <line:384:57, /usr/include/stdlib.h:469:76> 1
|-FunctionDecl 0x5608c11a5788 <line:472:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:472:17 lrand48 'long (void)' extern
| `-NoThrowAttr 0x5608c11a5828 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a5a00 </usr/include/stdlib.h:473:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:473:17 nrand48 'long (unsigned short *)' extern
| |-ParmVarDecl 0x5608c11a58e8 <col:26, col:54> col:45 __xsubi 'unsigned short *':'unsigned short *'
| |-NoThrowAttr 0x5608c11a5aa8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a5b00 <line:384:57, /usr/include/stdlib.h:474:27> 1
|-FunctionDecl 0x5608c11a5bd8 <line:477:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:477:17 mrand48 'long (void)' extern
| `-NoThrowAttr 0x5608c11a5c78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a5df0 </usr/include/stdlib.h:478:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:478:17 jrand48 'long (unsigned short *)' extern
| |-ParmVarDecl 0x5608c11a5d38 <col:26, col:54> col:45 __xsubi 'unsigned short *':'unsigned short *'
| |-NoThrowAttr 0x5608c11a5e98 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11a5ef0 <line:384:57, /usr/include/stdlib.h:479:27> 1
|-FunctionDecl 0x5608c11a6008 <line:482:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:482:13 srand48 'void (long)' extern
| |-ParmVarDecl 0x5608c11a5f40 <col:22, col:31> col:31 __seedval 'long'
| `-NoThrowAttr 0x5608c11a60b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11694f0 </usr/include/stdlib.h:483:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:483:28 seed48 'unsigned short *(unsigned short *)' extern
| |-ParmVarDecl 0x5608c11693d0 <col:36, col:66> col:55 __seed16v 'unsigned short *':'unsigned short *'
| |-NoThrowAttr 0x5608c1169598 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11695f0 <line:384:57, /usr/include/stdlib.h:484:27> 1
|-FunctionDecl 0x5608c1169818 <line:485:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:485:13 lcong48 'void (unsigned short *)' extern
| |-ParmVarDecl 0x5608c1169700 <col:22, col:50> col:41 __param 'unsigned short *':'unsigned short *'
| |-NoThrowAttr 0x5608c11698c0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1169918 <line:384:57, /usr/include/stdlib.h:485:74> 1
|-RecordDecl 0x5608c1169958 <line:491:1, line:499:3> line:491:8 struct drand48_data definition
| |-FieldDecl 0x5608c1169a68 <line:493:5, col:29> col:24 __x 'unsigned short [3]'
| |-FieldDecl 0x5608c1169b20 <line:494:5, col:33> col:24 __old_x 'unsigned short [3]'
| |-FieldDecl 0x5608c1169b88 <line:495:5, col:24> col:24 __c 'unsigned short'
| |-FieldDecl 0x5608c1169bf0 <line:496:5, col:24> col:24 __init 'unsigned short'
| `-FieldDecl 0x5608c1169c58 <line:497:19, col:42> col:42 __a 'unsigned long long'
|-FunctionDecl 0x5608c1169f70 <line:502:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:502:12 drand48_r 'int (struct drand48_data *restrict, double *restrict)' extern
| |-ParmVarDecl 0x5608c1169d60 <col:23, col:55> col:55 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x5608c1169e10 <line:503:9, col:28> col:28 __result 'double *restrict'
| |-NoThrowAttr 0x5608c116a020 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116a078 <line:384:57, /usr/include/stdlib.h:503:62> 1 2
|-FunctionDecl 0x5608c116a3e0 <line:504:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:504:12 erand48_r 'int (unsigned short *, struct drand48_data *restrict, double *restrict)' extern
| |-ParmVarDecl 0x5608c116a120 <col:23, col:51> col:42 __xsubi 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x5608c116a1b0 <line:505:9, col:41> col:41 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x5608c116a230 <line:506:9, col:28> col:28 __result 'double *restrict'
| |-NoThrowAttr 0x5608c116a498 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116a4f0 <line:384:57, /usr/include/stdlib.h:506:62> 1 2
|-FunctionDecl 0x5608c116a760 <line:509:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:509:12 lrand48_r 'int (struct drand48_data *restrict, long *restrict)' extern
| |-ParmVarDecl 0x5608c116a550 <col:23, col:55> col:55 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x5608c116a600 <line:510:9, col:30> col:30 __result 'long *restrict'
| |-NoThrowAttr 0x5608c116a810 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116a868 <line:384:57, /usr/include/stdlib.h:511:30> 1 2
|-FunctionDecl 0x5608c116ab90 <line:512:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:512:12 nrand48_r 'int (unsigned short *, struct drand48_data *restrict, long *restrict)' extern
| |-ParmVarDecl 0x5608c116a910 <col:23, col:51> col:42 __xsubi 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x5608c116a9a0 <line:513:9, col:41> col:41 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x5608c116aa20 <line:514:9, col:30> col:30 __result 'long *restrict'
| |-NoThrowAttr 0x5608c116ac48 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116aca0 <line:384:57, /usr/include/stdlib.h:515:30> 1 2
|-FunctionDecl 0x5608c116ae60 <line:518:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:518:12 mrand48_r 'int (struct drand48_data *restrict, long *restrict)' extern
| |-ParmVarDecl 0x5608c116ad00 <col:23, col:55> col:55 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x5608c116ad80 <line:519:9, col:30> col:30 __result 'long *restrict'
| |-NoThrowAttr 0x5608c116af10 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116af68 <line:384:57, /usr/include/stdlib.h:520:30> 1 2
|-FunctionDecl 0x5608c116b208 <line:521:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:521:12 jrand48_r 'int (unsigned short *, struct drand48_data *restrict, long *restrict)' extern
| |-ParmVarDecl 0x5608c116b010 <col:23, col:51> col:42 __xsubi 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x5608c116b0a0 <line:522:9, col:41> col:41 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x5608c116b120 <line:523:9, col:30> col:30 __result 'long *restrict'
| |-NoThrowAttr 0x5608c116b2c0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116b318 <line:384:57, /usr/include/stdlib.h:524:30> 1 2
|-FunctionDecl 0x5608c116b550 <line:527:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:527:12 srand48_r 'int (long, struct drand48_data *)' extern
| |-ParmVarDecl 0x5608c116b370 <col:23, col:32> col:32 __seedval 'long'
| |-ParmVarDecl 0x5608c116b418 <col:43, col:64> col:64 __buffer 'struct drand48_data *'
| |-NoThrowAttr 0x5608c116b600 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116b658 <line:384:57, /usr/include/stdlib.h:528:27> 2
|-FunctionDecl 0x5608c116b8f0 <line:530:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:530:12 seed48_r 'int (unsigned short *, struct drand48_data *)' extern
| |-ParmVarDecl 0x5608c116b700 <col:22, col:52> col:41 __seed16v 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x5608c116b790 <line:531:8, col:29> col:29 __buffer 'struct drand48_data *'
| |-NoThrowAttr 0x5608c116b9a0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116b9f8 <line:384:57, /usr/include/stdlib.h:531:63> 1 2
|-FunctionDecl 0x5608c116bc50 <line:533:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:533:12 lcong48_r 'int (unsigned short *, struct drand48_data *)' extern
| |-ParmVarDecl 0x5608c116baa0 <col:23, col:51> col:42 __param 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x5608c116bb30 <line:534:9, col:30> col:30 __buffer 'struct drand48_data *'
| |-NoThrowAttr 0x5608c116bd00 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c116bd58 <line:384:57, /usr/include/stdlib.h:535:30> 1 2
|-FunctionDecl 0x5608c116bea0 <line:540:14> col:14 implicit malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x5608c116bf98 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c116bf40 <<invalid sloc>> Implicit 768
|-FunctionDecl 0x5608c116c008 prev 0x5608c116bea0 <col:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdlib.h:540:14 malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x5608c116bda8 <col:22, col:29> col:29 __size 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c116c130 <<invalid sloc>> Inherited Implicit 768
| |-NoThrowAttr 0x5608c116c0b0 </usr/include/sys/cdefs.h:79:35>
| `-RestrictAttr 0x5608c116c108 <line:281:47> malloc
|-FunctionDecl 0x5608c116c300 </usr/include/stdlib.h:543:14> col:14 implicit calloc 'void *(unsigned long, unsigned long)' extern
| |-ParmVarDecl 0x5608c116c430 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x5608c116c498 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c116c3a0 <<invalid sloc>> Implicit 765
|-FunctionDecl 0x5608c116c510 prev 0x5608c116c300 <col:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdlib.h:543:14 calloc 'void *(unsigned long, unsigned long)' extern
| |-ParmVarDecl 0x5608c116c168 <col:22, col:29> col:29 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c116c1e0 <col:38, col:45> col:45 __size 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c116c640 <<invalid sloc>> Inherited Implicit 765
| |-NoThrowAttr 0x5608c116c5c0 </usr/include/sys/cdefs.h:79:35>
| `-RestrictAttr 0x5608c116c618 <line:281:47> malloc
|-FunctionDecl 0x5608c116c810 </usr/include/stdlib.h:551:14> col:14 implicit realloc 'void *(void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c116c908 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x5608c116c970 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c116c8b0 <<invalid sloc>> Implicit 769
|-FunctionDecl 0x5608c116c9e8 prev 0x5608c116c810 <col:1, /usr/include/sys/cdefs.h:407:43> /usr/include/stdlib.h:551:14 realloc 'void *(void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c116c680 <col:23, col:29> col:29 __ptr 'void *'
| |-ParmVarDecl 0x5608c116c6f8 <col:36, col:43> col:43 __size 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c116cb20 <<invalid sloc>> Inherited Implicit 769
| |-NoThrowAttr 0x5608c116ca98 </usr/include/sys/cdefs.h:79:35>
| `-WarnUnusedResultAttr 0x5608c116caf0 <line:407:20> warn_unused_result ""
|-FunctionDecl 0x5608c116cc28 </usr/include/stdlib.h:555:13> col:13 implicit used free 'void (void *)' extern
| |-ParmVarDecl 0x5608c116cd20 <<invalid sloc>> <invalid sloc> 'void *'
| `-BuiltinAttr 0x5608c116ccc8 <<invalid sloc>> Implicit 770
|-FunctionDecl 0x5608c116cd90 prev 0x5608c116cc28 <col:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:555:13 used free 'void (void *)' extern
| |-ParmVarDecl 0x5608c116cb60 <col:19, col:25> col:25 __ptr 'void *'
| |-BuiltinAttr 0x5608c116ce90 <<invalid sloc>> Inherited Implicit 770
| `-NoThrowAttr 0x5608c116ce38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c116d0f0 </usr/include/stdlib.h:563:1, /usr/include/sys/cdefs.h:407:43> /usr/include/stdlib.h:563:14 reallocarray 'void *(void *, size_t, size_t)' extern
| |-ParmVarDecl 0x5608c116ced0 <col:28, col:34> col:34 __ptr 'void *'
| |-ParmVarDecl 0x5608c116cf48 <col:41, col:48> col:48 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c116cfc0 <col:57, col:64> col:64 __size 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c116d1a8 </usr/include/sys/cdefs.h:79:35>
| `-WarnUnusedResultAttr 0x5608c116d200 <line:407:20> warn_unused_result ""
|-FunctionDecl 0x5608c11b21d0 prev 0x5608c116d0f0 </usr/include/stdlib.h:569:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:569:14 reallocarray 'void *(void *, size_t, size_t)' extern
| |-ParmVarDecl 0x5608c116d248 <col:28, col:34> col:34 __ptr 'void *'
| |-ParmVarDecl 0x5608c116d2c0 <col:41, col:48> col:48 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c116d338 <col:57, col:64> col:64 __size 'size_t':'unsigned long'
| |-WarnUnusedResultAttr 0x5608c11b22e0 </usr/include/sys/cdefs.h:407:20> Inherited warn_unused_result ""
| `-NoThrowAttr 0x5608c11b2288 <line:79:35>
|-FunctionDecl 0x5608c11b23b8 </usr/include/alloca.h:32:14> col:14 implicit alloca 'void *(unsigned long)' extern
| |-ParmVarDecl 0x5608c11b24b0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c11b2458 <<invalid sloc>> Implicit 841
|-FunctionDecl 0x5608c11b2520 prev 0x5608c11b23b8 <col:1, /usr/include/sys/cdefs.h:79:54> /usr/include/alloca.h:32:14 alloca 'void *(unsigned long)' extern
| |-ParmVarDecl 0x5608c11b2320 <col:22, col:29> col:29 __size 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c11b2620 <<invalid sloc>> Inherited Implicit 841
| `-NoThrowAttr 0x5608c11b25c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b26f0 </usr/include/stdlib.h:580:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdlib.h:580:14 valloc 'void *(size_t)' extern
| |-ParmVarDecl 0x5608c11b2658 <col:22, col:29> col:29 __size 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c11b2798 </usr/include/sys/cdefs.h:79:35>
| `-RestrictAttr 0x5608c11b27f0 <line:281:47> malloc
|-FunctionDecl 0x5608c11b2aa0 </usr/include/stdlib.h:586:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:586:12 posix_memalign 'int (void **, size_t, size_t)' extern
| |-ParmVarDecl 0x5608c11b2860 <col:28, col:35> col:35 __memptr 'void **'
| |-ParmVarDecl 0x5608c11b28d8 <col:45, col:52> col:52 __alignment 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11b2950 <col:65, col:72> col:72 __size 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c11b2b58 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b2bb0 <line:384:57, /usr/include/stdlib.h:587:27> 1
|-FunctionDecl 0x5608c11b2d30 <line:592:14> col:14 implicit aligned_alloc 'void *(unsigned long, unsigned long)' extern
| |-ParmVarDecl 0x5608c11b2e28 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x5608c11b2e90 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c11b2dd0 <<invalid sloc>> Implicit 778
|-FunctionDecl 0x5608c11b2f08 prev 0x5608c11b2d30 <col:1, /usr/include/sys/cdefs.h:299:41> /usr/include/stdlib.h:592:14 aligned_alloc 'void *(unsigned long, unsigned long)' extern
| |-ParmVarDecl 0x5608c11b2bf8 <col:29, col:36> col:36 __alignment 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11b2c70 <col:49, col:56> col:56 __size 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c11b3060 <<invalid sloc>> Inherited Implicit 778
| |-NoThrowAttr 0x5608c11b2fb8 </usr/include/sys/cdefs.h:79:35>
| |-RestrictAttr 0x5608c11b3010 <line:281:47> malloc
| `-AllocAlignAttr 0x5608c11b3038 <line:299:19, /usr/include/stdlib.h:593:64> 1
|-FunctionDecl 0x5608c11b41f0 <line:598:13> col:13 implicit abort 'void (void) __attribute__((noreturn))' extern
| `-BuiltinAttr 0x5608c11b4290 <<invalid sloc>> Implicit 764
|-FunctionDecl 0x5608c11b42e8 prev 0x5608c11b41f0 <col:1, col:63> col:13 abort 'void (void) __attribute__((noreturn))' extern
| |-BuiltinAttr 0x5608c11b43e0 <<invalid sloc>> Inherited Implicit 764
| `-NoThrowAttr 0x5608c11b4388 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b4650 </usr/include/stdlib.h:602:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:602:12 atexit 'int (void (*)(void))' extern
| |-ParmVarDecl 0x5608c11b4538 <col:20, col:40> col:27 __func 'void (*)(void)'
| |-NoThrowAttr 0x5608c11b46f8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b4750 <line:384:57, /usr/include/stdlib.h:602:64> 1
|-FunctionDecl 0x5608c11b48e8 <line:610:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:610:12 at_quick_exit 'int (void (*)(void))' extern
| |-ParmVarDecl 0x5608c11b4830 <col:27, col:47> col:34 __func 'void (*)(void)'
| |-NoThrowAttr 0x5608c11b4990 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b49e8 <line:384:57, /usr/include/stdlib.h:610:71> 1
|-FunctionDecl 0x5608c11b4df0 <line:617:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:617:12 on_exit 'int (void (*)(int, void *), void *)' extern
| |-ParmVarDecl 0x5608c11b4c38 <col:21, col:62> col:28 __func 'void (*)(int, void *)'
| |-ParmVarDecl 0x5608c11b4cb8 <col:65, col:71> col:71 __arg 'void *'
| |-NoThrowAttr 0x5608c11b4ea0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b4ef8 <line:384:57, /usr/include/stdlib.h:618:27> 1
|-FunctionDecl 0x5608c11b5048 <line:624:13> col:13 implicit exit 'void (int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5608c11b5140 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c11b50e8 <<invalid sloc>> Implicit 766
|-FunctionDecl 0x5608c11b5200 prev 0x5608c11b5048 <col:1, col:70> col:13 exit 'void (int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5608c11b4f50 <col:19, col:23> col:23 __status 'int'
| |-BuiltinAttr 0x5608c11b5300 <<invalid sloc>> Inherited Implicit 766
| `-NoThrowAttr 0x5608c11b52a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b53d0 </usr/include/stdlib.h:630:1, col:76> col:13 quick_exit 'void (int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5608c11b5340 <col:25, col:29> col:29 __status 'int'
| `-NoThrowAttr 0x5608c11b5478 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b5578 </usr/include/stdlib.h:636:13> col:13 implicit _Exit 'void (int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5608c11b5670 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c11b5618 <<invalid sloc>> Implicit 767
|-FunctionDecl 0x5608c11b56e0 prev 0x5608c11b5578 <col:1, col:71> col:13 _Exit 'void (int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5608c11b54e8 <col:20, col:24> col:24 __status 'int'
| |-BuiltinAttr 0x5608c11b57e0 <<invalid sloc>> Inherited Implicit 767
| `-NoThrowAttr 0x5608c11b5788 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b5910 </usr/include/stdlib.h:641:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:641:14 getenv 'char *(const char *)' extern
| |-ParmVarDecl 0x5608c11b5820 <col:22, col:34> col:34 __name 'const char *'
| |-NoThrowAttr 0x5608c11b59b8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b5a10 <line:384:57, /usr/include/stdlib.h:641:63> 1
|-FunctionDecl 0x5608c11b5b18 <line:646:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:646:14 secure_getenv 'char *(const char *)' extern
| |-ParmVarDecl 0x5608c11b5a60 <col:29, col:41> col:41 __name 'const char *'
| |-NoThrowAttr 0x5608c11b5bc0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b5c18 <line:384:57, /usr/include/stdlib.h:647:27> 1
|-FunctionDecl 0x5608c11b5d60 <line:654:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:654:12 putenv 'int (char *)' extern
| |-ParmVarDecl 0x5608c11b5c70 <col:20, col:26> col:26 __string 'char *'
| |-NoThrowAttr 0x5608c11b5e08 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b5e60 <line:384:57, /usr/include/stdlib.h:654:57> 1
|-FunctionDecl 0x5608c11b60c0 <line:660:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:660:12 setenv 'int (const char *, const char *, int)' extern
| |-ParmVarDecl 0x5608c11b5eb0 <col:20, col:32> col:32 __name 'const char *'
| |-ParmVarDecl 0x5608c11b5f30 <col:40, col:52> col:52 __value 'const char *'
| |-ParmVarDecl 0x5608c11b5fb0 <col:61, col:65> col:65 __replace 'int'
| |-NoThrowAttr 0x5608c11b6178 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b61d0 <line:384:57, /usr/include/stdlib.h:661:27> 2
|-FunctionDecl 0x5608c11b8358 <line:664:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:664:12 unsetenv 'int (const char *)' extern
| |-ParmVarDecl 0x5608c11b82a0 <col:22, col:34> col:34 __name 'const char *'
| |-NoThrowAttr 0x5608c11b8400 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b8458 <line:384:57, /usr/include/stdlib.h:664:63> 1
|-FunctionDecl 0x5608c11b8538 <line:671:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:671:12 clearenv 'int (void)' extern
| `-NoThrowAttr 0x5608c11b85d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b8700 </usr/include/stdlib.h:682:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:682:14 mktemp 'char *(char *)' extern
| |-ParmVarDecl 0x5608c11b8648 <col:22, col:28> col:28 __template 'char *'
| |-NoThrowAttr 0x5608c11b87a8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b8800 <line:384:57, /usr/include/stdlib.h:682:61> 1
|-FunctionDecl 0x5608c11b8908 <line:695:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:695:12 mkstemp 'int (char *)' extern
| |-ParmVarDecl 0x5608c11b8850 <col:21, col:27> col:27 __template 'char *'
| `-NonNullAttr 0x5608c11b89b0 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:695:52> 1
|-FunctionDecl 0x5608c11b8ae8 <line:705:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:705:12 mkstemp64 'int (char *)' extern
| |-ParmVarDecl 0x5608c11b8a30 <col:23, col:29> col:29 __template 'char *'
| `-NonNullAttr 0x5608c11b8b90 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:705:54> 1
|-FunctionDecl 0x5608c11b8d90 <line:717:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:717:12 mkstemps 'int (char *, int)' extern
| |-ParmVarDecl 0x5608c11b8c10 <col:22, col:28> col:28 __template 'char *'
| |-ParmVarDecl 0x5608c11b8c90 <col:40, col:44> col:44 __suffixlen 'int'
| `-NonNullAttr 0x5608c11b8e40 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:717:70> 1
|-FunctionDecl 0x5608c11b9000 <line:727:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:727:12 mkstemps64 'int (char *, int)' extern
| |-ParmVarDecl 0x5608c11b8ec0 <col:24, col:30> col:30 __template 'char *'
| |-ParmVarDecl 0x5608c11b8f40 <col:42, col:46> col:46 __suffixlen 'int'
| `-NonNullAttr 0x5608c11b90b0 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:728:19> 1
|-FunctionDecl 0x5608c11b9290 <line:738:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:738:14 mkdtemp 'char *(char *)' extern
| |-ParmVarDecl 0x5608c11b9130 <col:23, col:29> col:29 __template 'char *'
| |-NoThrowAttr 0x5608c11b9338 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11b9390 <line:384:57, /usr/include/stdlib.h:738:62> 1
|-FunctionDecl 0x5608c11b9520 <line:749:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:749:12 mkostemp 'int (char *, int)' extern
| |-ParmVarDecl 0x5608c11b93e0 <col:22, col:28> col:28 __template 'char *'
| |-ParmVarDecl 0x5608c11b9460 <col:40, col:44> col:44 __flags 'int'
| `-NonNullAttr 0x5608c11b95d0 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:749:66> 1
|-FunctionDecl 0x5608c11b9790 <line:759:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:759:12 mkostemp64 'int (char *, int)' extern
| |-ParmVarDecl 0x5608c11b9650 <col:24, col:30> col:30 __template 'char *'
| |-ParmVarDecl 0x5608c11b96d0 <col:42, col:46> col:46 __flags 'int'
| `-NonNullAttr 0x5608c11b9840 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:759:68> 1
|-FunctionDecl 0x5608c11b9ad0 <line:769:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:769:12 mkostemps 'int (char *, int, int)' extern
| |-ParmVarDecl 0x5608c11b98c0 <col:23, col:29> col:29 __template 'char *'
| |-ParmVarDecl 0x5608c11b9940 <col:41, col:45> col:45 __suffixlen 'int'
| |-ParmVarDecl 0x5608c11b99c0 <col:58, col:62> col:62 __flags 'int'
| `-NonNullAttr 0x5608c11b9b88 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:770:19> 1
|-FunctionDecl 0x5608c11b9dd8 <line:781:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:781:12 mkostemps64 'int (char *, int, int)' extern
| |-ParmVarDecl 0x5608c11b9c10 <col:25, col:31> col:31 __template 'char *'
| |-ParmVarDecl 0x5608c11b9c90 <col:43, col:47> col:47 __suffixlen 'int'
| |-ParmVarDecl 0x5608c11b9d10 <col:60, col:64> col:64 __flags 'int'
| `-NonNullAttr 0x5608c11b9e90 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:782:19> 1
|-FunctionDecl 0x5608c11b9fa8 <line:791:1, col:41> col:12 system 'int (const char *)' extern
| `-ParmVarDecl 0x5608c11b9f10 <col:20, col:32> col:32 __command 'const char *'
|-FunctionDecl 0x5608c11ba120 <line:797:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdlib.h:797:14 canonicalize_file_name 'char *(const char *)' extern
| |-ParmVarDecl 0x5608c11ba068 <col:38, col:50> col:50 __name 'const char *'
| |-NoThrowAttr 0x5608c11ba1c8 </usr/include/sys/cdefs.h:79:35>
| |-NonNullAttr 0x5608c11ba220 <line:384:57, /usr/include/stdlib.h:798:27> 1
| `-RestrictAttr 0x5608c11ba258 </usr/include/sys/cdefs.h:281:47> malloc
|-FunctionDecl 0x5608c11ba450 </usr/include/stdlib.h:808:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:808:14 realpath 'char *(const char *restrict, char *restrict)' extern
| |-ParmVarDecl 0x5608c11ba2b8 <col:24, col:47> col:47 __name 'const char *restrict'
| |-ParmVarDecl 0x5608c11ba338 <line:809:10, col:27> col:27 __resolved 'char *restrict'
| `-NoThrowAttr 0x5608c11ba500 </usr/include/sys/cdefs.h:79:35>
|-TypedefDecl 0x5608c11ba7a0 </usr/include/stdlib.h:816:1, col:57> col:15 referenced __compar_fn_t 'int (*)(const void *, const void *)'
| `-PointerType 0x5608c11ba730 'int (*)(const void *, const void *)'
|   `-ParenType 0x5608c11ba6d0 'int (const void *, const void *)' sugar
|     `-FunctionProtoType 0x5608c11ba690 'int (const void *, const void *)' cdecl
|       |-BuiltinType 0x5608c10a4880 'int'
|       |-PointerType 0x5608c11ba560 'const void *'
|       | `-QualType 0x5608c10a47e1 'const void' const
|       |   `-BuiltinType 0x5608c10a47e0 'void'
|       `-PointerType 0x5608c11ba560 'const void *'
|         `-QualType 0x5608c10a47e1 'const void' const
|           `-BuiltinType 0x5608c10a47e0 'void'
|-TypedefDecl 0x5608c11ba830 <line:819:1, col:23> col:23 comparison_fn_t '__compar_fn_t':'int (*)(const void *, const void *)'
| `-TypedefType 0x5608c11ba800 '__compar_fn_t' sugar
|   |-Typedef 0x5608c11ba7a0 '__compar_fn_t'
|   `-PointerType 0x5608c11ba730 'int (*)(const void *, const void *)'
|     `-ParenType 0x5608c11ba6d0 'int (const void *, const void *)' sugar
|       `-FunctionProtoType 0x5608c11ba690 'int (const void *, const void *)' cdecl
|         |-BuiltinType 0x5608c10a4880 'int'
|         |-PointerType 0x5608c11ba560 'const void *'
|         | `-QualType 0x5608c10a47e1 'const void' const
|         |   `-BuiltinType 0x5608c10a47e0 'void'
|         `-PointerType 0x5608c11ba560 'const void *'
|           `-QualType 0x5608c10a47e1 'const void' const
|             `-BuiltinType 0x5608c10a47e0 'void'
|-TypedefDecl 0x5608c11bab28 <line:823:1, col:67> col:15 referenced __compar_d_fn_t 'int (*)(const void *, const void *, void *)'
| `-PointerType 0x5608c11baab0 'int (*)(const void *, const void *, void *)'
|   `-ParenType 0x5608c11baa50 'int (const void *, const void *, void *)' sugar
|     `-FunctionProtoType 0x5608c11baa10 'int (const void *, const void *, void *)' cdecl
|       |-BuiltinType 0x5608c10a4880 'int'
|       |-PointerType 0x5608c11ba560 'const void *'
|       | `-QualType 0x5608c10a47e1 'const void' const
|       |   `-BuiltinType 0x5608c10a47e0 'void'
|       |-PointerType 0x5608c11ba560 'const void *'
|       | `-QualType 0x5608c10a47e1 'const void' const
|       |   `-BuiltinType 0x5608c10a47e0 'void'
|       `-PointerType 0x5608c10a4fa0 'void *'
|         `-BuiltinType 0x5608c10a47e0 'void'
|-FunctionDecl 0x5608c11baf40 <line:828:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:828:14 bsearch 'void *(const void *, const void *, size_t, size_t, __compar_fn_t)' extern
| |-ParmVarDecl 0x5608c11bab98 <col:23, col:35> col:35 __key 'const void *'
| |-ParmVarDecl 0x5608c11bac18 <col:42, col:54> col:54 __base 'const void *'
| |-ParmVarDecl 0x5608c11bac90 <line:829:9, col:16> col:16 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11bad08 <col:25, col:32> col:32 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11bad80 <col:40, col:54> col:54 __compar '__compar_fn_t':'int (*)(const void *, const void *)'
| `-NonNullAttr 0x5608c11bb008 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:830:25> 1 2 5
|-FunctionDecl 0x5608c11bb9c8 prev 0x5608c11baf40 </usr/include/sys/cdefs.h:451:27, /usr/include/bits/stdlib-bsearch.h:52:1> line:20:1 bsearch 'void *(const void *, const void *, size_t, size_t, __compar_fn_t)' extern inline
| |-ParmVarDecl 0x5608c11bb098 <col:10, col:22> col:22 used __key 'const void *'
| |-ParmVarDecl 0x5608c11bb118 <col:29, col:41> col:41 used __base 'const void *'
| |-ParmVarDecl 0x5608c11bb190 <col:49, col:56> col:56 used __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11bb208 <col:65, col:72> col:72 used __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11bb910 <line:21:3, col:17> col:17 used __compar '__compar_fn_t':'int (*)(const void *, const void *)'
| |-CompoundStmt 0x5608c11bc870 <line:22:1, line:52:1>
| | |-DeclStmt 0x5608c11bbcb8 <line:23:3, col:25>
| | | |-VarDecl 0x5608c11bbb40 <col:3, col:10> col:10 used __l 'size_t':'unsigned long'
| | | |-VarDecl 0x5608c11bbbb8 <col:3, col:15> col:15 used __u 'size_t':'unsigned long'
| | | `-VarDecl 0x5608c11bbc30 <col:3, col:20> col:20 used __idx 'size_t':'unsigned long'
| | |-DeclStmt 0x5608c11bbd50 <line:24:3, col:18>
| | | `-VarDecl 0x5608c11bbce8 <col:3, col:15> col:15 used __p 'const void *'
| | |-DeclStmt 0x5608c11bbde8 <line:25:3, col:19>
| | | `-VarDecl 0x5608c11bbd80 <col:3, col:7> col:7 used __comparison 'int'
| | |-BinaryOperator 0x5608c11bbe58 <line:27:3, col:9> 'size_t':'unsigned long' '='
| | | |-DeclRefExpr 0x5608c11bbe00 <col:3> 'size_t':'unsigned long' lvalue Var 0x5608c11bbb40 '__l' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5608c11bbe40 <col:9> 'size_t':'unsigned long' <IntegralCast>
| | |   `-IntegerLiteral 0x5608c11bbe20 <col:9> 'int' 0
| | |-BinaryOperator 0x5608c11bbed0 <line:28:3, col:9> 'size_t':'unsigned long' '='
| | | |-DeclRefExpr 0x5608c11bbe78 <col:3> 'size_t':'unsigned long' lvalue Var 0x5608c11bbbb8 '__u' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5608c11bbeb8 <col:9> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5608c11bbe98 <col:9> 'size_t':'unsigned long' lvalue ParmVar 0x5608c11bb190 '__nmemb' 'size_t':'unsigned long'
| | |-WhileStmt 0x5608c11bc7c0 <line:29:3, line:49:5>
| | | |-BinaryOperator 0x5608c11bbf60 <line:29:10, col:16> 'int' '<'
| | | | |-ImplicitCastExpr 0x5608c11bbf30 <col:10> 'size_t':'unsigned long' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5608c11bbef0 <col:10> 'size_t':'unsigned long' lvalue Var 0x5608c11bbb40 '__l' 'size_t':'unsigned long'
| | | | `-ImplicitCastExpr 0x5608c11bbf48 <col:16> 'size_t':'unsigned long' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5608c11bbf10 <col:16> 'size_t':'unsigned long' lvalue Var 0x5608c11bbbb8 '__u' 'size_t':'unsigned long'
| | | `-CompoundStmt 0x5608c11bc790 <line:30:5, line:49:5>
| | |   |-BinaryOperator 0x5608c11bc0a8 <line:31:7, col:29> 'size_t':'unsigned long' '='
| | |   | |-DeclRefExpr 0x5608c11bbf80 <col:7> 'size_t':'unsigned long' lvalue Var 0x5608c11bbc30 '__idx' 'size_t':'unsigned long'
| | |   | `-BinaryOperator 0x5608c11bc088 <col:15, col:29> 'unsigned long' '/'
| | |   |   |-ParenExpr 0x5608c11bc030 <col:15, col:25> 'unsigned long'
| | |   |   | `-BinaryOperator 0x5608c11bc010 <col:16, col:22> 'unsigned long' '+'
| | |   |   |   |-ImplicitCastExpr 0x5608c11bbfe0 <col:16> 'size_t':'unsigned long' <LValueToRValue>
| | |   |   |   | `-DeclRefExpr 0x5608c11bbfa0 <col:16> 'size_t':'unsigned long' lvalue Var 0x5608c11bbb40 '__l' 'size_t':'unsigned long'
| | |   |   |   `-ImplicitCastExpr 0x5608c11bbff8 <col:22> 'size_t':'unsigned long' <LValueToRValue>
| | |   |   |     `-DeclRefExpr 0x5608c11bbfc0 <col:22> 'size_t':'unsigned long' lvalue Var 0x5608c11bbbb8 '__u' 'size_t':'unsigned long'
| | |   |   `-ImplicitCastExpr 0x5608c11bc070 <col:29> 'unsigned long' <IntegralCast>
| | |   |     `-IntegerLiteral 0x5608c11bc050 <col:29> 'int' 2
| | |   |-BinaryOperator 0x5608c11bc2d0 <line:32:7, col:71> 'const void *' '='
| | |   | |-DeclRefExpr 0x5608c11bc0c8 <col:7> 'const void *' lvalue Var 0x5608c11bbce8 '__p' 'const void *'
| | |   | `-CStyleCastExpr 0x5608c11bc2a8 <col:13, col:71> 'const void *' <BitCast>
| | |   |   `-ParenExpr 0x5608c11bc288 <col:28, col:71> 'const char *'
| | |   |     `-BinaryOperator 0x5608c11bc230 <col:29, col:70> 'const char *' '+'
| | |   |       |-ParenExpr 0x5608c11bc160 <col:29, col:51> 'const char *'
| | |   |       | `-CStyleCastExpr 0x5608c11bc138 <col:30, col:45> 'const char *' <BitCast>
| | |   |       |   `-ImplicitCastExpr 0x5608c11bc120 <col:45> 'const void *' <LValueToRValue> part_of_explicit_cast
| | |   |       |     `-DeclRefExpr 0x5608c11bc0e8 <col:45> 'const void *' lvalue ParmVar 0x5608c11bb118 '__base' 'const void *'
| | |   |       `-ParenExpr 0x5608c11bc210 <col:55, col:70> 'unsigned long'
| | |   |         `-BinaryOperator 0x5608c11bc1f0 <col:56, col:64> 'unsigned long' '*'
| | |   |           |-ImplicitCastExpr 0x5608c11bc1c0 <col:56> 'size_t':'unsigned long' <LValueToRValue>
| | |   |           | `-DeclRefExpr 0x5608c11bc180 <col:56> 'size_t':'unsigned long' lvalue Var 0x5608c11bbc30 '__idx' 'size_t':'unsigned long'
| | |   |           `-ImplicitCastExpr 0x5608c11bc1d8 <col:64> 'size_t':'unsigned long' <LValueToRValue>
| | |   |             `-DeclRefExpr 0x5608c11bc1a0 <col:64> 'size_t':'unsigned long' lvalue ParmVar 0x5608c11bb208 '__size' 'size_t':'unsigned long'
| | |   |-BinaryOperator 0x5608c11bc438 <line:33:7, col:45> 'int' '='
| | |   | |-DeclRefExpr 0x5608c11bc2f0 <col:7> 'int' lvalue Var 0x5608c11bbd80 '__comparison' 'int'
| | |   | `-CallExpr 0x5608c11bc3d8 <col:22, col:45> 'int'
| | |   |   |-ImplicitCastExpr 0x5608c11bc3c0 <col:22, col:32> 'int (*)(const void *, const void *)' <FunctionToPointerDecay>
| | |   |   | `-ParenExpr 0x5608c11bc360 <col:22, col:32> 'int (const void *, const void *)':'int (const void *, const void *)'
| | |   |   |   `-UnaryOperator 0x5608c11bc348 <col:23, col:24> 'int (const void *, const void *)':'int (const void *, const void *)' prefix '*' cannot overflow
| | |   |   |     `-ImplicitCastExpr 0x5608c11bc330 <col:24> '__compar_fn_t':'int (*)(const void *, const void *)' <LValueToRValue>
| | |   |   |       `-DeclRefExpr 0x5608c11bc310 <col:24> '__compar_fn_t':'int (*)(const void *, const void *)' lvalue ParmVar 0x5608c11bb910 '__compar' '__compar_fn_t':'int (*)(const void *, const void *)'
| | |   |   |-ImplicitCastExpr 0x5608c11bc408 <col:35> 'const void *' <LValueToRValue>
| | |   |   | `-DeclRefExpr 0x5608c11bc380 <col:35> 'const void *' lvalue ParmVar 0x5608c11bb098 '__key' 'const void *'
| | |   |   `-ImplicitCastExpr 0x5608c11bc420 <col:42> 'const void *' <LValueToRValue>
| | |   |     `-DeclRefExpr 0x5608c11bc3a0 <col:42> 'const void *' lvalue Var 0x5608c11bbce8 '__p' 'const void *'
| | |   `-IfStmt 0x5608c11bc760 <line:34:7, line:48:2> has_else
| | |     |-BinaryOperator 0x5608c11bc4b0 <line:34:11, col:26> 'int' '<'
| | |     | |-ImplicitCastExpr 0x5608c11bc498 <col:11> 'int' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5608c11bc458 <col:11> 'int' lvalue Var 0x5608c11bbd80 '__comparison' 'int'
| | |     | `-IntegerLiteral 0x5608c11bc478 <col:26> 'int' 0
| | |     |-BinaryOperator 0x5608c11bc528 <line:35:2, col:8> 'size_t':'unsigned long' '='
| | |     | |-DeclRefExpr 0x5608c11bc4d0 <col:2> 'size_t':'unsigned long' lvalue Var 0x5608c11bbbb8 '__u' 'size_t':'unsigned long'
| | |     | `-ImplicitCastExpr 0x5608c11bc510 <col:8> 'size_t':'unsigned long' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x5608c11bc4f0 <col:8> 'size_t':'unsigned long' lvalue Var 0x5608c11bbc30 '__idx' 'size_t':'unsigned long'
| | |     `-IfStmt 0x5608c11bc730 <line:36:12, line:48:2> has_else
| | |       |-BinaryOperator 0x5608c11bc5a0 <line:36:16, col:31> 'int' '>'
| | |       | |-ImplicitCastExpr 0x5608c11bc588 <col:16> 'int' <LValueToRValue>
| | |       | | `-DeclRefExpr 0x5608c11bc548 <col:16> 'int' lvalue Var 0x5608c11bbd80 '__comparison' 'int'
| | |       | `-IntegerLiteral 0x5608c11bc568 <col:31> 'int' 0
| | |       |-BinaryOperator 0x5608c11bc670 <line:37:2, col:16> 'size_t':'unsigned long' '='
| | |       | |-DeclRefExpr 0x5608c11bc5c0 <col:2> 'size_t':'unsigned long' lvalue Var 0x5608c11bbb40 '__l' 'size_t':'unsigned long'
| | |       | `-BinaryOperator 0x5608c11bc650 <col:8, col:16> 'unsigned long' '+'
| | |       |   |-ImplicitCastExpr 0x5608c11bc620 <col:8> 'size_t':'unsigned long' <LValueToRValue>
| | |       |   | `-DeclRefExpr 0x5608c11bc5e0 <col:8> 'size_t':'unsigned long' lvalue Var 0x5608c11bbc30 '__idx' 'size_t':'unsigned long'
| | |       |   `-ImplicitCastExpr 0x5608c11bc638 <col:16> 'unsigned long' <IntegralCast>
| | |       |     `-IntegerLiteral 0x5608c11bc600 <col:16> 'int' 1
| | |       `-CompoundStmt 0x5608c11bc718 <line:39:2, line:48:2>
| | |         `-ReturnStmt 0x5608c11bc708 <line:44:4, col:20>
| | |           `-CStyleCastExpr 0x5608c11bc6e0 <col:11, col:20> 'void *' <NoOp>
| | |             `-ImplicitCastExpr 0x5608c11bc6c8 <col:20> 'const void *' <LValueToRValue> part_of_explicit_cast
| | |               `-DeclRefExpr 0x5608c11bc690 <col:20> 'const void *' lvalue Var 0x5608c11bbce8 '__p' 'const void *'
| | `-ReturnStmt 0x5608c11bc860 <line:51:3, /usr/lib/clang/13.0.1/include/stddef.h:89:25>
| |   `-ParenExpr 0x5608c11bc840 <col:16, col:25> 'void *'
| |     `-CStyleCastExpr 0x5608c11bc818 <col:17, col:24> 'void *' <NullToPointer>
| |       `-IntegerLiteral 0x5608c11bc7e0 <col:24> 'int' 0
| |-NonNullAttr 0x5608c11bbae8 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:830:25> Inherited 1 2 5
| `-GNUInlineAttr 0x5608c11bba90 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c11bd118 </usr/include/stdlib.h:838:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:838:13 qsort 'void (void *, size_t, size_t, __compar_fn_t)' extern
| |-ParmVarDecl 0x5608c11bce30 <col:20, col:26> col:26 __base 'void *'
| |-ParmVarDecl 0x5608c11bcea8 <col:34, col:41> col:41 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11bcf20 <col:50, col:57> col:57 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11bcf98 <line:839:6, col:20> col:20 __compar '__compar_fn_t':'int (*)(const void *, const void *)'
| `-NonNullAttr 0x5608c11bd1d8 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:839:46> 1 4
|-FunctionDecl 0x5608c11bd608 <line:841:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:841:13 qsort_r 'void (void *, size_t, size_t, __compar_d_fn_t, void *)' extern
| |-ParmVarDecl 0x5608c11bd260 <col:22, col:28> col:28 __base 'void *'
| |-ParmVarDecl 0x5608c11bd2d8 <col:36, col:43> col:43 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11bd350 <col:52, col:59> col:59 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c11bd3f0 <line:842:8, col:24> col:24 __compar '__compar_d_fn_t':'int (*)(const void *, const void *, void *)'
| |-ParmVarDecl 0x5608c11bd470 <col:34, col:40> col:40 __arg 'void *'
| `-NonNullAttr 0x5608c11bd6d0 </usr/include/sys/cdefs.h:384:57, /usr/include/stdlib.h:843:19> 1 4
|-FunctionDecl 0x5608c11bd820 <line:848:12> col:12 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x5608c11bd918 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11bd8c0 <<invalid sloc>> Implicit 894
| |-NoThrowAttr 0x5608c11bd988 <col:12> Implicit
| `-ConstAttr 0x5608c11bd9b0 <col:12> Implicit
|-FunctionDecl 0x5608c11bd9d8 prev 0x5608c11bd820 <col:1, col:60> col:12 abs 'int (int)' extern
| |-ParmVarDecl 0x5608c11bd750 <col:17, col:21> col:21 __x 'int'
| |-BuiltinAttr 0x5608c11bdb00 <<invalid sloc>> Inherited Implicit 894
| |-NoThrowAttr 0x5608c11bda80 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11bdad8 </usr/include/stdlib.h:848:50>
|-FunctionDecl 0x5608c11bdc10 <line:849:17> col:17 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x5608c11bdd08 <<invalid sloc>> <invalid sloc> 'long'
| |-BuiltinAttr 0x5608c11bdcb0 <<invalid sloc>> Implicit 895
| |-NoThrowAttr 0x5608c11bdd78 <col:17> Implicit
| `-ConstAttr 0x5608c11bdda0 <col:17> Implicit
|-FunctionDecl 0x5608c11be0c0 prev 0x5608c11bdc10 <col:1, col:71> col:17 labs 'long (long)' extern
| |-ParmVarDecl 0x5608c11bdb40 <col:23, col:32> col:32 __x 'long'
| |-BuiltinAttr 0x5608c11be1e8 <<invalid sloc>> Inherited Implicit 895
| |-NoThrowAttr 0x5608c11be168 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11be1c0 </usr/include/stdlib.h:849:61>
|-FunctionDecl 0x5608c11be2f0 <line:852:36> col:36 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x5608c11be3e8 <<invalid sloc>> <invalid sloc> 'long long'
| |-BuiltinAttr 0x5608c11be390 <<invalid sloc>> Implicit 896
| |-NoThrowAttr 0x5608c11be458 <col:36> Implicit
| `-ConstAttr 0x5608c11be480 <col:36> Implicit
|-FunctionDecl 0x5608c11be4a8 prev 0x5608c11be2f0 <col:15, line:853:40> line:852:36 llabs 'long long (long long)' extern
| |-ParmVarDecl 0x5608c11be228 <col:43, col:57> col:57 __x 'long long'
| |-BuiltinAttr 0x5608c11be5d0 <<invalid sloc>> Inherited Implicit 896
| |-NoThrowAttr 0x5608c11be550 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11be5a8 </usr/include/stdlib.h:853:30>
|-FunctionDecl 0x5608c11be7c8 <line:860:1, line:861:40> line:860:14 div 'div_t (int, int)' extern
| |-ParmVarDecl 0x5608c11be638 <col:19, col:23> col:23 __numer 'int'
| |-ParmVarDecl 0x5608c11be6b8 <col:32, col:36> col:36 __denom 'int'
| |-NoThrowAttr 0x5608c11be878 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11be8d0 </usr/include/stdlib.h:861:30>
|-FunctionDecl 0x5608c11beac8 <line:862:1, line:863:40> line:862:15 ldiv 'ldiv_t (long, long)' extern
| |-ParmVarDecl 0x5608c11be938 <col:21, col:30> col:30 __numer 'long'
| |-ParmVarDecl 0x5608c11be9b8 <col:39, col:48> col:48 __denom 'long'
| |-NoThrowAttr 0x5608c11beb78 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11bebd0 </usr/include/stdlib.h:863:30>
|-FunctionDecl 0x5608c11bedc8 <line:866:15, line:868:40> line:866:30 lldiv 'lldiv_t (long long, long long)' extern
| |-ParmVarDecl 0x5608c11bec38 <col:37, col:51> col:51 __numer 'long long'
| |-ParmVarDecl 0x5608c11becb8 <line:867:9, col:23> col:23 __denom 'long long'
| |-NoThrowAttr 0x5608c11bee78 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11beed0 </usr/include/stdlib.h:868:30>
|-FunctionDecl 0x5608c11bf260 <line:880:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:880:14 ecvt 'char *(double, int, int *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5608c11bef10 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x5608c11bef90 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x5608c11bf010 <col:50, col:66> col:66 __decpt 'int *restrict'
| |-ParmVarDecl 0x5608c11bf0d0 <line:881:6, col:22> col:22 __sign 'int *restrict'
| |-NoThrowAttr 0x5608c11bf320 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11bf378 <line:384:57, /usr/include/stdlib.h:881:54> 3 4
|-FunctionDecl 0x5608c11bf640 <line:886:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:886:14 fcvt 'char *(double, int, int *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5608c11bf3d0 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x5608c11bf450 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x5608c11bf4d0 <col:50, col:66> col:66 __decpt 'int *restrict'
| |-ParmVarDecl 0x5608c11bf550 <line:887:6, col:22> col:22 __sign 'int *restrict'
| |-NoThrowAttr 0x5608c11bf700 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11bf758 <line:384:57, /usr/include/stdlib.h:887:54> 3 4
|-FunctionDecl 0x5608c11bf9c0 <line:892:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:892:14 gcvt 'char *(double, int, char *)' extern
| |-ParmVarDecl 0x5608c11bf7b0 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x5608c11bf830 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x5608c11bf8b0 <col:50, col:56> col:56 __buf 'char *'
| |-NoThrowAttr 0x5608c11bfa78 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11bfad0 <line:384:57, /usr/include/stdlib.h:893:27> 3
|-FunctionDecl 0x5608c11bfe30 <line:898:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:898:14 qecvt 'char *(long double, int, int *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5608c11bfb20 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x5608c11bfba0 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x5608c11bfc20 <line:899:7, col:23> col:23 __decpt 'int *restrict'
| |-ParmVarDecl 0x5608c11bfca0 <col:32, col:48> col:48 __sign 'int *restrict'
| |-NoThrowAttr 0x5608c11bfef0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11bff48 <line:384:57, /usr/include/stdlib.h:900:30> 3 4
|-FunctionDecl 0x5608c11c0250 <line:901:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:901:14 qfcvt 'char *(long double, int, int *restrict, int *restrict)' extern
| |-ParmVarDecl 0x5608c11bffa0 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x5608c11c0020 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x5608c11c00e0 <line:902:7, col:23> col:23 __decpt 'int *restrict'
| |-ParmVarDecl 0x5608c11c0160 <col:32, col:48> col:48 __sign 'int *restrict'
| |-NoThrowAttr 0x5608c11c0310 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c0368 <line:384:57, /usr/include/stdlib.h:903:30> 3 4
|-FunctionDecl 0x5608c11c05d0 <line:904:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:904:14 qgcvt 'char *(long double, int, char *)' extern
| |-ParmVarDecl 0x5608c11c03c0 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x5608c11c0440 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x5608c11c04c0 <col:56, col:62> col:62 __buf 'char *'
| |-NoThrowAttr 0x5608c11c0688 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c06e0 <line:384:57, /usr/include/stdlib.h:905:27> 3
|-FunctionDecl 0x5608c11c0b80 <line:910:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:910:12 ecvt_r 'int (double, int, int *restrict, int *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c11c0730 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x5608c11c07b0 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x5608c11c0830 <col:50, col:66> col:66 __decpt 'int *restrict'
| |-ParmVarDecl 0x5608c11c08b0 <line:911:6, col:22> col:22 __sign 'int *restrict'
| |-ParmVarDecl 0x5608c11c0930 <col:30, col:47> col:47 __buf 'char *restrict'
| |-ParmVarDecl 0x5608c11c09a8 <line:912:6, col:13> col:13 __len 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c11c0c50 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c0ca8 <line:384:57, /usr/include/stdlib.h:912:47> 3 4 5
|-FunctionDecl 0x5608c11c10f0 <line:913:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:913:12 fcvt_r 'int (double, int, int *restrict, int *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c11c0d08 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x5608c11c0d88 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x5608c11c0e08 <col:50, col:66> col:66 __decpt 'int *restrict'
| |-ParmVarDecl 0x5608c11c0e88 <line:914:6, col:22> col:22 __sign 'int *restrict'
| |-ParmVarDecl 0x5608c11c0f08 <col:30, col:47> col:47 __buf 'char *restrict'
| |-ParmVarDecl 0x5608c11c0f80 <line:915:6, col:13> col:13 __len 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c11c11c0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c1218 <line:384:57, /usr/include/stdlib.h:915:47> 3 4 5
|-FunctionDecl 0x5608c11c16d0 <line:917:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:917:12 qecvt_r 'int (long double, int, int *restrict, int *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c11c1278 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x5608c11c12f8 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x5608c11c1378 <line:918:7, col:23> col:23 __decpt 'int *restrict'
| |-ParmVarDecl 0x5608c11c13f8 <col:32, col:48> col:48 __sign 'int *restrict'
| |-ParmVarDecl 0x5608c11c1478 <line:919:7, col:24> col:24 __buf 'char *restrict'
| |-ParmVarDecl 0x5608c11c14f0 <col:31, col:38> col:38 __len 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c11c17a0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c17f8 <line:384:57, /usr/include/stdlib.h:920:33> 3 4 5
|-FunctionDecl 0x5608c11c1bf0 <line:921:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:921:12 qfcvt_r 'int (long double, int, int *restrict, int *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c11c1858 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x5608c11c18d8 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x5608c11c1958 <line:922:7, col:23> col:23 __decpt 'int *restrict'
| |-ParmVarDecl 0x5608c11c19d8 <col:32, col:48> col:48 __sign 'int *restrict'
| |-ParmVarDecl 0x5608c11c1a58 <line:923:7, col:24> col:24 __buf 'char *restrict'
| |-ParmVarDecl 0x5608c11c1ad0 <col:31, col:38> col:38 __len 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c11c1cc0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c1d18 <line:384:57, /usr/include/stdlib.h:924:33> 3 4 5
|-FunctionDecl 0x5608c11c1f10 <line:930:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:930:12 mblen 'int (const char *, size_t)' extern
| |-ParmVarDecl 0x5608c11c1d78 <col:19, col:31> col:31 __s 'const char *'
| |-ParmVarDecl 0x5608c11c1df0 <col:36, col:43> col:43 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x5608c11c1fc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c22c0 </usr/include/stdlib.h:933:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:933:12 mbtowc 'int (wchar_t *restrict, const char *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c11c2078 <col:20, col:40> col:40 __pwc 'wchar_t *restrict'
| |-ParmVarDecl 0x5608c11c2118 <line:934:6, col:29> col:29 __s 'const char *restrict'
| |-ParmVarDecl 0x5608c11c2190 <col:34, col:41> col:41 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x5608c11c2378 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c2540 </usr/include/stdlib.h:937:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:937:12 wctomb 'int (char *, wchar_t)' extern
| |-ParmVarDecl 0x5608c11c23e8 <col:20, col:26> col:26 __s 'char *'
| |-ParmVarDecl 0x5608c11c2460 <col:31, col:39> col:39 __wchar 'wchar_t':'int'
| `-NoThrowAttr 0x5608c11c25f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c2878 </usr/include/stdlib.h:941:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:941:15 mbstowcs 'size_t (wchar_t *restrict, const char *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c11c2658 <col:25, col:46> col:46 __pwcs 'wchar_t *restrict'
| |-ParmVarDecl 0x5608c11c26d8 <line:942:4, col:27> col:27 __s 'const char *restrict'
| |-ParmVarDecl 0x5608c11c2750 <col:32, col:39> col:39 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x5608c11c2930 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c2be8 </usr/include/stdlib.h:945:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:945:15 wcstombs 'size_t (char *restrict, const wchar_t *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c11c29a0 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x5608c11c2a48 <line:946:4, col:30> col:30 __pwcs 'const wchar_t *restrict'
| |-ParmVarDecl 0x5608c11c2ac0 <col:38, col:45> col:45 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x5608c11c2ca0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c2dc8 </usr/include/stdlib.h:956:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:956:12 rpmatch 'int (const char *)' extern
| |-ParmVarDecl 0x5608c11c2d10 <col:21, col:33> col:33 __response 'const char *'
| |-NoThrowAttr 0x5608c11c2e70 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c2ec8 <line:384:57, /usr/include/stdlib.h:956:66> 1
|-FunctionDecl 0x5608c11c31f0 <line:967:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:967:12 getsubopt 'int (char **restrict, char *const *restrict, char **restrict)' extern
| |-ParmVarDecl 0x5608c11c2f20 <col:23, col:41> col:41 __optionp 'char **restrict'
| |-ParmVarDecl 0x5608c11c2fd0 <line:968:9, col:33> col:33 __tokens 'char *const *restrict'
| |-ParmVarDecl 0x5608c11c3050 <line:969:9, col:27> col:27 __valuep 'char **restrict'
| |-NoThrowAttr 0x5608c11c32a8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c3300 <line:384:57, /usr/include/stdlib.h:970:33> 1 2 3
|-FunctionDecl 0x5608c11c33f0 <line:978:1, col:37> col:12 posix_openpt 'int (int)' extern
| `-ParmVarDecl 0x5608c11c3358 <col:26, col:30> col:30 __oflag 'int'
|-FunctionDecl 0x5608c11c3548 <line:986:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:986:12 grantpt 'int (int)' extern
| |-ParmVarDecl 0x5608c11c34b0 <col:21, col:25> col:25 __fd 'int'
| `-NoThrowAttr 0x5608c11c35f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c36f8 </usr/include/stdlib.h:990:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:990:12 unlockpt 'int (int)' extern
| |-ParmVarDecl 0x5608c11c3660 <col:22, col:26> col:26 __fd 'int'
| `-NoThrowAttr 0x5608c11c37a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c38e0 </usr/include/stdlib.h:995:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdlib.h:995:14 ptsname 'char *(int)' extern
| |-ParmVarDecl 0x5608c11c3810 <col:23, col:27> col:27 __fd 'int'
| `-NoThrowAttr 0x5608c11c3988 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c3c40 </usr/include/stdlib.h:1002:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:1002:12 ptsname_r 'int (int, char *, size_t)' extern
| |-ParmVarDecl 0x5608c11c39f8 <col:23, col:27> col:27 __fd 'int'
| |-ParmVarDecl 0x5608c11c3a78 <col:33, col:39> col:39 __buf 'char *'
| |-ParmVarDecl 0x5608c11c3af0 <col:46, col:53> col:53 __buflen 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c11c3cf8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c3d50 <line:384:57, /usr/include/stdlib.h:1003:27> 2
|-FunctionDecl 0x5608c11c3e28 <line:1006:1, col:23> col:12 getpt 'int (void)' extern
|-FunctionDecl 0x5608c11c5130 <line:1013:1, /usr/include/sys/cdefs.h:384:76> /usr/include/stdlib.h:1013:12 getloadavg 'int (double *, int)' extern
| |-ParmVarDecl 0x5608c11c3f50 <col:24, col:41> col:31 __loadavg 'double *':'double *'
| |-ParmVarDecl 0x5608c11c3fd0 <col:44, col:48> col:48 __nelem 'int'
| |-NoThrowAttr 0x5608c11c51e0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11c5238 <line:384:57, /usr/include/stdlib.h:1014:27> 1
|-FunctionDecl 0x5608c11c5328 prev 0x5608c1170d20 </usr/include/sys/cdefs.h:451:27, /usr/include/bits/stdlib-float.h:28:1> line:25:8 atof 'double (const char *)' extern inline
| |-ParmVarDecl 0x5608c11c5290 <col:14, col:26> col:26 used __nptr 'const char *'
| |-CompoundStmt 0x5608c11c5688 <line:26:1, line:28:1>
| | `-ReturnStmt 0x5608c11c5678 <line:27:3, col:40>
| |   `-CallExpr 0x5608c11c5630 <col:10, col:40> 'double'
| |     |-ImplicitCastExpr 0x5608c11c5618 <col:10> 'double (*)(const char *, char **)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5608c11c54b8 <col:10> 'double (const char *, char **)' Function 0x5608c1172a28 'strtod' 'double (const char *, char **)'
| |     |-ImplicitCastExpr 0x5608c11c5660 <col:18> 'const char *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5608c11c54d8 <col:18> 'const char *' lvalue ParmVar 0x5608c11c5290 '__nptr' 'const char *'
| |     `-CStyleCastExpr 0x5608c11c55b0 <col:26, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'char **' <BitCast>
| |       `-ParenExpr 0x5608c11c5590 <col:16, col:25> 'void *'
| |         `-CStyleCastExpr 0x5608c11c5530 <col:17, col:24> 'void *' <NullToPointer>
| |           `-IntegerLiteral 0x5608c11c54f8 <col:24> 'int' 0
| |-PureAttr 0x5608c11c5450 </usr/include/sys/cdefs.h:308:45> Inherited
| |-NonNullAttr 0x5608c11c5478 <line:384:57, /usr/include/stdlib.h:103:46> Inherited 1
| |-NoThrowAttr 0x5608c11c53d0 </usr/include/sys/cdefs.h:81:38>
| `-GNUInlineAttr 0x5608c11c5428 <line:451:59>
|-TypedefDecl 0x5608c11c56b8 </usr/lib/clang/13.0.1/include/stddef.h:35:1, col:26> col:26 ptrdiff_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-RecordDecl 0x5608c11c5710 </usr/lib/clang/13.0.1/include/__stddef_max_align_t.h:19:9, line:24:1> line:19:9 struct definition
| |-FieldDecl 0x5608c11c5800 <line:20:3, col:13> col:13 __clang_max_align_nonce1 'long long'
| | `-AlignedAttr 0x5608c11c5870 <line:21:22, col:56> aligned
| |   `-ConstantExpr 0x5608c11c5850 <col:34, col:55> 'unsigned long'
| |     |-value: Int 8
| |     `-UnaryExprOrTypeTraitExpr 0x5608c11c57c8 <col:34, col:55> 'unsigned long' __alignof 'long long'
| `-FieldDecl 0x5608c11c5920 <line:22:3, col:15> col:15 __clang_max_align_nonce2 'long double'
|   `-AlignedAttr 0x5608c11c5990 <line:23:22, col:58> aligned
|     `-ConstantExpr 0x5608c11c5970 <col:34, col:57> 'unsigned long'
|       |-value: Int 16
|       `-UnaryExprOrTypeTraitExpr 0x5608c11c58e8 <col:34, col:57> 'unsigned long' __alignof 'long double'
|-TypedefDecl 0x5608c11c5a48 <line:19:1, line:24:3> col:3 max_align_t 'struct max_align_t':'max_align_t'
| `-ElaboratedType 0x5608c11c59f0 'struct max_align_t' sugar
|   `-RecordType 0x5608c11c5790 'max_align_t'
|     `-Record 0x5608c11c5710 ''
|-FunctionDecl 0x5608c11c5d98 </usr/include/assert.h:67:1, line:69:43> line:67:13 used __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5608c11c5ad0 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x5608c11c5b50 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x5608c11c5bd0 <line:68:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x5608c11c5c50 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x5608c11c5e58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11c9ec8 </usr/include/assert.h:72:1, line:74:43> line:72:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5608c11c5ec8 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x5608c11c5f48 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x5608c11c5fc8 <line:73:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x5608c11c6048 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x5608c11c9f88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ca218 </usr/include/assert.h:79:1, line:80:43> line:79:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x5608c11c9ff8 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x5608c11ca078 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x5608c11ca0f8 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x5608c11ca2d0 </usr/include/sys/cdefs.h:79:35>
|-EnumDecl 0x5608c11ca328 </usr/include/ctype.h:46:1, line:60:1> line:46:1
| |-EnumConstantDecl 0x5608c11ca6e0 <line:48:3, line:43:77> line:48:3 _ISupper 'int'
| | `-ConstantExpr 0x5608c11ca6c0 <line:43:23, col:77> 'int'
| |   |-value: Int 256
| |   `-ParenExpr 0x5608c11ca6a0 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11ca670 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11ca450 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11ca410 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11ca3f0 <line:48:22> 'int' 0
| |       | `-IntegerLiteral 0x5608c11ca430 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11ca550 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11ca530 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11ca4f0 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11ca4d0 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11ca470 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11ca4b0 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11ca490 <line:48:22> 'int' 0
| |       |   `-IntegerLiteral 0x5608c11ca510 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11ca650 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11ca630 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11ca5f0 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11ca5d0 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11ca570 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11ca5b0 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11ca590 <line:48:22> 'int' 0
| |           `-IntegerLiteral 0x5608c11ca610 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11caa20 <line:49:3, line:43:77> line:49:3 _ISlower 'int'
| | `-ConstantExpr 0x5608c11caa00 <line:43:23, col:77> 'int'
| |   |-value: Int 512
| |   `-ParenExpr 0x5608c11ca9e0 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11ca9b0 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11ca790 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11ca750 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11ca730 <line:49:22> 'int' 1
| |       | `-IntegerLiteral 0x5608c11ca770 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11ca890 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11ca870 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11ca830 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11ca810 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11ca7b0 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11ca7f0 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11ca7d0 <line:49:22> 'int' 1
| |       |   `-IntegerLiteral 0x5608c11ca850 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11ca990 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11ca970 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11ca930 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11ca910 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11ca8b0 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11ca8f0 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11ca8d0 <line:49:22> 'int' 1
| |           `-IntegerLiteral 0x5608c11ca950 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11cad60 <line:50:3, line:43:77> line:50:3 _ISalpha 'int'
| | `-ConstantExpr 0x5608c11cad40 <line:43:23, col:77> 'int'
| |   |-value: Int 1024
| |   `-ParenExpr 0x5608c11cad20 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11cacf0 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11caad0 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11caa90 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11caa70 <line:50:22> 'int' 2
| |       | `-IntegerLiteral 0x5608c11caab0 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11cabd0 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11cabb0 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11cab70 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11cab50 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11caaf0 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11cab30 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11cab10 <line:50:22> 'int' 2
| |       |   `-IntegerLiteral 0x5608c11cab90 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11cacd0 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11cacb0 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11cac70 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11cac50 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11cabf0 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11cac30 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11cac10 <line:50:22> 'int' 2
| |           `-IntegerLiteral 0x5608c11cac90 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11cea10 <line:51:3, line:43:77> line:51:3 _ISdigit 'int'
| | `-ConstantExpr 0x5608c11ce9f0 <line:43:23, col:77> 'int'
| |   |-value: Int 2048
| |   `-ParenExpr 0x5608c11ce9d0 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11ce9a0 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11cae10 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11cadd0 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11cadb0 <line:51:22> 'int' 3
| |       | `-IntegerLiteral 0x5608c11cadf0 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11ce880 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11ce860 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11ce820 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11ce800 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11ce7a0 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11ce7e0 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11ce7c0 <line:51:22> 'int' 3
| |       |   `-IntegerLiteral 0x5608c11ce840 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11ce980 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11ce960 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11ce920 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11ce900 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11ce8a0 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11ce8e0 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11ce8c0 <line:51:22> 'int' 3
| |           `-IntegerLiteral 0x5608c11ce940 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11ced50 <line:52:3, line:43:77> line:52:3 _ISxdigit 'int'
| | `-ConstantExpr 0x5608c11ced30 <line:43:23, col:77> 'int'
| |   |-value: Int 4096
| |   `-ParenExpr 0x5608c11ced10 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11cece0 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11ceac0 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11cea80 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11cea60 <line:52:23> 'int' 4
| |       | `-IntegerLiteral 0x5608c11ceaa0 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11cebc0 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11ceba0 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11ceb60 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11ceb40 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11ceae0 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11ceb20 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11ceb00 <line:52:23> 'int' 4
| |       |   `-IntegerLiteral 0x5608c11ceb80 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11cecc0 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11ceca0 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11cec60 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11cec40 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11cebe0 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11cec20 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11cec00 <line:52:23> 'int' 4
| |           `-IntegerLiteral 0x5608c11cec80 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11cf090 <line:53:3, line:43:77> line:53:3 referenced _ISspace 'int'
| | `-ConstantExpr 0x5608c11cf070 <line:43:23, col:77> 'int'
| |   |-value: Int 8192
| |   `-ParenExpr 0x5608c11cf050 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11cf020 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11cee00 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11cedc0 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11ceda0 <line:53:22> 'int' 5
| |       | `-IntegerLiteral 0x5608c11cede0 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11cef00 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11ceee0 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11ceea0 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11cee80 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11cee20 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11cee60 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11cee40 <line:53:22> 'int' 5
| |       |   `-IntegerLiteral 0x5608c11ceec0 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11cf000 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11cefe0 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11cefa0 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11cef80 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11cef20 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11cef60 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11cef40 <line:53:22> 'int' 5
| |           `-IntegerLiteral 0x5608c11cefc0 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11cf3d0 <line:54:3, line:43:77> line:54:3 _ISprint 'int'
| | `-ConstantExpr 0x5608c11cf3b0 <line:43:23, col:77> 'int'
| |   |-value: Int 16384
| |   `-ParenExpr 0x5608c11cf390 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11cf360 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11cf140 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11cf100 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11cf0e0 <line:54:22> 'int' 6
| |       | `-IntegerLiteral 0x5608c11cf120 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11cf240 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11cf220 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11cf1e0 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11cf1c0 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11cf160 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11cf1a0 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11cf180 <line:54:22> 'int' 6
| |       |   `-IntegerLiteral 0x5608c11cf200 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11cf340 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11cf320 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11cf2e0 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11cf2c0 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11cf260 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11cf2a0 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11cf280 <line:54:22> 'int' 6
| |           `-IntegerLiteral 0x5608c11cf300 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11cf710 <line:55:3, line:43:77> line:55:3 _ISgraph 'int'
| | `-ConstantExpr 0x5608c11cf6f0 <line:43:23, col:77> 'int'
| |   |-value: Int 32768
| |   `-ParenExpr 0x5608c11cf6d0 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11cf6a0 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11cf480 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11cf440 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11cf420 <line:55:22> 'int' 7
| |       | `-IntegerLiteral 0x5608c11cf460 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11cf580 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11cf560 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11cf520 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11cf500 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11cf4a0 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11cf4e0 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11cf4c0 <line:55:22> 'int' 7
| |       |   `-IntegerLiteral 0x5608c11cf540 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11cf680 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11cf660 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11cf620 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11cf600 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11cf5a0 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11cf5e0 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11cf5c0 <line:55:22> 'int' 7
| |           `-IntegerLiteral 0x5608c11cf640 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11cfa60 <line:56:3, line:43:77> line:56:3 _ISblank 'int'
| | `-ConstantExpr 0x5608c11cfa40 <line:43:23, col:77> 'int'
| |   |-value: Int 1
| |   `-ParenExpr 0x5608c11cfa20 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11cf9f0 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11cf7d0 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11cf780 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11cf760 <line:56:22> 'int' 8
| |       | `-IntegerLiteral 0x5608c11cf7b0 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11cf8d0 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11cf8b0 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11cf870 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11cf850 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11cf7f0 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11cf830 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11cf810 <line:56:22> 'int' 8
| |       |   `-IntegerLiteral 0x5608c11cf890 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11cf9d0 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11cf9b0 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11cf970 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11cf950 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11cf8f0 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11cf930 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11cf910 <line:56:22> 'int' 8
| |           `-IntegerLiteral 0x5608c11cf990 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11cfda0 <line:57:3, line:43:77> line:57:3 _IScntrl 'int'
| | `-ConstantExpr 0x5608c11cfd80 <line:43:23, col:77> 'int'
| |   |-value: Int 2
| |   `-ParenExpr 0x5608c11cfd60 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11cfd30 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11cfb10 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11cfad0 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11cfab0 <line:57:22> 'int' 9
| |       | `-IntegerLiteral 0x5608c11cfaf0 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11cfc10 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11cfbf0 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11cfbb0 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11cfb90 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11cfb30 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11cfb70 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11cfb50 <line:57:22> 'int' 9
| |       |   `-IntegerLiteral 0x5608c11cfbd0 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11cfd10 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11cfcf0 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11cfcb0 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11cfc90 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11cfc30 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11cfc70 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11cfc50 <line:57:22> 'int' 9
| |           `-IntegerLiteral 0x5608c11cfcd0 <line:43:75> 'int' 8
| |-EnumConstantDecl 0x5608c11d00e0 <line:58:3, line:43:77> line:58:3 _ISpunct 'int'
| | `-ConstantExpr 0x5608c11d00c0 <line:43:23, col:77> 'int'
| |   |-value: Int 4
| |   `-ParenExpr 0x5608c11d00a0 <col:23, col:77> 'int'
| |     `-ConditionalOperator 0x5608c11d0070 <col:24, col:76> 'int'
| |       |-BinaryOperator 0x5608c11cfe50 <col:24, col:32> 'int' '<'
| |       | |-ParenExpr 0x5608c11cfe10 <col:24, col:28> 'int'
| |       | | `-IntegerLiteral 0x5608c11cfdf0 <line:58:22> 'int' 10
| |       | `-IntegerLiteral 0x5608c11cfe30 <line:43:32> 'int' 8
| |       |-ParenExpr 0x5608c11cff50 <col:36, col:54> 'int'
| |       | `-BinaryOperator 0x5608c11cff30 <col:37, col:53> 'int' '<<'
| |       |   |-ParenExpr 0x5608c11cfef0 <col:37, col:48> 'int'
| |       |   | `-BinaryOperator 0x5608c11cfed0 <col:38, col:47> 'int' '<<'
| |       |   |   |-IntegerLiteral 0x5608c11cfe70 <col:38> 'int' 1
| |       |   |   `-ParenExpr 0x5608c11cfeb0 <col:43, col:47> 'int'
| |       |   |     `-IntegerLiteral 0x5608c11cfe90 <line:58:22> 'int' 10
| |       |   `-IntegerLiteral 0x5608c11cff10 <line:43:53> 'int' 8
| |       `-ParenExpr 0x5608c11d0050 <col:58, col:76> 'int'
| |         `-BinaryOperator 0x5608c11d0030 <col:59, col:75> 'int' '>>'
| |           |-ParenExpr 0x5608c11cfff0 <col:59, col:70> 'int'
| |           | `-BinaryOperator 0x5608c11cffd0 <col:60, col:69> 'int' '<<'
| |           |   |-IntegerLiteral 0x5608c11cff70 <col:60> 'int' 1
| |           |   `-ParenExpr 0x5608c11cffb0 <col:65, col:69> 'int'
| |           |     `-IntegerLiteral 0x5608c11cff90 <line:58:22> 'int' 10
| |           `-IntegerLiteral 0x5608c11d0010 <line:43:75> 'int' 8
| `-EnumConstantDecl 0x5608c11d0420 <line:59:3, line:43:77> line:59:3 _ISalnum 'int'
|   `-ConstantExpr 0x5608c11d0400 <line:43:23, col:77> 'int'
|     |-value: Int 8
|     `-ParenExpr 0x5608c11d03e0 <col:23, col:77> 'int'
|       `-ConditionalOperator 0x5608c11d03b0 <col:24, col:76> 'int'
|         |-BinaryOperator 0x5608c11d0190 <col:24, col:32> 'int' '<'
|         | |-ParenExpr 0x5608c11d0150 <col:24, col:28> 'int'
|         | | `-IntegerLiteral 0x5608c11d0130 <line:59:22> 'int' 11
|         | `-IntegerLiteral 0x5608c11d0170 <line:43:32> 'int' 8
|         |-ParenExpr 0x5608c11d0290 <col:36, col:54> 'int'
|         | `-BinaryOperator 0x5608c11d0270 <col:37, col:53> 'int' '<<'
|         |   |-ParenExpr 0x5608c11d0230 <col:37, col:48> 'int'
|         |   | `-BinaryOperator 0x5608c11d0210 <col:38, col:47> 'int' '<<'
|         |   |   |-IntegerLiteral 0x5608c11d01b0 <col:38> 'int' 1
|         |   |   `-ParenExpr 0x5608c11d01f0 <col:43, col:47> 'int'
|         |   |     `-IntegerLiteral 0x5608c11d01d0 <line:59:22> 'int' 11
|         |   `-IntegerLiteral 0x5608c11d0250 <line:43:53> 'int' 8
|         `-ParenExpr 0x5608c11d0390 <col:58, col:76> 'int'
|           `-BinaryOperator 0x5608c11d0370 <col:59, col:75> 'int' '>>'
|             |-ParenExpr 0x5608c11d0330 <col:59, col:70> 'int'
|             | `-BinaryOperator 0x5608c11d0310 <col:60, col:69> 'int' '<<'
|             |   |-IntegerLiteral 0x5608c11d02b0 <col:60> 'int' 1
|             |   `-ParenExpr 0x5608c11d02f0 <col:65, col:69> 'int'
|             |     `-IntegerLiteral 0x5608c11d02d0 <line:59:22> 'int' 11
|             `-IntegerLiteral 0x5608c11d0350 <line:43:75> 'int' 8
|-FunctionDecl 0x5608c11d0578 <line:79:1, line:80:40> line:79:35 used __ctype_b_loc 'const unsigned short **(void)' extern
| |-NoThrowAttr 0x5608c11d0618 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11d0670 </usr/include/ctype.h:80:30>
|-FunctionDecl 0x5608c11d0840 <line:81:1, line:82:40> line:81:26 used __ctype_tolower_loc 'const __int32_t **(void)' extern
| |-NoThrowAttr 0x5608c11d08e0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11d0938 </usr/include/ctype.h:82:30>
|-FunctionDecl 0x5608c11d0a00 <line:83:1, line:84:40> line:83:26 used __ctype_toupper_loc 'const __int32_t **(void)' extern
| |-NoThrowAttr 0x5608c11d0aa0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11d0af8 </usr/include/ctype.h:84:30>
|-FunctionDecl 0x5608c11d0bd0 <line:108:12> col:12 implicit isalnum 'int (int)' extern
| |-ParmVarDecl 0x5608c11d0cc8 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d0c70 <<invalid sloc>> Implicit 817
| |-NoThrowAttr 0x5608c11d0d38 <col:12> Implicit
| `-PureAttr 0x5608c11d0d60 <col:12> Implicit
|-FunctionDecl 0x5608c11d0d88 prev 0x5608c11d0bd0 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:108:12 isalnum 'int (int)' extern
| |-ParmVarDecl 0x5608c11d0b38 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c11d0e88 <<invalid sloc>> Inherited Implicit 817
| |-PureAttr 0x5608c11d0eb0 <line:108:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d0e30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d0f88 </usr/include/ctype.h:109:12> col:12 implicit isalpha 'int (int)' extern
| |-ParmVarDecl 0x5608c11d1080 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d1028 <<invalid sloc>> Implicit 818
| |-NoThrowAttr 0x5608c11d10f0 <col:12> Implicit
| `-PureAttr 0x5608c11d1118 <col:12> Implicit
|-FunctionDecl 0x5608c11d1140 prev 0x5608c11d0f88 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:109:12 isalpha 'int (int)' extern
| |-ParmVarDecl 0x5608c11d0ef0 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c11d1240 <<invalid sloc>> Inherited Implicit 818
| |-PureAttr 0x5608c11d1268 <line:109:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d11e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d1340 </usr/include/ctype.h:110:12> col:12 implicit iscntrl 'int (int)' extern
| |-ParmVarDecl 0x5608c11d1438 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d13e0 <<invalid sloc>> Implicit 820
| |-NoThrowAttr 0x5608c11d14a8 <col:12> Implicit
| `-PureAttr 0x5608c11d14d0 <col:12> Implicit
|-FunctionDecl 0x5608c11d14f8 prev 0x5608c11d1340 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:110:12 iscntrl 'int (int)' extern
| |-ParmVarDecl 0x5608c11d12a8 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c11d15f8 <<invalid sloc>> Inherited Implicit 820
| |-PureAttr 0x5608c11d1620 <line:110:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d15a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d16f8 </usr/include/ctype.h:111:12> col:12 implicit isdigit 'int (int)' extern
| |-ParmVarDecl 0x5608c11d1cf0 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d1798 <<invalid sloc>> Implicit 821
| |-NoThrowAttr 0x5608c11d1d60 <col:12> Implicit
| `-PureAttr 0x5608c11d1d88 <col:12> Implicit
|-FunctionDecl 0x5608c11d1db0 prev 0x5608c11d16f8 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:111:12 isdigit 'int (int)' extern
| |-ParmVarDecl 0x5608c11d1660 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c11d1eb0 <<invalid sloc>> Inherited Implicit 821
| |-PureAttr 0x5608c11d1ed8 <line:111:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d1e58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d1fb0 </usr/include/ctype.h:112:12> col:12 implicit islower 'int (int)' extern
| |-ParmVarDecl 0x5608c11d20a8 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d2050 <<invalid sloc>> Implicit 823
| |-NoThrowAttr 0x5608c11d2118 <col:12> Implicit
| `-PureAttr 0x5608c11d2140 <col:12> Implicit
|-FunctionDecl 0x5608c11d2168 prev 0x5608c11d1fb0 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:112:12 islower 'int (int)' extern
| |-ParmVarDecl 0x5608c11d1f18 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c11d2268 <<invalid sloc>> Inherited Implicit 823
| |-PureAttr 0x5608c11d2290 <line:112:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d2210 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d2368 </usr/include/ctype.h:113:12> col:12 implicit isgraph 'int (int)' extern
| |-ParmVarDecl 0x5608c11d2460 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d2408 <<invalid sloc>> Implicit 822
| |-NoThrowAttr 0x5608c11d24d0 <col:12> Implicit
| `-PureAttr 0x5608c11d24f8 <col:12> Implicit
|-FunctionDecl 0x5608c11d2520 prev 0x5608c11d2368 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:113:12 isgraph 'int (int)' extern
| |-ParmVarDecl 0x5608c11d22d0 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c11d2620 <<invalid sloc>> Inherited Implicit 822
| |-PureAttr 0x5608c11d2648 <line:113:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d25c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d2720 </usr/include/ctype.h:114:12> col:12 implicit isprint 'int (int)' extern
| |-ParmVarDecl 0x5608c11d2818 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d27c0 <<invalid sloc>> Implicit 824
| |-NoThrowAttr 0x5608c11d2888 <col:12> Implicit
| `-PureAttr 0x5608c11d28b0 <col:12> Implicit
|-FunctionDecl 0x5608c11d28d8 prev 0x5608c11d2720 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:114:12 isprint 'int (int)' extern
| |-ParmVarDecl 0x5608c11d2688 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c11d29d8 <<invalid sloc>> Inherited Implicit 824
| |-PureAttr 0x5608c11d2a00 <line:114:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d2980 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d2ad8 </usr/include/ctype.h:115:12> col:12 implicit ispunct 'int (int)' extern
| |-ParmVarDecl 0x5608c11d2bd0 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d2b78 <<invalid sloc>> Implicit 825
| |-NoThrowAttr 0x5608c11d2c40 <col:12> Implicit
| `-PureAttr 0x5608c11d2c68 <col:12> Implicit
|-FunctionDecl 0x5608c116d410 prev 0x5608c11d2ad8 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:115:12 ispunct 'int (int)' extern
| |-ParmVarDecl 0x5608c11d2a40 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c116d510 <<invalid sloc>> Inherited Implicit 825
| |-PureAttr 0x5608c116d538 <line:115:12> Inherited Implicit
| `-NoThrowAttr 0x5608c116d4b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c116d610 </usr/include/ctype.h:116:12> col:12 implicit isspace 'int (int)' extern
| |-ParmVarDecl 0x5608c116d708 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c116d6b0 <<invalid sloc>> Implicit 826
| |-NoThrowAttr 0x5608c116d778 <col:12> Implicit
| `-PureAttr 0x5608c116d7a0 <col:12> Implicit
|-FunctionDecl 0x5608c116d7c8 prev 0x5608c116d610 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:116:12 isspace 'int (int)' extern
| |-ParmVarDecl 0x5608c116d578 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c116d8c8 <<invalid sloc>> Inherited Implicit 826
| |-PureAttr 0x5608c116d8f0 <line:116:12> Inherited Implicit
| `-NoThrowAttr 0x5608c116d870 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c116d9c8 </usr/include/ctype.h:117:12> col:12 implicit isupper 'int (int)' extern
| |-ParmVarDecl 0x5608c116dac0 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c116da68 <<invalid sloc>> Implicit 827
| |-NoThrowAttr 0x5608c116db30 <col:12> Implicit
| `-PureAttr 0x5608c116db58 <col:12> Implicit
|-FunctionDecl 0x5608c116db80 prev 0x5608c116d9c8 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:117:12 isupper 'int (int)' extern
| |-ParmVarDecl 0x5608c116d930 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c116dc80 <<invalid sloc>> Inherited Implicit 827
| |-PureAttr 0x5608c116dca8 <line:117:12> Inherited Implicit
| `-NoThrowAttr 0x5608c116dc28 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c116dd80 </usr/include/ctype.h:118:12> col:12 implicit isxdigit 'int (int)' extern
| |-ParmVarDecl 0x5608c116de78 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c116de20 <<invalid sloc>> Implicit 828
| |-NoThrowAttr 0x5608c116dee8 <col:12> Implicit
| `-PureAttr 0x5608c116df10 <col:12> Implicit
|-FunctionDecl 0x5608c116df38 prev 0x5608c116dd80 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:118:12 isxdigit 'int (int)' extern
| |-ParmVarDecl 0x5608c116dce8 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c116e038 <<invalid sloc>> Inherited Implicit 828
| |-PureAttr 0x5608c116e060 <line:118:12> Inherited Implicit
| `-NoThrowAttr 0x5608c116dfe0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c116e138 </usr/include/ctype.h:122:12> col:12 implicit tolower 'int (int)' extern
| |-ParmVarDecl 0x5608c116e230 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c116e1d8 <<invalid sloc>> Implicit 829
| |-NoThrowAttr 0x5608c116e2a0 <col:12> Implicit
| `-PureAttr 0x5608c116e2c8 <col:12> Implicit
|-FunctionDecl 0x5608c116e2f0 prev 0x5608c116e138 <col:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:122:12 tolower 'int (int)' extern
| |-ParmVarDecl 0x5608c116e0a0 <col:21, col:25> col:25 __c 'int'
| |-BuiltinAttr 0x5608c11d4ce0 <<invalid sloc>> Inherited Implicit 829
| |-PureAttr 0x5608c11d4d08 <col:12> Inherited Implicit
| `-NoThrowAttr 0x5608c116e398 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d4de0 </usr/include/ctype.h:125:12> col:12 implicit toupper 'int (int)' extern
| |-ParmVarDecl 0x5608c11d4ed8 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d4e80 <<invalid sloc>> Implicit 830
| |-NoThrowAttr 0x5608c11d4f48 <col:12> Implicit
| `-PureAttr 0x5608c11d4f70 <col:12> Implicit
|-FunctionDecl 0x5608c11d4f98 prev 0x5608c11d4de0 <col:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:125:12 toupper 'int (int)' extern
| |-ParmVarDecl 0x5608c11d4d48 <col:21, col:25> col:25 __c 'int'
| |-BuiltinAttr 0x5608c11d5098 <<invalid sloc>> Inherited Implicit 830
| |-PureAttr 0x5608c11d50c0 <col:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d5040 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d5198 </usr/include/ctype.h:130:12> col:12 implicit isblank 'int (int)' extern
| |-ParmVarDecl 0x5608c11d5290 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11d5238 <<invalid sloc>> Implicit 819
| |-NoThrowAttr 0x5608c11d5300 <col:12> Implicit
| `-PureAttr 0x5608c11d5328 <col:12> Implicit
|-FunctionDecl 0x5608c11d5350 prev 0x5608c11d5198 <line:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:130:12 isblank 'int (int)' extern
| |-ParmVarDecl 0x5608c11d5100 <line:102:42> col:45 'int'
| |-BuiltinAttr 0x5608c11d5450 <<invalid sloc>> Inherited Implicit 819
| |-PureAttr 0x5608c11d5478 <line:130:12> Inherited Implicit
| `-NoThrowAttr 0x5608c11d53f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d5610 </usr/include/ctype.h:135:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:135:12 isctype 'int (int, int)' extern
| |-ParmVarDecl 0x5608c11d54b8 <col:21, col:25> col:25 __c 'int'
| |-ParmVarDecl 0x5608c11d5538 <col:30, col:34> col:34 __mask 'int'
| `-NoThrowAttr 0x5608c11d56c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d57c8 </usr/include/ctype.h:142:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:142:12 isascii 'int (int)' extern
| |-ParmVarDecl 0x5608c11d5730 <col:21, col:25> col:25 __c 'int'
| `-NoThrowAttr 0x5608c11d5870 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d5978 </usr/include/ctype.h:146:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:146:12 toascii 'int (int)' extern
| |-ParmVarDecl 0x5608c11d58e0 <col:21, col:25> col:25 __c 'int'
| `-NoThrowAttr 0x5608c11d5a20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d5b28 </usr/include/ctype.h:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:150:12 _toupper 'int (int)' extern
| |-ParmVarDecl 0x5608c11d5a90 <line:102:42> col:45 'int'
| `-NoThrowAttr 0x5608c11d5bd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d5cf0 </usr/include/ctype.h:102:25, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:151:12 _tolower 'int (int)' extern
| |-ParmVarDecl 0x5608c11d5c40 <line:102:42> col:45 'int'
| `-NoThrowAttr 0x5608c11d5d98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d5ea0 prev 0x5608c116e2f0 <line:451:27, /usr/include/ctype.h:210:1> line:207:8 tolower 'int (int)' extern inline
| |-ParmVarDecl 0x5608c11d5e08 <col:17, col:21> col:21 used __c 'int'
| |-CompoundStmt 0x5608c11d6328 <line:208:1, line:210:1>
| | `-ReturnStmt 0x5608c11d6318 <line:209:3, col:70>
| |   `-ConditionalOperator 0x5608c11d62e8 <col:10, col:70> 'int'
| |     |-BinaryOperator 0x5608c11d6120 <col:10, col:31> 'int' '&&'
| |     | |-BinaryOperator 0x5608c11d6088 <col:10, col:18> 'int' '>='
| |     | | |-ImplicitCastExpr 0x5608c11d6070 <col:10> 'int' <LValueToRValue>
| |     | | | `-DeclRefExpr 0x5608c11d6018 <col:10> 'int' lvalue ParmVar 0x5608c11d5e08 '__c' 'int'
| |     | | `-UnaryOperator 0x5608c11d6058 <col:17, col:18> 'int' prefix '-'
| |     | |   `-IntegerLiteral 0x5608c11d6038 <col:18> 'int' 128
| |     | `-BinaryOperator 0x5608c11d6100 <col:25, col:31> 'int' '<'
| |     |   |-ImplicitCastExpr 0x5608c11d60e8 <col:25> 'int' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5608c11d60a8 <col:25> 'int' lvalue ParmVar 0x5608c11d5e08 '__c' 'int'
| |     |   `-IntegerLiteral 0x5608c11d60c8 <col:31> 'int' 256
| |     |-ImplicitCastExpr 0x5608c11d62b8 <col:37, col:66> '__int32_t':'int' <LValueToRValue>
| |     | `-ArraySubscriptExpr 0x5608c11d6278 <col:37, col:66> 'const __int32_t':'const int' lvalue
| |     |   |-ImplicitCastExpr 0x5608c11d6248 <col:37, col:61> 'const __int32_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5608c11d6208 <col:37, col:61> 'const __int32_t *' lvalue
| |     |   |   `-UnaryOperator 0x5608c11d61f0 <col:38, col:60> 'const __int32_t *' lvalue prefix '*' cannot overflow
| |     |   |     `-CallExpr 0x5608c11d61d0 <col:39, col:60> 'const __int32_t **'
| |     |   |       `-ImplicitCastExpr 0x5608c11d61b8 <col:39> 'const __int32_t **(*)(void)' <FunctionToPointerDecay>
| |     |   |         `-DeclRefExpr 0x5608c11d6140 <col:39> 'const __int32_t **(void)' Function 0x5608c11d0840 '__ctype_tolower_loc' 'const __int32_t **(void)'
| |     |   `-ImplicitCastExpr 0x5608c11d6260 <col:63> 'int' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5608c11d6228 <col:63> 'int' lvalue ParmVar 0x5608c11d5e08 '__c' 'int'
| |     `-ImplicitCastExpr 0x5608c11d62d0 <col:70> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5608c11d6298 <col:70> 'int' lvalue ParmVar 0x5608c11d5e08 '__c' 'int'
| |-BuiltinAttr 0x5608c11d5fc8 <<invalid sloc>> Inherited Implicit 829
| |-PureAttr 0x5608c11d5ff0 <line:122:12> Inherited Implicit
| |-NoThrowAttr 0x5608c11d5f48 </usr/include/sys/cdefs.h:81:38>
| `-GNUInlineAttr 0x5608c11d5fa0 <line:451:59>
|-FunctionDecl 0x5608c11d63f0 prev 0x5608c11d4f98 <col:27, /usr/include/ctype.h:216:1> line:213:8 toupper 'int (int)' extern inline
| |-ParmVarDecl 0x5608c11d6358 <col:17, col:21> col:21 used __c 'int'
| |-CompoundStmt 0x5608c11d6820 <line:214:1, line:216:1>
| | `-ReturnStmt 0x5608c11d6810 <line:215:3, col:70>
| |   `-ConditionalOperator 0x5608c11d67e0 <col:10, col:70> 'int'
| |     |-BinaryOperator 0x5608c11d6670 <col:10, col:31> 'int' '&&'
| |     | |-BinaryOperator 0x5608c11d65d8 <col:10, col:18> 'int' '>='
| |     | | |-ImplicitCastExpr 0x5608c11d65c0 <col:10> 'int' <LValueToRValue>
| |     | | | `-DeclRefExpr 0x5608c11d6568 <col:10> 'int' lvalue ParmVar 0x5608c11d6358 '__c' 'int'
| |     | | `-UnaryOperator 0x5608c11d65a8 <col:17, col:18> 'int' prefix '-'
| |     | |   `-IntegerLiteral 0x5608c11d6588 <col:18> 'int' 128
| |     | `-BinaryOperator 0x5608c11d6650 <col:25, col:31> 'int' '<'
| |     |   |-ImplicitCastExpr 0x5608c11d6638 <col:25> 'int' <LValueToRValue>
| |     |   | `-DeclRefExpr 0x5608c11d65f8 <col:25> 'int' lvalue ParmVar 0x5608c11d6358 '__c' 'int'
| |     |   `-IntegerLiteral 0x5608c11d6618 <col:31> 'int' 256
| |     |-ImplicitCastExpr 0x5608c11d67b0 <col:37, col:66> '__int32_t':'int' <LValueToRValue>
| |     | `-ArraySubscriptExpr 0x5608c11d6770 <col:37, col:66> 'const __int32_t':'const int' lvalue
| |     |   |-ImplicitCastExpr 0x5608c11d6740 <col:37, col:61> 'const __int32_t *' <LValueToRValue>
| |     |   | `-ParenExpr 0x5608c11d6700 <col:37, col:61> 'const __int32_t *' lvalue
| |     |   |   `-UnaryOperator 0x5608c11d66e8 <col:38, col:60> 'const __int32_t *' lvalue prefix '*' cannot overflow
| |     |   |     `-CallExpr 0x5608c11d66c8 <col:39, col:60> 'const __int32_t **'
| |     |   |       `-ImplicitCastExpr 0x5608c11d66b0 <col:39> 'const __int32_t **(*)(void)' <FunctionToPointerDecay>
| |     |   |         `-DeclRefExpr 0x5608c11d6690 <col:39> 'const __int32_t **(void)' Function 0x5608c11d0a00 '__ctype_toupper_loc' 'const __int32_t **(void)'
| |     |   `-ImplicitCastExpr 0x5608c11d6758 <col:63> 'int' <LValueToRValue>
| |     |     `-DeclRefExpr 0x5608c11d6720 <col:63> 'int' lvalue ParmVar 0x5608c11d6358 '__c' 'int'
| |     `-ImplicitCastExpr 0x5608c11d67c8 <col:70> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5608c11d6790 <col:70> 'int' lvalue ParmVar 0x5608c11d6358 '__c' 'int'
| |-BuiltinAttr 0x5608c11d6518 <<invalid sloc>> Inherited Implicit 830
| |-PureAttr 0x5608c11d6540 <line:125:12> Inherited Implicit
| |-NoThrowAttr 0x5608c11d6498 </usr/include/sys/cdefs.h:81:38>
| `-GNUInlineAttr 0x5608c11d64f0 <line:451:59>
|-FunctionDecl 0x5608c11d69e0 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:251:14 isalnum_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11d6850 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11d68c8 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11d6a90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d6c18 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:252:14 isalpha_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11d6b00 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11d6b78 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11d6cc8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11dae10 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:253:14 iscntrl_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dacf8 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11dad70 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11daec0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11db048 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:254:14 isdigit_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11daf30 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11dafa8 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11db0f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11db280 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:255:14 islower_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11db168 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11db1e0 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11db330 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11db4b8 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:256:14 isgraph_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11db3a0 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11db418 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11db568 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11db6f0 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:257:14 isprint_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11db5d8 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11db650 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11db7a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11db928 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:258:14 ispunct_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11db810 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11db888 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11db9d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11dbb60 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:259:14 isspace_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dba48 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11dbac0 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11dbc10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11dcde8 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:260:14 isupper_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dccd0 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11dcd48 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11dce98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11dd020 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:261:14 isxdigit_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dcf08 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11dcf80 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11dd0d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11dd258 </usr/include/ctype.h:245:3, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:263:14 isblank_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dd140 <line:245:20> col:23 'int'
| |-ParmVarDecl 0x5608c11dd1b8 <col:25> col:33 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11dd308 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11dd490 </usr/include/ctype.h:267:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:267:12 __tolower_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dd378 <col:25, col:29> col:29 __c 'int'
| |-ParmVarDecl 0x5608c11dd3f0 <col:34, col:43> col:43 __l 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11dd540 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11dd6c8 </usr/include/ctype.h:268:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:268:12 tolower_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dd5b0 <col:23, col:27> col:27 __c 'int'
| |-ParmVarDecl 0x5608c11dd628 <col:32, col:41> col:41 __l 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11dd778 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11dd900 </usr/include/ctype.h:271:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:271:12 __toupper_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dd7e8 <col:25, col:29> col:29 __c 'int'
| |-ParmVarDecl 0x5608c11dd860 <col:34, col:43> col:43 __l 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11dd9b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ddb38 </usr/include/ctype.h:272:1, /usr/include/sys/cdefs.h:79:54> /usr/include/ctype.h:272:12 toupper_l 'int (int, locale_t)' extern
| |-ParmVarDecl 0x5608c11dda20 <col:23, col:27> col:27 __c 'int'
| |-ParmVarDecl 0x5608c11dda98 <col:32, col:41> col:41 __l 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c11ddbe8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11f14f0 </usr/include/bits/pthread_stack_min-dynamic.h:24:1, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/pthread_stack_min-dynamic.h:24:17 __sysconf 'long (int)' extern
| |-ParmVarDecl 0x5608c11ddc58 <col:28, col:32> col:32 __name 'int'
| `-NoThrowAttr 0x5608c11f1598 </usr/include/sys/cdefs.h:79:35>
|-TypedefDecl 0x5608c11f1608 </usr/include/math.h:163:1, col:15> col:15 float_t 'float'
| `-BuiltinType 0x5608c10a4980 'float'
|-TypedefDecl 0x5608c11f1678 <line:164:1, col:16> col:16 double_t 'double'
| `-BuiltinType 0x5608c10a49a0 'double'
|-EnumDecl 0x5608c11f16d0 <line:251:1, line:268:3> line:251:1
| |-EnumConstantDecl 0x5608c11f17d0 <line:253:5, line:254:24> line:253:5 FP_INT_UPWARD 'int'
| | `-ConstantExpr 0x5608c11f17b0 <line:254:24> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5608c11f1790 <col:24> 'int' 0
| |-EnumConstantDecl 0x5608c11f1860 <line:256:5, line:257:26> line:256:5 FP_INT_DOWNWARD 'int'
| | `-ConstantExpr 0x5608c11f1840 <line:257:26> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5608c11f1820 <col:26> 'int' 1
| |-EnumConstantDecl 0x5608c11f18f0 <line:259:5, line:260:28> line:259:5 FP_INT_TOWARDZERO 'int'
| | `-ConstantExpr 0x5608c11f18d0 <line:260:28> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5608c11f18b0 <col:28> 'int' 2
| |-EnumConstantDecl 0x5608c11f1980 <line:262:5, line:263:35> line:262:5 FP_INT_TONEARESTFROMZERO 'int'
| | `-ConstantExpr 0x5608c11f1960 <line:263:35> 'int'
| |   |-value: Int 3
| |   `-IntegerLiteral 0x5608c11f1940 <col:35> 'int' 3
| `-EnumConstantDecl 0x5608c11f1a10 <line:265:5, line:266:27> line:265:5 FP_INT_TONEAREST 'int'
|   `-ConstantExpr 0x5608c11f19f0 <line:266:27> 'int'
|     |-value: Int 4
|     `-IntegerLiteral 0x5608c11f19d0 <col:27> 'int' 4
|-FunctionDecl 0x5608c11f1b40 <line:297:3, /usr/include/bits/mathcalls-helper-functions.h:21:32> line:20:24 __fpclassify 'int (double)' extern
| |-ParmVarDecl 0x5608c11f1a78 </usr/include/math.h:308:20, /usr/include/bits/mathcalls-helper-functions.h:20:50> col:50 __value 'double'
| |-NoThrowAttr 0x5608c11f1be8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11f1c40 </usr/include/bits/mathcalls-helper-functions.h:21:22>
|-FunctionDecl 0x5608c11f1d18 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:25:32> line:24:24 __signbit 'int (double)' extern
| |-ParmVarDecl 0x5608c11f1c80 </usr/include/math.h:308:20, /usr/include/bits/mathcalls-helper-functions.h:24:47> col:47 __value 'double'
| |-NoThrowAttr 0x5608c11f1dc0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11f1e18 </usr/include/bits/mathcalls-helper-functions.h:25:22>
|-FunctionDecl 0x5608c11f1ef0 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:30:29> line:29:24 __isinf 'int (double)' extern
| |-ParmVarDecl 0x5608c11f1e58 </usr/include/math.h:308:20, /usr/include/bits/mathcalls-helper-functions.h:29:45> col:45 __value 'double'
| |-NoThrowAttr 0x5608c11f1f98 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11f1ff0 </usr/include/bits/mathcalls-helper-functions.h:30:19>
|-FunctionDecl 0x5608c11f20c8 <line:33:24> col:24 implicit __finite 'int (double)' extern
| |-ParmVarDecl 0x5608c11f21c0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11f2168 <<invalid sloc>> Implicit 906
| |-NoThrowAttr 0x5608c11f2230 <col:24> Implicit
| `-ConstAttr 0x5608c11f2258 <col:24> Implicit
|-FunctionDecl 0x5608c11f2280 prev 0x5608c11f20c8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:34:29> line:33:24 __finite 'int (double)' extern
| |-ParmVarDecl 0x5608c11f2030 </usr/include/math.h:308:20, /usr/include/bits/mathcalls-helper-functions.h:33:46> col:46 __value 'double'
| |-BuiltinAttr 0x5608c11f23a8 <<invalid sloc>> Inherited Implicit 906
| |-NoThrowAttr 0x5608c11f2328 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c11f2380 </usr/include/bits/mathcalls-helper-functions.h:34:19>
|-FunctionDecl 0x5608c1226ca0 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:38:29> line:37:24 __isnan 'int (double)' extern
| |-ParmVarDecl 0x5608c11f23e8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls-helper-functions.h:37:45> col:45 __value 'double'
| |-NoThrowAttr 0x5608c1226d48 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1226da0 </usr/include/bits/mathcalls-helper-functions.h:38:19>
|-FunctionDecl 0x5608c1226f40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls-helper-functions.h:41:24 __iseqsig 'int (double, double)' extern
| |-ParmVarDecl 0x5608c1226de0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls-helper-functions.h:41:47> col:47 __x 'double'
| |-ParmVarDecl 0x5608c1226e60 </usr/include/math.h:308:20, /usr/include/bits/mathcalls-helper-functions.h:41:62> col:62 __y 'double'
| `-NoThrowAttr 0x5608c1226ff0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12270f8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:45:32> line:44:24 __issignaling 'int (double)' extern
| |-ParmVarDecl 0x5608c1227060 </usr/include/math.h:308:20, /usr/include/bits/mathcalls-helper-functions.h:44:51> col:51 __value 'double'
| |-NoThrowAttr 0x5608c12271a0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12271f8 </usr/include/bits/mathcalls-helper-functions.h:45:22>
|-FunctionDecl 0x5608c1227300 </usr/include/bits/mathcalls.h:53:17> col:17 implicit used acos 'double (double)' extern
| |-ParmVarDecl 0x5608c12273f8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c12273a0 <<invalid sloc>> Implicit 927
| `-NoThrowAttr 0x5608c1227468 <col:17> Implicit
|-FunctionDecl 0x5608c1227490 prev 0x5608c1227300 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:53:17 used acos 'double (double)' extern
| |-ParmVarDecl 0x5608c1227238 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:53:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c1227590 <<invalid sloc>> Inherited Implicit 927
| `-NoThrowAttr 0x5608c1227538 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1227668 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:90:1 __acos 'double (double)' extern
| |-ParmVarDecl 0x5608c12275d0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:53:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c1227710 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1227818 </usr/include/bits/mathcalls.h:55:17> col:17 implicit used asin 'double (double)' extern
| |-ParmVarDecl 0x5608c1227910 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c12278b8 <<invalid sloc>> Implicit 933
| `-NoThrowAttr 0x5608c1227980 <col:17> Implicit
|-FunctionDecl 0x5608c12279a8 prev 0x5608c1227818 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:55:17 used asin 'double (double)' extern
| |-ParmVarDecl 0x5608c1227780 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:55:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c1227aa8 <<invalid sloc>> Inherited Implicit 933
| `-NoThrowAttr 0x5608c1227a50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1227b80 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:92:1 __asin 'double (double)' extern
| |-ParmVarDecl 0x5608c1227ae8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:55:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c1227c28 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a6278 </usr/include/bits/mathcalls.h:57:17> col:17 implicit used atan 'double (double)' extern
| |-ParmVarDecl 0x5608c11a6370 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11a6318 <<invalid sloc>> Implicit 939
| `-NoThrowAttr 0x5608c11a63e0 <col:17> Implicit
|-FunctionDecl 0x5608c11a6408 prev 0x5608c11a6278 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:57:17 used atan 'double (double)' extern
| |-ParmVarDecl 0x5608c11a61e0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:57:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c11a6508 <<invalid sloc>> Inherited Implicit 939
| `-NoThrowAttr 0x5608c11a64b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a65e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:94:1 __atan 'double (double)' extern
| |-ParmVarDecl 0x5608c11a6548 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:57:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c11a6688 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a6850 </usr/include/bits/mathcalls.h:59:17> col:17 implicit used atan2 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11a6948 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c11a69b0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11a68f0 <<invalid sloc>> Implicit 891
| `-NoThrowAttr 0x5608c11a6a28 <col:17> Implicit
|-FunctionDecl 0x5608c11a6a50 prev 0x5608c11a6850 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:59:17 used atan2 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11a66f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:59:36> col:36 __y 'double'
| |-ParmVarDecl 0x5608c11a6778 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:59:51> col:51 __x 'double'
| |-BuiltinAttr 0x5608c11a6b58 <<invalid sloc>> Inherited Implicit 891
| `-NoThrowAttr 0x5608c11a6b00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a6cb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:96:1 __atan2 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11a6b98 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:59:36> col:36 __y 'double'
| |-ParmVarDecl 0x5608c11a6c18 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:59:51> col:51 __x 'double'
| `-NoThrowAttr 0x5608c11a6d68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a6e70 </usr/include/bits/mathcalls.h:62:17> col:17 implicit used cos 'double (double)' extern
| |-ParmVarDecl 0x5608c11a6f68 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11a6f10 <<invalid sloc>> Implicit 951
| `-NoThrowAttr 0x5608c11a6fd8 <col:17> Implicit
|-FunctionDecl 0x5608c11a7000 prev 0x5608c11a6e70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:62:17 used cos 'double (double)' extern
| |-ParmVarDecl 0x5608c11a6dd8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:62:34> col:34 __x 'double'
| |-BuiltinAttr 0x5608c11a7100 <<invalid sloc>> Inherited Implicit 951
| `-NoThrowAttr 0x5608c11a70a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a77e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:98:1 __cos 'double (double)' extern
| |-ParmVarDecl 0x5608c11a7140 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:62:34> col:34 __x 'double'
| `-NoThrowAttr 0x5608c11a7888 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a7990 </usr/include/bits/mathcalls.h:64:17> col:17 implicit used sin 'double (double)' extern
| |-ParmVarDecl 0x5608c11a7a88 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11a7a30 <<invalid sloc>> Implicit 1050
| `-NoThrowAttr 0x5608c11a7af8 <col:17> Implicit
|-FunctionDecl 0x5608c11a7b20 prev 0x5608c11a7990 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:64:17 used sin 'double (double)' extern
| |-ParmVarDecl 0x5608c11a78f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:64:34> col:34 __x 'double'
| |-BuiltinAttr 0x5608c11a7c20 <<invalid sloc>> Inherited Implicit 1050
| `-NoThrowAttr 0x5608c11a7bc8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a7cf8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:100:1 __sin 'double (double)' extern
| |-ParmVarDecl 0x5608c11a7c60 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:64:34> col:34 __x 'double'
| `-NoThrowAttr 0x5608c11a7da0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a7ea8 </usr/include/bits/mathcalls.h:66:17> col:17 implicit used tan 'double (double)' extern
| |-ParmVarDecl 0x5608c11a7fa0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11a7f48 <<invalid sloc>> Implicit 1059
| `-NoThrowAttr 0x5608c11a8010 <col:17> Implicit
|-FunctionDecl 0x5608c11a8038 prev 0x5608c11a7ea8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:66:17 used tan 'double (double)' extern
| |-ParmVarDecl 0x5608c11a7e10 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:66:34> col:34 __x 'double'
| |-BuiltinAttr 0x5608c11a8138 <<invalid sloc>> Inherited Implicit 1059
| `-NoThrowAttr 0x5608c11a80e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a8210 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:102:1 __tan 'double (double)' extern
| |-ParmVarDecl 0x5608c11a8178 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:66:34> col:34 __x 'double'
| `-NoThrowAttr 0x5608c11a82b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a83c0 </usr/include/bits/mathcalls.h:71:17> col:17 implicit used cosh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a84b8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11a8460 <<invalid sloc>> Implicit 954
| `-NoThrowAttr 0x5608c11a8528 <col:17> Implicit
|-FunctionDecl 0x5608c11a8550 prev 0x5608c11a83c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:71:17 used cosh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a8328 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:71:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c11a8650 <<invalid sloc>> Inherited Implicit 954
| `-NoThrowAttr 0x5608c11a85f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a8728 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:104:1 __cosh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a8690 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:71:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c11a87f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a88f8 </usr/include/bits/mathcalls.h:73:17> col:17 implicit used sinh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a89f0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11a8998 <<invalid sloc>> Implicit 1053
| `-NoThrowAttr 0x5608c11a8a60 <col:17> Implicit
|-FunctionDecl 0x5608c11a8a88 prev 0x5608c11a88f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:73:17 used sinh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a8860 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:73:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c11a8b88 <<invalid sloc>> Inherited Implicit 1053
| `-NoThrowAttr 0x5608c11a8b30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a8c60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:106:1 __sinh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a8bc8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:73:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c11a8d08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a8e10 </usr/include/bits/mathcalls.h:75:17> col:17 implicit used tanh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a8f08 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11a8eb0 <<invalid sloc>> Implicit 1062
| `-NoThrowAttr 0x5608c11a8f78 <col:17> Implicit
|-FunctionDecl 0x5608c11a8fa0 prev 0x5608c11a8e10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:75:17 used tanh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a8d78 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:75:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c11a90a0 <<invalid sloc>> Inherited Implicit 1062
| `-NoThrowAttr 0x5608c11a9048 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a9178 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:108:1 __tanh 'double (double)' extern
| |-ParmVarDecl 0x5608c11a90e0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:75:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c11a9220 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a9478 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:79:22 sincos 'void (double, double *, double *)' extern
| |-ParmVarDecl 0x5608c11a9290 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:80:14> col:14 __x 'double'
| |-ParmVarDecl 0x5608c11a9310 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx 'double *'
| |-ParmVarDecl 0x5608c11a9390 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx 'double *'
| `-NoThrowAttr 0x5608c11a9530 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11a9740 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:110:1 __sincos 'void (double, double *, double *)' extern
| |-ParmVarDecl 0x5608c11a95a0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:80:14> col:14 __x 'double'
| |-ParmVarDecl 0x5608c11a9620 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx 'double *'
| |-ParmVarDecl 0x5608c11a96a0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx 'double *'
| `-NoThrowAttr 0x5608c11aa378 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11aa480 </usr/include/bits/mathcalls.h:85:17> col:17 implicit used acosh 'double (double)' extern
| |-ParmVarDecl 0x5608c11aa578 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11aa520 <<invalid sloc>> Implicit 930
| `-NoThrowAttr 0x5608c11aa5e8 <col:17> Implicit
|-FunctionDecl 0x5608c11aa610 prev 0x5608c11aa480 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:85:17 used acosh 'double (double)' extern
| |-ParmVarDecl 0x5608c11aa3e8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:85:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c11aa710 <<invalid sloc>> Inherited Implicit 930
| `-NoThrowAttr 0x5608c11aa6b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11aa7e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:112:1 __acosh 'double (double)' extern
| |-ParmVarDecl 0x5608c11aa750 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:85:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c11aa890 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11aa998 </usr/include/bits/mathcalls.h:87:17> col:17 implicit used asinh 'double (double)' extern
| |-ParmVarDecl 0x5608c11aaa90 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11aaa38 <<invalid sloc>> Implicit 936
| `-NoThrowAttr 0x5608c11aab00 <col:17> Implicit
|-FunctionDecl 0x5608c11aab28 prev 0x5608c11aa998 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:87:17 used asinh 'double (double)' extern
| |-ParmVarDecl 0x5608c11aa900 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:87:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c11aac28 <<invalid sloc>> Inherited Implicit 936
| `-NoThrowAttr 0x5608c11aabd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11aad00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:114:1 __asinh 'double (double)' extern
| |-ParmVarDecl 0x5608c11aac68 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:87:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c11aada8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11aaeb0 </usr/include/bits/mathcalls.h:89:17> col:17 implicit used atanh 'double (double)' extern
| |-ParmVarDecl 0x5608c11aafa8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11aaf50 <<invalid sloc>> Implicit 942
| `-NoThrowAttr 0x5608c11ab018 <col:17> Implicit
|-FunctionDecl 0x5608c11ab040 prev 0x5608c11aaeb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:89:17 used atanh 'double (double)' extern
| |-ParmVarDecl 0x5608c11aae18 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:89:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c11ab140 <<invalid sloc>> Inherited Implicit 942
| `-NoThrowAttr 0x5608c11ab0e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ab218 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:116:1 __atanh 'double (double)' extern
| |-ParmVarDecl 0x5608c11ab180 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:89:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c11ab2c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ab408 </usr/include/bits/mathcalls.h:95:17> col:17 implicit used exp 'double (double)' extern
| |-ParmVarDecl 0x5608c11ab500 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11ab4a8 <<invalid sloc>> Implicit 963
| `-NoThrowAttr 0x5608c11ab570 <col:17> Implicit
|-FunctionDecl 0x5608c11ab598 prev 0x5608c11ab408 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:95:17 used exp 'double (double)' extern
| |-ParmVarDecl 0x5608c11ab370 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:95:34> col:34 __x 'double'
| |-BuiltinAttr 0x5608c11ab698 <<invalid sloc>> Inherited Implicit 963
| `-NoThrowAttr 0x5608c11ab640 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ab770 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:118:1 __exp 'double (double)' extern
| |-ParmVarDecl 0x5608c11ab6d8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:95:34> col:34 __x 'double'
| `-NoThrowAttr 0x5608c11ab818 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ab9e0 </usr/include/bits/mathcalls.h:98:13> col:13 implicit used frexp 'double (double, int *)' extern
| |-ParmVarDecl 0x5608c11abad8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c11abb40 <<invalid sloc>> <invalid sloc> 'int *'
| |-BuiltinAttr 0x5608c11aba80 <<invalid sloc>> Implicit 912
| `-NoThrowAttr 0x5608c11abbb8 <col:13> Implicit
|-FunctionDecl 0x5608c11abbe0 prev 0x5608c11ab9e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:98:13 used frexp 'double (double, int *)' extern
| |-ParmVarDecl 0x5608c11ab888 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:98:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c11ab908 <col:37, col:42> col:42 __exponent 'int *'
| |-BuiltinAttr 0x5608c11abce8 <<invalid sloc>> Inherited Implicit 912
| `-NoThrowAttr 0x5608c11abc90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11abe48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:119:1 __frexp 'double (double, int *)' extern
| |-ParmVarDecl 0x5608c11abd28 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:98:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c11abda8 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c11abef8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ac0c0 </usr/include/bits/mathcalls.h:101:13> col:13 implicit used ldexp 'double (double, int)' extern
| |-ParmVarDecl 0x5608c11ac1b8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c11ac220 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c11ac160 <<invalid sloc>> Implicit 915
| `-NoThrowAttr 0x5608c11ac298 <col:13> Implicit
|-FunctionDecl 0x5608c11ac2c0 prev 0x5608c11ac0c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:101:13 used ldexp 'double (double, int)' extern
| |-ParmVarDecl 0x5608c11abf68 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:101:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c11abfe8 <col:37, col:41> col:41 __exponent 'int'
| |-BuiltinAttr 0x5608c11ac6c8 <<invalid sloc>> Inherited Implicit 915
| `-NoThrowAttr 0x5608c11ac670 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ac828 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:120:1 __ldexp 'double (double, int)' extern
| |-ParmVarDecl 0x5608c11ac708 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:101:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c11ac788 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c11ac8d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ac9e0 </usr/include/bits/mathcalls.h:104:17> col:17 implicit used log 'double (double)' extern
| |-ParmVarDecl 0x5608c11acad8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11aca80 <<invalid sloc>> Implicit 1002
| `-NoThrowAttr 0x5608c11acb48 <col:17> Implicit
|-FunctionDecl 0x5608c11acb70 prev 0x5608c11ac9e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:104:17 used log 'double (double)' extern
| |-ParmVarDecl 0x5608c11ac948 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:104:34> col:34 __x 'double'
| |-BuiltinAttr 0x5608c11acc70 <<invalid sloc>> Inherited Implicit 1002
| `-NoThrowAttr 0x5608c11acc18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11acd48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:122:1 __log 'double (double)' extern
| |-ParmVarDecl 0x5608c11accb0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:104:34> col:34 __x 'double'
| `-NoThrowAttr 0x5608c11acdf0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11acef8 </usr/include/bits/mathcalls.h:107:17> col:17 implicit used log10 'double (double)' extern
| |-ParmVarDecl 0x5608c11acff0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11acf98 <<invalid sloc>> Implicit 1005
| `-NoThrowAttr 0x5608c11ad060 <col:17> Implicit
|-FunctionDecl 0x5608c11ad088 prev 0x5608c11acef8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:107:17 used log10 'double (double)' extern
| |-ParmVarDecl 0x5608c11ace60 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:107:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c11ad188 <<invalid sloc>> Inherited Implicit 1005
| `-NoThrowAttr 0x5608c11ad130 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ad260 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:124:1 __log10 'double (double)' extern
| |-ParmVarDecl 0x5608c11ad1c8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:107:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c11ad308 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ad4d0 </usr/include/bits/mathcalls.h:110:13> col:13 implicit used modf 'double (double, double *)' extern
| |-ParmVarDecl 0x5608c11ad5c8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c11ad6c0 <<invalid sloc>> <invalid sloc> 'double *'
| |-BuiltinAttr 0x5608c11ad570 <<invalid sloc>> Implicit 918
| `-NoThrowAttr 0x5608c11ad738 <col:13> Implicit
|-FunctionDecl 0x5608c11ad760 prev 0x5608c11ad4d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:110:13 used modf 'double (double, double *)' extern
| |-ParmVarDecl 0x5608c11ad378 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:110:31> col:31 __x 'double'
| |-ParmVarDecl 0x5608c11ad3f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr 'double *'
| |-BuiltinAttr 0x5608c11ad868 <<invalid sloc>> Inherited Implicit 918
| `-NoThrowAttr 0x5608c11ad810 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ad9e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:384:76> <scratch space>:125:1 __modf 'double (double, double *)' extern
| |-ParmVarDecl 0x5608c11ad8a8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:110:31> col:31 __x 'double'
| |-ParmVarDecl 0x5608c11ad928 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr 'double *'
| |-NoThrowAttr 0x5608c11ada98 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c11adaf0 <line:384:57, /usr/include/bits/mathcalls.h:110:69> 2
|-FunctionDecl 0x5608c11adbd8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:114:17 used exp10 'double (double)' extern
| |-ParmVarDecl 0x5608c11adb40 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:114:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c11adc80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11add88 <<scratch space>:128:1> col:1 implicit __exp10 'double (double)' extern
| |-ParmVarDecl 0x5608c11ade80 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11ade28 <<invalid sloc>> Implicit 1143
| `-NoThrowAttr 0x5608c11adef0 <col:1> Implicit
|-FunctionDecl 0x5608c11adf18 prev 0x5608c11add88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:128:1 __exp10 'double (double)' extern
| |-ParmVarDecl 0x5608c11adcf0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:114:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c11ae018 <<invalid sloc>> Inherited Implicit 1143
| `-NoThrowAttr 0x5608c11adfc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ae0f0 </usr/include/bits/mathcalls.h:119:17> col:17 implicit used expm1 'double (double)' extern
| |-ParmVarDecl 0x5608c11ae1e8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11ae190 <<invalid sloc>> Implicit 969
| `-NoThrowAttr 0x5608c11ae258 <col:17> Implicit
|-FunctionDecl 0x5608c11ae280 prev 0x5608c11ae0f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:119:17 used expm1 'double (double)' extern
| |-ParmVarDecl 0x5608c11ae058 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:119:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c11ae380 <<invalid sloc>> Inherited Implicit 969
| `-NoThrowAttr 0x5608c11ae328 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ae458 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:130:1 __expm1 'double (double)' extern
| |-ParmVarDecl 0x5608c11ae3c0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:119:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c11ae500 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11ae608 </usr/include/bits/mathcalls.h:122:17> col:17 implicit used log1p 'double (double)' extern
| |-ParmVarDecl 0x5608c11afe78 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11afe20 <<invalid sloc>> Implicit 1008
| `-NoThrowAttr 0x5608c11afee8 <col:17> Implicit
|-FunctionDecl 0x5608c11aff10 prev 0x5608c11ae608 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:122:17 used log1p 'double (double)' extern
| |-ParmVarDecl 0x5608c11ae570 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:122:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c11b0010 <<invalid sloc>> Inherited Implicit 1008
| `-NoThrowAttr 0x5608c11affb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b00e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:132:1 __log1p 'double (double)' extern
| |-ParmVarDecl 0x5608c11b0050 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:122:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c11b0190 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b0298 </usr/include/bits/mathcalls.h:125:13> col:13 implicit used logb 'double (double)' extern
| |-ParmVarDecl 0x5608c11b0390 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11b0338 <<invalid sloc>> Implicit 1014
| `-NoThrowAttr 0x5608c11b0400 <col:13> Implicit
|-FunctionDecl 0x5608c11b0428 prev 0x5608c11b0298 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:125:13 used logb 'double (double)' extern
| |-ParmVarDecl 0x5608c11b0200 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:125:31> col:31 __x 'double'
| |-BuiltinAttr 0x5608c11b0528 <<invalid sloc>> Inherited Implicit 1014
| `-NoThrowAttr 0x5608c11b04d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b0600 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:133:1 __logb 'double (double)' extern
| |-ParmVarDecl 0x5608c11b0568 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:125:31> col:31 __x 'double'
| `-NoThrowAttr 0x5608c11b06a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b07b0 </usr/include/bits/mathcalls.h:130:17> col:17 implicit used exp2 'double (double)' extern
| |-ParmVarDecl 0x5608c11b08a8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11b0850 <<invalid sloc>> Implicit 966
| `-NoThrowAttr 0x5608c11b0918 <col:17> Implicit
|-FunctionDecl 0x5608c11b0940 prev 0x5608c11b07b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:130:17 used exp2 'double (double)' extern
| |-ParmVarDecl 0x5608c11b0718 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:130:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c11b0a40 <<invalid sloc>> Inherited Implicit 966
| `-NoThrowAttr 0x5608c11b09e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b0b18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:135:1 __exp2 'double (double)' extern
| |-ParmVarDecl 0x5608c11b0a80 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:130:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c11b0bc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b0cc8 </usr/include/bits/mathcalls.h:133:17> col:17 implicit used log2 'double (double)' extern
| |-ParmVarDecl 0x5608c11b0e30 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11b0d68 <<invalid sloc>> Implicit 1011
| `-NoThrowAttr 0x5608c11b0ea0 <col:17> Implicit
|-FunctionDecl 0x5608c11b0ec8 prev 0x5608c11b0cc8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:133:17 used log2 'double (double)' extern
| |-ParmVarDecl 0x5608c11b0c30 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:133:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c11b0fc8 <<invalid sloc>> Inherited Implicit 1011
| `-NoThrowAttr 0x5608c11b0f70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b10a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:137:1 __log2 'double (double)' extern
| |-ParmVarDecl 0x5608c11b1008 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:133:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c11b1148 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b12d8 </usr/include/bits/mathcalls.h:140:17> col:17 implicit used pow 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11b13d0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c11b1438 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11b1378 <<invalid sloc>> Implicit 924
| `-NoThrowAttr 0x5608c11b14b0 <col:17> Implicit
|-FunctionDecl 0x5608c11b14d8 prev 0x5608c11b12d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:140:17 used pow 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11b11b8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:140:34> col:34 __x 'double'
| |-ParmVarDecl 0x5608c11b1238 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:140:49> col:49 __y 'double'
| |-BuiltinAttr 0x5608c11b15e0 <<invalid sloc>> Inherited Implicit 924
| `-NoThrowAttr 0x5608c11b1588 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b1740 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:139:1 __pow 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11b1620 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:140:34> col:34 __x 'double'
| |-ParmVarDecl 0x5608c11b16a0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:140:49> col:49 __y 'double'
| `-NoThrowAttr 0x5608c11b17f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b18f8 </usr/include/bits/mathcalls.h:143:13> col:13 implicit used sqrt 'double (double)' extern
| |-ParmVarDecl 0x5608c11b19f0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11b1998 <<invalid sloc>> Implicit 1056
| `-NoThrowAttr 0x5608c11b1a60 <col:13> Implicit
|-FunctionDecl 0x5608c11b1a88 prev 0x5608c11b18f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:143:13 used sqrt 'double (double)' extern
| |-ParmVarDecl 0x5608c11b1860 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:143:31> col:31 __x 'double'
| |-BuiltinAttr 0x5608c11b1b88 <<invalid sloc>> Inherited Implicit 1056
| `-NoThrowAttr 0x5608c11b1b30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11b1c60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:140:1 __sqrt 'double (double)' extern
| |-ParmVarDecl 0x5608c11b1bc8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:143:31> col:31 __x 'double'
| `-NoThrowAttr 0x5608c11b1d08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1243cb0 </usr/include/bits/mathcalls.h:147:17> col:17 implicit used hypot 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1243da8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c1243e10 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1243d50 <<invalid sloc>> Implicit 987
| `-NoThrowAttr 0x5608c1243e88 <col:17> Implicit
|-FunctionDecl 0x5608c1243eb0 prev 0x5608c1243cb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:147:17 used hypot 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11b1d78 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:147:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1243c10 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:147:51> col:51 __y 'double'
| |-BuiltinAttr 0x5608c1243fb8 <<invalid sloc>> Inherited Implicit 987
| `-NoThrowAttr 0x5608c1243f60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1244118 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:142:1 __hypot 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1243ff8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:147:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1244078 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:147:51> col:51 __y 'double'
| `-NoThrowAttr 0x5608c12441c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12442d0 </usr/include/bits/mathcalls.h:152:17> col:17 implicit used cbrt 'double (double)' extern
| |-ParmVarDecl 0x5608c12443c8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1244370 <<invalid sloc>> Implicit 945
| |-NoThrowAttr 0x5608c1244438 <col:17> Implicit
| `-ConstAttr 0x5608c1244460 <col:17> Implicit
|-FunctionDecl 0x5608c1244488 prev 0x5608c12442d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:152:17 used cbrt 'double (double)' extern
| |-ParmVarDecl 0x5608c1244238 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:152:35> col:35 __x 'double'
| |-BuiltinAttr 0x5608c1244588 <<invalid sloc>> Inherited Implicit 945
| |-ConstAttr 0x5608c12445b0 <col:17> Inherited Implicit
| `-NoThrowAttr 0x5608c1244530 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1244688 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:144:1 __cbrt 'double (double)' extern
| |-ParmVarDecl 0x5608c12445f0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:152:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c1244730 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1244838 </usr/include/bits/mathcalls.h:159:14> col:14 implicit used ceil 'double (double)' extern
| |-ParmVarDecl 0x5608c1244930 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c12448d8 <<invalid sloc>> Implicit 948
| |-NoThrowAttr 0x5608c12449a0 <col:14> Implicit
| `-ConstAttr 0x5608c12449c8 <col:14> Implicit
|-FunctionDecl 0x5608c12449f0 prev 0x5608c1244838 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:159:14 used ceil 'double (double)' extern
| |-ParmVarDecl 0x5608c12447a0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:159:32> col:32 __x 'double'
| |-BuiltinAttr 0x5608c1244b18 <<invalid sloc>> Inherited Implicit 948
| |-NoThrowAttr 0x5608c1244a98 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1244af0 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c122bca0 </usr/include/math.h:297:3, line:295:79> <scratch space>:145:1 __ceil 'double (double)' extern
| |-ParmVarDecl 0x5608c1244b58 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:159:32> col:32 __x 'double'
| |-NoThrowAttr 0x5608c122bd48 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c122bda0 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c122be78 <line:162:14> col:14 implicit used fabs 'double (double)' extern
| |-ParmVarDecl 0x5608c122bf70 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c122bf18 <<invalid sloc>> Implicit 900
| |-NoThrowAttr 0x5608c122bfe0 <col:14> Implicit
| `-ConstAttr 0x5608c122c008 <col:14> Implicit
|-FunctionDecl 0x5608c122c030 prev 0x5608c122be78 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:162:14 used fabs 'double (double)' extern
| |-ParmVarDecl 0x5608c122bde0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:162:32> col:32 __x 'double'
| |-BuiltinAttr 0x5608c122c158 <<invalid sloc>> Inherited Implicit 900
| |-NoThrowAttr 0x5608c122c0d8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c122c130 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c122c230 </usr/include/math.h:297:3, line:295:79> <scratch space>:146:1 __fabs 'double (double)' extern
| |-ParmVarDecl 0x5608c122c198 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:162:32> col:32 __x 'double'
| |-NoThrowAttr 0x5608c122c2d8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c122c330 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c122c408 <line:165:14> col:14 implicit used floor 'double (double)' extern
| |-ParmVarDecl 0x5608c122c500 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c122c4a8 <<invalid sloc>> Implicit 975
| |-NoThrowAttr 0x5608c122c570 <col:14> Implicit
| `-ConstAttr 0x5608c122c598 <col:14> Implicit
|-FunctionDecl 0x5608c122c5c0 prev 0x5608c122c408 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:165:14 used floor 'double (double)' extern
| |-ParmVarDecl 0x5608c122c370 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:165:33> col:33 __x 'double'
| |-BuiltinAttr 0x5608c122c6e8 <<invalid sloc>> Inherited Implicit 975
| |-NoThrowAttr 0x5608c122c668 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c122c6c0 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c122c7c0 </usr/include/math.h:297:3, line:295:79> <scratch space>:147:1 __floor 'double (double)' extern
| |-ParmVarDecl 0x5608c122c728 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:165:33> col:33 __x 'double'
| |-NoThrowAttr 0x5608c122c868 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c122c8c0 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c122ca20 <line:168:13> col:13 implicit used fmod 'double (double, double)' extern
| |-ParmVarDecl 0x5608c122cb18 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c122cb80 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c122cac0 <<invalid sloc>> Implicit 909
| `-NoThrowAttr 0x5608c122cbf8 <col:13> Implicit
|-FunctionDecl 0x5608c122f2b0 prev 0x5608c122ca20 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:168:13 used fmod 'double (double, double)' extern
| |-ParmVarDecl 0x5608c122c900 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:168:31> col:31 __x 'double'
| |-ParmVarDecl 0x5608c122c980 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:168:46> col:46 __y 'double'
| |-BuiltinAttr 0x5608c122f3b8 <<invalid sloc>> Inherited Implicit 909
| `-NoThrowAttr 0x5608c122f360 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c122f518 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:148:1 __fmod 'double (double, double)' extern
| |-ParmVarDecl 0x5608c122f3f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:168:31> col:31 __x 'double'
| |-ParmVarDecl 0x5608c122f478 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:168:46> col:46 __y 'double'
| `-NoThrowAttr 0x5608c122f5c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c122f6d0 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:178:29> line:177:23 isinf 'int (double)' extern
| |-ParmVarDecl 0x5608c122f638 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:177:42> col:42 __value 'double'
| |-NoThrowAttr 0x5608c122f778 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c122f7d0 </usr/include/bits/mathcalls.h:178:19>
|-FunctionDecl 0x5608c122f8a8 <line:183:23> col:23 implicit finite 'int (double)' extern
| |-ParmVarDecl 0x5608c122f9a0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c122f948 <<invalid sloc>> Implicit 903
| |-NoThrowAttr 0x5608c122fa10 <col:23> Implicit
| `-ConstAttr 0x5608c122fa38 <col:23> Implicit
|-FunctionDecl 0x5608c122fa60 prev 0x5608c122f8a8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:184:29> line:183:23 finite 'int (double)' extern
| |-ParmVarDecl 0x5608c122f810 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:183:43> col:43 __value 'double'
| |-BuiltinAttr 0x5608c122fb88 <<invalid sloc>> Inherited Implicit 903
| |-NoThrowAttr 0x5608c122fb08 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c122fb60 </usr/include/bits/mathcalls.h:184:19>
|-FunctionDecl 0x5608c122fce8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:187:13 used drem 'double (double, double)' extern
| |-ParmVarDecl 0x5608c122fbc8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:187:31> col:31 __x 'double'
| |-ParmVarDecl 0x5608c122fc48 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:187:46> col:46 __y 'double'
| `-NoThrowAttr 0x5608c122fd98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c122ff28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:149:1 __drem 'double (double, double)' extern
| |-ParmVarDecl 0x5608c122fe08 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:187:31> col:31 __x 'double'
| |-ParmVarDecl 0x5608c122fe88 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:187:46> col:46 __y 'double'
| `-NoThrowAttr 0x5608c122ffd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12300e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:191:13 used significand 'double (double)' extern
| |-ParmVarDecl 0x5608c1230048 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:191:38> col:38 __x 'double'
| `-NoThrowAttr 0x5608c1230188 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12302c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:150:1 __significand 'double (double)' extern
| |-ParmVarDecl 0x5608c12301f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:191:38> col:38 __x 'double'
| `-NoThrowAttr 0x5608c1230368 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12304f8 </usr/include/bits/mathcalls.h:198:14> col:14 implicit used copysign 'double (double, double)' extern
| |-ParmVarDecl 0x5608c12305f0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c1230658 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1230598 <<invalid sloc>> Implicit 897
| |-NoThrowAttr 0x5608c12306d0 <col:14> Implicit
| `-ConstAttr 0x5608c12306f8 <col:14> Implicit
|-FunctionDecl 0x5608c1230720 prev 0x5608c12304f8 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:198:14 used copysign 'double (double, double)' extern
| |-ParmVarDecl 0x5608c12303d8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:198:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1230458 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:198:51> col:51 __y 'double'
| |-BuiltinAttr 0x5608c1230850 <<invalid sloc>> Inherited Implicit 897
| |-NoThrowAttr 0x5608c12307d0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1230828 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c12309b0 </usr/include/math.h:297:3, line:295:79> <scratch space>:151:1 __copysign 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1230890 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:198:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1230910 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:198:51> col:51 __y 'double'
| |-NoThrowAttr 0x5608c1230a60 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1230ab8 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c1230b90 <line:203:13> col:13 implicit nan 'double (const char *)' extern
| |-ParmVarDecl 0x5608c1230c88 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x5608c1230c30 <<invalid sloc>> Implicit 921
| |-NoThrowAttr 0x5608c1230cf8 <col:13> Implicit
| `-PureAttr 0x5608c1230d20 <col:13> Implicit
|-FunctionDecl 0x5608c1230d48 prev 0x5608c1230b90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:203:13 nan 'double (const char *)' extern
| |-ParmVarDecl 0x5608c1230af8 <col:20, col:32> col:32 __tagb 'const char *'
| |-BuiltinAttr 0x5608c1230e48 <<invalid sloc>> Inherited Implicit 921
| |-PureAttr 0x5608c1230e70 <col:13> Inherited Implicit
| `-NoThrowAttr 0x5608c1230df0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1230f48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:152:1 __nan 'double (const char *)' extern
| |-ParmVarDecl 0x5608c1230eb0 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c1230ff0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12310f8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:214:29> line:213:23 isnan 'int (double)' extern
| |-ParmVarDecl 0x5608c1231060 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:213:42> col:42 __value 'double'
| |-NoThrowAttr 0x5608c12311a0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12311f8 </usr/include/bits/mathcalls.h:214:19>
|-FunctionDecl 0x5608c1231300 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:220:13 used j0 'double (double)' extern
| |-ParmVarDecl 0x5608c1231238 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:220:28 'double'
| `-NoThrowAttr 0x5608c12313a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12314b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:153:1 __j0 'double (double)' extern
| |-ParmVarDecl 0x5608c1231418 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:220:28 'double'
| `-NoThrowAttr 0x5608c1231558 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1231660 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:221:13 used j1 'double (double)' extern
| |-ParmVarDecl 0x5608c12315c8 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:221:28 'double'
| `-NoThrowAttr 0x5608c1231708 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1231810 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:154:1 __j1 'double (double)' extern
| |-ParmVarDecl 0x5608c1231778 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:221:28 'double'
| `-NoThrowAttr 0x5608c12318b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1231a80 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:222:13 used jn 'double (int, double)' extern
| |-ParmVarDecl 0x5608c1231928 <col:19> col:22 'int'
| |-ParmVarDecl 0x5608c12319a8 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:222:33 'double'
| `-NoThrowAttr 0x5608c1231b30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1231cc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:155:1 __jn 'double (int, double)' extern
| |-ParmVarDecl 0x5608c1231ba0 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c1231c20 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:222:33 'double'
| `-NoThrowAttr 0x5608c1231d70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1231e78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:223:13 used y0 'double (double)' extern
| |-ParmVarDecl 0x5608c1231de0 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:223:28 'double'
| `-NoThrowAttr 0x5608c1231f20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1232028 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:156:1 __y0 'double (double)' extern
| |-ParmVarDecl 0x5608c1231f90 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:223:28 'double'
| `-NoThrowAttr 0x5608c12320d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12321d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:224:13 used y1 'double (double)' extern
| |-ParmVarDecl 0x5608c1232140 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:224:28 'double'
| `-NoThrowAttr 0x5608c1232280 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12323c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:157:1 __y1 'double (double)' extern
| |-ParmVarDecl 0x5608c1232328 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:224:28 'double'
| `-NoThrowAttr 0x5608c1232468 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12325f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:225:13 used yn 'double (int, double)' extern
| |-ParmVarDecl 0x5608c12324d8 <col:19> col:22 'int'
| |-ParmVarDecl 0x5608c1232558 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:225:33 'double'
| `-NoThrowAttr 0x5608c12326a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1232838 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:158:1 __yn 'double (int, double)' extern
| |-ParmVarDecl 0x5608c1232718 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c1232798 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:225:33 'double'
| `-NoThrowAttr 0x5608c12328e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12329f0 </usr/include/bits/mathcalls.h:231:17> col:17 implicit used erf 'double (double)' extern
| |-ParmVarDecl 0x5608c1232ae8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1232a90 <<invalid sloc>> Implicit 957
| `-NoThrowAttr 0x5608c1232b58 <col:17> Implicit
|-FunctionDecl 0x5608c1232b80 prev 0x5608c12329f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:231:17 used erf 'double (double)' extern
| |-ParmVarDecl 0x5608c1232958 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:231:33 'double'
| |-BuiltinAttr 0x5608c1232c80 <<invalid sloc>> Inherited Implicit 957
| `-NoThrowAttr 0x5608c1232c28 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1232d58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:160:1 __erf 'double (double)' extern
| |-ParmVarDecl 0x5608c1232cc0 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:231:33 'double'
| `-NoThrowAttr 0x5608c1232e00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1232f08 </usr/include/bits/mathcalls.h:232:17> col:17 implicit used erfc 'double (double)' extern
| |-ParmVarDecl 0x5608c1233000 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1232fa8 <<invalid sloc>> Implicit 960
| `-NoThrowAttr 0x5608c1233070 <col:17> Implicit
|-FunctionDecl 0x5608c1233098 prev 0x5608c1232f08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:232:17 used erfc 'double (double)' extern
| |-ParmVarDecl 0x5608c1232e70 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:232:34 'double'
| |-BuiltinAttr 0x5608c1233198 <<invalid sloc>> Inherited Implicit 960
| `-NoThrowAttr 0x5608c1233140 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12332f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:162:1 __erfc 'double (double)' extern
| |-ParmVarDecl 0x5608c12331d8 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:232:34 'double'
| `-NoThrowAttr 0x5608c1233398 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12334a0 </usr/include/bits/mathcalls.h:233:13> col:13 implicit used lgamma 'double (double)' extern
| |-ParmVarDecl 0x5608c1233598 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1233540 <<invalid sloc>> Implicit 993
| `-NoThrowAttr 0x5608c1233608 <col:13> Implicit
|-FunctionDecl 0x5608c1233630 prev 0x5608c12334a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:233:13 used lgamma 'double (double)' extern
| |-ParmVarDecl 0x5608c1233408 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:233:32 'double'
| |-BuiltinAttr 0x5608c1233730 <<invalid sloc>> Inherited Implicit 993
| `-NoThrowAttr 0x5608c12336d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1233808 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:163:1 __lgamma 'double (double)' extern
| |-ParmVarDecl 0x5608c1233770 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:233:32 'double'
| `-NoThrowAttr 0x5608c12338b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12339b8 </usr/include/bits/mathcalls.h:238:13> col:13 implicit used tgamma 'double (double)' extern
| |-ParmVarDecl 0x5608c1233ab0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1233a58 <<invalid sloc>> Implicit 1065
| `-NoThrowAttr 0x5608c1233b20 <col:13> Implicit
|-FunctionDecl 0x5608c1233b48 prev 0x5608c12339b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:238:13 used tgamma 'double (double)' extern
| |-ParmVarDecl 0x5608c1233920 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:238:32 'double'
| |-BuiltinAttr 0x5608c1233c48 <<invalid sloc>> Inherited Implicit 1065
| `-NoThrowAttr 0x5608c1233bf0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1233d20 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:164:1 __tgamma 'double (double)' extern
| |-ParmVarDecl 0x5608c1233c88 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:238:32 'double'
| `-NoThrowAttr 0x5608c1233dc8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1233ed0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:244:13 used gamma 'double (double)' extern
| |-ParmVarDecl 0x5608c1233e38 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:244:31 'double'
| `-NoThrowAttr 0x5608c1233f78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1234080 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:165:1 __gamma 'double (double)' extern
| |-ParmVarDecl 0x5608c1233fe8 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:244:31 'double'
| `-NoThrowAttr 0x5608c1234128 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1234300 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:166:1 used lgamma_r 'double (double, int *)' extern
| |-ParmVarDecl 0x5608c1234198 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:252:34 'double'
| |-ParmVarDecl 0x5608c1234218 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12343b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1234540 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:168:1 __lgamma_r 'double (double, int *)' extern
| |-ParmVarDecl 0x5608c1234420 </usr/include/math.h:308:20> /usr/include/bits/mathcalls.h:252:34 'double'
| |-ParmVarDecl 0x5608c12344a0 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12345f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12346f8 </usr/include/bits/mathcalls.h:259:13> col:13 implicit used rint 'double (double)' extern
| |-ParmVarDecl 0x5608c12347f0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1234798 <<invalid sloc>> Implicit 1038
| |-NoThrowAttr 0x5608c1234860 <col:13> Implicit
| `-ConstAttr 0x5608c1234888 <col:13> Implicit
|-FunctionDecl 0x5608c12348b0 prev 0x5608c12346f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:259:13 used rint 'double (double)' extern
| |-ParmVarDecl 0x5608c1234660 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:259:31> col:31 __x 'double'
| |-BuiltinAttr 0x5608c12349b0 <<invalid sloc>> Inherited Implicit 1038
| |-ConstAttr 0x5608c12349d8 <col:13> Inherited Implicit
| `-NoThrowAttr 0x5608c1234958 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1234ab0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:169:1 __rint 'double (double)' extern
| |-ParmVarDecl 0x5608c1234a18 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:259:31> col:31 __x 'double'
| `-NoThrowAttr 0x5608c1234b58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1234ce8 </usr/include/bits/mathcalls.h:262:13> col:13 implicit used nextafter 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1234de0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c1234e48 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1234d88 <<invalid sloc>> Implicit 1026
| `-NoThrowAttr 0x5608c1234ec0 <col:13> Implicit
|-FunctionDecl 0x5608c1234ee8 prev 0x5608c1234ce8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:262:13 used nextafter 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1234bc8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:262:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1234c48 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:262:51> col:51 __y 'double'
| |-BuiltinAttr 0x5608c1234ff0 <<invalid sloc>> Inherited Implicit 1026
| `-NoThrowAttr 0x5608c1234f98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1235150 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:170:1 __nextafter 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1235030 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:262:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c12350b0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:262:51> col:51 __y 'double'
| `-NoThrowAttr 0x5608c1235200 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d2db0 </usr/include/bits/mathcalls.h:264:13> col:13 implicit used nexttoward 'double (double, long double)' extern
| |-ParmVarDecl 0x5608c11d2ea8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c11d2f10 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c11d2e50 <<invalid sloc>> Implicit 1029
| `-NoThrowAttr 0x5608c11d2f88 <col:13> Implicit
|-FunctionDecl 0x5608c11d2fb0 prev 0x5608c11d2db0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:264:13 used nexttoward 'double (double, long double)' extern
| |-ParmVarDecl 0x5608c1235270 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:264:37> col:37 __x 'double'
| |-ParmVarDecl 0x5608c11d2cd0 <col:42, col:54> col:54 __y 'long double'
| |-BuiltinAttr 0x5608c11d30b8 <<invalid sloc>> Inherited Implicit 1029
| `-NoThrowAttr 0x5608c11d3060 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d3218 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:171:1 __nexttoward 'double (double, long double)' extern
| |-ParmVarDecl 0x5608c11d30f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:264:37> col:37 __x 'double'
| |-ParmVarDecl 0x5608c11d3178 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c11d32c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d33d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:269:13 nextdown 'double (double)' extern
| |-ParmVarDecl 0x5608c11d3338 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:269:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c11d3478 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d3580 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:173:1 __nextdown 'double (double)' extern
| |-ParmVarDecl 0x5608c11d34e8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:269:35> col:35 __x 'double'
| `-NoThrowAttr 0x5608c11d3628 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d3730 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:271:13 nextup 'double (double)' extern
| |-ParmVarDecl 0x5608c11d3698 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:271:33> col:33 __x 'double'
| `-NoThrowAttr 0x5608c11d37d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d38e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:174:1 __nextup 'double (double)' extern
| |-ParmVarDecl 0x5608c11d3848 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:271:33> col:33 __x 'double'
| `-NoThrowAttr 0x5608c11d3988 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c11d3b18 </usr/include/bits/mathcalls.h:275:13> col:13 implicit used remainder 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11d3c10 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c1239320 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c11d3bb8 <<invalid sloc>> Implicit 1032
| `-NoThrowAttr 0x5608c1239398 <col:13> Implicit
|-FunctionDecl 0x5608c12393c0 prev 0x5608c11d3b18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:275:13 used remainder 'double (double, double)' extern
| |-ParmVarDecl 0x5608c11d39f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:275:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c11d3a78 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:275:51> col:51 __y 'double'
| |-BuiltinAttr 0x5608c12394c8 <<invalid sloc>> Inherited Implicit 1032
| `-NoThrowAttr 0x5608c1239470 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1239628 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:175:1 __remainder 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1239508 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:275:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1239588 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:275:51> col:51 __y 'double'
| `-NoThrowAttr 0x5608c12396d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1239868 </usr/include/bits/mathcalls.h:279:13> col:13 implicit scalbn 'double (double, int)' extern
| |-ParmVarDecl 0x5608c1239960 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c12399c8 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c1239908 <<invalid sloc>> Implicit 1047
| `-NoThrowAttr 0x5608c1239a40 <col:13> Implicit
|-FunctionDecl 0x5608c1239a68 prev 0x5608c1239868 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:279:13 scalbn 'double (double, int)' extern
| |-ParmVarDecl 0x5608c1239748 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:279:33> col:33 __x 'double'
| |-ParmVarDecl 0x5608c12397c8 <col:38, col:42> col:42 __n 'int'
| |-BuiltinAttr 0x5608c1239b70 <<invalid sloc>> Inherited Implicit 1047
| `-NoThrowAttr 0x5608c1239b18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1239cd0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:176:1 __scalbn 'double (double, int)' extern
| |-ParmVarDecl 0x5608c1239bb0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:279:33> col:33 __x 'double'
| |-ParmVarDecl 0x5608c1239c30 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c1239d80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1239e88 </usr/include/bits/mathcalls.h:283:17> col:17 implicit ilogb 'int (double)' extern
| |-ParmVarDecl 0x5608c1239f80 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c1239f28 <<invalid sloc>> Implicit 990
| `-NoThrowAttr 0x5608c1239ff0 <col:17> Implicit
|-FunctionDecl 0x5608c123a018 prev 0x5608c1239e88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:283:17 ilogb 'int (double)' extern
| |-ParmVarDecl 0x5608c1239df0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:283:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c123a118 <<invalid sloc>> Inherited Implicit 990
| `-NoThrowAttr 0x5608c123a0c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123a1f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:177:1 __ilogb 'int (double)' extern
| |-ParmVarDecl 0x5608c123a158 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:283:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c123a298 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123a400 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:288:23 llogb 'long (double)' extern
| |-ParmVarDecl 0x5608c123a330 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:288:42> col:42 __x 'double'
| `-NoThrowAttr 0x5608c123a4a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123a5b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:179:1 __llogb 'long (double)' extern
| |-ParmVarDecl 0x5608c123a518 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:288:42> col:42 __x 'double'
| `-NoThrowAttr 0x5608c123a658 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123a820 </usr/include/bits/mathcalls.h:293:13> col:13 implicit used scalbln 'double (double, long)' extern
| |-ParmVarDecl 0x5608c123a918 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c123a980 <<invalid sloc>> <invalid sloc> 'long'
| |-BuiltinAttr 0x5608c123a8c0 <<invalid sloc>> Implicit 1044
| `-NoThrowAttr 0x5608c123a9f8 <col:13> Implicit
|-FunctionDecl 0x5608c123aa20 prev 0x5608c123a820 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:293:13 used scalbln 'double (double, long)' extern
| |-ParmVarDecl 0x5608c123a6c8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:293:34> col:34 __x 'double'
| |-ParmVarDecl 0x5608c123a748 <col:39, col:48> col:48 __n 'long'
| |-BuiltinAttr 0x5608c123ab28 <<invalid sloc>> Inherited Implicit 1044
| `-NoThrowAttr 0x5608c123aad0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123ac88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:180:1 __scalbln 'double (double, long)' extern
| |-ParmVarDecl 0x5608c123ab68 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:293:34> col:34 __x 'double'
| |-ParmVarDecl 0x5608c123abe8 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c123ad38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123ae40 </usr/include/bits/mathcalls.h:297:13> col:13 implicit used nearbyint 'double (double)' extern
| |-ParmVarDecl 0x5608c123af38 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123aee0 <<invalid sloc>> Implicit 1023
| |-NoThrowAttr 0x5608c123afa8 <col:13> Implicit
| `-ConstAttr 0x5608c123afd0 <col:13> Implicit
|-FunctionDecl 0x5608c123aff8 prev 0x5608c123ae40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:297:13 used nearbyint 'double (double)' extern
| |-ParmVarDecl 0x5608c123ada8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:297:36> col:36 __x 'double'
| |-BuiltinAttr 0x5608c123b0f8 <<invalid sloc>> Inherited Implicit 1023
| |-ConstAttr 0x5608c123b120 <col:13> Inherited Implicit
| `-NoThrowAttr 0x5608c123b0a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123b1f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:181:1 __nearbyint 'double (double)' extern
| |-ParmVarDecl 0x5608c123b160 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:297:36> col:36 __x 'double'
| `-NoThrowAttr 0x5608c123b2a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123b3d8 </usr/include/bits/mathcalls.h:301:14> col:14 implicit used round 'double (double)' extern
| |-ParmVarDecl 0x5608c123b4d0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123b478 <<invalid sloc>> Implicit 1041
| |-NoThrowAttr 0x5608c123b540 <col:14> Implicit
| `-ConstAttr 0x5608c123b568 <col:14> Implicit
|-FunctionDecl 0x5608c123b590 prev 0x5608c123b3d8 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:301:14 used round 'double (double)' extern
| |-ParmVarDecl 0x5608c123b340 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:301:33> col:33 __x 'double'
| |-BuiltinAttr 0x5608c123b6b8 <<invalid sloc>> Inherited Implicit 1041
| |-NoThrowAttr 0x5608c123b638 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c123b690 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c123b790 </usr/include/math.h:297:3, line:295:79> <scratch space>:182:1 __round 'double (double)' extern
| |-ParmVarDecl 0x5608c123b6f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:301:33> col:33 __x 'double'
| |-NoThrowAttr 0x5608c123b838 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c123b890 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c123b968 <line:305:14> col:14 implicit used trunc 'double (double)' extern
| |-ParmVarDecl 0x5608c123ba60 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123ba08 <<invalid sloc>> Implicit 1068
| |-NoThrowAttr 0x5608c123bad0 <col:14> Implicit
| `-ConstAttr 0x5608c123baf8 <col:14> Implicit
|-FunctionDecl 0x5608c123bb20 prev 0x5608c123b968 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:305:14 used trunc 'double (double)' extern
| |-ParmVarDecl 0x5608c123b8d0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:305:33> col:33 __x 'double'
| |-BuiltinAttr 0x5608c123bc48 <<invalid sloc>> Inherited Implicit 1068
| |-NoThrowAttr 0x5608c123bbc8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c123bc20 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c123bd20 </usr/include/math.h:297:3, line:295:79> <scratch space>:183:1 __trunc 'double (double)' extern
| |-ParmVarDecl 0x5608c123bc88 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:305:33> col:33 __x 'double'
| |-NoThrowAttr 0x5608c123bdc8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c123be20 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c123c050 <line:310:13> col:13 implicit remquo 'double (double, double, int *)' extern
| |-ParmVarDecl 0x5608c123c148 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c123c1b0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c123c218 <<invalid sloc>> <invalid sloc> 'int *'
| |-BuiltinAttr 0x5608c123c0f0 <<invalid sloc>> Implicit 1035
| `-NoThrowAttr 0x5608c123c298 <col:13> Implicit
|-FunctionDecl 0x5608c123ccc0 prev 0x5608c123c050 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:310:13 remquo 'double (double, double, int *)' extern
| |-ParmVarDecl 0x5608c123be60 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:310:33> col:33 __x 'double'
| |-ParmVarDecl 0x5608c123bee0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:310:48> col:48 __y 'double'
| |-ParmVarDecl 0x5608c123bf60 <col:53, col:58> col:58 __quo 'int *'
| |-BuiltinAttr 0x5608c123cdd0 <<invalid sloc>> Inherited Implicit 1035
| `-NoThrowAttr 0x5608c123cd78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123cfb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:184:1 __remquo 'double (double, double, int *)' extern
| |-ParmVarDecl 0x5608c123ce10 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:310:33> col:33 __x 'double'
| |-ParmVarDecl 0x5608c123ce90 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:310:48> col:48 __y 'double'
| |-ParmVarDecl 0x5608c123cf10 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c123d070 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123d178 </usr/include/bits/mathcalls.h:317:22> col:22 implicit lrint 'long (double)' extern
| |-ParmVarDecl 0x5608c123d270 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123d218 <<invalid sloc>> Implicit 1017
| `-NoThrowAttr 0x5608c123d2e0 <col:22> Implicit
|-FunctionDecl 0x5608c123d308 prev 0x5608c123d178 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:317:22 lrint 'long (double)' extern
| |-ParmVarDecl 0x5608c123d0e0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:317:41> col:41 __x 'double'
| |-BuiltinAttr 0x5608c123d408 <<invalid sloc>> Inherited Implicit 1017
| `-NoThrowAttr 0x5608c123d3b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123d4e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:185:1 __lrint 'long (double)' extern
| |-ParmVarDecl 0x5608c123d448 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:317:41> col:41 __x 'double'
| `-NoThrowAttr 0x5608c123d588 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123d6c0 </usr/include/bits/mathcalls.h:319:27> col:27 implicit llrint 'long long (double)' extern
| |-ParmVarDecl 0x5608c123d7b8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123d760 <<invalid sloc>> Implicit 996
| `-NoThrowAttr 0x5608c123d828 <col:27> Implicit
|-FunctionDecl 0x5608c123d850 prev 0x5608c123d6c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:319:27 llrint 'long long (double)' extern
| |-ParmVarDecl 0x5608c123d5f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:319:47> col:47 __x 'double'
| |-BuiltinAttr 0x5608c123d950 <<invalid sloc>> Inherited Implicit 996
| `-NoThrowAttr 0x5608c123d8f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123da28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:186:1 __llrint 'long long (double)' extern
| |-ParmVarDecl 0x5608c123d990 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:319:47> col:47 __x 'double'
| `-NoThrowAttr 0x5608c123dad0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123dbd8 </usr/include/bits/mathcalls.h:323:22> col:22 implicit lround 'long (double)' extern
| |-ParmVarDecl 0x5608c123e170 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123dc78 <<invalid sloc>> Implicit 1020
| `-NoThrowAttr 0x5608c123e1e0 <col:22> Implicit
|-FunctionDecl 0x5608c123e208 prev 0x5608c123dbd8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:323:22 lround 'long (double)' extern
| |-ParmVarDecl 0x5608c123db40 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:323:42> col:42 __x 'double'
| |-BuiltinAttr 0x5608c123e308 <<invalid sloc>> Inherited Implicit 1020
| `-NoThrowAttr 0x5608c123e2b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123e3e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:187:1 __lround 'long (double)' extern
| |-ParmVarDecl 0x5608c123e348 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:323:42> col:42 __x 'double'
| `-NoThrowAttr 0x5608c123e488 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123e590 </usr/include/bits/mathcalls.h:325:27> col:27 implicit llround 'long long (double)' extern
| |-ParmVarDecl 0x5608c123e688 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123e630 <<invalid sloc>> Implicit 999
| `-NoThrowAttr 0x5608c123e6f8 <col:27> Implicit
|-FunctionDecl 0x5608c123e720 prev 0x5608c123e590 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:325:27 llround 'long long (double)' extern
| |-ParmVarDecl 0x5608c123e4f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:325:48> col:48 __x 'double'
| |-BuiltinAttr 0x5608c123e820 <<invalid sloc>> Inherited Implicit 999
| `-NoThrowAttr 0x5608c123e7c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123e8f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:188:1 __llround 'long long (double)' extern
| |-ParmVarDecl 0x5608c123e860 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:325:48> col:48 __x 'double'
| `-NoThrowAttr 0x5608c123e9a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123eb30 </usr/include/bits/mathcalls.h:329:13> col:13 implicit used fdim 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123ec28 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c123ec90 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123ebd0 <<invalid sloc>> Implicit 972
| `-NoThrowAttr 0x5608c123ed08 <col:13> Implicit
|-FunctionDecl 0x5608c123ed30 prev 0x5608c123eb30 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:329:13 used fdim 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123ea10 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:329:31> col:31 __x 'double'
| |-ParmVarDecl 0x5608c123ea90 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:329:46> col:46 __y 'double'
| |-BuiltinAttr 0x5608c123ee38 <<invalid sloc>> Inherited Implicit 972
| `-NoThrowAttr 0x5608c123ede0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123ef98 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:189:1 __fdim 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123ee78 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:329:31> col:31 __x 'double'
| |-ParmVarDecl 0x5608c123eef8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:329:46> col:46 __y 'double'
| `-NoThrowAttr 0x5608c123f048 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c123f430 </usr/include/bits/mathcalls.h:333:14> col:14 implicit used fmax 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123f528 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c123f590 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123f4d0 <<invalid sloc>> Implicit 981
| |-NoThrowAttr 0x5608c123f608 <col:14> Implicit
| `-ConstAttr 0x5608c123f630 <col:14> Implicit
|-FunctionDecl 0x5608c123f658 prev 0x5608c123f430 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:333:14 used fmax 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123f0b8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:333:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c123f390 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:333:47> col:47 __y 'double'
| |-BuiltinAttr 0x5608c123f788 <<invalid sloc>> Inherited Implicit 981
| |-NoThrowAttr 0x5608c123f708 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c123f760 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c123f8e8 </usr/include/math.h:297:3, line:295:79> <scratch space>:191:1 __fmax 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123f7c8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:333:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c123f848 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:333:47> col:47 __y 'double'
| |-NoThrowAttr 0x5608c123f998 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c123f9f0 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c123fb50 <line:336:14> col:14 implicit used fmin 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123fc48 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c123fcb0 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c123fbf0 <<invalid sloc>> Implicit 984
| |-NoThrowAttr 0x5608c123fd28 <col:14> Implicit
| `-ConstAttr 0x5608c123fd50 <col:14> Implicit
|-FunctionDecl 0x5608c123fd78 prev 0x5608c123fb50 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:336:14 used fmin 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123fa30 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:336:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c123fab0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:336:47> col:47 __y 'double'
| |-BuiltinAttr 0x5608c123fea8 <<invalid sloc>> Inherited Implicit 984
| |-NoThrowAttr 0x5608c123fe28 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c123fe80 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c1240008 </usr/include/math.h:297:3, line:295:79> <scratch space>:192:1 __fmin 'double (double, double)' extern
| |-ParmVarDecl 0x5608c123fee8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:336:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c123ff68 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:336:47> col:47 __y 'double'
| |-NoThrowAttr 0x5608c12400b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1240110 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c1240530 <line:340:13> col:13 implicit used fma 'double (double, double, double)' extern
| |-ParmVarDecl 0x5608c1240628 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c1240690 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x5608c12406f8 <<invalid sloc>> <invalid sloc> 'double'
| |-BuiltinAttr 0x5608c12405d0 <<invalid sloc>> Implicit 978
| |-ConstAttr 0x5608c1240778 <col:13> Implicit
| `-NoThrowAttr 0x5608c12407a0 <col:13> Implicit
|-FunctionDecl 0x5608c12407c8 prev 0x5608c1240530 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:340:13 used fma 'double (double, double, double)' extern
| |-ParmVarDecl 0x5608c1240150 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:340:30> col:30 __x 'double'
| |-ParmVarDecl 0x5608c12401d0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:340:45> col:45 __y 'double'
| |-ParmVarDecl 0x5608c1240250 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:340:60> col:60 __z 'double'
| |-BuiltinAttr 0x5608c12408d8 <<invalid sloc>> Inherited Implicit 978
| |-ConstAttr 0x5608c1240900 <col:13> Inherited Implicit
| `-NoThrowAttr 0x5608c1240880 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1240ae8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:193:1 __fma 'double (double, double, double)' extern
| |-ParmVarDecl 0x5608c1240940 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:340:30> col:30 __x 'double'
| |-ParmVarDecl 0x5608c12409c0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:340:45> col:45 __y 'double'
| |-ParmVarDecl 0x5608c1240a40 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:340:60> col:60 __z 'double'
| `-NoThrowAttr 0x5608c1240ba0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1240ca8 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:345:14 roundeven 'double (double)' extern
| |-ParmVarDecl 0x5608c1240c10 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:345:37> col:37 __x 'double'
| |-NoThrowAttr 0x5608c1240d50 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1240da8 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c1240e80 </usr/include/math.h:297:3, line:295:79> <scratch space>:195:1 __roundeven 'double (double)' extern
| |-ParmVarDecl 0x5608c1240de8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:345:37> col:37 __x 'double'
| |-NoThrowAttr 0x5608c1240f28 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1240f80 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c1241208 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:349:25 fromfp '__intmax_t (double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1240fe8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:349:45> col:45 __x 'double'
| |-ParmVarDecl 0x5608c1241068 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12410e8 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12412c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1241eb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:196:1 __fromfp '__intmax_t (double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1241330 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:349:45> col:45 __x 'double'
| |-ParmVarDecl 0x5608c12413b0 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c1241430 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1241f68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1242218 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:354:26 ufromfp '__uintmax_t (double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1241ff8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:354:47> col:47 __x 'double'
| |-ParmVarDecl 0x5608c1242078 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c12420f8 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12422d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12424e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:197:1 __ufromfp '__uintmax_t (double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1242340 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:354:47> col:47 __x 'double'
| |-ParmVarDecl 0x5608c12423c0 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c1242440 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1242598 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12427a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:360:25 fromfpx '__intmax_t (double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1242608 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:360:46> col:46 __x 'double'
| |-ParmVarDecl 0x5608c1242688 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c1242708 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1242860 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1242a70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:198:1 __fromfpx '__intmax_t (double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12428d0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:360:46> col:46 __x 'double'
| |-ParmVarDecl 0x5608c1242950 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c12429d0 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1242b28 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1242d38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:366:26 ufromfpx '__uintmax_t (double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1242b98 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:366:48> col:48 __x 'double'
| |-ParmVarDecl 0x5608c1242c18 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c1242c98 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1242df0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1246dc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:199:1 __ufromfpx '__uintmax_t (double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1246c20 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:366:48> col:48 __x 'double'
| |-ParmVarDecl 0x5608c1246ca0 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c1246d20 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1246e78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1247070 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:370:20 canonicalize 'int (double *, const double *)' extern
| |-ParmVarDecl 0x5608c1246ee8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:370:47> col:47 __cx 'double *'
| |-ParmVarDecl 0x5608c1246f90 <col:53, col:70> col:70 __x 'const double *'
| `-NoThrowAttr 0x5608c1247120 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12472b0 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:377:14 fmaxmag 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1247190 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:377:35> col:35 __x 'double'
| |-ParmVarDecl 0x5608c1247210 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:377:50> col:50 __y 'double'
| |-NoThrowAttr 0x5608c1247360 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12473b8 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c1247518 </usr/include/math.h:297:3, line:295:79> <scratch space>:202:1 __fmaxmag 'double (double, double)' extern
| |-ParmVarDecl 0x5608c12473f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:377:35> col:35 __x 'double'
| |-ParmVarDecl 0x5608c1247478 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:377:50> col:50 __y 'double'
| |-NoThrowAttr 0x5608c12475c8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1247620 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c1247780 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:380:14 fminmag 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1247660 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:380:35> col:35 __x 'double'
| |-ParmVarDecl 0x5608c12476e0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:380:50> col:50 __y 'double'
| |-NoThrowAttr 0x5608c1247830 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1247888 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c12479e8 </usr/include/math.h:297:3, line:295:79> <scratch space>:203:1 __fminmag 'double (double, double)' extern
| |-ParmVarDecl 0x5608c12478c8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:380:35> col:35 __x 'double'
| |-ParmVarDecl 0x5608c1247948 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:380:50> col:50 __y 'double'
| |-NoThrowAttr 0x5608c1247a98 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1247af0 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c1248c78 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:385:14 fmaximum 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1247b30 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:385:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1247bb0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:385:51> col:51 __y 'double'
| |-NoThrowAttr 0x5608c1248d28 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1248d80 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c1248ee0 </usr/include/math.h:297:3, line:295:79> <scratch space>:205:1 __fmaximum 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1248dc0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:385:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1248e40 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:385:51> col:51 __y 'double'
| |-NoThrowAttr 0x5608c1248f90 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1248fe8 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c1249148 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:388:14 fminimum 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1249028 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:388:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c12490a8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:388:51> col:51 __y 'double'
| |-NoThrowAttr 0x5608c12491f8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1249250 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c12493b0 </usr/include/math.h:297:3, line:295:79> <scratch space>:206:1 __fminimum 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1249290 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:388:36> col:36 __x 'double'
| |-ParmVarDecl 0x5608c1249310 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:388:51> col:51 __y 'double'
| |-NoThrowAttr 0x5608c1249460 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12494b8 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c1249618 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:391:14 fmaximum_num 'double (double, double)' extern
| |-ParmVarDecl 0x5608c12494f8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:391:40> col:40 __x 'double'
| |-ParmVarDecl 0x5608c1249578 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:391:55> col:55 __y 'double'
| |-NoThrowAttr 0x5608c12496c8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1249720 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c1249880 </usr/include/math.h:297:3, line:295:79> <scratch space>:207:1 __fmaximum_num 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1249760 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:391:40> col:40 __x 'double'
| |-ParmVarDecl 0x5608c12497e0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:391:55> col:55 __y 'double'
| |-NoThrowAttr 0x5608c1249930 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1249988 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c1249ae8 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:394:14 fminimum_num 'double (double, double)' extern
| |-ParmVarDecl 0x5608c12499c8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:394:40> col:40 __x 'double'
| |-ParmVarDecl 0x5608c1249a48 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:394:55> col:55 __y 'double'
| |-NoThrowAttr 0x5608c1249b98 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1249bf0 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c1249d70 </usr/include/math.h:297:3, line:295:79> <scratch space>:208:1 __fminimum_num 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1249c50 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:394:40> col:40 __x 'double'
| |-ParmVarDecl 0x5608c1249cd0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:394:55> col:55 __y 'double'
| |-NoThrowAttr 0x5608c1249e20 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1249e78 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c1249fd8 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:397:14 fmaximum_mag 'double (double, double)' extern
| |-ParmVarDecl 0x5608c1249eb8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:397:40> col:40 __x 'double'
| |-ParmVarDecl 0x5608c1249f38 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:397:55> col:55 __y 'double'
| |-NoThrowAttr 0x5608c124a088 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124a0e0 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c124a240 </usr/include/math.h:297:3, line:295:79> <scratch space>:209:1 __fmaximum_mag 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124a120 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:397:40> col:40 __x 'double'
| |-ParmVarDecl 0x5608c124a1a0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:397:55> col:55 __y 'double'
| |-NoThrowAttr 0x5608c124a2f0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124a348 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c124a4a8 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:400:14 fminimum_mag 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124a388 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:400:40> col:40 __x 'double'
| |-ParmVarDecl 0x5608c124a408 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:400:55> col:55 __y 'double'
| |-NoThrowAttr 0x5608c124a558 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124a5b0 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c124a710 </usr/include/math.h:297:3, line:295:79> <scratch space>:210:1 __fminimum_mag 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124a5f0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:400:40> col:40 __x 'double'
| |-ParmVarDecl 0x5608c124a670 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:400:55> col:55 __y 'double'
| |-NoThrowAttr 0x5608c124a7c0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124a818 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c124a978 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:403:14 fmaximum_mag_num 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124a858 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:403:44> col:44 __x 'double'
| |-ParmVarDecl 0x5608c124a8d8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:403:59> col:59 __y 'double'
| |-NoThrowAttr 0x5608c124aa28 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124aa80 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c124ac60 </usr/include/math.h:297:3, line:295:79> <scratch space>:211:1 __fmaximum_mag_num 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124aac0 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:403:44> col:44 __x 'double'
| |-ParmVarDecl 0x5608c124ab40 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:403:59> col:59 __y 'double'
| |-NoThrowAttr 0x5608c124ad10 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124ad68 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c124aec8 </usr/include/math.h:297:3, line:294:66> /usr/include/bits/mathcalls.h:406:14 fminimum_mag_num 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124ada8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:406:44> col:44 __x 'double'
| |-ParmVarDecl 0x5608c124ae28 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:406:59> col:59 __y 'double'
| |-NoThrowAttr 0x5608c124af78 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124afd0 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c124b130 </usr/include/math.h:297:3, line:295:79> <scratch space>:212:1 __fminimum_mag_num 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124b010 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:406:44> col:44 __x 'double'
| |-ParmVarDecl 0x5608c124b090 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:406:59> col:59 __y 'double'
| |-NoThrowAttr 0x5608c124b1e0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124b238 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c124b3d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> /usr/include/bits/mathcalls.h:411:20 totalorder 'int (const double *, const double *)' extern
| |-ParmVarDecl 0x5608c124b278 <col:34, col:51> col:51 __x 'const double *'
| |-ParmVarDecl 0x5608c124b2f8 <line:412:6, col:23> col:23 __y 'const double *'
| |-NoThrowAttr 0x5608c124b480 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c124b4d8 <line:308:45>
|-FunctionDecl 0x5608c124b638 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> /usr/include/bits/mathcalls.h:416:20 totalordermag 'int (const double *, const double *)' extern
| |-ParmVarDecl 0x5608c124b518 <col:37, col:54> col:54 __x 'const double *'
| |-ParmVarDecl 0x5608c124b598 <line:417:9, col:26> col:26 __y 'const double *'
| |-NoThrowAttr 0x5608c124b6e8 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c124b740 <line:308:45>
|-FunctionDecl 0x5608c124b850 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:421:13 getpayload 'double (const double *)' extern
| |-ParmVarDecl 0x5608c124b780 <col:27, col:44> col:44 __x 'const double *'
| `-NoThrowAttr 0x5608c124b8f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124ba00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:214:1 __getpayload 'double (const double *)' extern
| |-ParmVarDecl 0x5608c124b968 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const double *'
| `-NoThrowAttr 0x5608c124baa8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124bca8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:424:20 setpayload 'int (double *, double)' extern
| |-ParmVarDecl 0x5608c124bb18 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:424:45> col:45 __x 'double *'
| |-ParmVarDecl 0x5608c124bb98 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:424:60> col:60 __payload 'double'
| `-NoThrowAttr 0x5608c124bd58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124bee8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:427:20 setpayloadsig 'int (double *, double)' extern
| |-ParmVarDecl 0x5608c124bdc8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:427:48> col:48 __x 'double *'
| |-ParmVarDecl 0x5608c124be48 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:427:63> col:63 __payload 'double'
| `-NoThrowAttr 0x5608c124bf98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124c128 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/mathcalls.h:435:13 used scalb 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124c008 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:435:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c124c088 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:435:47> col:47 __n 'double'
| `-NoThrowAttr 0x5608c124c1d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124c368 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:215:1 __scalb 'double (double, double)' extern
| |-ParmVarDecl 0x5608c124c248 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:435:32> col:32 __x 'double'
| |-ParmVarDecl 0x5608c124c2c8 </usr/include/math.h:308:20, /usr/include/bits/mathcalls.h:435:47> col:47 __n 'double'
| `-NoThrowAttr 0x5608c124c418 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124c550 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:21:32> <scratch space>:216:1 __fpclassifyf 'int (float)' extern
| |-ParmVarDecl 0x5608c124c488 </usr/include/math.h:325:21, /usr/include/bits/mathcalls-helper-functions.h:20:50> col:50 __value 'float'
| |-NoThrowAttr 0x5608c124c5f8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124c650 </usr/include/bits/mathcalls-helper-functions.h:21:22>
|-FunctionDecl 0x5608c124c728 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:25:32> <scratch space>:217:1 __signbitf 'int (float)' extern
| |-ParmVarDecl 0x5608c124c690 </usr/include/math.h:325:21, /usr/include/bits/mathcalls-helper-functions.h:24:47> col:47 __value 'float'
| |-NoThrowAttr 0x5608c124c7d0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124c828 </usr/include/bits/mathcalls-helper-functions.h:25:22>
|-FunctionDecl 0x5608c124c900 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:30:29> <scratch space>:218:1 __isinff 'int (float)' extern
| |-ParmVarDecl 0x5608c124c868 </usr/include/math.h:325:21, /usr/include/bits/mathcalls-helper-functions.h:29:45> col:45 __value 'float'
| |-NoThrowAttr 0x5608c124c9a8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124ca00 </usr/include/bits/mathcalls-helper-functions.h:30:19>
|-FunctionDecl 0x5608c124cad8 <<scratch space>:219:1> col:1 implicit __finitef 'int (float)' extern
| |-ParmVarDecl 0x5608c124cbd0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124cb78 <<invalid sloc>> Implicit 907
| |-NoThrowAttr 0x5608c124cc40 <col:1> Implicit
| `-ConstAttr 0x5608c124cc80 <col:1> Implicit
|-FunctionDecl 0x5608c124cca8 prev 0x5608c124cad8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:34:29> <scratch space>:219:1 __finitef 'int (float)' extern
| |-ParmVarDecl 0x5608c124ca40 </usr/include/math.h:325:21, /usr/include/bits/mathcalls-helper-functions.h:33:46> col:46 __value 'float'
| |-BuiltinAttr 0x5608c124cdd0 <<invalid sloc>> Inherited Implicit 907
| |-NoThrowAttr 0x5608c124cd50 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124cda8 </usr/include/bits/mathcalls-helper-functions.h:34:19>
|-FunctionDecl 0x5608c124cea8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:38:29> <scratch space>:220:1 __isnanf 'int (float)' extern
| |-ParmVarDecl 0x5608c124ce10 </usr/include/math.h:325:21, /usr/include/bits/mathcalls-helper-functions.h:37:45> col:45 __value 'float'
| |-NoThrowAttr 0x5608c124cf50 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124cfa8 </usr/include/bits/mathcalls-helper-functions.h:38:19>
|-FunctionDecl 0x5608c124d140 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:221:1 __iseqsigf 'int (float, float)' extern
| |-ParmVarDecl 0x5608c124cfe8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls-helper-functions.h:41:47> col:47 __x 'float'
| |-ParmVarDecl 0x5608c124d068 </usr/include/math.h:325:21, /usr/include/bits/mathcalls-helper-functions.h:41:62> col:62 __y 'float'
| `-NoThrowAttr 0x5608c124d1f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124d2f8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:45:32> <scratch space>:222:1 __issignalingf 'int (float)' extern
| |-ParmVarDecl 0x5608c124d260 </usr/include/math.h:325:21, /usr/include/bits/mathcalls-helper-functions.h:44:51> col:51 __value 'float'
| |-NoThrowAttr 0x5608c124d3a0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c124d3f8 </usr/include/bits/mathcalls-helper-functions.h:45:22>
|-FunctionDecl 0x5608c124d500 <<scratch space>:225:1> col:1 implicit acosf 'float (float)' extern
| |-ParmVarDecl 0x5608c124d5f8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124d5a0 <<invalid sloc>> Implicit 928
| `-NoThrowAttr 0x5608c124d668 <col:1> Implicit
|-FunctionDecl 0x5608c124d690 prev 0x5608c124d500 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:225:1 acosf 'float (float)' extern
| |-ParmVarDecl 0x5608c124d438 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c124d790 <<invalid sloc>> Inherited Implicit 928
| `-NoThrowAttr 0x5608c124d738 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124d868 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:227:1 __acosf 'float (float)' extern
| |-ParmVarDecl 0x5608c124d7d0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c124d910 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124da18 <<scratch space>:230:1> col:1 implicit asinf 'float (float)' extern
| |-ParmVarDecl 0x5608c124db10 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124dab8 <<invalid sloc>> Implicit 934
| `-NoThrowAttr 0x5608c124db80 <col:1> Implicit
|-FunctionDecl 0x5608c124dba8 prev 0x5608c124da18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:230:1 asinf 'float (float)' extern
| |-ParmVarDecl 0x5608c124d980 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c124dcc0 <<invalid sloc>> Inherited Implicit 934
| `-NoThrowAttr 0x5608c124dc50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124dd98 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:232:1 __asinf 'float (float)' extern
| |-ParmVarDecl 0x5608c124dd00 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c124de40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124df48 <<scratch space>:235:1> col:1 implicit atanf 'float (float)' extern
| |-ParmVarDecl 0x5608c124e040 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124dfe8 <<invalid sloc>> Implicit 940
| `-NoThrowAttr 0x5608c124e0b0 <col:1> Implicit
|-FunctionDecl 0x5608c124e0d8 prev 0x5608c124df48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:235:1 atanf 'float (float)' extern
| |-ParmVarDecl 0x5608c124deb0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c124e1d8 <<invalid sloc>> Inherited Implicit 940
| `-NoThrowAttr 0x5608c124e180 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124e2b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:237:1 __atanf 'float (float)' extern
| |-ParmVarDecl 0x5608c124e218 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c124e358 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124e520 <<scratch space>:240:1> col:1 implicit atan2f 'float (float, float)' extern
| |-ParmVarDecl 0x5608c124e618 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c124e680 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124e5c0 <<invalid sloc>> Implicit 892
| `-NoThrowAttr 0x5608c124e6f8 <col:1> Implicit
|-FunctionDecl 0x5608c124e720 prev 0x5608c124e520 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:240:1 atan2f 'float (float, float)' extern
| |-ParmVarDecl 0x5608c124e3c8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y 'float'
| |-ParmVarDecl 0x5608c124e448 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x 'float'
| |-BuiltinAttr 0x5608c124e828 <<invalid sloc>> Inherited Implicit 892
| `-NoThrowAttr 0x5608c124e7d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124e988 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:242:1 __atan2f 'float (float, float)' extern
| |-ParmVarDecl 0x5608c124e868 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y 'float'
| |-ParmVarDecl 0x5608c124e8e8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x 'float'
| `-NoThrowAttr 0x5608c124ea38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124eb40 <<scratch space>:245:1> col:1 implicit cosf 'float (float)' extern
| |-ParmVarDecl 0x5608c124eca0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124ebe0 <<invalid sloc>> Implicit 952
| `-NoThrowAttr 0x5608c124ed10 <col:1> Implicit
|-FunctionDecl 0x5608c124ed38 prev 0x5608c124eb40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:245:1 cosf 'float (float)' extern
| |-ParmVarDecl 0x5608c124eaa8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x 'float'
| |-BuiltinAttr 0x5608c124ee38 <<invalid sloc>> Inherited Implicit 952
| `-NoThrowAttr 0x5608c124ede0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124ef10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:247:1 __cosf 'float (float)' extern
| |-ParmVarDecl 0x5608c124ee78 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x 'float'
| `-NoThrowAttr 0x5608c124efb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124f0c0 <<scratch space>:250:1> col:1 implicit sinf 'float (float)' extern
| |-ParmVarDecl 0x5608c124f1b8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124f160 <<invalid sloc>> Implicit 1051
| `-NoThrowAttr 0x5608c124f228 <col:1> Implicit
|-FunctionDecl 0x5608c124f250 prev 0x5608c124f0c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:250:1 sinf 'float (float)' extern
| |-ParmVarDecl 0x5608c124f028 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x 'float'
| |-BuiltinAttr 0x5608c124f350 <<invalid sloc>> Inherited Implicit 1051
| `-NoThrowAttr 0x5608c124f2f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124f428 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:252:1 __sinf 'float (float)' extern
| |-ParmVarDecl 0x5608c124f390 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x 'float'
| `-NoThrowAttr 0x5608c124f4d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124f5d8 <<scratch space>:255:1> col:1 implicit tanf 'float (float)' extern
| |-ParmVarDecl 0x5608c124f6d0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124f678 <<invalid sloc>> Implicit 1060
| `-NoThrowAttr 0x5608c124f740 <col:1> Implicit
|-FunctionDecl 0x5608c124f768 prev 0x5608c124f5d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:255:1 tanf 'float (float)' extern
| |-ParmVarDecl 0x5608c124f540 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x 'float'
| |-BuiltinAttr 0x5608c124f868 <<invalid sloc>> Inherited Implicit 1060
| `-NoThrowAttr 0x5608c124f810 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124f940 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:257:1 __tanf 'float (float)' extern
| |-ParmVarDecl 0x5608c124f8a8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x 'float'
| `-NoThrowAttr 0x5608c124f9e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124faf0 <<scratch space>:260:1> col:1 implicit coshf 'float (float)' extern
| |-ParmVarDecl 0x5608c124fbe8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c124fb90 <<invalid sloc>> Implicit 955
| `-NoThrowAttr 0x5608c124fc58 <col:1> Implicit
|-FunctionDecl 0x5608c124fcb0 prev 0x5608c124faf0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:260:1 coshf 'float (float)' extern
| |-ParmVarDecl 0x5608c124fa58 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c124fdb0 <<invalid sloc>> Inherited Implicit 955
| `-NoThrowAttr 0x5608c124fd58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c124fe88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:262:1 __coshf 'float (float)' extern
| |-ParmVarDecl 0x5608c124fdf0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c124ff30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1250038 <<scratch space>:265:1> col:1 implicit sinhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1250130 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c12500d8 <<invalid sloc>> Implicit 1054
| `-NoThrowAttr 0x5608c12501a0 <col:1> Implicit
|-FunctionDecl 0x5608c12501c8 prev 0x5608c1250038 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:265:1 sinhf 'float (float)' extern
| |-ParmVarDecl 0x5608c124ffa0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c12502c8 <<invalid sloc>> Inherited Implicit 1054
| `-NoThrowAttr 0x5608c1250270 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12503a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:267:1 __sinhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1250308 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c1250448 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1250550 <<scratch space>:270:1> col:1 implicit tanhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1250648 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c12505f0 <<invalid sloc>> Implicit 1063
| `-NoThrowAttr 0x5608c12506b8 <col:1> Implicit
|-FunctionDecl 0x5608c12506e0 prev 0x5608c1250550 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:270:1 tanhf 'float (float)' extern
| |-ParmVarDecl 0x5608c12504b8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c12507e0 <<invalid sloc>> Inherited Implicit 1063
| `-NoThrowAttr 0x5608c1250788 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12508b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:272:1 __tanhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1250820 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c1250960 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1250be8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:275:1 sincosf 'void (float, float *, float *)' extern
| |-ParmVarDecl 0x5608c12509d0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x 'float'
| |-ParmVarDecl 0x5608c1250a80 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx 'float *'
| |-ParmVarDecl 0x5608c1250b00 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx 'float *'
| `-NoThrowAttr 0x5608c1250cc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1250ed0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:277:1 __sincosf 'void (float, float *, float *)' extern
| |-ParmVarDecl 0x5608c1250d30 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x 'float'
| |-ParmVarDecl 0x5608c1250db0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx 'float *'
| |-ParmVarDecl 0x5608c1250e30 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx 'float *'
| `-NoThrowAttr 0x5608c1250f88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1251090 <<scratch space>:280:1> col:1 implicit acoshf 'float (float)' extern
| |-ParmVarDecl 0x5608c1251188 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1251130 <<invalid sloc>> Implicit 931
| `-NoThrowAttr 0x5608c12511f8 <col:1> Implicit
|-FunctionDecl 0x5608c1251220 prev 0x5608c1251090 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:280:1 acoshf 'float (float)' extern
| |-ParmVarDecl 0x5608c1250ff8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c1251320 <<invalid sloc>> Inherited Implicit 931
| `-NoThrowAttr 0x5608c12512c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12513f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:3:1 __acoshf 'float (float)' extern
| |-ParmVarDecl 0x5608c1251360 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c12514a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12515a8 <<scratch space>:6:1> col:1 implicit asinhf 'float (float)' extern
| |-ParmVarDecl 0x5608c12516a0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1251648 <<invalid sloc>> Implicit 937
| `-NoThrowAttr 0x5608c1251710 <col:1> Implicit
|-FunctionDecl 0x5608c1251738 prev 0x5608c12515a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:6:1 asinhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1251510 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c1251838 <<invalid sloc>> Inherited Implicit 937
| `-NoThrowAttr 0x5608c12517e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1251910 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:8:1 __asinhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1251878 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c12519b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1251ac0 <<scratch space>:11:1> col:1 implicit atanhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1251bb8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1251b60 <<invalid sloc>> Implicit 943
| `-NoThrowAttr 0x5608c1251c28 <col:1> Implicit
|-FunctionDecl 0x5608c1252cf0 prev 0x5608c1251ac0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:11:1 atanhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1251a28 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c1252df0 <<invalid sloc>> Inherited Implicit 943
| `-NoThrowAttr 0x5608c1252d98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1252ec8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:13:1 __atanhf 'float (float)' extern
| |-ParmVarDecl 0x5608c1252e30 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c1252f70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1253078 <<scratch space>:16:1> col:1 implicit expf 'float (float)' extern
| |-ParmVarDecl 0x5608c1253170 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1253118 <<invalid sloc>> Implicit 964
| `-NoThrowAttr 0x5608c12531e0 <col:1> Implicit
|-FunctionDecl 0x5608c1253208 prev 0x5608c1253078 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:16:1 expf 'float (float)' extern
| |-ParmVarDecl 0x5608c1252fe0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x 'float'
| |-BuiltinAttr 0x5608c1253308 <<invalid sloc>> Inherited Implicit 964
| `-NoThrowAttr 0x5608c12532b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12533e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:18:1 __expf 'float (float)' extern
| |-ParmVarDecl 0x5608c1253348 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x 'float'
| `-NoThrowAttr 0x5608c1253488 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1253650 <<scratch space>:19:1> col:1 implicit frexpf 'float (float, int *)' extern
| |-ParmVarDecl 0x5608c1253748 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c12537b0 <<invalid sloc>> <invalid sloc> 'int *'
| |-BuiltinAttr 0x5608c12536f0 <<invalid sloc>> Implicit 913
| `-NoThrowAttr 0x5608c1253828 <col:1> Implicit
|-FunctionDecl 0x5608c1253850 prev 0x5608c1253650 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:19:1 frexpf 'float (float, int *)' extern
| |-ParmVarDecl 0x5608c12534f8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1253578 <col:37, col:42> col:42 __exponent 'int *'
| |-BuiltinAttr 0x5608c1253958 <<invalid sloc>> Inherited Implicit 913
| `-NoThrowAttr 0x5608c1253900 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1253ab8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:21:1 __frexpf 'float (float, int *)' extern
| |-ParmVarDecl 0x5608c1253998 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1253a18 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c1253b68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1253d70 <<scratch space>:22:1> col:1 implicit ldexpf 'float (float, int)' extern
| |-ParmVarDecl 0x5608c1253e68 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1253ed0 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c1253e10 <<invalid sloc>> Implicit 916
| `-NoThrowAttr 0x5608c1253f48 <col:1> Implicit
|-FunctionDecl 0x5608c1253f70 prev 0x5608c1253d70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:22:1 ldexpf 'float (float, int)' extern
| |-ParmVarDecl 0x5608c1253bd8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1253c58 <col:37, col:41> col:41 __exponent 'int'
| |-BuiltinAttr 0x5608c1254078 <<invalid sloc>> Inherited Implicit 916
| `-NoThrowAttr 0x5608c1254020 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12541d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:24:1 __ldexpf 'float (float, int)' extern
| |-ParmVarDecl 0x5608c12540b8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1254138 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c1254288 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1254390 <<scratch space>:27:1> col:1 implicit logf 'float (float)' extern
| |-ParmVarDecl 0x5608c1254488 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1254430 <<invalid sloc>> Implicit 1003
| `-NoThrowAttr 0x5608c12544f8 <col:1> Implicit
|-FunctionDecl 0x5608c1254520 prev 0x5608c1254390 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:27:1 logf 'float (float)' extern
| |-ParmVarDecl 0x5608c12542f8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x 'float'
| |-BuiltinAttr 0x5608c1254620 <<invalid sloc>> Inherited Implicit 1003
| `-NoThrowAttr 0x5608c12545c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12546f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:29:1 __logf 'float (float)' extern
| |-ParmVarDecl 0x5608c1254660 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x 'float'
| `-NoThrowAttr 0x5608c12547a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12548a8 <<scratch space>:32:1> col:1 implicit log10f 'float (float)' extern
| |-ParmVarDecl 0x5608c12549a0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1254948 <<invalid sloc>> Implicit 1006
| `-NoThrowAttr 0x5608c1254a10 <col:1> Implicit
|-FunctionDecl 0x5608c1254a38 prev 0x5608c12548a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:32:1 log10f 'float (float)' extern
| |-ParmVarDecl 0x5608c1254810 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c1254b38 <<invalid sloc>> Inherited Implicit 1006
| `-NoThrowAttr 0x5608c1254ae0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1254c10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:34:1 __log10f 'float (float)' extern
| |-ParmVarDecl 0x5608c1254b78 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c1254cb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1254eb0 <<scratch space>:35:1> col:1 implicit modff 'float (float, float *)' extern
| |-ParmVarDecl 0x5608c1254fa8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1255010 <<invalid sloc>> <invalid sloc> 'float *'
| |-BuiltinAttr 0x5608c1254f50 <<invalid sloc>> Implicit 919
| `-NoThrowAttr 0x5608c1255088 <col:1> Implicit
|-FunctionDecl 0x5608c12550b0 prev 0x5608c1254eb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:35:1 modff 'float (float, float *)' extern
| |-ParmVarDecl 0x5608c1254d58 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x 'float'
| |-ParmVarDecl 0x5608c1254dd8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr 'float *'
| |-BuiltinAttr 0x5608c12551b8 <<invalid sloc>> Inherited Implicit 919
| `-NoThrowAttr 0x5608c1255160 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1255338 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:384:76> <scratch space>:37:1 __modff 'float (float, float *)' extern
| |-ParmVarDecl 0x5608c12551f8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x 'float'
| |-ParmVarDecl 0x5608c1255278 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr 'float *'
| |-NoThrowAttr 0x5608c12553e8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1255440 <line:384:57, /usr/include/bits/mathcalls.h:110:69> 2
|-FunctionDecl 0x5608c1255528 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:41:1 exp10f 'float (float)' extern
| |-ParmVarDecl 0x5608c1255490 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c12555d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12556d8 <<scratch space>:43:1> col:1 implicit __exp10f 'float (float)' extern
| |-ParmVarDecl 0x5608c12557d0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1255778 <<invalid sloc>> Implicit 1144
| `-NoThrowAttr 0x5608c1255840 <col:1> Implicit
|-FunctionDecl 0x5608c1255868 prev 0x5608c12556d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:43:1 __exp10f 'float (float)' extern
| |-ParmVarDecl 0x5608c1255640 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c1255968 <<invalid sloc>> Inherited Implicit 1144
| `-NoThrowAttr 0x5608c1255910 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1255a40 <<scratch space>:46:1> col:1 implicit expm1f 'float (float)' extern
| |-ParmVarDecl 0x5608c1255b38 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1255ae0 <<invalid sloc>> Implicit 970
| `-NoThrowAttr 0x5608c1255ba8 <col:1> Implicit
|-FunctionDecl 0x5608c1255bd0 prev 0x5608c1255a40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:46:1 expm1f 'float (float)' extern
| |-ParmVarDecl 0x5608c12559a8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c1255cd0 <<invalid sloc>> Inherited Implicit 970
| `-NoThrowAttr 0x5608c1255c78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1255db8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:48:1 __expm1f 'float (float)' extern
| |-ParmVarDecl 0x5608c1255d20 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c1255e60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1255f68 <<scratch space>:51:1> col:1 implicit log1pf 'float (float)' extern
| |-ParmVarDecl 0x5608c1256060 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1256008 <<invalid sloc>> Implicit 1009
| `-NoThrowAttr 0x5608c12560d0 <col:1> Implicit
|-FunctionDecl 0x5608c12560f8 prev 0x5608c1255f68 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:51:1 log1pf 'float (float)' extern
| |-ParmVarDecl 0x5608c1255ed0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c12561f8 <<invalid sloc>> Inherited Implicit 1009
| `-NoThrowAttr 0x5608c12561a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12562d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:53:1 __log1pf 'float (float)' extern
| |-ParmVarDecl 0x5608c1256238 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c1256378 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1256480 <<scratch space>:54:1> col:1 implicit logbf 'float (float)' extern
| |-ParmVarDecl 0x5608c1256578 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1256520 <<invalid sloc>> Implicit 1015
| `-NoThrowAttr 0x5608c12565e8 <col:1> Implicit
|-FunctionDecl 0x5608c1256610 prev 0x5608c1256480 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:54:1 logbf 'float (float)' extern
| |-ParmVarDecl 0x5608c12563e8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x 'float'
| |-BuiltinAttr 0x5608c1256710 <<invalid sloc>> Inherited Implicit 1015
| `-NoThrowAttr 0x5608c12566b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12567e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:56:1 __logbf 'float (float)' extern
| |-ParmVarDecl 0x5608c1256750 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x 'float'
| `-NoThrowAttr 0x5608c1256890 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1256998 <<scratch space>:59:1> col:1 implicit exp2f 'float (float)' extern
| |-ParmVarDecl 0x5608c1256a90 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1256a38 <<invalid sloc>> Implicit 967
| `-NoThrowAttr 0x5608c1256b00 <col:1> Implicit
|-FunctionDecl 0x5608c1256b28 prev 0x5608c1256998 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:59:1 exp2f 'float (float)' extern
| |-ParmVarDecl 0x5608c1256900 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c1256c28 <<invalid sloc>> Inherited Implicit 967
| `-NoThrowAttr 0x5608c1256bd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1256d30 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:61:1 __exp2f 'float (float)' extern
| |-ParmVarDecl 0x5608c1256c68 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c1256dd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1256ee0 <<scratch space>:64:1> col:1 implicit log2f 'float (float)' extern
| |-ParmVarDecl 0x5608c1256fd8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1256f80 <<invalid sloc>> Implicit 1012
| `-NoThrowAttr 0x5608c1257048 <col:1> Implicit
|-FunctionDecl 0x5608c1257070 prev 0x5608c1256ee0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:64:1 log2f 'float (float)' extern
| |-ParmVarDecl 0x5608c1256e48 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c1257170 <<invalid sloc>> Inherited Implicit 1012
| `-NoThrowAttr 0x5608c1257118 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1257248 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:66:1 __log2f 'float (float)' extern
| |-ParmVarDecl 0x5608c12571b0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c12572f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1257480 <<scratch space>:69:1> col:1 implicit powf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1257578 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c12575e0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1257520 <<invalid sloc>> Implicit 925
| `-NoThrowAttr 0x5608c1257658 <col:1> Implicit
|-FunctionDecl 0x5608c1257680 prev 0x5608c1257480 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:69:1 powf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1257360 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x 'float'
| |-ParmVarDecl 0x5608c12573e0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y 'float'
| |-BuiltinAttr 0x5608c1257788 <<invalid sloc>> Inherited Implicit 925
| `-NoThrowAttr 0x5608c1257730 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12578e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:71:1 __powf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c12577c8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x 'float'
| |-ParmVarDecl 0x5608c1257848 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y 'float'
| `-NoThrowAttr 0x5608c1257998 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1257aa0 <<scratch space>:72:1> col:1 implicit sqrtf 'float (float)' extern
| |-ParmVarDecl 0x5608c1257b98 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1257b40 <<invalid sloc>> Implicit 1057
| `-NoThrowAttr 0x5608c1257c08 <col:1> Implicit
|-FunctionDecl 0x5608c1257c30 prev 0x5608c1257aa0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:72:1 sqrtf 'float (float)' extern
| |-ParmVarDecl 0x5608c1257a08 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x 'float'
| |-BuiltinAttr 0x5608c1257d40 <<invalid sloc>> Inherited Implicit 1057
| `-NoThrowAttr 0x5608c1257cd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1257e18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:74:1 __sqrtf 'float (float)' extern
| |-ParmVarDecl 0x5608c1257d80 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x 'float'
| `-NoThrowAttr 0x5608c1257ec0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1258050 <<scratch space>:77:1> col:1 implicit hypotf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1258148 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c12581b0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c12580f0 <<invalid sloc>> Implicit 988
| `-NoThrowAttr 0x5608c1258228 <col:1> Implicit
|-FunctionDecl 0x5608c1258250 prev 0x5608c1258050 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:77:1 hypotf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1257f30 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c1257fb0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y 'float'
| |-BuiltinAttr 0x5608c1258358 <<invalid sloc>> Inherited Implicit 988
| `-NoThrowAttr 0x5608c1258300 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12584b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:79:1 __hypotf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1258398 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c1258418 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y 'float'
| `-NoThrowAttr 0x5608c1258568 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1258670 <<scratch space>:82:1> col:1 implicit cbrtf 'float (float)' extern
| |-ParmVarDecl 0x5608c1258768 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1258710 <<invalid sloc>> Implicit 946
| |-NoThrowAttr 0x5608c12587d8 <col:1> Implicit
| `-ConstAttr 0x5608c1258800 <col:1> Implicit
|-FunctionDecl 0x5608c1258828 prev 0x5608c1258670 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:82:1 cbrtf 'float (float)' extern
| |-ParmVarDecl 0x5608c12585d8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x 'float'
| |-BuiltinAttr 0x5608c1258928 <<invalid sloc>> Inherited Implicit 946
| |-ConstAttr 0x5608c1258950 <<scratch space>:82:1> Inherited Implicit
| `-NoThrowAttr 0x5608c12588d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1258a28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:84:1 __cbrtf 'float (float)' extern
| |-ParmVarDecl 0x5608c1258990 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c1258ad0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1258bd8 <<scratch space>:85:1> col:1 implicit ceilf 'float (float)' extern
| |-ParmVarDecl 0x5608c1258cd0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1258c78 <<invalid sloc>> Implicit 949
| |-NoThrowAttr 0x5608c1258d50 <col:1> Implicit
| `-ConstAttr 0x5608c1258d78 <col:1> Implicit
|-FunctionDecl 0x5608c1258da0 prev 0x5608c1258bd8 </usr/include/math.h:297:3, line:294:66> <scratch space>:85:1 ceilf 'float (float)' extern
| |-ParmVarDecl 0x5608c1258b40 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x 'float'
| |-BuiltinAttr 0x5608c1258ec8 <<invalid sloc>> Inherited Implicit 949
| |-NoThrowAttr 0x5608c1258e48 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1258ea0 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c1258fa0 </usr/include/math.h:297:3, line:295:79> <scratch space>:87:1 __ceilf 'float (float)' extern
| |-ParmVarDecl 0x5608c1258f08 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x 'float'
| |-NoThrowAttr 0x5608c1259048 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12590a0 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c1259178 <<scratch space>:88:1> col:1 implicit fabsf 'float (float)' extern
| |-ParmVarDecl 0x5608c1259270 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1259218 <<invalid sloc>> Implicit 901
| |-NoThrowAttr 0x5608c12592e0 <col:1> Implicit
| `-ConstAttr 0x5608c1259308 <col:1> Implicit
|-FunctionDecl 0x5608c1259330 prev 0x5608c1259178 </usr/include/math.h:297:3, line:294:66> <scratch space>:88:1 fabsf 'float (float)' extern
| |-ParmVarDecl 0x5608c12590e0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x 'float'
| |-BuiltinAttr 0x5608c1259458 <<invalid sloc>> Inherited Implicit 901
| |-NoThrowAttr 0x5608c12593d8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1259430 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c1259530 </usr/include/math.h:297:3, line:295:79> <scratch space>:90:1 __fabsf 'float (float)' extern
| |-ParmVarDecl 0x5608c1259498 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x 'float'
| |-NoThrowAttr 0x5608c12595d8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1259630 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c1259708 <<scratch space>:91:1> col:1 implicit floorf 'float (float)' extern
| |-ParmVarDecl 0x5608c1259800 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c12597a8 <<invalid sloc>> Implicit 976
| |-NoThrowAttr 0x5608c1259870 <col:1> Implicit
| `-ConstAttr 0x5608c1259898 <col:1> Implicit
|-FunctionDecl 0x5608c12598c0 prev 0x5608c1259708 </usr/include/math.h:297:3, line:294:66> <scratch space>:91:1 floorf 'float (float)' extern
| |-ParmVarDecl 0x5608c1259670 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x 'float'
| |-BuiltinAttr 0x5608c12599e8 <<invalid sloc>> Inherited Implicit 976
| |-NoThrowAttr 0x5608c1259968 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12599c0 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c1259ac0 </usr/include/math.h:297:3, line:295:79> <scratch space>:93:1 __floorf 'float (float)' extern
| |-ParmVarDecl 0x5608c1259a28 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x 'float'
| |-NoThrowAttr 0x5608c1259b68 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1259bc0 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c1259d60 <<scratch space>:94:1> col:1 implicit fmodf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1259e58 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1259ec0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1259e00 <<invalid sloc>> Implicit 910
| `-NoThrowAttr 0x5608c1259f38 <col:1> Implicit
|-FunctionDecl 0x5608c1259f60 prev 0x5608c1259d60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:94:1 fmodf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1259c00 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x 'float'
| |-ParmVarDecl 0x5608c1259c80 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y 'float'
| |-BuiltinAttr 0x5608c125a068 <<invalid sloc>> Inherited Implicit 910
| `-NoThrowAttr 0x5608c125a010 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125a1c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:96:1 __fmodf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c125a0a8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x 'float'
| |-ParmVarDecl 0x5608c125a128 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y 'float'
| `-NoThrowAttr 0x5608c125a278 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125a380 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:178:29> <scratch space>:97:1 isinff 'int (float)' extern
| |-ParmVarDecl 0x5608c125a2e8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:177:42> col:42 __value 'float'
| |-NoThrowAttr 0x5608c125a428 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c125a480 </usr/include/bits/mathcalls.h:178:19>
|-FunctionDecl 0x5608c125a558 <<scratch space>:98:1> col:1 implicit finitef 'int (float)' extern
| |-ParmVarDecl 0x5608c125a650 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c125a5f8 <<invalid sloc>> Implicit 904
| |-NoThrowAttr 0x5608c125a6c0 <col:1> Implicit
| `-ConstAttr 0x5608c125a6e8 <col:1> Implicit
|-FunctionDecl 0x5608c125a710 prev 0x5608c125a558 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:184:29> <scratch space>:98:1 finitef 'int (float)' extern
| |-ParmVarDecl 0x5608c125a4c0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:183:43> col:43 __value 'float'
| |-BuiltinAttr 0x5608c125a838 <<invalid sloc>> Inherited Implicit 904
| |-NoThrowAttr 0x5608c125a7b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c125a810 </usr/include/bits/mathcalls.h:184:19>
|-FunctionDecl 0x5608c125a998 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:99:1 dremf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c125a878 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:187:31> col:31 __x 'float'
| |-ParmVarDecl 0x5608c125a8f8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:187:46> col:46 __y 'float'
| `-NoThrowAttr 0x5608c125aa48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125abd8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:101:1 __dremf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c125aab8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:187:31> col:31 __x 'float'
| |-ParmVarDecl 0x5608c125ab38 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:187:46> col:46 __y 'float'
| `-NoThrowAttr 0x5608c125ac88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125ada0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:102:1 significandf 'float (float)' extern
| |-ParmVarDecl 0x5608c125acf8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:191:38> col:38 __x 'float'
| `-NoThrowAttr 0x5608c125ae48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125af50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:104:1 __significandf 'float (float)' extern
| |-ParmVarDecl 0x5608c125aeb8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:191:38> col:38 __x 'float'
| `-NoThrowAttr 0x5608c125aff8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125b188 <<scratch space>:105:1> col:1 implicit copysignf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c125b280 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c125b2e8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c125b228 <<invalid sloc>> Implicit 898
| |-NoThrowAttr 0x5608c125b360 <col:1> Implicit
| `-ConstAttr 0x5608c125b388 <col:1> Implicit
|-FunctionDecl 0x5608c125b3b0 prev 0x5608c125b188 </usr/include/math.h:297:3, line:294:66> <scratch space>:105:1 copysignf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c125b068 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c125b0e8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y 'float'
| |-BuiltinAttr 0x5608c125b4e0 <<invalid sloc>> Inherited Implicit 898
| |-NoThrowAttr 0x5608c125b460 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c125b4b8 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c125b640 </usr/include/math.h:297:3, line:295:79> <scratch space>:107:1 __copysignf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c125b520 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c125b5a0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y 'float'
| |-NoThrowAttr 0x5608c125b6f0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c125b748 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c125b850 <<scratch space>:108:1> col:1 implicit nanf 'float (const char *)' extern
| |-ParmVarDecl 0x5608c125b948 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x5608c125b8f0 <<invalid sloc>> Implicit 922
| |-NoThrowAttr 0x5608c125b9b8 <col:1> Implicit
| `-PureAttr 0x5608c125b9e0 <col:1> Implicit
|-FunctionDecl 0x5608c125ba08 prev 0x5608c125b850 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:108:1 nanf 'float (const char *)' extern
| |-ParmVarDecl 0x5608c125b788 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| |-BuiltinAttr 0x5608c125bb08 <<invalid sloc>> Inherited Implicit 922
| |-PureAttr 0x5608c125bb30 <<scratch space>:108:1> Inherited Implicit
| `-NoThrowAttr 0x5608c125bab0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125bc08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:110:1 __nanf 'float (const char *)' extern
| |-ParmVarDecl 0x5608c125bb70 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c125bcb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125ce28 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:214:29> <scratch space>:111:1 isnanf 'int (float)' extern
| |-ParmVarDecl 0x5608c125cd90 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:213:42> col:42 __value 'float'
| |-NoThrowAttr 0x5608c125ced0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c125cf28 </usr/include/bits/mathcalls.h:214:19>
|-FunctionDecl 0x5608c125d000 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:112:1 j0f 'float (float)' extern
| |-ParmVarDecl 0x5608c125cf68 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:220:28 'float'
| `-NoThrowAttr 0x5608c125d0a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125d1b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:114:1 __j0f 'float (float)' extern
| |-ParmVarDecl 0x5608c125d118 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:220:28 'float'
| `-NoThrowAttr 0x5608c125d258 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125d360 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:115:1 j1f 'float (float)' extern
| |-ParmVarDecl 0x5608c125d2c8 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:221:28 'float'
| `-NoThrowAttr 0x5608c125d408 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125d510 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:117:1 __j1f 'float (float)' extern
| |-ParmVarDecl 0x5608c125d478 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:221:28 'float'
| `-NoThrowAttr 0x5608c125d5b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125d780 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:118:1 jnf 'float (int, float)' extern
| |-ParmVarDecl 0x5608c125d628 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c125d6a8 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:222:33 'float'
| `-NoThrowAttr 0x5608c125d830 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125d9c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:120:1 __jnf 'float (int, float)' extern
| |-ParmVarDecl 0x5608c125d8a0 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c125d920 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:222:33 'float'
| `-NoThrowAttr 0x5608c125da70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125db78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:121:1 y0f 'float (float)' extern
| |-ParmVarDecl 0x5608c125dae0 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:223:28 'float'
| `-NoThrowAttr 0x5608c125dc20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125dda0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:123:1 __y0f 'float (float)' extern
| |-ParmVarDecl 0x5608c125dc90 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:223:28 'float'
| `-NoThrowAttr 0x5608c125de48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125df50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:124:1 y1f 'float (float)' extern
| |-ParmVarDecl 0x5608c125deb8 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:224:28 'float'
| `-NoThrowAttr 0x5608c125dff8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125e100 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:126:1 __y1f 'float (float)' extern
| |-ParmVarDecl 0x5608c125e068 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:224:28 'float'
| `-NoThrowAttr 0x5608c125e1a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125e338 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:127:1 ynf 'float (int, float)' extern
| |-ParmVarDecl 0x5608c125e218 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c125e298 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:225:33 'float'
| `-NoThrowAttr 0x5608c125e3e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125e578 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:129:1 __ynf 'float (int, float)' extern
| |-ParmVarDecl 0x5608c125e458 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c125e4d8 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:225:33 'float'
| `-NoThrowAttr 0x5608c125e628 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125e730 <<scratch space>:132:1> col:1 implicit erff 'float (float)' extern
| |-ParmVarDecl 0x5608c125e828 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c125e7d0 <<invalid sloc>> Implicit 958
| `-NoThrowAttr 0x5608c125e898 <col:1> Implicit
|-FunctionDecl 0x5608c125e8c0 prev 0x5608c125e730 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:132:1 erff 'float (float)' extern
| |-ParmVarDecl 0x5608c125e698 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:231:33 'float'
| |-BuiltinAttr 0x5608c125e9c0 <<invalid sloc>> Inherited Implicit 958
| `-NoThrowAttr 0x5608c125e968 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125ea98 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:134:1 __erff 'float (float)' extern
| |-ParmVarDecl 0x5608c125ea00 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:231:33 'float'
| `-NoThrowAttr 0x5608c125eb40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125ec48 <<scratch space>:137:1> col:1 implicit erfcf 'float (float)' extern
| |-ParmVarDecl 0x5608c125edb0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c125ece8 <<invalid sloc>> Implicit 961
| `-NoThrowAttr 0x5608c125ee20 <col:1> Implicit
|-FunctionDecl 0x5608c125ee48 prev 0x5608c125ec48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:137:1 erfcf 'float (float)' extern
| |-ParmVarDecl 0x5608c125ebb0 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:232:34 'float'
| |-BuiltinAttr 0x5608c125ef48 <<invalid sloc>> Inherited Implicit 961
| `-NoThrowAttr 0x5608c125eef0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125f020 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:139:1 __erfcf 'float (float)' extern
| |-ParmVarDecl 0x5608c125ef88 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:232:34 'float'
| `-NoThrowAttr 0x5608c125f0c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125f1d0 <<scratch space>:140:1> col:1 implicit lgammaf 'float (float)' extern
| |-ParmVarDecl 0x5608c125f2c8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c125f270 <<invalid sloc>> Implicit 994
| `-NoThrowAttr 0x5608c125f338 <col:1> Implicit
|-FunctionDecl 0x5608c125f360 prev 0x5608c125f1d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:140:1 lgammaf 'float (float)' extern
| |-ParmVarDecl 0x5608c125f138 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:233:32 'float'
| |-BuiltinAttr 0x5608c125f460 <<invalid sloc>> Inherited Implicit 994
| `-NoThrowAttr 0x5608c125f408 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125f538 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:142:1 __lgammaf 'float (float)' extern
| |-ParmVarDecl 0x5608c125f4a0 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:233:32 'float'
| `-NoThrowAttr 0x5608c125f5e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125f6e8 <<scratch space>:143:1> col:1 implicit tgammaf 'float (float)' extern
| |-ParmVarDecl 0x5608c125f7e0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c125f788 <<invalid sloc>> Implicit 1066
| `-NoThrowAttr 0x5608c125f850 <col:1> Implicit
|-FunctionDecl 0x5608c125f878 prev 0x5608c125f6e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:143:1 tgammaf 'float (float)' extern
| |-ParmVarDecl 0x5608c125f650 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:238:32 'float'
| |-BuiltinAttr 0x5608c125f978 <<invalid sloc>> Inherited Implicit 1066
| `-NoThrowAttr 0x5608c125f920 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125fa50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:145:1 __tgammaf 'float (float)' extern
| |-ParmVarDecl 0x5608c125f9b8 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:238:32 'float'
| `-NoThrowAttr 0x5608c125faf8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125fc00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:146:1 gammaf 'float (float)' extern
| |-ParmVarDecl 0x5608c125fb68 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:244:31 'float'
| `-NoThrowAttr 0x5608c125fca8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125fdc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:148:1 __gammaf 'float (float)' extern
| |-ParmVarDecl 0x5608c125fd18 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:244:31 'float'
| `-NoThrowAttr 0x5608c125fe68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c125fff8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:150:1 lgammaf_r 'float (float, int *)' extern
| |-ParmVarDecl 0x5608c125fed8 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:252:34 'float'
| |-ParmVarDecl 0x5608c125ff58 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12600a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1260238 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:153:1 __lgammaf_r 'float (float, int *)' extern
| |-ParmVarDecl 0x5608c1260118 </usr/include/math.h:325:21> /usr/include/bits/mathcalls.h:252:34 'float'
| |-ParmVarDecl 0x5608c1260198 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12602e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12603f0 <<scratch space>:154:1> col:1 implicit rintf 'float (float)' extern
| |-ParmVarDecl 0x5608c12604e8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1260490 <<invalid sloc>> Implicit 1039
| |-NoThrowAttr 0x5608c1260558 <col:1> Implicit
| `-ConstAttr 0x5608c1260580 <col:1> Implicit
|-FunctionDecl 0x5608c12605a8 prev 0x5608c12603f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:154:1 rintf 'float (float)' extern
| |-ParmVarDecl 0x5608c1260358 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x 'float'
| |-BuiltinAttr 0x5608c12606a8 <<invalid sloc>> Inherited Implicit 1039
| |-ConstAttr 0x5608c12606d0 <<scratch space>:154:1> Inherited Implicit
| `-NoThrowAttr 0x5608c1260650 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12607a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:156:1 __rintf 'float (float)' extern
| |-ParmVarDecl 0x5608c1260710 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x 'float'
| `-NoThrowAttr 0x5608c1260850 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12609e0 <<scratch space>:157:1> col:1 implicit nextafterf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1260ad8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1260b40 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1260a80 <<invalid sloc>> Implicit 1027
| `-NoThrowAttr 0x5608c1260bb8 <col:1> Implicit
|-FunctionDecl 0x5608c1260be0 prev 0x5608c12609e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:157:1 nextafterf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c12608c0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c1260940 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y 'float'
| |-BuiltinAttr 0x5608c1260ce8 <<invalid sloc>> Inherited Implicit 1027
| `-NoThrowAttr 0x5608c1260c90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1260e70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:159:1 __nextafterf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1260d28 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c1260dd0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y 'float'
| `-NoThrowAttr 0x5608c1260f20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12610f0 <<scratch space>:160:1> col:1 implicit nexttowardf 'float (float, long double)' extern
| |-ParmVarDecl 0x5608c12611e8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1261250 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1261190 <<invalid sloc>> Implicit 1030
| `-NoThrowAttr 0x5608c12612c8 <col:1> Implicit
|-FunctionDecl 0x5608c12612f0 prev 0x5608c12610f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:160:1 nexttowardf 'float (float, long double)' extern
| |-ParmVarDecl 0x5608c1260f90 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:264:37> col:37 __x 'float'
| |-ParmVarDecl 0x5608c1261010 <col:42, col:54> col:54 __y 'long double'
| |-BuiltinAttr 0x5608c12613f8 <<invalid sloc>> Inherited Implicit 1030
| `-NoThrowAttr 0x5608c12613a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1261558 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:162:1 __nexttowardf 'float (float, long double)' extern
| |-ParmVarDecl 0x5608c1261438 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:264:37> col:37 __x 'float'
| |-ParmVarDecl 0x5608c12614b8 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c1261608 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1261710 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:164:1 nextdownf 'float (float)' extern
| |-ParmVarDecl 0x5608c1261678 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c12617b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12618c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:166:1 __nextdownf 'float (float)' extern
| |-ParmVarDecl 0x5608c1261828 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x 'float'
| `-NoThrowAttr 0x5608c1261968 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1261a70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:167:1 nextupf 'float (float)' extern
| |-ParmVarDecl 0x5608c12619d8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x 'float'
| `-NoThrowAttr 0x5608c1261b18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1261c20 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:169:1 __nextupf 'float (float)' extern
| |-ParmVarDecl 0x5608c1261b88 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x 'float'
| `-NoThrowAttr 0x5608c1261cc8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1261e80 <<scratch space>:170:1> col:1 implicit remainderf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1261f78 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1261fe0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1261f20 <<invalid sloc>> Implicit 1033
| `-NoThrowAttr 0x5608c1262058 <col:1> Implicit
|-FunctionDecl 0x5608c1262080 prev 0x5608c1261e80 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:170:1 remainderf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1261d38 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c1261de0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y 'float'
| |-BuiltinAttr 0x5608c1262188 <<invalid sloc>> Inherited Implicit 1033
| `-NoThrowAttr 0x5608c1262130 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12622e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:172:1 __remainderf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c12621c8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c1262248 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y 'float'
| `-NoThrowAttr 0x5608c1262398 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1262528 <<scratch space>:173:1> col:1 implicit scalbnf 'float (float, int)' extern
| |-ParmVarDecl 0x5608c1262620 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1262688 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c12625c8 <<invalid sloc>> Implicit 1048
| `-NoThrowAttr 0x5608c1262700 <col:1> Implicit
|-FunctionDecl 0x5608c1262728 prev 0x5608c1262528 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:173:1 scalbnf 'float (float, int)' extern
| |-ParmVarDecl 0x5608c1262408 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x 'float'
| |-ParmVarDecl 0x5608c1262488 <col:38, col:42> col:42 __n 'int'
| |-BuiltinAttr 0x5608c1262830 <<invalid sloc>> Inherited Implicit 1048
| `-NoThrowAttr 0x5608c12627d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1262990 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:175:1 __scalbnf 'float (float, int)' extern
| |-ParmVarDecl 0x5608c1262870 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x 'float'
| |-ParmVarDecl 0x5608c12628f0 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c1262a40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1262b48 <<scratch space>:176:1> col:1 implicit ilogbf 'int (float)' extern
| |-ParmVarDecl 0x5608c1262c40 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1262be8 <<invalid sloc>> Implicit 991
| `-NoThrowAttr 0x5608c1262cb0 <col:1> Implicit
|-FunctionDecl 0x5608c1262cd8 prev 0x5608c1262b48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:176:1 ilogbf 'int (float)' extern
| |-ParmVarDecl 0x5608c1262ab0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c1262df0 <<invalid sloc>> Inherited Implicit 991
| `-NoThrowAttr 0x5608c1262d80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1262ec8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:178:1 __ilogbf 'int (float)' extern
| |-ParmVarDecl 0x5608c1262e30 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c1262f70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12630b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:180:1 llogbf 'long (float)' extern
| |-ParmVarDecl 0x5608c1262fe0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x 'float'
| `-NoThrowAttr 0x5608c1263158 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1263260 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:182:1 __llogbf 'long (float)' extern
| |-ParmVarDecl 0x5608c12631c8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x 'float'
| `-NoThrowAttr 0x5608c1263308 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12634d0 <<scratch space>:183:1> col:1 implicit scalblnf 'float (float, long)' extern
| |-ParmVarDecl 0x5608c12635c8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1263630 <<invalid sloc>> <invalid sloc> 'long'
| |-BuiltinAttr 0x5608c1263570 <<invalid sloc>> Implicit 1045
| `-NoThrowAttr 0x5608c12636a8 <col:1> Implicit
|-FunctionDecl 0x5608c12636d0 prev 0x5608c12634d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:183:1 scalblnf 'float (float, long)' extern
| |-ParmVarDecl 0x5608c1263378 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x 'float'
| |-ParmVarDecl 0x5608c12633f8 <col:39, col:48> col:48 __n 'long'
| |-BuiltinAttr 0x5608c12637d8 <<invalid sloc>> Inherited Implicit 1045
| `-NoThrowAttr 0x5608c1263780 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1263938 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:185:1 __scalblnf 'float (float, long)' extern
| |-ParmVarDecl 0x5608c1263818 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x 'float'
| |-ParmVarDecl 0x5608c1263898 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c12639e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1263af0 <<scratch space>:186:1> col:1 implicit nearbyintf 'float (float)' extern
| |-ParmVarDecl 0x5608c1263be8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1263b90 <<invalid sloc>> Implicit 1024
| |-NoThrowAttr 0x5608c1263c58 <col:1> Implicit
| `-ConstAttr 0x5608c1263c80 <col:1> Implicit
|-FunctionDecl 0x5608c1263ca8 prev 0x5608c1263af0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:186:1 nearbyintf 'float (float)' extern
| |-ParmVarDecl 0x5608c1263a58 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x 'float'
| |-BuiltinAttr 0x5608c1263da8 <<invalid sloc>> Inherited Implicit 1024
| |-ConstAttr 0x5608c1263f90 <<scratch space>:186:1> Inherited Implicit
| `-NoThrowAttr 0x5608c1263d50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1264068 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:188:1 __nearbyintf 'float (float)' extern
| |-ParmVarDecl 0x5608c1263fd0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x 'float'
| `-NoThrowAttr 0x5608c1264110 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1264218 <<scratch space>:189:1> col:1 implicit roundf 'float (float)' extern
| |-ParmVarDecl 0x5608c1264310 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c12642b8 <<invalid sloc>> Implicit 1042
| |-NoThrowAttr 0x5608c1264380 <col:1> Implicit
| `-ConstAttr 0x5608c12643a8 <col:1> Implicit
|-FunctionDecl 0x5608c12643d0 prev 0x5608c1264218 </usr/include/math.h:297:3, line:294:66> <scratch space>:189:1 roundf 'float (float)' extern
| |-ParmVarDecl 0x5608c1264180 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x 'float'
| |-BuiltinAttr 0x5608c12644f8 <<invalid sloc>> Inherited Implicit 1042
| |-NoThrowAttr 0x5608c1264478 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12644d0 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12645d0 </usr/include/math.h:297:3, line:295:79> <scratch space>:191:1 __roundf 'float (float)' extern
| |-ParmVarDecl 0x5608c1264538 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x 'float'
| |-NoThrowAttr 0x5608c1264678 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12646d0 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12647a8 <<scratch space>:192:1> col:1 implicit truncf 'float (float)' extern
| |-ParmVarDecl 0x5608c12648a0 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1264848 <<invalid sloc>> Implicit 1069
| |-NoThrowAttr 0x5608c1264910 <col:1> Implicit
| `-ConstAttr 0x5608c1264938 <col:1> Implicit
|-FunctionDecl 0x5608c1264960 prev 0x5608c12647a8 </usr/include/math.h:297:3, line:294:66> <scratch space>:192:1 truncf 'float (float)' extern
| |-ParmVarDecl 0x5608c1264710 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x 'float'
| |-BuiltinAttr 0x5608c1264a88 <<invalid sloc>> Inherited Implicit 1069
| |-NoThrowAttr 0x5608c1264a08 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1264a60 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c1264b60 </usr/include/math.h:297:3, line:295:79> <scratch space>:194:1 __truncf 'float (float)' extern
| |-ParmVarDecl 0x5608c1264ac8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x 'float'
| |-NoThrowAttr 0x5608c1264c08 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1264c60 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c1264e90 <<scratch space>:195:1> col:1 implicit remquof 'float (float, float, int *)' extern
| |-ParmVarDecl 0x5608c1265130 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1265198 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1265200 <<invalid sloc>> <invalid sloc> 'int *'
| |-BuiltinAttr 0x5608c1264f30 <<invalid sloc>> Implicit 1036
| `-NoThrowAttr 0x5608c1265280 <col:1> Implicit
|-FunctionDecl 0x5608c12652a8 prev 0x5608c1264e90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:195:1 remquof 'float (float, float, int *)' extern
| |-ParmVarDecl 0x5608c1264ca0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x 'float'
| |-ParmVarDecl 0x5608c1264d20 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y 'float'
| |-ParmVarDecl 0x5608c1264da0 <col:53, col:58> col:58 __quo 'int *'
| |-BuiltinAttr 0x5608c12653b8 <<invalid sloc>> Inherited Implicit 1036
| `-NoThrowAttr 0x5608c1265360 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12655a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:197:1 __remquof 'float (float, float, int *)' extern
| |-ParmVarDecl 0x5608c12653f8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x 'float'
| |-ParmVarDecl 0x5608c1265478 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y 'float'
| |-ParmVarDecl 0x5608c12654f8 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c1265658 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1265760 <<scratch space>:198:1> col:1 implicit lrintf 'long (float)' extern
| |-ParmVarDecl 0x5608c1265858 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1265800 <<invalid sloc>> Implicit 1018
| `-NoThrowAttr 0x5608c12658c8 <col:1> Implicit
|-FunctionDecl 0x5608c12658f0 prev 0x5608c1265760 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:198:1 lrintf 'long (float)' extern
| |-ParmVarDecl 0x5608c12656c8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x 'float'
| |-BuiltinAttr 0x5608c12659f0 <<invalid sloc>> Inherited Implicit 1018
| `-NoThrowAttr 0x5608c1265998 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1265ac8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:200:1 __lrintf 'long (float)' extern
| |-ParmVarDecl 0x5608c1265a30 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x 'float'
| `-NoThrowAttr 0x5608c1265b70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1265cb0 <<scratch space>:201:1> col:1 implicit llrintf 'long long (float)' extern
| |-ParmVarDecl 0x5608c1265da8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1265d50 <<invalid sloc>> Implicit 997
| `-NoThrowAttr 0x5608c1265e18 <col:1> Implicit
|-FunctionDecl 0x5608c1265e40 prev 0x5608c1265cb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:201:1 llrintf 'long long (float)' extern
| |-ParmVarDecl 0x5608c1265be0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x 'float'
| |-BuiltinAttr 0x5608c1265f40 <<invalid sloc>> Inherited Implicit 997
| `-NoThrowAttr 0x5608c1265ee8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1266018 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:203:1 __llrintf 'long long (float)' extern
| |-ParmVarDecl 0x5608c1265f80 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x 'float'
| `-NoThrowAttr 0x5608c12660c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1266428 <<scratch space>:204:1> col:1 implicit lroundf 'long (float)' extern
| |-ParmVarDecl 0x5608c1266520 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c12664c8 <<invalid sloc>> Implicit 1021
| `-NoThrowAttr 0x5608c1266590 <col:1> Implicit
|-FunctionDecl 0x5608c12665b8 prev 0x5608c1266428 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:204:1 lroundf 'long (float)' extern
| |-ParmVarDecl 0x5608c1266390 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x 'float'
| |-BuiltinAttr 0x5608c12666b8 <<invalid sloc>> Inherited Implicit 1021
| `-NoThrowAttr 0x5608c1266660 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1266790 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:206:1 __lroundf 'long (float)' extern
| |-ParmVarDecl 0x5608c12666f8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x 'float'
| `-NoThrowAttr 0x5608c1266838 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1266940 <<scratch space>:207:1> col:1 implicit llroundf 'long long (float)' extern
| |-ParmVarDecl 0x5608c1266a38 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c12669e0 <<invalid sloc>> Implicit 1000
| `-NoThrowAttr 0x5608c1266aa8 <col:1> Implicit
|-FunctionDecl 0x5608c1266ad0 prev 0x5608c1266940 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:207:1 llroundf 'long long (float)' extern
| |-ParmVarDecl 0x5608c12668a8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x 'float'
| |-BuiltinAttr 0x5608c1266bd0 <<invalid sloc>> Inherited Implicit 1000
| `-NoThrowAttr 0x5608c1266b78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1266ca8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:209:1 __llroundf 'long long (float)' extern
| |-ParmVarDecl 0x5608c1266c10 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x 'float'
| `-NoThrowAttr 0x5608c1266d50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1266ee0 <<scratch space>:210:1> col:1 implicit fdimf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1266fd8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1267040 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1266f80 <<invalid sloc>> Implicit 973
| `-NoThrowAttr 0x5608c12670b8 <col:1> Implicit
|-FunctionDecl 0x5608c12670e0 prev 0x5608c1266ee0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:210:1 fdimf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1266dc0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x 'float'
| |-ParmVarDecl 0x5608c1266e40 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y 'float'
| |-BuiltinAttr 0x5608c12671e8 <<invalid sloc>> Inherited Implicit 973
| `-NoThrowAttr 0x5608c1267190 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1267470 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:212:1 __fdimf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1267228 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x 'float'
| |-ParmVarDecl 0x5608c12672a8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y 'float'
| `-NoThrowAttr 0x5608c1267520 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12676b0 <<scratch space>:214:1> col:1 implicit fmaxf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c12677a8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1267810 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1267750 <<invalid sloc>> Implicit 982
| |-NoThrowAttr 0x5608c1267888 <col:1> Implicit
| `-ConstAttr 0x5608c12678b0 <col:1> Implicit
|-FunctionDecl 0x5608c12678d8 prev 0x5608c12676b0 </usr/include/math.h:297:3, line:294:66> <scratch space>:214:1 fmaxf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1267590 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1267610 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y 'float'
| |-BuiltinAttr 0x5608c1267a08 <<invalid sloc>> Inherited Implicit 982
| |-NoThrowAttr 0x5608c1267988 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12679e0 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c1267b68 </usr/include/math.h:297:3, line:295:79> <scratch space>:216:1 __fmaxf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1267a48 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1267ac8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y 'float'
| |-NoThrowAttr 0x5608c1267c18 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1267c70 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c1267dd0 <<scratch space>:217:1> col:1 implicit fminf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1267ec8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1267f30 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c1267e70 <<invalid sloc>> Implicit 985
| |-NoThrowAttr 0x5608c1267fa8 <col:1> Implicit
| `-ConstAttr 0x5608c1267fd0 <col:1> Implicit
|-FunctionDecl 0x5608c1267ff8 prev 0x5608c1267dd0 </usr/include/math.h:297:3, line:294:66> <scratch space>:217:1 fminf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1267cb0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1267d30 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y 'float'
| |-BuiltinAttr 0x5608c1268128 <<invalid sloc>> Inherited Implicit 985
| |-NoThrowAttr 0x5608c12680a8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1268100 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c1268288 </usr/include/math.h:297:3, line:295:79> <scratch space>:219:1 __fminf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1268168 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c12681e8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y 'float'
| |-NoThrowAttr 0x5608c1268338 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1268390 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c1268810 <<scratch space>:220:1> col:1 implicit fmaf 'float (float, float, float)' extern
| |-ParmVarDecl 0x5608c1268908 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c1268970 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x5608c12689d8 <<invalid sloc>> <invalid sloc> 'float'
| |-BuiltinAttr 0x5608c12688b0 <<invalid sloc>> Implicit 979
| |-ConstAttr 0x5608c1268a58 <col:1> Implicit
| `-NoThrowAttr 0x5608c1268a80 <col:1> Implicit
|-FunctionDecl 0x5608c1268aa8 prev 0x5608c1268810 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:220:1 fmaf 'float (float, float, float)' extern
| |-ParmVarDecl 0x5608c12683d0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x 'float'
| |-ParmVarDecl 0x5608c12686a0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y 'float'
| |-ParmVarDecl 0x5608c1268720 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z 'float'
| |-BuiltinAttr 0x5608c1268bb8 <<invalid sloc>> Inherited Implicit 979
| |-ConstAttr 0x5608c1268be0 <<scratch space>:220:1> Inherited Implicit
| `-NoThrowAttr 0x5608c1268b60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1268dc8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:222:1 __fmaf 'float (float, float, float)' extern
| |-ParmVarDecl 0x5608c1268c20 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x 'float'
| |-ParmVarDecl 0x5608c1268ca0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y 'float'
| |-ParmVarDecl 0x5608c1268d20 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z 'float'
| `-NoThrowAttr 0x5608c1268e80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1268f88 </usr/include/math.h:297:3, line:294:66> <scratch space>:224:1 roundevenf 'float (float)' extern
| |-ParmVarDecl 0x5608c1268ef0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x 'float'
| |-NoThrowAttr 0x5608c1269030 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1269088 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c1269160 </usr/include/math.h:297:3, line:295:79> <scratch space>:226:1 __roundevenf 'float (float)' extern
| |-ParmVarDecl 0x5608c12690c8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x 'float'
| |-NoThrowAttr 0x5608c1269208 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1269260 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c12694c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:227:1 fromfpf '__intmax_t (float, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12692a0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x 'float'
| |-ParmVarDecl 0x5608c1269320 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12693a0 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1269580 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1269cc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:229:1 __fromfpf '__intmax_t (float, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12695f0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x 'float'
| |-ParmVarDecl 0x5608c1269ba0 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c1269c20 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1269d78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126a008 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:230:1 ufromfpf '__uintmax_t (float, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1269de8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x 'float'
| |-ParmVarDecl 0x5608c1269e68 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c1269ee8 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c126a0c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126a2d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:232:1 __ufromfpf '__uintmax_t (float, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c126a130 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x 'float'
| |-ParmVarDecl 0x5608c126a1b0 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c126a230 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c126a388 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126a598 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:233:1 fromfpxf '__intmax_t (float, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c126a3f8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x 'float'
| |-ParmVarDecl 0x5608c126a478 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c126a4f8 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c126a650 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126a860 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:235:1 __fromfpxf '__intmax_t (float, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c126a6c0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x 'float'
| |-ParmVarDecl 0x5608c126a740 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c126a7c0 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c126a918 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126adb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:236:1 ufromfpxf '__uintmax_t (float, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c126a988 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x 'float'
| |-ParmVarDecl 0x5608c126aa08 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c126aa88 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c126ae68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126b078 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:238:1 __ufromfpxf '__uintmax_t (float, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c126aed8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x 'float'
| |-ParmVarDecl 0x5608c126af58 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c126afd8 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c126b130 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126b330 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:239:1 canonicalizef 'int (float *, const float *)' extern
| |-ParmVarDecl 0x5608c126b1a0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:370:47> col:47 __cx 'float *'
| |-ParmVarDecl 0x5608c126b250 <col:53, col:70> col:70 __x 'const float *'
| `-NoThrowAttr 0x5608c126b3e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126b570 </usr/include/math.h:297:3, line:294:66> <scratch space>:242:1 fmaxmagf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126b450 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x 'float'
| |-ParmVarDecl 0x5608c126b4d0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y 'float'
| |-NoThrowAttr 0x5608c126b620 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126b678 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c126b7d8 </usr/include/math.h:297:3, line:295:79> <scratch space>:244:1 __fmaxmagf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126b6b8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x 'float'
| |-ParmVarDecl 0x5608c126b738 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y 'float'
| |-NoThrowAttr 0x5608c126b888 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126b8e0 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c126ba40 </usr/include/math.h:297:3, line:294:66> <scratch space>:245:1 fminmagf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126b920 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x 'float'
| |-ParmVarDecl 0x5608c126b9a0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y 'float'
| |-NoThrowAttr 0x5608c126baf0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126bb48 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c126bca8 </usr/include/math.h:297:3, line:295:79> <scratch space>:247:1 __fminmagf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126bb88 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x 'float'
| |-ParmVarDecl 0x5608c126bc08 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y 'float'
| |-NoThrowAttr 0x5608c126bd58 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126bec0 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c126c020 </usr/include/math.h:297:3, line:294:66> <scratch space>:249:1 fmaximumf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126bf00 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c126bf80 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y 'float'
| |-NoThrowAttr 0x5608c126c0d0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126c128 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c126c288 </usr/include/math.h:297:3, line:295:79> <scratch space>:251:1 __fmaximumf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126c168 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c126c1e8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y 'float'
| |-NoThrowAttr 0x5608c126c338 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126c390 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c126c4f0 </usr/include/math.h:297:3, line:294:66> <scratch space>:252:1 fminimumf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126c3d0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c126c450 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y 'float'
| |-NoThrowAttr 0x5608c126c5a0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126c5f8 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c126c758 </usr/include/math.h:297:3, line:295:79> <scratch space>:254:1 __fminimumf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126c638 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x 'float'
| |-ParmVarDecl 0x5608c126c6b8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y 'float'
| |-NoThrowAttr 0x5608c126c808 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126c860 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c126c9c0 </usr/include/math.h:297:3, line:294:66> <scratch space>:255:1 fmaximum_numf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126c8a0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x 'float'
| |-ParmVarDecl 0x5608c126c920 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y 'float'
| |-NoThrowAttr 0x5608c126ca70 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126cac8 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c126cc28 </usr/include/math.h:297:3, line:295:79> <scratch space>:257:1 __fmaximum_numf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126cb08 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x 'float'
| |-ParmVarDecl 0x5608c126cb88 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y 'float'
| |-NoThrowAttr 0x5608c126ccd8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126cd30 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c126ced0 </usr/include/math.h:297:3, line:294:66> <scratch space>:258:1 fminimum_numf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126cd70 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x 'float'
| |-ParmVarDecl 0x5608c126cdf0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y 'float'
| |-NoThrowAttr 0x5608c126cf80 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126cfd8 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c126d138 </usr/include/math.h:297:3, line:295:79> <scratch space>:260:1 __fminimum_numf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126d018 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x 'float'
| |-ParmVarDecl 0x5608c126d098 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y 'float'
| |-NoThrowAttr 0x5608c126d1e8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126d240 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c126d3a0 </usr/include/math.h:297:3, line:294:66> <scratch space>:261:1 fmaximum_magf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126d280 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x 'float'
| |-ParmVarDecl 0x5608c126d300 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y 'float'
| |-NoThrowAttr 0x5608c126d450 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126d4a8 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c126d608 </usr/include/math.h:297:3, line:295:79> <scratch space>:263:1 __fmaximum_magf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126d4e8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x 'float'
| |-ParmVarDecl 0x5608c126d568 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y 'float'
| |-NoThrowAttr 0x5608c126d6b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126d710 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c126d870 </usr/include/math.h:297:3, line:294:66> <scratch space>:264:1 fminimum_magf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126d750 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x 'float'
| |-ParmVarDecl 0x5608c126d7d0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y 'float'
| |-NoThrowAttr 0x5608c126d920 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126d978 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c126dad8 </usr/include/math.h:297:3, line:295:79> <scratch space>:266:1 __fminimum_magf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126d9b8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x 'float'
| |-ParmVarDecl 0x5608c126da38 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y 'float'
| |-NoThrowAttr 0x5608c126db88 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126dbe0 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c126dd40 </usr/include/math.h:297:3, line:294:66> <scratch space>:267:1 fmaximum_mag_numf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126dc20 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x 'float'
| |-ParmVarDecl 0x5608c126dca0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y 'float'
| |-NoThrowAttr 0x5608c126ddf0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126de48 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c126f010 </usr/include/math.h:297:3, line:295:79> <scratch space>:269:1 __fmaximum_mag_numf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126eef0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x 'float'
| |-ParmVarDecl 0x5608c126ef70 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y 'float'
| |-NoThrowAttr 0x5608c126f0c0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126f118 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c126f278 </usr/include/math.h:297:3, line:294:66> <scratch space>:270:1 fminimum_mag_numf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126f158 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x 'float'
| |-ParmVarDecl 0x5608c126f1d8 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y 'float'
| |-NoThrowAttr 0x5608c126f328 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126f380 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c126f4e0 </usr/include/math.h:297:3, line:295:79> <scratch space>:272:1 __fminimum_mag_numf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c126f3c0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x 'float'
| |-ParmVarDecl 0x5608c126f440 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y 'float'
| |-NoThrowAttr 0x5608c126f590 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c126f5e8 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c126f780 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:274:1 totalorderf 'int (const float *, const float *)' extern
| |-ParmVarDecl 0x5608c126f628 </usr/include/bits/mathcalls.h:411:34, col:51> col:51 __x 'const float *'
| |-ParmVarDecl 0x5608c126f6a8 <line:412:6, col:23> col:23 __y 'const float *'
| |-NoThrowAttr 0x5608c126f830 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c126f888 <line:308:45>
|-FunctionDecl 0x5608c126f9e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:275:1 totalordermagf 'int (const float *, const float *)' extern
| |-ParmVarDecl 0x5608c126f8c8 </usr/include/bits/mathcalls.h:416:37, col:54> col:54 __x 'const float *'
| |-ParmVarDecl 0x5608c126f948 <line:417:9, col:26> col:26 __y 'const float *'
| |-NoThrowAttr 0x5608c126fa98 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c126faf0 <line:308:45>
|-FunctionDecl 0x5608c126fc00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:276:1 getpayloadf 'float (const float *)' extern
| |-ParmVarDecl 0x5608c126fb30 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const float *'
| `-NoThrowAttr 0x5608c126fca8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126fdb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:278:1 __getpayloadf 'float (const float *)' extern
| |-ParmVarDecl 0x5608c126fd18 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const float *'
| `-NoThrowAttr 0x5608c126fe58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1223160 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:279:1 setpayloadf 'int (float *, float)' extern
| |-ParmVarDecl 0x5608c1223000 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:424:45> col:45 __x 'float *'
| |-ParmVarDecl 0x5608c1223080 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:424:60> col:60 __payload 'float'
| `-NoThrowAttr 0x5608c1223210 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12233a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:280:1 setpayloadsigf 'int (float *, float)' extern
| |-ParmVarDecl 0x5608c1223280 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:427:48> col:48 __x 'float *'
| |-ParmVarDecl 0x5608c1223300 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:427:63> col:63 __payload 'float'
| `-NoThrowAttr 0x5608c1223450 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12235e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:281:1 scalbf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c12234c0 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:435:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1223540 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:435:47> col:47 __n 'float'
| `-NoThrowAttr 0x5608c1223690 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1223820 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:283:1 __scalbf 'float (float, float)' extern
| |-ParmVarDecl 0x5608c1223700 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:435:32> col:32 __x 'float'
| |-ParmVarDecl 0x5608c1223780 </usr/include/math.h:325:21, /usr/include/bits/mathcalls.h:435:47> col:47 __n 'float'
| `-NoThrowAttr 0x5608c12238d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1223a10 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:21:32> <scratch space>:284:1 __fpclassifyl 'int (long double)' extern
| |-ParmVarDecl 0x5608c1223940 </usr/include/math.h:393:22, /usr/include/bits/mathcalls-helper-functions.h:20:50> col:50 __value 'long double'
| |-NoThrowAttr 0x5608c1223ab8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1223b10 </usr/include/bits/mathcalls-helper-functions.h:21:22>
|-FunctionDecl 0x5608c1223be8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:25:32> <scratch space>:285:1 __signbitl 'int (long double)' extern
| |-ParmVarDecl 0x5608c1223b50 </usr/include/math.h:393:22, /usr/include/bits/mathcalls-helper-functions.h:24:47> col:47 __value 'long double'
| |-NoThrowAttr 0x5608c1223c90 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1223ce8 </usr/include/bits/mathcalls-helper-functions.h:25:22>
|-FunctionDecl 0x5608c1223dc0 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:30:29> <scratch space>:286:1 __isinfl 'int (long double)' extern
| |-ParmVarDecl 0x5608c1223d28 </usr/include/math.h:393:22, /usr/include/bits/mathcalls-helper-functions.h:29:45> col:45 __value 'long double'
| |-NoThrowAttr 0x5608c1223e68 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1223ec0 </usr/include/bits/mathcalls-helper-functions.h:30:19>
|-FunctionDecl 0x5608c1273f10 <<scratch space>:287:1> col:1 implicit __finitel 'int (long double)' extern
| |-ParmVarDecl 0x5608c1274008 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1273fb0 <<invalid sloc>> Implicit 908
| |-NoThrowAttr 0x5608c1274078 <col:1> Implicit
| `-ConstAttr 0x5608c12740a0 <col:1> Implicit
|-FunctionDecl 0x5608c12740c8 prev 0x5608c1273f10 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:34:29> <scratch space>:287:1 __finitel 'int (long double)' extern
| |-ParmVarDecl 0x5608c1223f00 </usr/include/math.h:393:22, /usr/include/bits/mathcalls-helper-functions.h:33:46> col:46 __value 'long double'
| |-BuiltinAttr 0x5608c12741f0 <<invalid sloc>> Inherited Implicit 908
| |-NoThrowAttr 0x5608c1274170 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12741c8 </usr/include/bits/mathcalls-helper-functions.h:34:19>
|-FunctionDecl 0x5608c12742c8 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:38:29> <scratch space>:288:1 __isnanl 'int (long double)' extern
| |-ParmVarDecl 0x5608c1274230 </usr/include/math.h:393:22, /usr/include/bits/mathcalls-helper-functions.h:37:45> col:45 __value 'long double'
| |-NoThrowAttr 0x5608c1274370 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12743c8 </usr/include/bits/mathcalls-helper-functions.h:38:19>
|-FunctionDecl 0x5608c1274560 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:289:1 __iseqsigl 'int (long double, long double)' extern
| |-ParmVarDecl 0x5608c1274408 </usr/include/math.h:393:22, /usr/include/bits/mathcalls-helper-functions.h:41:47> col:47 __x 'long double'
| |-ParmVarDecl 0x5608c1274488 </usr/include/math.h:393:22, /usr/include/bits/mathcalls-helper-functions.h:41:62> col:62 __y 'long double'
| `-NoThrowAttr 0x5608c1274610 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1274718 </usr/include/math.h:297:3, /usr/include/bits/mathcalls-helper-functions.h:45:32> <scratch space>:290:1 __issignalingl 'int (long double)' extern
| |-ParmVarDecl 0x5608c1274680 </usr/include/math.h:393:22, /usr/include/bits/mathcalls-helper-functions.h:44:51> col:51 __value 'long double'
| |-NoThrowAttr 0x5608c12747c0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1274818 </usr/include/bits/mathcalls-helper-functions.h:45:22>
|-FunctionDecl 0x5608c1274920 <<scratch space>:293:1> col:1 implicit acosl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1274a18 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12749c0 <<invalid sloc>> Implicit 929
| `-NoThrowAttr 0x5608c1274a88 <col:1> Implicit
|-FunctionDecl 0x5608c1274ab0 prev 0x5608c1274920 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:293:1 acosl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1274858 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:53:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c1274bb0 <<invalid sloc>> Inherited Implicit 929
| `-NoThrowAttr 0x5608c1274b58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1274c88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:295:1 __acosl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1274bf0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:53:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c1274d30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1274e38 <<scratch space>:298:1> col:1 implicit asinl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1274f50 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1274ed8 <<invalid sloc>> Implicit 935
| `-NoThrowAttr 0x5608c1274fc0 <col:1> Implicit
|-FunctionDecl 0x5608c1274fe8 prev 0x5608c1274e38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:298:1 asinl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1274da0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:55:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c12750e8 <<invalid sloc>> Inherited Implicit 935
| `-NoThrowAttr 0x5608c1275090 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12751c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:300:1 __asinl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1275128 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:55:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c1275268 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1275370 <<scratch space>:303:1> col:1 implicit atanl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1275468 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1275410 <<invalid sloc>> Implicit 941
| `-NoThrowAttr 0x5608c12754d8 <col:1> Implicit
|-FunctionDecl 0x5608c1275500 prev 0x5608c1275370 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:303:1 atanl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12752d8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:57:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c1275600 <<invalid sloc>> Inherited Implicit 941
| `-NoThrowAttr 0x5608c12755a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12756d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:305:1 __atanl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1275640 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:57:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c1275780 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1275950 <<scratch space>:308:1> col:1 implicit atan2l 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1275a48 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1275ab0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12759f0 <<invalid sloc>> Implicit 893
| `-NoThrowAttr 0x5608c1275b28 <col:1> Implicit
|-FunctionDecl 0x5608c1275b50 prev 0x5608c1275950 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:308:1 atan2l 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12757f0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:59:36> col:36 __y 'long double'
| |-ParmVarDecl 0x5608c1275870 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:59:51> col:51 __x 'long double'
| |-BuiltinAttr 0x5608c1275c58 <<invalid sloc>> Inherited Implicit 893
| `-NoThrowAttr 0x5608c1275c00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1275db8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:310:1 __atan2l 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1275c98 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:59:36> col:36 __y 'long double'
| |-ParmVarDecl 0x5608c1275d18 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:59:51> col:51 __x 'long double'
| `-NoThrowAttr 0x5608c1275e68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1275fc8 <<scratch space>:313:1> col:1 implicit cosl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12760c0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1276068 <<invalid sloc>> Implicit 953
| `-NoThrowAttr 0x5608c1276130 <col:1> Implicit
|-FunctionDecl 0x5608c1276158 prev 0x5608c1275fc8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:313:1 cosl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1275f30 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:62:34> col:34 __x 'long double'
| |-BuiltinAttr 0x5608c1276258 <<invalid sloc>> Inherited Implicit 953
| `-NoThrowAttr 0x5608c1276200 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1276330 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:315:1 __cosl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1276298 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:62:34> col:34 __x 'long double'
| `-NoThrowAttr 0x5608c12763d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12764e0 <<scratch space>:318:1> col:1 implicit sinl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12765d8 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1276580 <<invalid sloc>> Implicit 1052
| `-NoThrowAttr 0x5608c1276648 <col:1> Implicit
|-FunctionDecl 0x5608c1276670 prev 0x5608c12764e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:318:1 sinl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1276448 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:64:34> col:34 __x 'long double'
| |-BuiltinAttr 0x5608c1276770 <<invalid sloc>> Inherited Implicit 1052
| `-NoThrowAttr 0x5608c1276718 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1276848 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:320:1 __sinl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12767b0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:64:34> col:34 __x 'long double'
| `-NoThrowAttr 0x5608c12768f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12769f8 <<scratch space>:323:1> col:1 implicit tanl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1276af0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1276a98 <<invalid sloc>> Implicit 1061
| `-NoThrowAttr 0x5608c1276b60 <col:1> Implicit
|-FunctionDecl 0x5608c1276b88 prev 0x5608c12769f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:323:1 tanl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1276960 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:66:34> col:34 __x 'long double'
| |-BuiltinAttr 0x5608c1276c88 <<invalid sloc>> Inherited Implicit 1061
| `-NoThrowAttr 0x5608c1276c30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1276d60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:325:1 __tanl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1276cc8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:66:34> col:34 __x 'long double'
| `-NoThrowAttr 0x5608c1276e08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1276f40 <<scratch space>:328:1> col:1 implicit coshl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1277038 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1276fe0 <<invalid sloc>> Implicit 956
| `-NoThrowAttr 0x5608c12770a8 <col:1> Implicit
|-FunctionDecl 0x5608c12770d0 prev 0x5608c1276f40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:328:1 coshl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1276e78 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:71:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c12771d0 <<invalid sloc>> Inherited Implicit 956
| `-NoThrowAttr 0x5608c1277178 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12772a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:330:1 __coshl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1277210 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:71:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c1277350 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1277458 <<scratch space>:333:1> col:1 implicit sinhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1277550 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12774f8 <<invalid sloc>> Implicit 1055
| `-NoThrowAttr 0x5608c12775c0 <col:1> Implicit
|-FunctionDecl 0x5608c12775e8 prev 0x5608c1277458 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:333:1 sinhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12773c0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:73:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c12776e8 <<invalid sloc>> Inherited Implicit 1055
| `-NoThrowAttr 0x5608c1277690 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12777c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:335:1 __sinhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1277728 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:73:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c1277868 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1277970 <<scratch space>:338:1> col:1 implicit tanhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1277a68 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1277a10 <<invalid sloc>> Implicit 1064
| `-NoThrowAttr 0x5608c1277ad8 <col:1> Implicit
|-FunctionDecl 0x5608c1277b00 prev 0x5608c1277970 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:338:1 tanhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12778d8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:75:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c1277c00 <<invalid sloc>> Inherited Implicit 1064
| `-NoThrowAttr 0x5608c1277ba8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1277cd8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:340:1 __tanhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1277c40 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:75:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c1277d80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12353f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:343:1 sincosl 'void (long double, long double *, long double *)' extern
| |-ParmVarDecl 0x5608c1277df0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:80:14> col:14 __x 'long double'
| |-ParmVarDecl 0x5608c1277ea0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx 'long double *'
| |-ParmVarDecl 0x5608c1235310 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx 'long double *'
| `-NoThrowAttr 0x5608c12354b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12356c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:345:1 __sincosl 'void (long double, long double *, long double *)' extern
| |-ParmVarDecl 0x5608c1235520 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:80:14> col:14 __x 'long double'
| |-ParmVarDecl 0x5608c12355a0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx 'long double *'
| |-ParmVarDecl 0x5608c1235620 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx 'long double *'
| `-NoThrowAttr 0x5608c1235778 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1235880 <<scratch space>:348:1> col:1 implicit acoshl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1235978 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1235920 <<invalid sloc>> Implicit 932
| `-NoThrowAttr 0x5608c12359e8 <col:1> Implicit
|-FunctionDecl 0x5608c1235a10 prev 0x5608c1235880 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:348:1 acoshl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12357e8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:85:36> col:36 __x 'long double'
| |-BuiltinAttr 0x5608c1235b10 <<invalid sloc>> Inherited Implicit 932
| `-NoThrowAttr 0x5608c1235ab8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1235be8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:350:1 __acoshl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1235b50 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:85:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c1235c90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1235d98 <<scratch space>:353:1> col:1 implicit asinhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1235e90 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1235e38 <<invalid sloc>> Implicit 938
| `-NoThrowAttr 0x5608c1235f00 <col:1> Implicit
|-FunctionDecl 0x5608c1235f28 prev 0x5608c1235d98 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:353:1 asinhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1235d00 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:87:36> col:36 __x 'long double'
| |-BuiltinAttr 0x5608c1236028 <<invalid sloc>> Inherited Implicit 938
| `-NoThrowAttr 0x5608c1235fd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1236100 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:355:1 __asinhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1236068 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:87:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c12361a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1236320 <<scratch space>:358:1> col:1 implicit atanhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1236418 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12363c0 <<invalid sloc>> Implicit 944
| `-NoThrowAttr 0x5608c1236488 <col:1> Implicit
|-FunctionDecl 0x5608c12364b0 prev 0x5608c1236320 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:358:1 atanhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1236218 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:89:36> col:36 __x 'long double'
| |-BuiltinAttr 0x5608c12365b0 <<invalid sloc>> Inherited Implicit 944
| `-NoThrowAttr 0x5608c1236558 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1236688 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:360:1 __atanhl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12365f0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:89:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c1236730 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1236838 <<scratch space>:363:1> col:1 implicit expl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1236930 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12368d8 <<invalid sloc>> Implicit 965
| `-NoThrowAttr 0x5608c12369a0 <col:1> Implicit
|-FunctionDecl 0x5608c12369c8 prev 0x5608c1236838 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:363:1 expl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12367a0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:95:34> col:34 __x 'long double'
| |-BuiltinAttr 0x5608c1236ac8 <<invalid sloc>> Inherited Implicit 965
| `-NoThrowAttr 0x5608c1236a70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1236ba0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:365:1 __expl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1236b08 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:95:34> col:34 __x 'long double'
| `-NoThrowAttr 0x5608c1236c48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1236e10 <<scratch space>:366:1> col:1 implicit frexpl 'long double (long double, int *)' extern
| |-ParmVarDecl 0x5608c1236f08 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1236f70 <<invalid sloc>> <invalid sloc> 'int *'
| |-BuiltinAttr 0x5608c1236eb0 <<invalid sloc>> Implicit 914
| `-NoThrowAttr 0x5608c1236fe8 <col:1> Implicit
|-FunctionDecl 0x5608c1237010 prev 0x5608c1236e10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:366:1 frexpl 'long double (long double, int *)' extern
| |-ParmVarDecl 0x5608c1236cb8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:98:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c1236d38 <col:37, col:42> col:42 __exponent 'int *'
| |-BuiltinAttr 0x5608c1237118 <<invalid sloc>> Inherited Implicit 914
| `-NoThrowAttr 0x5608c12370c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1237278 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:368:1 __frexpl 'long double (long double, int *)' extern
| |-ParmVarDecl 0x5608c1237158 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:98:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c12371d8 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c127ff70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1280140 <<scratch space>:369:1> col:1 implicit ldexpl 'long double (long double, int)' extern
| |-ParmVarDecl 0x5608c1280238 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c12802a0 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c12801e0 <<invalid sloc>> Implicit 917
| `-NoThrowAttr 0x5608c1280318 <col:1> Implicit
|-FunctionDecl 0x5608c1280340 prev 0x5608c1280140 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:369:1 ldexpl 'long double (long double, int)' extern
| |-ParmVarDecl 0x5608c127ffe0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:101:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c1280060 <col:37, col:41> col:41 __exponent 'int'
| |-BuiltinAttr 0x5608c1280448 <<invalid sloc>> Inherited Implicit 917
| `-NoThrowAttr 0x5608c12803f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12805a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:371:1 __ldexpl 'long double (long double, int)' extern
| |-ParmVarDecl 0x5608c1280488 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:101:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c1280508 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c1280658 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1280760 <<scratch space>:374:1> col:1 implicit logl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1280858 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1280800 <<invalid sloc>> Implicit 1004
| `-NoThrowAttr 0x5608c12808c8 <col:1> Implicit
|-FunctionDecl 0x5608c12808f0 prev 0x5608c1280760 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:374:1 logl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12806c8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:104:34> col:34 __x 'long double'
| |-BuiltinAttr 0x5608c12809f0 <<invalid sloc>> Inherited Implicit 1004
| `-NoThrowAttr 0x5608c1280998 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1280ac8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:376:1 __logl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1280a30 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:104:34> col:34 __x 'long double'
| `-NoThrowAttr 0x5608c1280b70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1280c78 <<scratch space>:3:1> col:1 implicit log10l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1280d70 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1280d18 <<invalid sloc>> Implicit 1007
| `-NoThrowAttr 0x5608c1280de0 <col:1> Implicit
|-FunctionDecl 0x5608c1280e08 prev 0x5608c1280c78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:3:1 log10l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1280be0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:107:36> col:36 __x 'long double'
| |-BuiltinAttr 0x5608c1280f08 <<invalid sloc>> Inherited Implicit 1007
| `-NoThrowAttr 0x5608c1280eb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1280fe0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:5:1 __log10l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1280f48 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:107:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c1281088 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1281250 <<scratch space>:6:1> col:1 implicit modfl 'long double (long double, long double *)' extern
| |-ParmVarDecl 0x5608c1281348 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c12813b0 <<invalid sloc>> <invalid sloc> 'long double *'
| |-BuiltinAttr 0x5608c12812f0 <<invalid sloc>> Implicit 920
| `-NoThrowAttr 0x5608c1281428 <col:1> Implicit
|-FunctionDecl 0x5608c1281450 prev 0x5608c1281250 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:6:1 modfl 'long double (long double, long double *)' extern
| |-ParmVarDecl 0x5608c12810f8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:110:31> col:31 __x 'long double'
| |-ParmVarDecl 0x5608c1281178 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr 'long double *'
| |-BuiltinAttr 0x5608c1281558 <<invalid sloc>> Inherited Implicit 920
| `-NoThrowAttr 0x5608c1281500 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12816d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:384:76> <scratch space>:8:1 __modfl 'long double (long double, long double *)' extern
| |-ParmVarDecl 0x5608c1281598 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:110:31> col:31 __x 'long double'
| |-ParmVarDecl 0x5608c1281618 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr 'long double *'
| |-NoThrowAttr 0x5608c1281788 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c12817e0 <line:384:57, /usr/include/bits/mathcalls.h:110:69> 2
|-FunctionDecl 0x5608c12818c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:12:1 exp10l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1281830 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:114:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c1281970 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1281a78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:14:1 __exp10l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12819e0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:114:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c1281b20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1281c28 <<scratch space>:17:1> col:1 implicit expm1l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1281d20 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1281cc8 <<invalid sloc>> Implicit 971
| `-NoThrowAttr 0x5608c1281d90 <col:1> Implicit
|-FunctionDecl 0x5608c1281db8 prev 0x5608c1281c28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:17:1 expm1l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1281b90 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:119:36> col:36 __x 'long double'
| |-BuiltinAttr 0x5608c1281eb8 <<invalid sloc>> Inherited Implicit 971
| `-NoThrowAttr 0x5608c1281e60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1281fa0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:19:1 __expm1l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1281ef8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:119:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c1282048 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1282150 <<scratch space>:22:1> col:1 implicit log1pl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1282248 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12821f0 <<invalid sloc>> Implicit 1010
| `-NoThrowAttr 0x5608c12822b8 <col:1> Implicit
|-FunctionDecl 0x5608c12822e0 prev 0x5608c1282150 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:22:1 log1pl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12820b8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:122:36> col:36 __x 'long double'
| |-BuiltinAttr 0x5608c12823e0 <<invalid sloc>> Inherited Implicit 1010
| `-NoThrowAttr 0x5608c1282388 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12824b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:24:1 __log1pl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1282420 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:122:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c1282560 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1282668 <<scratch space>:25:1> col:1 implicit logbl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1282760 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1282708 <<invalid sloc>> Implicit 1016
| `-NoThrowAttr 0x5608c12827d0 <col:1> Implicit
|-FunctionDecl 0x5608c12827f8 prev 0x5608c1282668 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:25:1 logbl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12825d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:125:31> col:31 __x 'long double'
| |-BuiltinAttr 0x5608c12828f8 <<invalid sloc>> Inherited Implicit 1016
| `-NoThrowAttr 0x5608c12828a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12829d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:27:1 __logbl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1282938 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:125:31> col:31 __x 'long double'
| `-NoThrowAttr 0x5608c1282a78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1282b80 <<scratch space>:30:1> col:1 implicit exp2l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1282c78 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1282c20 <<invalid sloc>> Implicit 968
| `-NoThrowAttr 0x5608c1282ce8 <col:1> Implicit
|-FunctionDecl 0x5608c1282d10 prev 0x5608c1282b80 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:30:1 exp2l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1282ae8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:130:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c1282e10 <<invalid sloc>> Inherited Implicit 968
| `-NoThrowAttr 0x5608c1282db8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1282ee8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:32:1 __exp2l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1282e50 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:130:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c1282f90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1283098 <<scratch space>:35:1> col:1 implicit log2l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1283190 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1283138 <<invalid sloc>> Implicit 1013
| `-NoThrowAttr 0x5608c1283200 <col:1> Implicit
|-FunctionDecl 0x5608c1283228 prev 0x5608c1283098 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:35:1 log2l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1283000 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:133:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c1283328 <<invalid sloc>> Inherited Implicit 1013
| `-NoThrowAttr 0x5608c12832d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1283400 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:37:1 __log2l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1283368 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:133:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c12834a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1283638 <<scratch space>:40:1> col:1 implicit powl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1283730 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1283798 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12836d8 <<invalid sloc>> Implicit 926
| `-NoThrowAttr 0x5608c1283810 <col:1> Implicit
|-FunctionDecl 0x5608c1283838 prev 0x5608c1283638 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:40:1 powl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1283518 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:140:34> col:34 __x 'long double'
| |-ParmVarDecl 0x5608c1283598 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:140:49> col:49 __y 'long double'
| |-BuiltinAttr 0x5608c1283940 <<invalid sloc>> Inherited Implicit 926
| `-NoThrowAttr 0x5608c12838e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1283aa0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:42:1 __powl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1283980 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:140:34> col:34 __x 'long double'
| |-ParmVarDecl 0x5608c1283a00 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:140:49> col:49 __y 'long double'
| `-NoThrowAttr 0x5608c1283b50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1283c58 <<scratch space>:43:1> col:1 implicit sqrtl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1283d50 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1283cf8 <<invalid sloc>> Implicit 1058
| `-NoThrowAttr 0x5608c1283dc0 <col:1> Implicit
|-FunctionDecl 0x5608c1283de8 prev 0x5608c1283c58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:43:1 sqrtl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1283bc0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:143:31> col:31 __x 'long double'
| |-BuiltinAttr 0x5608c1283ee8 <<invalid sloc>> Inherited Implicit 1058
| `-NoThrowAttr 0x5608c1283e90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1284018 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:45:1 __sqrtl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1283f80 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:143:31> col:31 __x 'long double'
| `-NoThrowAttr 0x5608c12840c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1284250 <<scratch space>:48:1> col:1 implicit hypotl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1284348 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c12843b0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12842f0 <<invalid sloc>> Implicit 989
| `-NoThrowAttr 0x5608c1284428 <col:1> Implicit
|-FunctionDecl 0x5608c1284450 prev 0x5608c1284250 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:48:1 hypotl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1284130 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:147:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c12841b0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:147:51> col:51 __y 'long double'
| |-BuiltinAttr 0x5608c1284558 <<invalid sloc>> Inherited Implicit 989
| `-NoThrowAttr 0x5608c1284500 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12846b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:50:1 __hypotl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1284598 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:147:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c1284618 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:147:51> col:51 __y 'long double'
| `-NoThrowAttr 0x5608c1284768 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1284870 <<scratch space>:53:1> col:1 implicit cbrtl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1284968 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1284910 <<invalid sloc>> Implicit 947
| |-NoThrowAttr 0x5608c12849d8 <col:1> Implicit
| `-ConstAttr 0x5608c1284a00 <col:1> Implicit
|-FunctionDecl 0x5608c1284a28 prev 0x5608c1284870 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:53:1 cbrtl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12847d8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:152:35> col:35 __x 'long double'
| |-BuiltinAttr 0x5608c1284b28 <<invalid sloc>> Inherited Implicit 947
| |-ConstAttr 0x5608c1284b50 <<scratch space>:53:1> Inherited Implicit
| `-NoThrowAttr 0x5608c1284ad0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1284c28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:55:1 __cbrtl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1284b90 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:152:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c1284cd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1284dd8 <<scratch space>:56:1> col:1 implicit ceill 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1284ed0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1284e78 <<invalid sloc>> Implicit 950
| |-NoThrowAttr 0x5608c1284f40 <col:1> Implicit
| `-ConstAttr 0x5608c1284f68 <col:1> Implicit
|-FunctionDecl 0x5608c1284f90 prev 0x5608c1284dd8 </usr/include/math.h:297:3, line:294:66> <scratch space>:56:1 ceill 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1284d40 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:159:32> col:32 __x 'long double'
| |-BuiltinAttr 0x5608c12850b8 <<invalid sloc>> Inherited Implicit 950
| |-NoThrowAttr 0x5608c1285038 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1285090 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c1285190 </usr/include/math.h:297:3, line:295:79> <scratch space>:58:1 __ceill 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12850f8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:159:32> col:32 __x 'long double'
| |-NoThrowAttr 0x5608c1285238 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1285290 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c1285368 <<scratch space>:59:1> col:1 implicit fabsl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1285460 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1285408 <<invalid sloc>> Implicit 902
| |-NoThrowAttr 0x5608c12854d0 <col:1> Implicit
| `-ConstAttr 0x5608c12854f8 <col:1> Implicit
|-FunctionDecl 0x5608c1285520 prev 0x5608c1285368 </usr/include/math.h:297:3, line:294:66> <scratch space>:59:1 fabsl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12852d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:162:32> col:32 __x 'long double'
| |-BuiltinAttr 0x5608c1285648 <<invalid sloc>> Inherited Implicit 902
| |-NoThrowAttr 0x5608c12855c8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1285620 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c1285720 </usr/include/math.h:297:3, line:295:79> <scratch space>:61:1 __fabsl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1285688 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:162:32> col:32 __x 'long double'
| |-NoThrowAttr 0x5608c12857c8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1285820 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c12858f8 <<scratch space>:62:1> col:1 implicit floorl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12859f0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1285998 <<invalid sloc>> Implicit 977
| |-NoThrowAttr 0x5608c1285a60 <col:1> Implicit
| `-ConstAttr 0x5608c1285a88 <col:1> Implicit
|-FunctionDecl 0x5608c1285ab0 prev 0x5608c12858f8 </usr/include/math.h:297:3, line:294:66> <scratch space>:62:1 floorl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1285860 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:165:33> col:33 __x 'long double'
| |-BuiltinAttr 0x5608c1285bd8 <<invalid sloc>> Inherited Implicit 977
| |-NoThrowAttr 0x5608c1285b58 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1285bb0 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c1285cb0 </usr/include/math.h:297:3, line:295:79> <scratch space>:64:1 __floorl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1285c18 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:165:33> col:33 __x 'long double'
| |-NoThrowAttr 0x5608c1285d58 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1285db0 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c1285f90 <<scratch space>:65:1> col:1 implicit fmodl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1286088 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c12860f0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1286030 <<invalid sloc>> Implicit 911
| `-NoThrowAttr 0x5608c1286168 <col:1> Implicit
|-FunctionDecl 0x5608c1286190 prev 0x5608c1285f90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:65:1 fmodl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1285df0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:168:31> col:31 __x 'long double'
| |-ParmVarDecl 0x5608c1285e70 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:168:46> col:46 __y 'long double'
| |-BuiltinAttr 0x5608c1286298 <<invalid sloc>> Inherited Implicit 911
| `-NoThrowAttr 0x5608c1286240 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12863f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:67:1 __fmodl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12862d8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:168:31> col:31 __x 'long double'
| |-ParmVarDecl 0x5608c1286358 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:168:46> col:46 __y 'long double'
| `-NoThrowAttr 0x5608c12864a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12865b0 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:178:29> <scratch space>:68:1 isinfl 'int (long double)' extern
| |-ParmVarDecl 0x5608c1286518 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:177:42> col:42 __value 'long double'
| |-NoThrowAttr 0x5608c1286658 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12866b0 </usr/include/bits/mathcalls.h:178:19>
|-FunctionDecl 0x5608c1286788 <<scratch space>:69:1> col:1 implicit finitel 'int (long double)' extern
| |-ParmVarDecl 0x5608c1286880 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1286828 <<invalid sloc>> Implicit 905
| |-NoThrowAttr 0x5608c12868f0 <col:1> Implicit
| `-ConstAttr 0x5608c1286918 <col:1> Implicit
|-FunctionDecl 0x5608c1286940 prev 0x5608c1286788 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:184:29> <scratch space>:69:1 finitel 'int (long double)' extern
| |-ParmVarDecl 0x5608c12866f0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:183:43> col:43 __value 'long double'
| |-BuiltinAttr 0x5608c1286a68 <<invalid sloc>> Inherited Implicit 905
| |-NoThrowAttr 0x5608c12869e8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1286a40 </usr/include/bits/mathcalls.h:184:19>
|-FunctionDecl 0x5608c1286bc8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:70:1 dreml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1286aa8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:187:31> col:31 __x 'long double'
| |-ParmVarDecl 0x5608c1286b28 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:187:46> col:46 __y 'long double'
| `-NoThrowAttr 0x5608c1286c78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1286e08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:72:1 __dreml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1286ce8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:187:31> col:31 __x 'long double'
| |-ParmVarDecl 0x5608c1286d68 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:187:46> col:46 __y 'long double'
| `-NoThrowAttr 0x5608c1286eb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1286fc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:73:1 significandl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1286f28 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:191:38> col:38 __x 'long double'
| `-NoThrowAttr 0x5608c1287068 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1287170 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:75:1 __significandl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12870d8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:191:38> col:38 __x 'long double'
| `-NoThrowAttr 0x5608c1287218 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12873a8 <<scratch space>:76:1> col:1 implicit copysignl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12874a0 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1287508 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1287448 <<invalid sloc>> Implicit 899
| |-NoThrowAttr 0x5608c1287580 <col:1> Implicit
| `-ConstAttr 0x5608c12875a8 <col:1> Implicit
|-FunctionDecl 0x5608c12875d0 prev 0x5608c12873a8 </usr/include/math.h:297:3, line:294:66> <scratch space>:76:1 copysignl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1287288 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:198:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c1287308 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:198:51> col:51 __y 'long double'
| |-BuiltinAttr 0x5608c1287700 <<invalid sloc>> Inherited Implicit 899
| |-NoThrowAttr 0x5608c1287680 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12876d8 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c1287860 </usr/include/math.h:297:3, line:295:79> <scratch space>:78:1 __copysignl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1287740 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:198:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c12877c0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:198:51> col:51 __y 'long double'
| |-NoThrowAttr 0x5608c1287910 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1287968 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c1287a70 <<scratch space>:79:1> col:1 implicit nanl 'long double (const char *)' extern
| |-ParmVarDecl 0x5608c1287b68 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x5608c1287b10 <<invalid sloc>> Implicit 923
| |-NoThrowAttr 0x5608c1287bd8 <col:1> Implicit
| `-PureAttr 0x5608c1287c00 <col:1> Implicit
|-FunctionDecl 0x5608c1287c28 prev 0x5608c1287a70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:79:1 nanl 'long double (const char *)' extern
| |-ParmVarDecl 0x5608c12879a8 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| |-BuiltinAttr 0x5608c1287d28 <<invalid sloc>> Inherited Implicit 923
| |-PureAttr 0x5608c1287d50 <<scratch space>:79:1> Inherited Implicit
| `-NoThrowAttr 0x5608c1287cd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1287e28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:81:1 __nanl 'long double (const char *)' extern
| |-ParmVarDecl 0x5608c1287d90 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c1287ed0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1288038 </usr/include/math.h:297:3, /usr/include/bits/mathcalls.h:214:29> <scratch space>:82:1 isnanl 'int (long double)' extern
| |-ParmVarDecl 0x5608c1287fa0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:213:42> col:42 __value 'long double'
| |-NoThrowAttr 0x5608c12880e0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1288138 </usr/include/bits/mathcalls.h:214:19>
|-FunctionDecl 0x5608c1288210 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:83:1 j0l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1288178 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:220:28 'long double'
| `-NoThrowAttr 0x5608c12882b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12883c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:85:1 __j0l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1288328 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:220:28 'long double'
| `-NoThrowAttr 0x5608c1288468 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1288570 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:86:1 j1l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12884d8 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:221:28 'long double'
| `-NoThrowAttr 0x5608c1288618 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1288720 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:88:1 __j1l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1288688 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:221:28 'long double'
| `-NoThrowAttr 0x5608c12887c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1288990 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:89:1 jnl 'long double (int, long double)' extern
| |-ParmVarDecl 0x5608c1288838 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c12888b8 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:222:33 'long double'
| `-NoThrowAttr 0x5608c1288a40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1288bd0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:91:1 __jnl 'long double (int, long double)' extern
| |-ParmVarDecl 0x5608c1288ab0 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c1288b30 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:222:33 'long double'
| `-NoThrowAttr 0x5608c1288c80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1288d88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:92:1 y0l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1288cf0 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:223:28 'long double'
| `-NoThrowAttr 0x5608c1288e30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1288f38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:94:1 __y0l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1288ea0 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:223:28 'long double'
| `-NoThrowAttr 0x5608c1288fe0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12890e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:95:1 y1l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1289050 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:224:28 'long double'
| `-NoThrowAttr 0x5608c1289190 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1289298 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:97:1 __y1l 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1289200 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:224:28 'long double'
| `-NoThrowAttr 0x5608c1289340 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12894d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:98:1 ynl 'long double (int, long double)' extern
| |-ParmVarDecl 0x5608c12893b0 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c1289430 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:225:33 'long double'
| `-NoThrowAttr 0x5608c1289580 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1289710 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:100:1 __ynl 'long double (int, long double)' extern
| |-ParmVarDecl 0x5608c12895f0 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c1289670 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:225:33 'long double'
| `-NoThrowAttr 0x5608c12897c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12898c8 <<scratch space>:103:1> col:1 implicit erfl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12899c0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1289968 <<invalid sloc>> Implicit 959
| `-NoThrowAttr 0x5608c1289a30 <col:1> Implicit
|-FunctionDecl 0x5608c1289a58 prev 0x5608c12898c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:103:1 erfl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1289830 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:231:33 'long double'
| |-BuiltinAttr 0x5608c1289b58 <<invalid sloc>> Inherited Implicit 959
| `-NoThrowAttr 0x5608c1289b00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1289c30 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:105:1 __erfl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1289b98 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:231:33 'long double'
| `-NoThrowAttr 0x5608c1289cd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1289de0 <<scratch space>:108:1> col:1 implicit erfcl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1289ed8 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1289e80 <<invalid sloc>> Implicit 962
| `-NoThrowAttr 0x5608c1289f48 <col:1> Implicit
|-FunctionDecl 0x5608c1289fb0 prev 0x5608c1289de0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:108:1 erfcl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1289d48 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:232:34 'long double'
| |-BuiltinAttr 0x5608c128a0b0 <<invalid sloc>> Inherited Implicit 962
| `-NoThrowAttr 0x5608c128a058 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128a188 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:110:1 __erfcl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128a0f0 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:232:34 'long double'
| `-NoThrowAttr 0x5608c128a230 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128a338 <<scratch space>:111:1> col:1 implicit lgammal 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128a430 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c128a3d8 <<invalid sloc>> Implicit 995
| `-NoThrowAttr 0x5608c128a4a0 <col:1> Implicit
|-FunctionDecl 0x5608c128a4c8 prev 0x5608c128a338 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:111:1 lgammal 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128a2a0 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:233:32 'long double'
| |-BuiltinAttr 0x5608c128a5c8 <<invalid sloc>> Inherited Implicit 995
| `-NoThrowAttr 0x5608c128a570 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128a6a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:113:1 __lgammal 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128a608 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:233:32 'long double'
| `-NoThrowAttr 0x5608c128a748 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128a850 <<scratch space>:114:1> col:1 implicit tgammal 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128a948 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c128a8f0 <<invalid sloc>> Implicit 1067
| `-NoThrowAttr 0x5608c128a9b8 <col:1> Implicit
|-FunctionDecl 0x5608c128a9e0 prev 0x5608c128a850 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:114:1 tgammal 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128a7b8 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:238:32 'long double'
| |-BuiltinAttr 0x5608c128aae0 <<invalid sloc>> Inherited Implicit 1067
| `-NoThrowAttr 0x5608c128aa88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128abb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:116:1 __tgammal 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128ab20 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:238:32 'long double'
| `-NoThrowAttr 0x5608c128ac60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128ad68 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:117:1 gammal 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128acd0 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:244:31 'long double'
| `-NoThrowAttr 0x5608c128ae10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128af18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:119:1 __gammal 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128ae80 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:244:31 'long double'
| `-NoThrowAttr 0x5608c128afc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128b150 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:121:1 lgammal_r 'long double (long double, int *)' extern
| |-ParmVarDecl 0x5608c128b030 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:252:34 'long double'
| |-ParmVarDecl 0x5608c128b0b0 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c128b200 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128b390 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:124:1 __lgammal_r 'long double (long double, int *)' extern
| |-ParmVarDecl 0x5608c128b270 </usr/include/math.h:393:22, col:27> /usr/include/bits/mathcalls.h:252:34 'long double'
| |-ParmVarDecl 0x5608c128b2f0 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c128b440 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128b548 <<scratch space>:125:1> col:1 implicit rintl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128b640 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c128b5e8 <<invalid sloc>> Implicit 1040
| |-NoThrowAttr 0x5608c128b6b0 <col:1> Implicit
| `-ConstAttr 0x5608c128b6d8 <col:1> Implicit
|-FunctionDecl 0x5608c128b700 prev 0x5608c128b548 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:125:1 rintl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128b4b0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:259:31> col:31 __x 'long double'
| |-BuiltinAttr 0x5608c128b800 <<invalid sloc>> Inherited Implicit 1040
| |-ConstAttr 0x5608c128b828 <<scratch space>:125:1> Inherited Implicit
| `-NoThrowAttr 0x5608c128b7a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128b900 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:127:1 __rintl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128b868 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:259:31> col:31 __x 'long double'
| `-NoThrowAttr 0x5608c128b9a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128bb38 <<scratch space>:128:1> col:1 implicit nextafterl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128bc30 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c128bc98 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c128bbd8 <<invalid sloc>> Implicit 1028
| `-NoThrowAttr 0x5608c128bd10 <col:1> Implicit
|-FunctionDecl 0x5608c128bd38 prev 0x5608c128bb38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:128:1 nextafterl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128ba18 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:262:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c128ba98 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:262:51> col:51 __y 'long double'
| |-BuiltinAttr 0x5608c128be40 <<invalid sloc>> Inherited Implicit 1028
| `-NoThrowAttr 0x5608c128bde8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128cfd0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:130:1 __nextafterl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128be80 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:262:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c128bf00 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:262:51> col:51 __y 'long double'
| `-NoThrowAttr 0x5608c128d080 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128d210 <<scratch space>:131:1> col:1 implicit nexttowardl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128d308 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c128d370 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c128d2b0 <<invalid sloc>> Implicit 1031
| `-NoThrowAttr 0x5608c128d3e8 <col:1> Implicit
|-FunctionDecl 0x5608c128d410 prev 0x5608c128d210 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:131:1 nexttowardl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128d0f0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:264:37> col:37 __x 'long double'
| |-ParmVarDecl 0x5608c128d170 <col:42, col:54> col:54 __y 'long double'
| |-BuiltinAttr 0x5608c128d518 <<invalid sloc>> Inherited Implicit 1031
| `-NoThrowAttr 0x5608c128d4c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128d678 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:133:1 __nexttowardl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128d558 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:264:37> col:37 __x 'long double'
| |-ParmVarDecl 0x5608c128d5d8 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c128d728 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128d830 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:135:1 nextdownl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128d798 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:269:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c128d8d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128d9e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:137:1 __nextdownl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128d948 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:269:35> col:35 __x 'long double'
| `-NoThrowAttr 0x5608c128da88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128db90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:138:1 nextupl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128daf8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:271:33> col:33 __x 'long double'
| `-NoThrowAttr 0x5608c128dc38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128dd40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:140:1 __nextupl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128dca8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:271:33> col:33 __x 'long double'
| `-NoThrowAttr 0x5608c128dde8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128df78 <<scratch space>:141:1> col:1 implicit remainderl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128e070 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c128e0d8 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c128e018 <<invalid sloc>> Implicit 1034
| `-NoThrowAttr 0x5608c128e150 <col:1> Implicit
|-FunctionDecl 0x5608c128e178 prev 0x5608c128df78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:141:1 remainderl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128de58 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:275:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c128ded8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:275:51> col:51 __y 'long double'
| |-BuiltinAttr 0x5608c128e280 <<invalid sloc>> Inherited Implicit 1034
| `-NoThrowAttr 0x5608c128e228 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128e3e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:143:1 __remainderl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c128e2c0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:275:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c128e340 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:275:51> col:51 __y 'long double'
| `-NoThrowAttr 0x5608c128e490 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128e620 <<scratch space>:144:1> col:1 implicit scalbnl 'long double (long double, int)' extern
| |-ParmVarDecl 0x5608c128e718 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c128e780 <<invalid sloc>> <invalid sloc> 'int'
| |-BuiltinAttr 0x5608c128e6c0 <<invalid sloc>> Implicit 1049
| `-NoThrowAttr 0x5608c128e7f8 <col:1> Implicit
|-FunctionDecl 0x5608c128e820 prev 0x5608c128e620 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:144:1 scalbnl 'long double (long double, int)' extern
| |-ParmVarDecl 0x5608c128e500 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:279:33> col:33 __x 'long double'
| |-ParmVarDecl 0x5608c128e580 <col:38, col:42> col:42 __n 'int'
| |-BuiltinAttr 0x5608c128e928 <<invalid sloc>> Inherited Implicit 1049
| `-NoThrowAttr 0x5608c128e8d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128ea88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:146:1 __scalbnl 'long double (long double, int)' extern
| |-ParmVarDecl 0x5608c128e968 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:279:33> col:33 __x 'long double'
| |-ParmVarDecl 0x5608c128e9e8 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c128eb38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128ec40 <<scratch space>:147:1> col:1 implicit ilogbl 'int (long double)' extern
| |-ParmVarDecl 0x5608c128ed38 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c128ece0 <<invalid sloc>> Implicit 992
| `-NoThrowAttr 0x5608c128eda8 <col:1> Implicit
|-FunctionDecl 0x5608c128edd0 prev 0x5608c128ec40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:147:1 ilogbl 'int (long double)' extern
| |-ParmVarDecl 0x5608c128eba8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:283:36> col:36 __x 'long double'
| |-BuiltinAttr 0x5608c128eed0 <<invalid sloc>> Inherited Implicit 992
| `-NoThrowAttr 0x5608c128ee78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128efe0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:149:1 __ilogbl 'int (long double)' extern
| |-ParmVarDecl 0x5608c128ef10 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:283:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c128f088 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128f1c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:151:1 llogbl 'long (long double)' extern
| |-ParmVarDecl 0x5608c128f0f8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:288:42> col:42 __x 'long double'
| `-NoThrowAttr 0x5608c128f268 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128f370 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:153:1 __llogbl 'long (long double)' extern
| |-ParmVarDecl 0x5608c128f2d8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:288:42> col:42 __x 'long double'
| `-NoThrowAttr 0x5608c128f418 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128f5e0 <<scratch space>:154:1> col:1 implicit scalblnl 'long double (long double, long)' extern
| |-ParmVarDecl 0x5608c128f6d8 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c128f740 <<invalid sloc>> <invalid sloc> 'long'
| |-BuiltinAttr 0x5608c128f680 <<invalid sloc>> Implicit 1046
| `-NoThrowAttr 0x5608c128f7b8 <col:1> Implicit
|-FunctionDecl 0x5608c128f7e0 prev 0x5608c128f5e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:154:1 scalblnl 'long double (long double, long)' extern
| |-ParmVarDecl 0x5608c128f488 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:293:34> col:34 __x 'long double'
| |-ParmVarDecl 0x5608c128f508 <col:39, col:48> col:48 __n 'long'
| |-BuiltinAttr 0x5608c128f8e8 <<invalid sloc>> Inherited Implicit 1046
| `-NoThrowAttr 0x5608c128f890 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128fa48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:156:1 __scalblnl 'long double (long double, long)' extern
| |-ParmVarDecl 0x5608c128f928 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:293:34> col:34 __x 'long double'
| |-ParmVarDecl 0x5608c128f9a8 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c128faf8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128fc00 <<scratch space>:157:1> col:1 implicit nearbyintl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128fcf8 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c128fca0 <<invalid sloc>> Implicit 1025
| |-NoThrowAttr 0x5608c128fd68 <col:1> Implicit
| `-ConstAttr 0x5608c128fd90 <col:1> Implicit
|-FunctionDecl 0x5608c128fdb8 prev 0x5608c128fc00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:157:1 nearbyintl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128fb68 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:297:36> col:36 __x 'long double'
| |-BuiltinAttr 0x5608c128feb8 <<invalid sloc>> Inherited Implicit 1025
| |-ConstAttr 0x5608c128fee0 <<scratch space>:157:1> Inherited Implicit
| `-NoThrowAttr 0x5608c128fe60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c128ffb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:159:1 __nearbyintl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c128ff20 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:297:36> col:36 __x 'long double'
| `-NoThrowAttr 0x5608c1290060 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1290168 <<scratch space>:160:1> col:1 implicit roundl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1290260 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1290208 <<invalid sloc>> Implicit 1043
| |-NoThrowAttr 0x5608c12902d0 <col:1> Implicit
| `-ConstAttr 0x5608c12902f8 <col:1> Implicit
|-FunctionDecl 0x5608c1290320 prev 0x5608c1290168 </usr/include/math.h:297:3, line:294:66> <scratch space>:160:1 roundl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12900d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:301:33> col:33 __x 'long double'
| |-BuiltinAttr 0x5608c1290448 <<invalid sloc>> Inherited Implicit 1043
| |-NoThrowAttr 0x5608c12903c8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1290420 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c1290520 </usr/include/math.h:297:3, line:295:79> <scratch space>:162:1 __roundl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1290488 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:301:33> col:33 __x 'long double'
| |-NoThrowAttr 0x5608c12905c8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1290620 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12906f8 <<scratch space>:163:1> col:1 implicit truncl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12907f0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1290798 <<invalid sloc>> Implicit 1070
| |-NoThrowAttr 0x5608c1290860 <col:1> Implicit
| `-ConstAttr 0x5608c1290888 <col:1> Implicit
|-FunctionDecl 0x5608c12908b0 prev 0x5608c12906f8 </usr/include/math.h:297:3, line:294:66> <scratch space>:163:1 truncl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1290660 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:305:33> col:33 __x 'long double'
| |-BuiltinAttr 0x5608c12909d8 <<invalid sloc>> Inherited Implicit 1070
| |-NoThrowAttr 0x5608c1290958 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12909b0 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c1290ab0 </usr/include/math.h:297:3, line:295:79> <scratch space>:165:1 __truncl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1290a18 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:305:33> col:33 __x 'long double'
| |-NoThrowAttr 0x5608c1290b58 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1290bb0 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c1290de0 <<scratch space>:166:1> col:1 implicit remquol 'long double (long double, long double, int *)' extern
| |-ParmVarDecl 0x5608c1290ed8 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1290f40 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1290ff0 <<invalid sloc>> <invalid sloc> 'int *'
| |-BuiltinAttr 0x5608c1290e80 <<invalid sloc>> Implicit 1037
| `-NoThrowAttr 0x5608c1291070 <col:1> Implicit
|-FunctionDecl 0x5608c1291098 prev 0x5608c1290de0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:166:1 remquol 'long double (long double, long double, int *)' extern
| |-ParmVarDecl 0x5608c1290bf0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:310:33> col:33 __x 'long double'
| |-ParmVarDecl 0x5608c1290c70 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:310:48> col:48 __y 'long double'
| |-ParmVarDecl 0x5608c1290cf0 <col:53, col:58> col:58 __quo 'int *'
| |-BuiltinAttr 0x5608c12911a8 <<invalid sloc>> Inherited Implicit 1037
| `-NoThrowAttr 0x5608c1291150 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1291390 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:168:1 __remquol 'long double (long double, long double, int *)' extern
| |-ParmVarDecl 0x5608c12911e8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:310:33> col:33 __x 'long double'
| |-ParmVarDecl 0x5608c1291268 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:310:48> col:48 __y 'long double'
| |-ParmVarDecl 0x5608c12912e8 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c1291448 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1291550 <<scratch space>:169:1> col:1 implicit lrintl 'long (long double)' extern
| |-ParmVarDecl 0x5608c1291648 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c12915f0 <<invalid sloc>> Implicit 1019
| `-NoThrowAttr 0x5608c12916b8 <col:1> Implicit
|-FunctionDecl 0x5608c12916e0 prev 0x5608c1291550 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:169:1 lrintl 'long (long double)' extern
| |-ParmVarDecl 0x5608c12914b8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:317:41> col:41 __x 'long double'
| |-BuiltinAttr 0x5608c12917e0 <<invalid sloc>> Inherited Implicit 1019
| `-NoThrowAttr 0x5608c1291788 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12918b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:171:1 __lrintl 'long (long double)' extern
| |-ParmVarDecl 0x5608c1291820 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:317:41> col:41 __x 'long double'
| `-NoThrowAttr 0x5608c1291960 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1291aa0 <<scratch space>:172:1> col:1 implicit llrintl 'long long (long double)' extern
| |-ParmVarDecl 0x5608c1291b98 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1291b40 <<invalid sloc>> Implicit 998
| `-NoThrowAttr 0x5608c1291c08 <col:1> Implicit
|-FunctionDecl 0x5608c1291c30 prev 0x5608c1291aa0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:172:1 llrintl 'long long (long double)' extern
| |-ParmVarDecl 0x5608c12919d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:319:47> col:47 __x 'long double'
| |-BuiltinAttr 0x5608c1291d30 <<invalid sloc>> Inherited Implicit 998
| `-NoThrowAttr 0x5608c1291cd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1291e08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:174:1 __llrintl 'long long (long double)' extern
| |-ParmVarDecl 0x5608c1291d70 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:319:47> col:47 __x 'long double'
| `-NoThrowAttr 0x5608c1291eb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1291fb8 <<scratch space>:175:1> col:1 implicit lroundl 'long (long double)' extern
| |-ParmVarDecl 0x5608c12920b0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1292058 <<invalid sloc>> Implicit 1022
| `-NoThrowAttr 0x5608c1292120 <col:1> Implicit
|-FunctionDecl 0x5608c1292148 prev 0x5608c1291fb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:175:1 lroundl 'long (long double)' extern
| |-ParmVarDecl 0x5608c1291f20 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:323:42> col:42 __x 'long double'
| |-BuiltinAttr 0x5608c1292248 <<invalid sloc>> Inherited Implicit 1022
| `-NoThrowAttr 0x5608c12921f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1292320 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:177:1 __lroundl 'long (long double)' extern
| |-ParmVarDecl 0x5608c1292288 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:323:42> col:42 __x 'long double'
| `-NoThrowAttr 0x5608c12923c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12924d0 <<scratch space>:178:1> col:1 implicit llroundl 'long long (long double)' extern
| |-ParmVarDecl 0x5608c12925c8 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1292570 <<invalid sloc>> Implicit 1001
| `-NoThrowAttr 0x5608c1292638 <col:1> Implicit
|-FunctionDecl 0x5608c1292660 prev 0x5608c12924d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:178:1 llroundl 'long long (long double)' extern
| |-ParmVarDecl 0x5608c1292438 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:325:48> col:48 __x 'long double'
| |-BuiltinAttr 0x5608c1292760 <<invalid sloc>> Inherited Implicit 1001
| `-NoThrowAttr 0x5608c1292708 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1292838 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:180:1 __llroundl 'long long (long double)' extern
| |-ParmVarDecl 0x5608c12927a0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:325:48> col:48 __x 'long double'
| `-NoThrowAttr 0x5608c12928e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1292a70 <<scratch space>:181:1> col:1 implicit fdiml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1292b68 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1292bd0 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1292b10 <<invalid sloc>> Implicit 974
| `-NoThrowAttr 0x5608c1292c48 <col:1> Implicit
|-FunctionDecl 0x5608c1292c70 prev 0x5608c1292a70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:181:1 fdiml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1292950 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:329:31> col:31 __x 'long double'
| |-ParmVarDecl 0x5608c12929d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:329:46> col:46 __y 'long double'
| |-BuiltinAttr 0x5608c1292d78 <<invalid sloc>> Inherited Implicit 974
| `-NoThrowAttr 0x5608c1292d20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1292ed8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:183:1 __fdiml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1292db8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:329:31> col:31 __x 'long double'
| |-ParmVarDecl 0x5608c1292e38 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:329:46> col:46 __y 'long double'
| `-NoThrowAttr 0x5608c1292f88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12932c8 <<scratch space>:185:1> col:1 implicit fmaxl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12933c0 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1293428 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1293368 <<invalid sloc>> Implicit 983
| |-NoThrowAttr 0x5608c12934a0 <col:1> Implicit
| `-ConstAttr 0x5608c12934c8 <col:1> Implicit
|-FunctionDecl 0x5608c12934f0 prev 0x5608c12932c8 </usr/include/math.h:297:3, line:294:66> <scratch space>:185:1 fmaxl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12931a8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:333:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c1293228 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:333:47> col:47 __y 'long double'
| |-BuiltinAttr 0x5608c1293620 <<invalid sloc>> Inherited Implicit 983
| |-NoThrowAttr 0x5608c12935a0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12935f8 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c1293780 </usr/include/math.h:297:3, line:295:79> <scratch space>:187:1 __fmaxl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1293660 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:333:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c12936e0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:333:47> col:47 __y 'long double'
| |-NoThrowAttr 0x5608c1293830 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1293888 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c12939e8 <<scratch space>:188:1> col:1 implicit fminl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1293ae0 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1293b48 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1293a88 <<invalid sloc>> Implicit 986
| |-NoThrowAttr 0x5608c1293bc0 <col:1> Implicit
| `-ConstAttr 0x5608c1293be8 <col:1> Implicit
|-FunctionDecl 0x5608c1293c10 prev 0x5608c12939e8 </usr/include/math.h:297:3, line:294:66> <scratch space>:188:1 fminl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12938c8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:336:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c1293948 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:336:47> col:47 __y 'long double'
| |-BuiltinAttr 0x5608c1293d40 <<invalid sloc>> Inherited Implicit 986
| |-NoThrowAttr 0x5608c1293cc0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1293d18 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c1293ea0 </usr/include/math.h:297:3, line:295:79> <scratch space>:190:1 __fminl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1293d80 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:336:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c1293e00 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:336:47> col:47 __y 'long double'
| |-NoThrowAttr 0x5608c1293f50 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1293fa8 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c12941d0 <<scratch space>:191:1> col:1 implicit fmal 'long double (long double, long double, long double)' extern
| |-ParmVarDecl 0x5608c12942c8 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1294330 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x5608c1294398 <<invalid sloc>> <invalid sloc> 'long double'
| |-BuiltinAttr 0x5608c1294270 <<invalid sloc>> Implicit 980
| |-ConstAttr 0x5608c1294418 <col:1> Implicit
| `-NoThrowAttr 0x5608c1294440 <col:1> Implicit
|-FunctionDecl 0x5608c1294468 prev 0x5608c12941d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:191:1 fmal 'long double (long double, long double, long double)' extern
| |-ParmVarDecl 0x5608c1293fe8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:340:30> col:30 __x 'long double'
| |-ParmVarDecl 0x5608c1294068 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:340:45> col:45 __y 'long double'
| |-ParmVarDecl 0x5608c12940e8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:340:60> col:60 __z 'long double'
| |-BuiltinAttr 0x5608c1294578 <<invalid sloc>> Inherited Implicit 980
| |-ConstAttr 0x5608c12945a0 <<scratch space>:191:1> Inherited Implicit
| `-NoThrowAttr 0x5608c1294520 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1294788 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:193:1 __fmal 'long double (long double, long double, long double)' extern
| |-ParmVarDecl 0x5608c12945e0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:340:30> col:30 __x 'long double'
| |-ParmVarDecl 0x5608c1294660 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:340:45> col:45 __y 'long double'
| |-ParmVarDecl 0x5608c12946e0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:340:60> col:60 __z 'long double'
| `-NoThrowAttr 0x5608c1294840 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1294948 </usr/include/math.h:297:3, line:294:66> <scratch space>:195:1 roundevenl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c12948b0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:345:37> col:37 __x 'long double'
| |-NoThrowAttr 0x5608c12949f0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1294a48 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c1294b20 </usr/include/math.h:297:3, line:295:79> <scratch space>:197:1 __roundevenl 'long double (long double)' extern
| |-ParmVarDecl 0x5608c1294a88 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:345:37> col:37 __x 'long double'
| |-NoThrowAttr 0x5608c1294bc8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1294c20 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c1294e88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:198:1 fromfpl '__intmax_t (long double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1294c60 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:349:45> col:45 __x 'long double'
| |-ParmVarDecl 0x5608c1294ce0 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c1294d60 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1294f40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1295330 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:200:1 __fromfpl '__intmax_t (long double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1294fb0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:349:45> col:45 __x 'long double'
| |-ParmVarDecl 0x5608c1295030 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12950b0 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12953e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1295678 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:201:1 ufromfpl '__uintmax_t (long double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1295458 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:354:47> col:47 __x 'long double'
| |-ParmVarDecl 0x5608c12954d8 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c1295558 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1295730 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1295940 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:203:1 __ufromfpl '__uintmax_t (long double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12957a0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:354:47> col:47 __x 'long double'
| |-ParmVarDecl 0x5608c1295820 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c12958a0 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12959f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1295c08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:204:1 fromfpxl '__intmax_t (long double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1295a68 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:360:46> col:46 __x 'long double'
| |-ParmVarDecl 0x5608c1295ae8 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c1295b68 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1295cc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1295ed0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:206:1 __fromfpxl '__intmax_t (long double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1295d30 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:360:46> col:46 __x 'long double'
| |-ParmVarDecl 0x5608c1295db0 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c1295e30 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1295f88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1296198 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:207:1 ufromfpxl '__uintmax_t (long double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c1295ff8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:366:48> col:48 __x 'long double'
| |-ParmVarDecl 0x5608c1296078 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c12960f8 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1296250 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1296460 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:209:1 __ufromfpxl '__uintmax_t (long double, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12962c0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:366:48> col:48 __x 'long double'
| |-ParmVarDecl 0x5608c1296340 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c12963c0 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c1296518 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1296710 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:210:1 canonicalizel 'int (long double *, const long double *)' extern
| |-ParmVarDecl 0x5608c1296588 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:370:47> col:47 __cx 'long double *'
| |-ParmVarDecl 0x5608c1296630 <col:53, col:70> col:70 __x 'const long double *'
| `-NoThrowAttr 0x5608c12967c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1296950 </usr/include/math.h:297:3, line:294:66> <scratch space>:213:1 fmaxmagl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1296830 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:377:35> col:35 __x 'long double'
| |-ParmVarDecl 0x5608c12968b0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:377:50> col:50 __y 'long double'
| |-NoThrowAttr 0x5608c1296a00 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1296a58 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c1296bb8 </usr/include/math.h:297:3, line:295:79> <scratch space>:215:1 __fmaxmagl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1296a98 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:377:35> col:35 __x 'long double'
| |-ParmVarDecl 0x5608c1296b18 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:377:50> col:50 __y 'long double'
| |-NoThrowAttr 0x5608c1296c68 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1296cc0 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c1296e20 </usr/include/math.h:297:3, line:294:66> <scratch space>:216:1 fminmagl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1296d00 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:380:35> col:35 __x 'long double'
| |-ParmVarDecl 0x5608c1296d80 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:380:50> col:50 __y 'long double'
| |-NoThrowAttr 0x5608c1296ed0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1296f28 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c1297088 </usr/include/math.h:297:3, line:295:79> <scratch space>:218:1 __fminmagl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1296f68 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:380:35> col:35 __x 'long double'
| |-ParmVarDecl 0x5608c1296fe8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:380:50> col:50 __y 'long double'
| |-NoThrowAttr 0x5608c1297138 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1297190 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c1297340 </usr/include/math.h:297:3, line:294:66> <scratch space>:220:1 fmaximuml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12971d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:385:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c1297250 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:385:51> col:51 __y 'long double'
| |-NoThrowAttr 0x5608c12973f0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1297448 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c12975a8 </usr/include/math.h:297:3, line:295:79> <scratch space>:222:1 __fmaximuml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1297488 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:385:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c1297508 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:385:51> col:51 __y 'long double'
| |-NoThrowAttr 0x5608c1297658 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12976b0 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c1297810 </usr/include/math.h:297:3, line:294:66> <scratch space>:223:1 fminimuml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12976f0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:388:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c1297770 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:388:51> col:51 __y 'long double'
| |-NoThrowAttr 0x5608c12978c0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1297918 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c1297a78 </usr/include/math.h:297:3, line:295:79> <scratch space>:225:1 __fminimuml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1297958 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:388:36> col:36 __x 'long double'
| |-ParmVarDecl 0x5608c12979d8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:388:51> col:51 __y 'long double'
| |-NoThrowAttr 0x5608c1297b28 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1297b80 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c1297ce0 </usr/include/math.h:297:3, line:294:66> <scratch space>:226:1 fmaximum_numl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1297bc0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:391:40> col:40 __x 'long double'
| |-ParmVarDecl 0x5608c1297c40 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:391:55> col:55 __y 'long double'
| |-NoThrowAttr 0x5608c1297d90 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1297de8 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c1297f48 </usr/include/math.h:297:3, line:295:79> <scratch space>:228:1 __fmaximum_numl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1297e28 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:391:40> col:40 __x 'long double'
| |-ParmVarDecl 0x5608c1297ea8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:391:55> col:55 __y 'long double'
| |-NoThrowAttr 0x5608c1297ff8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1298050 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c12981b0 </usr/include/math.h:297:3, line:294:66> <scratch space>:229:1 fminimum_numl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1298090 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:394:40> col:40 __x 'long double'
| |-ParmVarDecl 0x5608c1298110 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:394:55> col:55 __y 'long double'
| |-NoThrowAttr 0x5608c1298260 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12982b8 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c1298418 </usr/include/math.h:297:3, line:295:79> <scratch space>:231:1 __fminimum_numl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12982f8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:394:40> col:40 __x 'long double'
| |-ParmVarDecl 0x5608c1298378 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:394:55> col:55 __y 'long double'
| |-NoThrowAttr 0x5608c12984c8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1298520 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c1298680 </usr/include/math.h:297:3, line:294:66> <scratch space>:232:1 fmaximum_magl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1298560 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:397:40> col:40 __x 'long double'
| |-ParmVarDecl 0x5608c12985e0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:397:55> col:55 __y 'long double'
| |-NoThrowAttr 0x5608c1298730 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1298788 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c12988e8 </usr/include/math.h:297:3, line:295:79> <scratch space>:234:1 __fmaximum_magl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12987c8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:397:40> col:40 __x 'long double'
| |-ParmVarDecl 0x5608c1298848 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:397:55> col:55 __y 'long double'
| |-NoThrowAttr 0x5608c1298998 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12989f0 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c1298b50 </usr/include/math.h:297:3, line:294:66> <scratch space>:235:1 fminimum_magl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1298a30 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:400:40> col:40 __x 'long double'
| |-ParmVarDecl 0x5608c1298ab0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:400:55> col:55 __y 'long double'
| |-NoThrowAttr 0x5608c1298c00 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1298c58 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c1298db8 </usr/include/math.h:297:3, line:295:79> <scratch space>:237:1 __fminimum_magl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1298c98 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:400:40> col:40 __x 'long double'
| |-ParmVarDecl 0x5608c1298d18 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:400:55> col:55 __y 'long double'
| |-NoThrowAttr 0x5608c1298e68 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1298ec0 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c1299020 </usr/include/math.h:297:3, line:294:66> <scratch space>:238:1 fmaximum_mag_numl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1298f00 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:403:44> col:44 __x 'long double'
| |-ParmVarDecl 0x5608c1298f80 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:403:59> col:59 __y 'long double'
| |-NoThrowAttr 0x5608c12990d0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1299128 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c1299288 </usr/include/math.h:297:3, line:295:79> <scratch space>:240:1 __fmaximum_mag_numl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1299168 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:403:44> col:44 __x 'long double'
| |-ParmVarDecl 0x5608c12991e8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:403:59> col:59 __y 'long double'
| |-NoThrowAttr 0x5608c1299350 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12993a8 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c1299508 </usr/include/math.h:297:3, line:294:66> <scratch space>:241:1 fminimum_mag_numl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c12993e8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:406:44> col:44 __x 'long double'
| |-ParmVarDecl 0x5608c1299468 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:406:59> col:59 __y 'long double'
| |-NoThrowAttr 0x5608c12995b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1299610 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c1299770 </usr/include/math.h:297:3, line:295:79> <scratch space>:243:1 __fminimum_mag_numl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1299650 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:406:44> col:44 __x 'long double'
| |-ParmVarDecl 0x5608c12996d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:406:59> col:59 __y 'long double'
| |-NoThrowAttr 0x5608c1299820 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1299878 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c1299a10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:245:1 totalorderl 'int (const long double *, const long double *)' extern
| |-ParmVarDecl 0x5608c12998b8 </usr/include/bits/mathcalls.h:411:34, col:51> col:51 __x 'const long double *'
| |-ParmVarDecl 0x5608c1299938 <line:412:6, col:23> col:23 __y 'const long double *'
| |-NoThrowAttr 0x5608c1299ac0 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c1299b18 <line:308:45>
|-FunctionDecl 0x5608c1299c78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:246:1 totalordermagl 'int (const long double *, const long double *)' extern
| |-ParmVarDecl 0x5608c1299b58 </usr/include/bits/mathcalls.h:416:37, col:54> col:54 __x 'const long double *'
| |-ParmVarDecl 0x5608c1299bd8 <line:417:9, col:26> col:26 __y 'const long double *'
| |-NoThrowAttr 0x5608c1299d28 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c1299d80 <line:308:45>
|-FunctionDecl 0x5608c1299e90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:247:1 getpayloadl 'long double (const long double *)' extern
| |-ParmVarDecl 0x5608c1299dc0 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const long double *'
| `-NoThrowAttr 0x5608c1299f38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129a040 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:249:1 __getpayloadl 'long double (const long double *)' extern
| |-ParmVarDecl 0x5608c1299fa8 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const long double *'
| `-NoThrowAttr 0x5608c129a0e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129a2b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:250:1 setpayloadl 'int (long double *, long double)' extern
| |-ParmVarDecl 0x5608c129a158 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:424:45> col:45 __x 'long double *'
| |-ParmVarDecl 0x5608c129a1d8 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:424:60> col:60 __payload 'long double'
| `-NoThrowAttr 0x5608c129a360 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129a4f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:251:1 setpayloadsigl 'int (long double *, long double)' extern
| |-ParmVarDecl 0x5608c129a3d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:427:48> col:48 __x 'long double *'
| |-ParmVarDecl 0x5608c129a450 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:427:63> col:63 __payload 'long double'
| `-NoThrowAttr 0x5608c129a5a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129a730 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:252:1 scalbl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c129a610 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:435:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c129a690 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:435:47> col:47 __n 'long double'
| `-NoThrowAttr 0x5608c129a7e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129a970 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:254:1 __scalbl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x5608c129a850 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:435:32> col:32 __x 'long double'
| |-ParmVarDecl 0x5608c129a8d0 </usr/include/math.h:393:22, /usr/include/bits/mathcalls.h:435:47> col:47 __n 'long double'
| `-NoThrowAttr 0x5608c129aa20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129ab48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:258:1 acosf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129aa88 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129abf0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129ace8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:260:1 __acosf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129ac58 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129ad90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129ae88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:263:1 asinf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129adf8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129af30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129b028 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:265:1 __asinf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129af98 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129b0d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129b1c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:268:1 atanf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129b138 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129b270 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129d3a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:270:1 __atanf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129b2d8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129d450 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129d608 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:273:1 atan2f32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c129d4b8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y '_Float32':'float'
| |-ParmVarDecl 0x5608c129d530 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129d6b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129d830 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:275:1 __atan2f32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c129d720 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y '_Float32':'float'
| |-ParmVarDecl 0x5608c129d798 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129d8e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129d9d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:278:1 cosf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129d948 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129da80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129db78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:280:1 __cosf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129dae8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129dc20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129dd18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:283:1 sinf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129dc88 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129ddc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129deb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:285:1 __sinf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129de28 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129df60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129e058 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:288:1 tanf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129dfc8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129e100 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129e1f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:290:1 __tanf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129e168 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129e2a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129e398 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:293:1 coshf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129e308 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129e440 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129e538 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:295:1 __coshf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129e4a8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129e5e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129e6d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:298:1 sinhf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129e648 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129e780 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129e878 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:300:1 __sinhf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129e7e8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129e920 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129ea18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:303:1 tanhf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129e988 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129eac0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129ebb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:305:1 __tanhf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129eb28 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129ec60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129eec8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:308:1 sincosf32 'void (_Float32, _Float32 *, _Float32 *)' extern
| |-ParmVarDecl 0x5608c129ecc8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c129ed68 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx '_Float32 *'
| |-ParmVarDecl 0x5608c129ede0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx '_Float32 *'
| `-NoThrowAttr 0x5608c129ef80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129f178 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:310:1 __sincosf32 'void (_Float32, _Float32 *, _Float32 *)' extern
| |-ParmVarDecl 0x5608c129efe8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c129f060 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx '_Float32 *'
| |-ParmVarDecl 0x5608c129f0d8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx '_Float32 *'
| `-NoThrowAttr 0x5608c129f230 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129f390 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:313:1 acoshf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129f298 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129f438 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129f530 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:315:1 __acoshf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129f4a0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129f5d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129f6d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:318:1 asinhf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129f640 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129f778 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129f870 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:320:1 __asinhf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129f7e0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129f918 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129fa10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:323:1 atanhf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129f980 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129fab8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129fbb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:325:1 __atanhf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129fb20 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129fc58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129fd50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:328:1 expf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129fcc0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129fdf8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c129fef0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:330:1 __expf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c129fe60 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c129ff98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a0158 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:331:1 frexpf32 '_Float32 (_Float32, int *)' extern
| |-ParmVarDecl 0x5608c12a0000 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a0080 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c12a0208 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a0388 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:333:1 __frexpf32 '_Float32 (_Float32, int *)' extern
| |-ParmVarDecl 0x5608c12a0270 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a02f0 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c12a0438 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a05f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:334:1 ldexpf32 '_Float32 (_Float32, int)' extern
| |-ParmVarDecl 0x5608c12a04a0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a0520 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c12a06a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a0828 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:336:1 __ldexpf32 '_Float32 (_Float32, int)' extern
| |-ParmVarDecl 0x5608c12a0710 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a0790 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c12a08d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a09d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:339:1 logf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a0940 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a0a78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a0b70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:341:1 __logf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a0ae0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a0c18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a0d10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:344:1 log10f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a0c80 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a0db8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a0eb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:346:1 __log10f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a0e20 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a0f58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a1108 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:347:1 modff32 '_Float32 (_Float32, _Float32 *)' extern
| |-ParmVarDecl 0x5608c12a0fc0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a1038 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr '_Float32 *'
| `-NoThrowAttr 0x5608c12a11b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a13a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:384:76> <scratch space>:349:1 __modff32 '_Float32 (_Float32, _Float32 *)' extern
| |-ParmVarDecl 0x5608c12a1220 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a1298 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr '_Float32 *'
| |-NoThrowAttr 0x5608c12a1450 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c12a14a8 <line:384:57, /usr/include/bits/mathcalls.h:110:69> 2
|-FunctionDecl 0x5608c12a1588 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:353:1 exp10f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a14f8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a1630 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a1728 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:355:1 __exp10f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a1698 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a17d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a18c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:3:1 expm1f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a1838 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a1970 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a1a68 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:5:1 __expm1f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a19d8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a1b10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a1c08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:8:1 log1pf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a1b78 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a1cb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a1da8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:10:1 __log1pf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a1d18 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a1e50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a1f48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:11:1 logbf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a1eb8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a1ff0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a20e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:13:1 __logbf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a2058 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a2190 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a2288 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:16:1 exp2f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a21f8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a2330 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a2428 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:18:1 __exp2f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a2398 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a24d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a25c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:21:1 log2f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a2538 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a2670 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a2768 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:23:1 __log2f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a26d8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a2810 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a2988 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:26:1 powf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a2878 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a28f0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12a2a38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a2bb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:28:1 __powf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a2aa0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a2b18 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12a2c60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a2d58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:29:1 sqrtf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a2cc8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a2e00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a2ef8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:31:1 __sqrtf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a2e68 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a2fa0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a3118 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:34:1 hypotf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a3008 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a3080 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12a31c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a43d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:36:1 __hypotf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a3230 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a32a8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12a4480 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a4578 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:39:1 cbrtf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a44e8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a4620 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a4718 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:41:1 __cbrtf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a4688 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a47c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a48b8 </usr/include/math.h:297:3, line:294:66> <scratch space>:42:1 ceilf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a4828 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12a4960 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12a49b8 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c12a4a80 </usr/include/math.h:297:3, line:295:79> <scratch space>:44:1 __ceilf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a49f0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12a4b28 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12a4b80 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c12a4c48 </usr/include/math.h:297:3, line:294:66> <scratch space>:45:1 fabsf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a4bb8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12a4cf0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12a4d48 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c12a4e10 </usr/include/math.h:297:3, line:295:79> <scratch space>:47:1 __fabsf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a4d80 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12a4eb8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12a4f10 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c12a4fd8 </usr/include/math.h:297:3, line:294:66> <scratch space>:48:1 floorf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a4f48 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12a5080 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12a50d8 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c12a51a0 </usr/include/math.h:297:3, line:295:79> <scratch space>:50:1 __floorf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a5110 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12a5248 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12a52a0 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c12a53e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:51:1 fmodf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a52d8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a5350 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12a5498 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a5610 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:53:1 __fmodf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a5500 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a5578 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12a56c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a5838 </usr/include/math.h:297:3, line:294:66> <scratch space>:54:1 copysignf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a5728 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a57a0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12a58e8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12a5940 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c12a5a88 </usr/include/math.h:297:3, line:295:79> <scratch space>:56:1 __copysignf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a5978 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a59f0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12a5b38 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12a5b90 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c12a5c98 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:57:1 nanf32 '_Float32 (const char *)' extern
| |-ParmVarDecl 0x5608c12a5bd0 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c12a5d40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a5e40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:59:1 __nanf32 '_Float32 (const char *)' extern
| |-ParmVarDecl 0x5608c12a5db0 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c12a5ee8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a5fe0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:60:1 j0f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a5f50 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:220:28 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a6088 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a6180 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:62:1 __j0f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a60f0 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:220:28 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a6228 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a6320 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:63:1 j1f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a6290 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:221:28 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a63e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a64d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:65:1 __j1f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a6448 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:221:28 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a6580 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a6738 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:66:1 jnf32 '_Float32 (int, _Float32)' extern
| |-ParmVarDecl 0x5608c12a65f0 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c12a6668 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:222:33 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a67e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a6968 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:68:1 __jnf32 '_Float32 (int, _Float32)' extern
| |-ParmVarDecl 0x5608c12a6858 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c12a68d0 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:222:33 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a6a18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a6b10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:69:1 y0f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a6a80 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:223:28 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a6bb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a6cb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:71:1 __y0f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a6c20 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:223:28 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a6d58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a6e50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:72:1 y1f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a6dc0 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:224:28 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a6ef8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a6ff0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:74:1 __y1f32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a6f60 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:224:28 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a7098 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a7218 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:75:1 ynf32 '_Float32 (int, _Float32)' extern
| |-ParmVarDecl 0x5608c12a7108 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c12a7180 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:225:33 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a72c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a7448 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:77:1 __ynf32 '_Float32 (int, _Float32)' extern
| |-ParmVarDecl 0x5608c12a7338 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c12a73b0 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:225:33 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a74f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a75f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:80:1 erff32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a7560 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:231:33 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a7698 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a7790 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:82:1 __erff32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a7700 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:231:33 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a7838 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a7930 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:85:1 erfcf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a78a0 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:232:34 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a79d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a7ad0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:87:1 __erfcf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a7a40 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:232:34 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a7b78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a7c70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:88:1 lgammaf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a7be0 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:233:32 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a7d18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a7e10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:90:1 __lgammaf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a7d80 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:233:32 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a7eb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a7fb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:91:1 tgammaf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a7f20 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:238:32 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a8058 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a8150 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:93:1 __tgammaf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a80c0 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:238:32 '_Float32':'float'
| `-NoThrowAttr 0x5608c12a81f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a95a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:95:1 lgammaf32_r '_Float32 (_Float32, int *)' extern
| |-ParmVarDecl 0x5608c12a8260 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:252:34 '_Float32':'float'
| |-ParmVarDecl 0x5608c12a82e0 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12a9650 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a97d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:98:1 __lgammaf32_r '_Float32 (_Float32, int *)' extern
| |-ParmVarDecl 0x5608c12a96b8 </usr/include/math.h:442:21> /usr/include/bits/mathcalls.h:252:34 '_Float32':'float'
| |-ParmVarDecl 0x5608c12a9738 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12a9880 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a9978 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:99:1 rintf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a98e8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a9a20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a9b18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:101:1 __rintf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12a9a88 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12a9bc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a9d38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:102:1 nextafterf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a9c28 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a9ca0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12a9de8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12a9f60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:104:1 __nextafterf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12a9e50 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12a9ec8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12aa010 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aa108 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:106:1 nextdownf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12aa078 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12aa1b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aa2a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:108:1 __nextdownf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12aa218 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12aa350 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aa448 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:109:1 nextupf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12aa3b8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12aa4f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aa5e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:111:1 __nextupf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12aa558 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12aa690 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aa808 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:112:1 remainderf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12aa6f8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12aa770 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12aa8b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aaa30 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:114:1 __remainderf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12aa920 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12aa998 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12aaae0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aac60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:115:1 scalbnf32 '_Float32 (_Float32, int)' extern
| |-ParmVarDecl 0x5608c12aab48 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12aabc8 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c12aad10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aae90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:117:1 __scalbnf32 '_Float32 (_Float32, int)' extern
| |-ParmVarDecl 0x5608c12aad78 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12aadf8 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c12aaf40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ab070 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:118:1 ilogbf32 'int (_Float32)' extern
| |-ParmVarDecl 0x5608c12aafa8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ab118 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ab218 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:120:1 __ilogbf32 'int (_Float32)' extern
| |-ParmVarDecl 0x5608c12ab180 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ab2c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ab3f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:122:1 llogbf32 'long (_Float32)' extern
| |-ParmVarDecl 0x5608c12ab328 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ab498 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ab5b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:124:1 __llogbf32 'long (_Float32)' extern
| |-ParmVarDecl 0x5608c12ab500 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ab658 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ab818 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:125:1 scalblnf32 '_Float32 (_Float32, long)' extern
| |-ParmVarDecl 0x5608c12ab6c0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12ab740 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c12ab8c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aba48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:127:1 __scalblnf32 '_Float32 (_Float32, long)' extern
| |-ParmVarDecl 0x5608c12ab930 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12ab9b0 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c12abaf8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12abbf0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:128:1 nearbyintf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12abb60 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12abc98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12abd90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:130:1 __nearbyintf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12abd00 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12abe38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12abf30 </usr/include/math.h:297:3, line:294:66> <scratch space>:131:1 roundf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12abea0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12abfd8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ac030 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12ac0f8 </usr/include/math.h:297:3, line:295:79> <scratch space>:133:1 __roundf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12ac068 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12ac1a0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ac1f8 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12ac2c0 </usr/include/math.h:297:3, line:294:66> <scratch space>:134:1 truncf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12ac230 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12ac368 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ac3c0 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c12ac488 </usr/include/math.h:297:3, line:295:79> <scratch space>:136:1 __truncf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12ac3f8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12ac530 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ac588 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c12ac798 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:137:1 remquof32 '_Float32 (_Float32, _Float32, int *)' extern
| |-ParmVarDecl 0x5608c12ac5c0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12ac638 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y '_Float32':'float'
| |-ParmVarDecl 0x5608c12ac6b8 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c12ac850 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aca50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:139:1 __remquof32 '_Float32 (_Float32, _Float32, int *)' extern
| |-ParmVarDecl 0x5608c12ac8b8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12ac930 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y '_Float32':'float'
| |-ParmVarDecl 0x5608c12ac9b0 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c12acb08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12acc08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:140:1 lrintf32 'long (_Float32)' extern
| |-ParmVarDecl 0x5608c12acb70 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12accb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12acdb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:142:1 __lrintf32 'long (_Float32)' extern
| |-ParmVarDecl 0x5608c12acd18 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ace58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12acf90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:143:1 llrintf32 'long long (_Float32)' extern
| |-ParmVarDecl 0x5608c12acec0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ad038 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ad138 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:145:1 __llrintf32 'long long (_Float32)' extern
| |-ParmVarDecl 0x5608c12ad0a0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ad1e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ad2e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:146:1 lroundf32 'long (_Float32)' extern
| |-ParmVarDecl 0x5608c12ad248 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ad388 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ad488 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:148:1 __lroundf32 'long (_Float32)' extern
| |-ParmVarDecl 0x5608c12ad3f0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ad530 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ad988 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:149:1 llroundf32 'long long (_Float32)' extern
| |-ParmVarDecl 0x5608c12ad8f0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12ada30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12adb30 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:151:1 __llroundf32 'long long (_Float32)' extern
| |-ParmVarDecl 0x5608c12ada98 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x '_Float32':'float'
| `-NoThrowAttr 0x5608c12adbd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12add50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:152:1 fdimf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12adc40 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12adcb8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12ade00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12adf78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:154:1 __fdimf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12ade68 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12adee0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y '_Float32':'float'
| `-NoThrowAttr 0x5608c12ae028 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ae1a0 </usr/include/math.h:297:3, line:294:66> <scratch space>:156:1 fmaxf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12ae090 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12ae108 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12ae250 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ae2a8 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c12ae3f0 </usr/include/math.h:297:3, line:295:79> <scratch space>:158:1 __fmaxf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12ae2e0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12ae358 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12ae4a0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ae4f8 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c12ae640 </usr/include/math.h:297:3, line:294:66> <scratch space>:159:1 fminf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12ae530 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12ae5a8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12ae6f0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ae748 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c12ae890 </usr/include/math.h:297:3, line:295:79> <scratch space>:161:1 __fminf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12ae780 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12ae7f8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12ae940 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ae998 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c12aeba8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:162:1 fmaf32 '_Float32 (_Float32, _Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12ae9d0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12aea48 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y '_Float32':'float'
| |-ParmVarDecl 0x5608c12aeac0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z '_Float32':'float'
| `-NoThrowAttr 0x5608c12aec60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12aee58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:164:1 __fmaf32 '_Float32 (_Float32, _Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12aecc8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12aed40 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y '_Float32':'float'
| |-ParmVarDecl 0x5608c12aedb8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z '_Float32':'float'
| `-NoThrowAttr 0x5608c12aef10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12af008 </usr/include/math.h:297:3, line:294:66> <scratch space>:166:1 roundevenf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12aef78 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12af0b0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12af108 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c12af1d0 </usr/include/math.h:297:3, line:295:79> <scratch space>:168:1 __roundevenf32 '_Float32 (_Float32)' extern
| |-ParmVarDecl 0x5608c12af140 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x '_Float32':'float'
| |-NoThrowAttr 0x5608c12af278 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12af2d0 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c12af4e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:169:1 fromfpf32 '__intmax_t (_Float32, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12af308 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12af388 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12af408 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12af5a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12af7a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:171:1 __fromfpf32 '__intmax_t (_Float32, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12af608 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12af688 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12af708 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12af860 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b0068 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:172:1 ufromfpf32 '__uintmax_t (_Float32, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12afe80 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12aff00 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c12aff80 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12b0120 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b0328 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:174:1 __ufromfpf32 '__uintmax_t (_Float32, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12b0188 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b0208 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c12b0288 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12b03e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b05e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:175:1 fromfpxf32 '__intmax_t (_Float32, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12b0448 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b04c8 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c12b0548 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12b06a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b08a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:177:1 __fromfpxf32 '__intmax_t (_Float32, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12b0708 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b0788 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c12b0808 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12b0960 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b0b68 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:178:1 ufromfpxf32 '__uintmax_t (_Float32, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12b09c8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b0a48 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c12b0ac8 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12b0c20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b0e28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:180:1 __ufromfpxf32 '__uintmax_t (_Float32, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12b0c88 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b0d08 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c12b0d88 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12b0ee0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b10c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:181:1 canonicalizef32 'int (_Float32 *, const _Float32 *)' extern
| |-ParmVarDecl 0x5608c12b0f48 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:370:47> col:47 __cx '_Float32 *'
| |-ParmVarDecl 0x5608c12b0fe8 <col:53, col:70> col:70 __x 'const _Float32 *'
| `-NoThrowAttr 0x5608c12b1170 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b12e8 </usr/include/math.h:297:3, line:294:66> <scratch space>:184:1 fmaxmagf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b11d8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b1250 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b1398 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b13f0 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c12b1538 </usr/include/math.h:297:3, line:295:79> <scratch space>:186:1 __fmaxmagf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b1428 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b14a0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b15e8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b1640 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c12b1788 </usr/include/math.h:297:3, line:294:66> <scratch space>:187:1 fminmagf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b1678 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b16f0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b1838 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b1890 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c12b19d8 </usr/include/math.h:297:3, line:295:79> <scratch space>:189:1 __fminmagf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b18c8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b1940 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b1a88 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b1ae0 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c12b1c28 </usr/include/math.h:297:3, line:294:66> <scratch space>:191:1 fmaximumf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b1b18 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b1b90 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b1cd8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b1d30 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c12b1e90 </usr/include/math.h:297:3, line:295:79> <scratch space>:193:1 __fmaximumf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b1d68 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b1de0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b1f40 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b1f98 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c12b20e0 </usr/include/math.h:297:3, line:294:66> <scratch space>:194:1 fminimumf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b1fd0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b2048 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b2190 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b21e8 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c12b2330 </usr/include/math.h:297:3, line:295:79> <scratch space>:196:1 __fminimumf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b2220 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b2298 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b23e0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b2438 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c12b2580 </usr/include/math.h:297:3, line:294:66> <scratch space>:197:1 fmaximum_numf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b2470 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b24e8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b2630 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b2688 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c12b27d0 </usr/include/math.h:297:3, line:295:79> <scratch space>:199:1 __fmaximum_numf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b26c0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b2738 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b2880 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b28d8 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c12b2a20 </usr/include/math.h:297:3, line:294:66> <scratch space>:200:1 fminimum_numf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b2910 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b2988 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b2ad0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b2b28 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c12b2c70 </usr/include/math.h:297:3, line:295:79> <scratch space>:202:1 __fminimum_numf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b2b60 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b2bd8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b2d20 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b2d78 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c12b2ec0 </usr/include/math.h:297:3, line:294:66> <scratch space>:203:1 fmaximum_magf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b2db0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b2e28 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b2f70 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b2fc8 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c12b3110 </usr/include/math.h:297:3, line:295:79> <scratch space>:205:1 __fmaximum_magf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b3000 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b3078 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b31c0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b3218 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c12b3360 </usr/include/math.h:297:3, line:294:66> <scratch space>:206:1 fminimum_magf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b3250 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b32c8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b3410 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b3468 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c12b35b0 </usr/include/math.h:297:3, line:295:79> <scratch space>:208:1 __fminimum_magf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b34a0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b3518 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b3660 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b36b8 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c12b3800 </usr/include/math.h:297:3, line:294:66> <scratch space>:209:1 fmaximum_mag_numf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b36f0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b3768 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b38b0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b3908 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c12b3a50 </usr/include/math.h:297:3, line:295:79> <scratch space>:211:1 __fmaximum_mag_numf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b3940 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b39b8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b3b00 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b3b58 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c12b3ca0 </usr/include/math.h:297:3, line:294:66> <scratch space>:212:1 fminimum_mag_numf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b3b90 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b3c08 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b3d50 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b3da8 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c12b4f48 </usr/include/math.h:297:3, line:295:79> <scratch space>:214:1 __fminimum_mag_numf32 '_Float32 (_Float32, _Float32)' extern
| |-ParmVarDecl 0x5608c12b3de0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x '_Float32':'float'
| |-ParmVarDecl 0x5608c12b4eb0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y '_Float32':'float'
| |-NoThrowAttr 0x5608c12b4ff8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12b5050 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c12b51e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:216:1 totalorderf32 'int (const _Float32 *, const _Float32 *)' extern
| |-ParmVarDecl 0x5608c12b5088 </usr/include/bits/mathcalls.h:411:34, col:51> col:51 __x 'const _Float32 *'
| |-ParmVarDecl 0x5608c12b5100 <line:412:6, col:23> col:23 __y 'const _Float32 *'
| |-NoThrowAttr 0x5608c12b5290 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c12b52e8 <line:308:45>
|-FunctionDecl 0x5608c12b5438 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:217:1 totalordermagf32 'int (const _Float32 *, const _Float32 *)' extern
| |-ParmVarDecl 0x5608c12b5320 </usr/include/bits/mathcalls.h:416:37, col:54> col:54 __x 'const _Float32 *'
| |-ParmVarDecl 0x5608c12b5398 <line:417:9, col:26> col:26 __y 'const _Float32 *'
| |-NoThrowAttr 0x5608c12b54e8 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c12b5540 <line:308:45>
|-FunctionDecl 0x5608c12b5638 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:218:1 getpayloadf32 '_Float32 (const _Float32 *)' extern
| |-ParmVarDecl 0x5608c12b5578 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const _Float32 *'
| `-NoThrowAttr 0x5608c12b56e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b57d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:220:1 __getpayloadf32 '_Float32 (const _Float32 *)' extern
| |-ParmVarDecl 0x5608c12b5748 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const _Float32 *'
| `-NoThrowAttr 0x5608c12b5880 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b5a40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:221:1 setpayloadf32 'int (_Float32 *, _Float32)' extern
| |-ParmVarDecl 0x5608c12b58e8 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:424:45> col:45 __x '_Float32 *'
| |-ParmVarDecl 0x5608c12b5960 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:424:60> col:60 __payload '_Float32':'float'
| `-NoThrowAttr 0x5608c12b5af0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b5c70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:222:1 setpayloadsigf32 'int (_Float32 *, _Float32)' extern
| |-ParmVarDecl 0x5608c12b5b58 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:427:48> col:48 __x '_Float32 *'
| |-ParmVarDecl 0x5608c12b5bd0 </usr/include/math.h:442:21, /usr/include/bits/mathcalls.h:427:63> col:63 __payload '_Float32':'float'
| `-NoThrowAttr 0x5608c12b5d20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b5e48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:226:1 acosf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b5d88 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b5ef0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b5fe8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:228:1 __acosf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b5f58 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b6090 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b6188 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:231:1 asinf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b60f8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b6230 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b6328 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:233:1 __asinf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b6298 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b63d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b64c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:236:1 atanf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b6438 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b6570 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b6668 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:238:1 __atanf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b65d8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b6710 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b68c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:241:1 atan2f64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12b6778 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y '_Float64':'double'
| |-ParmVarDecl 0x5608c12b67f0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b6978 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b6af0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:243:1 __atan2f64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12b69e0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y '_Float64':'double'
| |-ParmVarDecl 0x5608c12b6a58 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b6ba0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b6c98 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:246:1 cosf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b6c08 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b6d40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b6ec0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:248:1 __cosf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b6da8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b6f68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b7060 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:251:1 sinf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b6fd0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b7108 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b7200 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:253:1 __sinf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b7170 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b72a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b73a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:256:1 tanf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b7310 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b7448 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b7540 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:258:1 __tanf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b74b0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b75e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b76e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:261:1 coshf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b7650 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b7788 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b7880 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:263:1 __coshf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b77f0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b7928 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b7a20 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:266:1 sinhf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b7990 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b7ac8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b7bc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:268:1 __sinhf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b7b30 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b7c68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b7d60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:271:1 tanhf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b7cd0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b7e08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b7f00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:273:1 __tanhf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b7e70 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b7fa8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b8218 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:276:1 sincosf64 'void (_Float64, _Float64 *, _Float64 *)' extern
| |-ParmVarDecl 0x5608c12b8010 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12b80b8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx '_Float64 *'
| |-ParmVarDecl 0x5608c12b8130 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx '_Float64 *'
| `-NoThrowAttr 0x5608c12b82d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b84c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:278:1 __sincosf64 'void (_Float64, _Float64 *, _Float64 *)' extern
| |-ParmVarDecl 0x5608c12b8338 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12b83b0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx '_Float64 *'
| |-ParmVarDecl 0x5608c12b8428 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx '_Float64 *'
| `-NoThrowAttr 0x5608c12b8580 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b8678 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:281:1 acoshf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b85e8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b8720 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b8818 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:283:1 __acoshf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b8788 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b88c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b89b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:286:1 asinhf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b8928 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b8a60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b8b58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:288:1 __asinhf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b8ac8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b8c00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b8cf8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:291:1 atanhf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b8c68 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b8da0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b94b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:293:1 __atanhf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b8e08 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b9558 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b9650 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:296:1 expf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b95c0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b96f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b97f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:298:1 __expf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12b9760 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12b9898 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b9a58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:299:1 frexpf64 '_Float64 (_Float64, int *)' extern
| |-ParmVarDecl 0x5608c12b9900 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12b9980 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c12b9b08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b9c88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:301:1 __frexpf64 '_Float64 (_Float64, int *)' extern
| |-ParmVarDecl 0x5608c12b9b70 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12b9bf0 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c12b9d38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12b9ef8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:302:1 ldexpf64 '_Float64 (_Float64, int)' extern
| |-ParmVarDecl 0x5608c12b9da0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12b9e20 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c12b9fa8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ba128 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:304:1 __ldexpf64 '_Float64 (_Float64, int)' extern
| |-ParmVarDecl 0x5608c12ba010 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ba090 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c12ba1d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ba2d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:307:1 logf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12ba240 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12ba378 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ba470 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:309:1 __logf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12ba3e0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12ba518 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ba610 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:312:1 log10f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12ba580 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12ba6b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ba7b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:314:1 __log10f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12ba720 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12ba858 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12baa08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:315:1 modff64 '_Float64 (_Float64, _Float64 *)' extern
| |-ParmVarDecl 0x5608c12ba8c0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ba938 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr '_Float64 *'
| `-NoThrowAttr 0x5608c12baab8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bac50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:384:76> <scratch space>:317:1 __modff64 '_Float64 (_Float64, _Float64 *)' extern
| |-ParmVarDecl 0x5608c12bab20 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12bab98 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr '_Float64 *'
| |-NoThrowAttr 0x5608c12bad00 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c12bad58 <line:384:57, /usr/include/bits/mathcalls.h:110:69> 2
|-FunctionDecl 0x5608c12bae38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:321:1 exp10f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bada8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12baee0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bafd8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:323:1 __exp10f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12baf48 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bb080 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bb178 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:326:1 expm1f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bb0e8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bb220 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bb318 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:328:1 __expm1f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bb288 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bb3c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bc708 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:3:1 log1pf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bb428 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bc7b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bc8a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:5:1 __log1pf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bc818 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bc950 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bca48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:6:1 logbf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bc9b8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bcaf0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bcbe8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:8:1 __logbf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bcb58 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bcc90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bcd88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:11:1 exp2f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bccf8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bce30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bcf28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:13:1 __exp2f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bce98 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bcfd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bd0c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:16:1 log2f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bd038 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bd170 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bd268 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:18:1 __log2f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bd1d8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bd310 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bd488 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:21:1 powf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12bd378 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12bd3f0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12bd538 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bd6b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:23:1 __powf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12bd5a0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12bd618 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12bd760 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bd858 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:24:1 sqrtf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bd7c8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bd900 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bd9f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:26:1 __sqrtf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bd968 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12bdaa0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bdc18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:29:1 hypotf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12bdb08 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12bdb80 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12bdcc8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bde40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:31:1 __hypotf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12bdd30 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12bdda8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12bdef0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12bdfe8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:34:1 cbrtf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bdf58 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12be090 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12be188 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:36:1 __cbrtf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12be0f8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12be230 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12be328 </usr/include/math.h:297:3, line:294:66> <scratch space>:37:1 ceilf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12be298 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12be3d0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12be428 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c12be4f0 </usr/include/math.h:297:3, line:295:79> <scratch space>:39:1 __ceilf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12be460 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12be598 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12be5f0 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c12bf700 </usr/include/math.h:297:3, line:294:66> <scratch space>:40:1 fabsf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12be628 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12bf7a8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12bf800 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c12bf8c8 </usr/include/math.h:297:3, line:295:79> <scratch space>:42:1 __fabsf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bf838 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12bf970 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12bf9c8 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c12bfa90 </usr/include/math.h:297:3, line:294:66> <scratch space>:43:1 floorf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bfa00 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12bfb38 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12bfb90 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c12bfc58 </usr/include/math.h:297:3, line:295:79> <scratch space>:45:1 __floorf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12bfbc8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12bfd00 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12bfd58 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c12bfea0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:46:1 fmodf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12bfd90 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12bfe08 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12bff50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c00c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:48:1 __fmodf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12bffb8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c0030 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12c0178 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c02f0 </usr/include/math.h:297:3, line:294:66> <scratch space>:49:1 copysignf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c01e0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c0258 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12c03a0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c03f8 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c12c0540 </usr/include/math.h:297:3, line:295:79> <scratch space>:51:1 __copysignf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c0430 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c04a8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12c05f0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c0648 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c12c0748 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:52:1 nanf64 '_Float64 (const char *)' extern
| |-ParmVarDecl 0x5608c12c0688 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c12c07f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c08f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:54:1 __nanf64 '_Float64 (const char *)' extern
| |-ParmVarDecl 0x5608c12c0860 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c12c0998 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c0a90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:55:1 j0f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c0a00 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:220:28 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c0b38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c0c30 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:57:1 __j0f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c0ba0 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:220:28 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c0cd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c0dd0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:58:1 j1f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c0d40 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:221:28 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c0e78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c0f70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:60:1 __j1f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c0ee0 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:221:28 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c1018 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c11d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:61:1 jnf64 '_Float64 (int, _Float64)' extern
| |-ParmVarDecl 0x5608c12c1088 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c12c1100 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:222:33 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c1288 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c1408 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:63:1 __jnf64 '_Float64 (int, _Float64)' extern
| |-ParmVarDecl 0x5608c12c12f8 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c12c1370 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:222:33 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c14b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c15b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:64:1 y0f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c1520 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:223:28 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c1658 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c17a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:66:1 __y0f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c1710 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:223:28 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c1848 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c1940 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:67:1 y1f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c18b0 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:224:28 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c19e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c1ae0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:69:1 __y1f64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c1a50 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:224:28 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c1b88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c1d08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:70:1 ynf64 '_Float64 (int, _Float64)' extern
| |-ParmVarDecl 0x5608c12c1bf8 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c12c1c70 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:225:33 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c1db8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c1f38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:72:1 __ynf64 '_Float64 (int, _Float64)' extern
| |-ParmVarDecl 0x5608c12c1e28 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c12c1ea0 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:225:33 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c1fe8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c20e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:75:1 erff64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c2050 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:231:33 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c2188 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c2280 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:77:1 __erff64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c21f0 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:231:33 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c2328 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c2420 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:80:1 erfcf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c2390 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:232:34 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c24c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c25c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:82:1 __erfcf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c2530 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:232:34 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c2668 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c2760 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:83:1 lgammaf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c26d0 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:233:32 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c2808 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c2900 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:85:1 __lgammaf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c2870 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:233:32 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c29a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c2aa0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:86:1 tgammaf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c2a10 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:238:32 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c2b48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c2c40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:88:1 __tgammaf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c2bb0 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:238:32 '_Float64':'double'
| `-NoThrowAttr 0x5608c12c2ce8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c2e68 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:90:1 lgammaf64_r '_Float64 (_Float64, int *)' extern
| |-ParmVarDecl 0x5608c12c2d50 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:252:34 '_Float64':'double'
| |-ParmVarDecl 0x5608c12c2dd0 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12c2f18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c3098 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:93:1 __lgammaf64_r '_Float64 (_Float64, int *)' extern
| |-ParmVarDecl 0x5608c12c2f80 </usr/include/math.h:459:21> /usr/include/bits/mathcalls.h:252:34 '_Float64':'double'
| |-ParmVarDecl 0x5608c12c3000 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12c3148 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c3240 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:94:1 rintf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c31b0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c32e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c33e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:96:1 __rintf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c3350 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c3488 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c3600 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:97:1 nextafterf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c34f0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c3568 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12c36b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c3840 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:99:1 __nextafterf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c3730 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c37a8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12c38f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c39e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:101:1 nextdownf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c3958 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c3a90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c3b88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:103:1 __nextdownf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c3af8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c3c30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c3d28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:104:1 nextupf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c3c98 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c3dd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c3ec8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:106:1 __nextupf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c3e38 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c3f70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c40e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:107:1 remainderf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c3fd8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c4050 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12c4198 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c4310 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:109:1 __remainderf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c4200 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c4278 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12c43c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c4540 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:110:1 scalbnf64 '_Float64 (_Float64, int)' extern
| |-ParmVarDecl 0x5608c12c4428 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c44a8 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c12c45f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c4770 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:112:1 __scalbnf64 '_Float64 (_Float64, int)' extern
| |-ParmVarDecl 0x5608c12c4658 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c46d8 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c12c4820 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c4950 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:113:1 ilogbf64 'int (_Float64)' extern
| |-ParmVarDecl 0x5608c12c4888 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c49f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c4af8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:115:1 __ilogbf64 'int (_Float64)' extern
| |-ParmVarDecl 0x5608c12c4a60 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c4ba0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c4cd0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:117:1 llogbf64 'long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c4c08 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c4d78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c4e78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:119:1 __llogbf64 'long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c4de0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c4f20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c50d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:120:1 scalblnf64 '_Float64 (_Float64, long)' extern
| |-ParmVarDecl 0x5608c12c4f88 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c5008 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c12c5188 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c5308 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:122:1 __scalblnf64 '_Float64 (_Float64, long)' extern
| |-ParmVarDecl 0x5608c12c51f0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c5270 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c12c53b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c54b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:123:1 nearbyintf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c5420 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c5558 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c5650 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:125:1 __nearbyintf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c55c0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c56f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c5800 </usr/include/math.h:297:3, line:294:66> <scratch space>:126:1 roundf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c5770 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12c58a8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c5900 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12c59c8 </usr/include/math.h:297:3, line:295:79> <scratch space>:128:1 __roundf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c5938 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12c5a70 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c5ac8 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12c5b90 </usr/include/math.h:297:3, line:294:66> <scratch space>:129:1 truncf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c5b00 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12c5c38 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c5c90 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c12c5d58 </usr/include/math.h:297:3, line:295:79> <scratch space>:131:1 __truncf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c5cc8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12c5e00 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c5e58 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c12c6068 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:132:1 remquof64 '_Float64 (_Float64, _Float64, int *)' extern
| |-ParmVarDecl 0x5608c12c5e90 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c5f08 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y '_Float64':'double'
| |-ParmVarDecl 0x5608c12c5f88 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c12c6120 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c6320 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:134:1 __remquof64 '_Float64 (_Float64, _Float64, int *)' extern
| |-ParmVarDecl 0x5608c12c6188 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c6200 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y '_Float64':'double'
| |-ParmVarDecl 0x5608c12c6280 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c12c63d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c64d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:135:1 lrintf64 'long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c6440 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c6580 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c6680 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:137:1 __lrintf64 'long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c65e8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c6728 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c6860 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:138:1 llrintf64 'long long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c6790 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c6908 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c6a08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:140:1 __llrintf64 'long long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c6970 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c6ab0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c6bb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:141:1 lroundf64 'long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c6b18 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c6c58 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c6d58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:143:1 __lroundf64 'long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c6cc0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c6e00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c6f00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:144:1 llroundf64 'long long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c6e68 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c6fa8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c70a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:146:1 __llroundf64 'long long (_Float64)' extern
| |-ParmVarDecl 0x5608c12c7010 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c12c7150 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c72c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:147:1 fdimf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c71b8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c7230 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12c7378 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c74f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:149:1 __fdimf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c73e0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c7458 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c12c75a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c7c10 </usr/include/math.h:297:3, line:294:66> <scratch space>:151:1 fmaxf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c7608 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c7680 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12c7cc0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c7d18 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c12c7e60 </usr/include/math.h:297:3, line:295:79> <scratch space>:153:1 __fmaxf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c7d50 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c7dc8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12c7f10 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c7f68 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c12c80b0 </usr/include/math.h:297:3, line:294:66> <scratch space>:154:1 fminf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c7fa0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c8018 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12c8160 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c81b8 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c12c8300 </usr/include/math.h:297:3, line:295:79> <scratch space>:156:1 __fminf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c81f0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c8268 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12c83b0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c8408 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c12c8618 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:157:1 fmaf64 '_Float64 (_Float64, _Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c8440 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c84b8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y '_Float64':'double'
| |-ParmVarDecl 0x5608c12c8530 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z '_Float64':'double'
| `-NoThrowAttr 0x5608c12c86d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c88c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:159:1 __fmaf64 '_Float64 (_Float64, _Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12c8738 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c87b0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y '_Float64':'double'
| |-ParmVarDecl 0x5608c12c8828 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z '_Float64':'double'
| `-NoThrowAttr 0x5608c12c8980 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c8a78 </usr/include/math.h:297:3, line:294:66> <scratch space>:161:1 roundevenf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c89e8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12c8b20 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c8b78 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c12c8c40 </usr/include/math.h:297:3, line:295:79> <scratch space>:163:1 __roundevenf64 '_Float64 (_Float64)' extern
| |-ParmVarDecl 0x5608c12c8bb0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x '_Float64':'double'
| |-NoThrowAttr 0x5608c12c8ce8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12c8d40 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c12c8f58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:164:1 fromfpf64 '__intmax_t (_Float64, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12c8d78 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c8df8 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12c8e78 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12c9010 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c9218 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:166:1 __fromfpf64 '__intmax_t (_Float64, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12c9078 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c90f8 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12c9178 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12c92d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c9518 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:167:1 ufromfpf64 '__uintmax_t (_Float64, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12c9338 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c93b8 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c12c9438 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12c95d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c97d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:169:1 __ufromfpf64 '__uintmax_t (_Float64, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12c9638 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c96b8 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c12c9738 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12c9890 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12c9a98 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:170:1 fromfpxf64 '__intmax_t (_Float64, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12c98f8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12c9978 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c12c99f8 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12c9b50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cba20 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:172:1 __fromfpxf64 '__intmax_t (_Float64, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12cb880 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cb900 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c12cb980 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12cbad8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cbce0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:173:1 ufromfpxf64 '__uintmax_t (_Float64, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12cbb40 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cbbc0 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c12cbc40 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12cbd98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cbfa0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:175:1 __ufromfpxf64 '__uintmax_t (_Float64, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12cbe00 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cbe80 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c12cbf00 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12cc058 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cc240 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:176:1 canonicalizef64 'int (_Float64 *, const _Float64 *)' extern
| |-ParmVarDecl 0x5608c12cc0c0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:370:47> col:47 __cx '_Float64 *'
| |-ParmVarDecl 0x5608c12cc168 <col:53, col:70> col:70 __x 'const _Float64 *'
| `-NoThrowAttr 0x5608c12cc2f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cc468 </usr/include/math.h:297:3, line:294:66> <scratch space>:179:1 fmaxmagf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cc358 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cc3d0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cc518 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cc570 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c12cc6b8 </usr/include/math.h:297:3, line:295:79> <scratch space>:181:1 __fmaxmagf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cc5a8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cc620 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cc768 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cc7c0 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c12cc908 </usr/include/math.h:297:3, line:294:66> <scratch space>:182:1 fminmagf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cc7f8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cc870 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cc9b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cca10 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c12ccb58 </usr/include/math.h:297:3, line:295:79> <scratch space>:184:1 __fminmagf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cca48 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ccac0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12ccc08 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ccc60 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c12ccda8 </usr/include/math.h:297:3, line:294:66> <scratch space>:186:1 fmaximumf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12ccc98 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ccd10 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cce58 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cceb0 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c12ccff8 </usr/include/math.h:297:3, line:295:79> <scratch space>:188:1 __fmaximumf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12ccee8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ccf60 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cd0a8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cd100 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c12cd248 </usr/include/math.h:297:3, line:294:66> <scratch space>:189:1 fminimumf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cd138 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cd1b0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cd2f8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cd350 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c12cd498 </usr/include/math.h:297:3, line:295:79> <scratch space>:191:1 __fminimumf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cd388 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cd400 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cd548 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cd5a0 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c12cd6e8 </usr/include/math.h:297:3, line:294:66> <scratch space>:192:1 fmaximum_numf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cd5d8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cd650 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cd798 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cd7f0 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c12cd9a0 </usr/include/math.h:297:3, line:295:79> <scratch space>:194:1 __fmaximum_numf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cd890 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cd908 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cda50 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cdaa8 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c12cdbf0 </usr/include/math.h:297:3, line:294:66> <scratch space>:195:1 fminimum_numf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cdae0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cdb58 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cdca0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cdcf8 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c12cde40 </usr/include/math.h:297:3, line:295:79> <scratch space>:197:1 __fminimum_numf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cdd30 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cdda8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cdef0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cdf48 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c12ce090 </usr/include/math.h:297:3, line:294:66> <scratch space>:198:1 fmaximum_magf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cdf80 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cdff8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12ce140 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ce198 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c12ce2e0 </usr/include/math.h:297:3, line:295:79> <scratch space>:200:1 __fmaximum_magf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12ce1d0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ce248 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12ce390 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ce3e8 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c12ce530 </usr/include/math.h:297:3, line:294:66> <scratch space>:201:1 fminimum_magf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12ce420 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ce498 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12ce5e0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ce638 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c12ce780 </usr/include/math.h:297:3, line:295:79> <scratch space>:203:1 __fminimum_magf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12ce670 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ce6e8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12ce830 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ce888 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c12ce9d0 </usr/include/math.h:297:3, line:294:66> <scratch space>:204:1 fmaximum_mag_numf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12ce8c0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ce938 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cea80 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cead8 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c12cec20 </usr/include/math.h:297:3, line:295:79> <scratch space>:206:1 __fmaximum_mag_numf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12ceb10 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12ceb88 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cecd0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12ced28 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c12cee70 </usr/include/math.h:297:3, line:294:66> <scratch space>:207:1 fminimum_mag_numf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12ced60 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cedd8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cef20 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cef78 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c12cf0c0 </usr/include/math.h:297:3, line:295:79> <scratch space>:209:1 __fminimum_mag_numf64 '_Float64 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c12cefb0 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c12cf028 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y '_Float64':'double'
| |-NoThrowAttr 0x5608c12cf170 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12cf1c8 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c12cf350 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:211:1 totalorderf64 'int (const _Float64 *, const _Float64 *)' extern
| |-ParmVarDecl 0x5608c12cf200 </usr/include/bits/mathcalls.h:411:34, col:51> col:51 __x 'const _Float64 *'
| |-ParmVarDecl 0x5608c12cf278 <line:412:6, col:23> col:23 __y 'const _Float64 *'
| |-NoThrowAttr 0x5608c12cf400 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c12cf458 <line:308:45>
|-FunctionDecl 0x5608c12cf5a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:212:1 totalordermagf64 'int (const _Float64 *, const _Float64 *)' extern
| |-ParmVarDecl 0x5608c12cf490 </usr/include/bits/mathcalls.h:416:37, col:54> col:54 __x 'const _Float64 *'
| |-ParmVarDecl 0x5608c12cf508 <line:417:9, col:26> col:26 __y 'const _Float64 *'
| |-NoThrowAttr 0x5608c12cf658 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c12cf6b0 <line:308:45>
|-FunctionDecl 0x5608c12cf7a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:213:1 getpayloadf64 '_Float64 (const _Float64 *)' extern
| |-ParmVarDecl 0x5608c12cf6e8 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const _Float64 *'
| `-NoThrowAttr 0x5608c12cf850 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cf970 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:215:1 __getpayloadf64 '_Float64 (const _Float64 *)' extern
| |-ParmVarDecl 0x5608c12cf8e0 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const _Float64 *'
| `-NoThrowAttr 0x5608c12cfa18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cfbd0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:216:1 setpayloadf64 'int (_Float64 *, _Float64)' extern
| |-ParmVarDecl 0x5608c12cfa80 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:424:45> col:45 __x '_Float64 *'
| |-ParmVarDecl 0x5608c12cfaf8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:424:60> col:60 __payload '_Float64':'double'
| `-NoThrowAttr 0x5608c12cfc80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cfe00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:217:1 setpayloadsigf64 'int (_Float64 *, _Float64)' extern
| |-ParmVarDecl 0x5608c12cfce8 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:427:48> col:48 __x '_Float64 *'
| |-ParmVarDecl 0x5608c12cfd60 </usr/include/math.h:459:21, /usr/include/bits/mathcalls.h:427:63> col:63 __payload '_Float64':'double'
| `-NoThrowAttr 0x5608c12cfeb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12cffd8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:221:1 acosf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12cff18 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d0080 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d0178 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:223:1 __acosf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d00e8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d0220 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d0318 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:226:1 asinf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d0288 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d03c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d04b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:228:1 __asinf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d0428 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d0560 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d0658 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:231:1 atanf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d05c8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d0700 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d07f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:233:1 __atanf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d0768 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d08a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d0a58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:236:1 atan2f32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d0908 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d0980 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d0b08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d0c80 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:238:1 __atan2f32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d0b70 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d0be8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d0d30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d0e28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:241:1 cosf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d0d98 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d0ed0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d0fc8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:243:1 __cosf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d0f38 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d1070 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d1168 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:246:1 sinf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d10d8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d1210 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d1308 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:248:1 __sinf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d1278 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d13b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d14a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:251:1 tanf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d1418 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d1550 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d1648 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:253:1 __tanf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d15b8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d16f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d17e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:256:1 coshf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d1758 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d18b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d19a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:258:1 __coshf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d1918 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d1a50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d1b48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:261:1 sinhf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d1ab8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d1bf0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d1ce8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:263:1 __sinhf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d1c58 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d1d90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d1e88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:266:1 tanhf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d1df8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d1f30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d2028 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:268:1 __tanhf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d1f98 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d20d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d2338 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:271:1 sincosf32x 'void (_Float32x, _Float32x *, _Float32x *)' extern
| |-ParmVarDecl 0x5608c12d2138 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d21d8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx '_Float32x *'
| |-ParmVarDecl 0x5608c12d2250 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx '_Float32x *'
| `-NoThrowAttr 0x5608c12d23f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d25e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:273:1 __sincosf32x 'void (_Float32x, _Float32x *, _Float32x *)' extern
| |-ParmVarDecl 0x5608c12d2458 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d24d0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx '_Float32x *'
| |-ParmVarDecl 0x5608c12d2548 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx '_Float32x *'
| `-NoThrowAttr 0x5608c12d26a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d2798 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:276:1 acoshf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d2708 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d2840 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d2938 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:278:1 __acoshf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d28a8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d29e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d2ad8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:281:1 asinhf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d2a48 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d2b80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d2c78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:283:1 __asinhf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d2be8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d2d20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d2e18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:286:1 atanhf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d2d88 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d2ec0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d2fb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:288:1 __atanhf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d2f28 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d3060 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d3158 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:291:1 expf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d30c8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d3200 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d32f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:293:1 __expf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d3268 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d33a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d3558 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:294:1 frexpf32x '_Float32x (_Float32x, int *)' extern
| |-ParmVarDecl 0x5608c12d3408 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d3488 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c12d3608 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d3788 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:296:1 __frexpf32x '_Float32x (_Float32x, int *)' extern
| |-ParmVarDecl 0x5608c12d3670 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d36f0 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c12d3838 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d4e18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:297:1 ldexpf32x '_Float32x (_Float32x, int)' extern
| |-ParmVarDecl 0x5608c12d4cc0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d4d40 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c12d4ec8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d5048 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:299:1 __ldexpf32x '_Float32x (_Float32x, int)' extern
| |-ParmVarDecl 0x5608c12d4f30 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d4fb0 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c12d50f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d51f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:302:1 logf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d5160 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d5298 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d5390 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:304:1 __logf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d5300 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d5438 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d5530 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:307:1 log10f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d54a0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d55d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d56d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:309:1 __log10f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d5640 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d5778 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d5928 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:310:1 modff32x '_Float32x (_Float32x, _Float32x *)' extern
| |-ParmVarDecl 0x5608c12d57e0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d5858 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr '_Float32x *'
| `-NoThrowAttr 0x5608c12d59d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d5b70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:384:76> <scratch space>:312:1 __modff32x '_Float32x (_Float32x, _Float32x *)' extern
| |-ParmVarDecl 0x5608c12d5a40 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d5ab8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr '_Float32x *'
| |-NoThrowAttr 0x5608c12d5c20 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c12d5c78 <line:384:57, /usr/include/bits/mathcalls.h:110:69> 2
|-FunctionDecl 0x5608c12d5d58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:316:1 exp10f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d5cc8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d5e00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d5ef8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:318:1 __exp10f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d5e68 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d5fa0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d6098 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:321:1 expm1f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d6008 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d6140 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d6238 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:323:1 __expm1f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d61a8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d62e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d63d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:4:1 log1pf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d6348 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d6480 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d6578 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:6:1 __log1pf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d64e8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d6620 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d6718 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:7:1 logbf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d6688 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d67c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d68b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:9:1 __logbf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d6828 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d6960 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d6a58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:12:1 exp2f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d69c8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d6b00 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d6bf8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:14:1 __exp2f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d6b68 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d7cf0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d7de8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:17:1 log2f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d7d58 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d7e90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d7f88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:19:1 __log2f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d7ef8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d8030 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d81a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:22:1 powf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d8098 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d8110 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d8258 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d83d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:24:1 __powf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d82c0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d8338 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d8480 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d8578 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:25:1 sqrtf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d84e8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d8620 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d8718 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:27:1 __sqrtf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d8688 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d87c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d8938 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:30:1 hypotf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d8828 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d88a0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d89e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d8b60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:32:1 __hypotf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d8a50 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d8ac8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d8c10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d8d08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:35:1 cbrtf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d8c78 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d8db0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d8ea8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:37:1 __cbrtf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d8e18 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d8f50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d9048 </usr/include/math.h:297:3, line:294:66> <scratch space>:38:1 ceilf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d8fb8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12d90f0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12d9148 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c12d9210 </usr/include/math.h:297:3, line:295:79> <scratch space>:40:1 __ceilf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d9180 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12d92b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12d9310 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c12d93d8 </usr/include/math.h:297:3, line:294:66> <scratch space>:41:1 fabsf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d9348 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12d9480 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12d94d8 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c12d95a0 </usr/include/math.h:297:3, line:295:79> <scratch space>:43:1 __fabsf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d9510 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12d9648 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12d96a0 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c12d9768 </usr/include/math.h:297:3, line:294:66> <scratch space>:44:1 floorf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d96d8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12d9810 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12d9868 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c12d9930 </usr/include/math.h:297:3, line:295:79> <scratch space>:46:1 __floorf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12d98a0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12d99d8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12d9a30 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c12d9b78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:47:1 fmodf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d9a68 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d9ae0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d9c28 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12d9e10 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:49:1 __fmodf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d9d00 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d9d78 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12d9ec0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12da038 </usr/include/math.h:297:3, line:294:66> <scratch space>:50:1 copysignf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12d9f28 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12d9fa0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12da0e8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12da140 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c12da288 </usr/include/math.h:297:3, line:295:79> <scratch space>:52:1 __copysignf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12da178 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12da1f0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12da338 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12da390 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c12da498 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:53:1 nanf32x '_Float32x (const char *)' extern
| |-ParmVarDecl 0x5608c12da3d0 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c12da540 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12da640 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:55:1 __nanf32x '_Float32x (const char *)' extern
| |-ParmVarDecl 0x5608c12da5b0 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c12da6e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12da7e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:56:1 j0f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12da750 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:220:28 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12da888 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12da980 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:58:1 __j0f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12da8f0 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:220:28 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12daa28 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dab20 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:59:1 j1f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12daa90 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:221:28 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dabc8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dacc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:61:1 __j1f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dac30 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:221:28 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dad68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12daf28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:62:1 jnf32x '_Float32x (int, _Float32x)' extern
| |-ParmVarDecl 0x5608c12dadd8 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c12dae50 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:222:33 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dafd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12db158 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:64:1 __jnf32x '_Float32x (int, _Float32x)' extern
| |-ParmVarDecl 0x5608c12db048 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c12db0c0 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:222:33 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12db208 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12db300 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:65:1 y0f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12db270 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:223:28 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12db3a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12db4a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:67:1 __y0f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12db410 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:223:28 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12db548 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12db640 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:68:1 y1f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12db5b0 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:224:28 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12db6e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12db7e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:70:1 __y1f32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12db750 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:224:28 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12db888 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dba08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:71:1 ynf32x '_Float32x (int, _Float32x)' extern
| |-ParmVarDecl 0x5608c12db8f8 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c12db970 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:225:33 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dbab8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dbc38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:73:1 __ynf32x '_Float32x (int, _Float32x)' extern
| |-ParmVarDecl 0x5608c12dbb28 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c12dbba0 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:225:33 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dbd10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dbe08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:76:1 erff32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dbd78 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:231:33 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dbeb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dbfa8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:78:1 __erff32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dbf18 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:231:33 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dc050 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dc148 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:81:1 erfcf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dc0b8 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:232:34 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dc1f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dc2e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:83:1 __erfcf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dc258 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:232:34 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dc390 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dc488 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:84:1 lgammaf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dc3f8 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:233:32 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dc530 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dc628 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:86:1 __lgammaf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dc598 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:233:32 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dc6d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dc7c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:87:1 tgammaf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dc738 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:238:32 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dc870 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dc968 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:89:1 __tgammaf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dc8d8 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:238:32 '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dca10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dcb90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:91:1 lgammaf32x_r '_Float32x (_Float32x, int *)' extern
| |-ParmVarDecl 0x5608c12dca78 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:252:34 '_Float32x':'double'
| |-ParmVarDecl 0x5608c12dcaf8 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12dcc40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dcdc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:94:1 __lgammaf32x_r '_Float32x (_Float32x, int *)' extern
| |-ParmVarDecl 0x5608c12dcca8 </usr/include/math.h:493:21> /usr/include/bits/mathcalls.h:252:34 '_Float32x':'double'
| |-ParmVarDecl 0x5608c12dcd28 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c12dce70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dcf68 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:95:1 rintf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dced8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dd010 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dd108 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:97:1 __rintf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dd078 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dd1b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dd328 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:98:1 nextafterf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12dd218 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12dd290 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dd3d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dd550 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:100:1 __nextafterf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12dd440 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12dd4b8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dd600 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dd6f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:102:1 nextdownf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dd668 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dd7a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dd898 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:104:1 __nextdownf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dd808 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dd940 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dda38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:105:1 nextupf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dd9a8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12ddae0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ddbd8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:107:1 __nextupf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12ddb48 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12ddc80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dde30 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:108:1 remainderf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12ddd20 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12ddd98 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12ddee0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12de058 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:110:1 __remainderf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12ddf48 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12ddfc0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12de108 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12de288 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:111:1 scalbnf32x '_Float32x (_Float32x, int)' extern
| |-ParmVarDecl 0x5608c12de170 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12de1f0 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c12de338 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12de4b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:113:1 __scalbnf32x '_Float32x (_Float32x, int)' extern
| |-ParmVarDecl 0x5608c12de3a0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12de420 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c12de568 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12de6a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:114:1 ilogbf32x 'int (_Float32x)' extern
| |-ParmVarDecl 0x5608c12de5d0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12de748 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12de848 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:116:1 __ilogbf32x 'int (_Float32x)' extern
| |-ParmVarDecl 0x5608c12de7b0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12de8f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dea20 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:118:1 llogbf32x 'long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12de958 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12deac8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12debc8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:120:1 __llogbf32x 'long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12deb30 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12dec70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12dee28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:121:1 scalblnf32x '_Float32x (_Float32x, long)' extern
| |-ParmVarDecl 0x5608c12decd8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12ded58 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c12deed8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12df058 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:123:1 __scalblnf32x '_Float32x (_Float32x, long)' extern
| |-ParmVarDecl 0x5608c12def40 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12defc0 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c12df108 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12df200 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:124:1 nearbyintf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12df170 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12df2a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12df3a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:126:1 __nearbyintf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12df310 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12df448 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12df540 </usr/include/math.h:297:3, line:294:66> <scratch space>:127:1 roundf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12df4b0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12df5e8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12df640 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12df708 </usr/include/math.h:297:3, line:295:79> <scratch space>:129:1 __roundf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12df678 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12df7b0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12df808 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c12df8d0 </usr/include/math.h:297:3, line:294:66> <scratch space>:130:1 truncf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12df840 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12df978 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12df9d0 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c12dfa98 </usr/include/math.h:297:3, line:295:79> <scratch space>:132:1 __truncf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12dfa08 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12dfb40 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12dfb98 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c12e0e28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:133:1 remquof32x '_Float32x (_Float32x, _Float32x, int *)' extern
| |-ParmVarDecl 0x5608c12dfbd0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12dfc48 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e0d40 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c12e0ee0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e10e0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:135:1 __remquof32x '_Float32x (_Float32x, _Float32x, int *)' extern
| |-ParmVarDecl 0x5608c12e0f48 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e0fc0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e1040 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c12e1198 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e1298 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:136:1 lrintf32x 'long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e1200 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e1340 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e1440 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:138:1 __lrintf32x 'long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e13a8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e14e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e1620 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:139:1 llrintf32x 'long long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e1550 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e16c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e17c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:141:1 __llrintf32x 'long long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e1730 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e1870 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e1970 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:142:1 lroundf32x 'long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e18d8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e1a18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e1b18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:144:1 __lroundf32x 'long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e1a80 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e1bc0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e1cc0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:145:1 llroundf32x 'long long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e1c28 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e1d68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e1e68 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:147:1 __llroundf32x 'long long (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e1dd0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e1f10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e2088 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:148:1 fdimf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e1f78 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e1ff0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e2138 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e22b0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:150:1 __fdimf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e21a0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e2218 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e2360 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e24d8 </usr/include/math.h:297:3, line:294:66> <scratch space>:152:1 fmaxf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e23c8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e2440 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e2588 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e25e0 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c12e2728 </usr/include/math.h:297:3, line:295:79> <scratch space>:154:1 __fmaxf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e2618 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e2690 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e27d8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e2830 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c12e2978 </usr/include/math.h:297:3, line:294:66> <scratch space>:155:1 fminf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e2868 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e28e0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e2a28 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e2a80 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c12e2bc8 </usr/include/math.h:297:3, line:295:79> <scratch space>:157:1 __fminf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e2ab8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e2b30 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e2c78 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e2cd0 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c12e2f28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:158:1 fmaf32x '_Float32x (_Float32x, _Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e2d50 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e2dc8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e2e40 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e2fe0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e31d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:160:1 __fmaf32x '_Float32x (_Float32x, _Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e3048 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e30c0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e3138 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e3290 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e3388 </usr/include/math.h:297:3, line:294:66> <scratch space>:162:1 roundevenf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e32f8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e3430 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e3488 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c12e3550 </usr/include/math.h:297:3, line:295:79> <scratch space>:164:1 __roundevenf32x '_Float32x (_Float32x)' extern
| |-ParmVarDecl 0x5608c12e34c0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e35f8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e3650 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c12e3868 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:165:1 fromfpf32x '__intmax_t (_Float32x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12e3688 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e3708 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12e3788 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12e3920 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e3b28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:167:1 __fromfpf32x '__intmax_t (_Float32x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12e3988 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e3a08 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c12e3a88 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12e3be0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e3e28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:168:1 ufromfpf32x '__uintmax_t (_Float32x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12e3c48 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e3cc8 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c12e3d48 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12e3ee0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e40e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:170:1 __ufromfpf32x '__uintmax_t (_Float32x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12e3f48 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e3fc8 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c12e4048 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12e41a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e43a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:171:1 fromfpxf32x '__intmax_t (_Float32x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12e4208 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e4288 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c12e4308 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12e4460 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e4668 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:173:1 __fromfpxf32x '__intmax_t (_Float32x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12e44c8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e4548 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c12e45c8 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12e4720 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e4928 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:174:1 ufromfpxf32x '__uintmax_t (_Float32x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12e4788 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e4808 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c12e4888 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12e49e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e4be8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:176:1 __ufromfpxf32x '__uintmax_t (_Float32x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c12e4a48 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e4ac8 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c12e4b48 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c12e4ca0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e5200 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:177:1 canonicalizef32x 'int (_Float32x *, const _Float32x *)' extern
| |-ParmVarDecl 0x5608c12e5080 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:370:47> col:47 __cx '_Float32x *'
| |-ParmVarDecl 0x5608c12e5128 <col:53, col:70> col:70 __x 'const _Float32x *'
| `-NoThrowAttr 0x5608c12e52b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e5428 </usr/include/math.h:297:3, line:294:66> <scratch space>:180:1 fmaxmagf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e5318 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e5390 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e54d8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e5530 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c12e5678 </usr/include/math.h:297:3, line:295:79> <scratch space>:182:1 __fmaxmagf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e5568 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e55e0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e5728 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e5780 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c12e58c8 </usr/include/math.h:297:3, line:294:66> <scratch space>:183:1 fminmagf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e57b8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e5830 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e5978 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e59d0 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c12e5b18 </usr/include/math.h:297:3, line:295:79> <scratch space>:185:1 __fminmagf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e5a08 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e5a80 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e5bc8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e5c20 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c12e5d68 </usr/include/math.h:297:3, line:294:66> <scratch space>:187:1 fmaximumf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e5c58 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e5cd0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e5e18 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e5e70 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c12e5fb8 </usr/include/math.h:297:3, line:295:79> <scratch space>:189:1 __fmaximumf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e5ea8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e5f20 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e6068 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e60c0 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c12e6208 </usr/include/math.h:297:3, line:294:66> <scratch space>:190:1 fminimumf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e60f8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e6170 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e62b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e6310 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c12e6458 </usr/include/math.h:297:3, line:295:79> <scratch space>:192:1 __fminimumf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e6348 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e63c0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e6508 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e6560 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c12e66a8 </usr/include/math.h:297:3, line:294:66> <scratch space>:193:1 fmaximum_numf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e6598 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e6610 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e6758 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e67b0 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c12e68f8 </usr/include/math.h:297:3, line:295:79> <scratch space>:195:1 __fmaximum_numf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e67e8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e6860 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e69a8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e6a00 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c12e6b48 </usr/include/math.h:297:3, line:294:66> <scratch space>:196:1 fminimum_numf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e6a38 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e6ab0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e6bf8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e6c50 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c12e6d98 </usr/include/math.h:297:3, line:295:79> <scratch space>:198:1 __fminimum_numf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e6c88 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e6d00 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e6e48 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e6ea0 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c12e7090 </usr/include/math.h:297:3, line:294:66> <scratch space>:199:1 fmaximum_magf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e6ed8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e6f50 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e7140 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e7198 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c12e72e0 </usr/include/math.h:297:3, line:295:79> <scratch space>:201:1 __fmaximum_magf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e71d0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e7248 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e7390 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e73e8 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c12e7530 </usr/include/math.h:297:3, line:294:66> <scratch space>:202:1 fminimum_magf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e7420 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e7498 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e75e0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e7638 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c12e7780 </usr/include/math.h:297:3, line:295:79> <scratch space>:204:1 __fminimum_magf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e7670 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e76e8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e7830 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e7888 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c12e79d0 </usr/include/math.h:297:3, line:294:66> <scratch space>:205:1 fmaximum_mag_numf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e78c0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e7938 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e7a80 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e7ad8 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c12e7c20 </usr/include/math.h:297:3, line:295:79> <scratch space>:207:1 __fmaximum_mag_numf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e7b10 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e7b88 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e7cd0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e7d28 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c12e7e70 </usr/include/math.h:297:3, line:294:66> <scratch space>:208:1 fminimum_mag_numf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e7d60 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e7dd8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e7f20 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e7f78 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c12e80c0 </usr/include/math.h:297:3, line:295:79> <scratch space>:210:1 __fminimum_mag_numf32x '_Float32x (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e7fb0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c12e8028 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y '_Float32x':'double'
| |-NoThrowAttr 0x5608c12e8170 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12e81c8 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c12e8350 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:212:1 totalorderf32x 'int (const _Float32x *, const _Float32x *)' extern
| |-ParmVarDecl 0x5608c12e8200 </usr/include/bits/mathcalls.h:411:34, col:51> col:51 __x 'const _Float32x *'
| |-ParmVarDecl 0x5608c12e8278 <line:412:6, col:23> col:23 __y 'const _Float32x *'
| |-NoThrowAttr 0x5608c12e8400 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c12e8458 <line:308:45>
|-FunctionDecl 0x5608c12e85a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:213:1 totalordermagf32x 'int (const _Float32x *, const _Float32x *)' extern
| |-ParmVarDecl 0x5608c12e8490 </usr/include/bits/mathcalls.h:416:37, col:54> col:54 __x 'const _Float32x *'
| |-ParmVarDecl 0x5608c12e8508 <line:417:9, col:26> col:26 __y 'const _Float32x *'
| |-NoThrowAttr 0x5608c12e8658 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c12e86b0 <line:308:45>
|-FunctionDecl 0x5608c12e87a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:214:1 getpayloadf32x '_Float32x (const _Float32x *)' extern
| |-ParmVarDecl 0x5608c12e86e8 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const _Float32x *'
| `-NoThrowAttr 0x5608c12e8850 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e8948 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:216:1 __getpayloadf32x '_Float32x (const _Float32x *)' extern
| |-ParmVarDecl 0x5608c12e88b8 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const _Float32x *'
| `-NoThrowAttr 0x5608c12e89f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e8bb0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:217:1 setpayloadf32x 'int (_Float32x *, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e8a58 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:424:45> col:45 __x '_Float32x *'
| |-ParmVarDecl 0x5608c12e8ad0 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:424:60> col:60 __payload '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e8c60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e8de0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:218:1 setpayloadsigf32x 'int (_Float32x *, _Float32x)' extern
| |-ParmVarDecl 0x5608c12e8cc8 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:427:48> col:48 __x '_Float32x *'
| |-ParmVarDecl 0x5608c12e8d40 </usr/include/math.h:493:21, /usr/include/bits/mathcalls.h:427:63> col:63 __payload '_Float32x':'double'
| `-NoThrowAttr 0x5608c12e8e90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12e8fb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:222:1 acosf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12e8ef8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12e9060 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ea180 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:224:1 __acosf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ea0f0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:53:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ea228 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ea320 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:227:1 asinf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ea290 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ea3c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ea4c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:229:1 __asinf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ea430 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:55:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ea568 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ea660 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:232:1 atanf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ea5d0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ea708 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ea800 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:234:1 __atanf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ea770 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:57:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ea8a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eaa58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:237:1 atan2f64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c12ea910 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12ea988 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eab08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eac80 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:239:1 __atan2f64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c12eab70 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:59:36> col:36 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12eabe8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:59:51> col:51 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ead30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eae28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:242:1 cosf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ead98 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eaed0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eafc8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:244:1 __cosf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eaf38 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:62:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eb070 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eb168 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:247:1 sinf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eb0d8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eb210 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eb308 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:249:1 __sinf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eb278 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:64:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eb3b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eb4a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:252:1 tanf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eb418 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eb550 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eb648 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:254:1 __tanf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eb5b8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:66:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eb6f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eb7e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:257:1 coshf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eb758 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eb890 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eb988 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:259:1 __coshf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eb8f8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:71:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eba30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ebb28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:262:1 sinhf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eba98 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ebbd0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ebcc8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:264:1 __sinhf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ebc38 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:73:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ebd70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ebe68 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:267:1 tanhf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ebdd8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ebf10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ec008 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:269:1 __tanhf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ebf78 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:75:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ed0d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ed338 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:272:1 sincosf64x 'void (_Float64x, _Float64x *, _Float64x *)' extern
| |-ParmVarDecl 0x5608c12ed138 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12ed1d8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx '_Float64x *'
| |-ParmVarDecl 0x5608c12ed250 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx '_Float64x *'
| `-NoThrowAttr 0x5608c12ed3f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ed5e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:274:1 __sincosf64x 'void (_Float64x, _Float64x *, _Float64x *)' extern
| |-ParmVarDecl 0x5608c12ed458 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:80:14> col:14 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12ed4d0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:80:30> col:30 __sinx '_Float64x *'
| |-ParmVarDecl 0x5608c12ed548 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:80:49> col:49 __cosx '_Float64x *'
| `-NoThrowAttr 0x5608c12ed6a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ed798 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:277:1 acoshf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ed708 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ed840 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ed938 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:279:1 __acoshf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ed8a8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:85:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ed9e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12edad8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:282:1 asinhf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eda48 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12edb80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12edc78 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:284:1 __asinhf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12edbe8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:87:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12edd20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ede18 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:287:1 atanhf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12edd88 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12edec0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12edfb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:289:1 __atanhf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12edf28 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:89:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ee060 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ee158 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:292:1 expf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ee0c8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ee200 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ee2f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:294:1 __expf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12ee268 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:95:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ee3a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ee558 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:295:1 frexpf64x '_Float64x (_Float64x, int *)' extern
| |-ParmVarDecl 0x5608c12ee408 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12ee488 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c12ee608 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ee788 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:297:1 __frexpf64x '_Float64x (_Float64x, int *)' extern
| |-ParmVarDecl 0x5608c12ee670 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:98:32> col:32 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12ee6f0 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x5608c12ee838 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12ee9f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:298:1 ldexpf64x '_Float64x (_Float64x, int)' extern
| |-ParmVarDecl 0x5608c12ee8a0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12ee920 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c12eeaa8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eec28 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:300:1 __ldexpf64x '_Float64x (_Float64x, int)' extern
| |-ParmVarDecl 0x5608c12eeb10 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:101:32> col:32 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12eeb90 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x5608c12eecd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eedd0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:303:1 logf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eed40 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12eee78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12eef70 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:305:1 __logf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12eeee0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:104:34> col:34 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12ef018 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1277fe0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:308:1 log10f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1277f50 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1278088 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1278180 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:310:1 __log10f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12780f0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:107:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1278228 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12783d8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:311:1 modff64x '_Float64x (_Float64x, _Float64x *)' extern
| |-ParmVarDecl 0x5608c1278290 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1278308 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr '_Float64x *'
| `-NoThrowAttr 0x5608c1278488 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1278620 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:384:76> <scratch space>:313:1 __modff64x '_Float64x (_Float64x, _Float64x *)' extern
| |-ParmVarDecl 0x5608c12784f0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:110:31> col:31 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1278568 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:110:47> col:47 __iptr '_Float64x *'
| |-NoThrowAttr 0x5608c12786d0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1278728 <line:384:57, /usr/include/bits/mathcalls.h:110:69> 2
|-FunctionDecl 0x5608c1278808 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:5:1 exp10f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1278778 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12788b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12789a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:7:1 __exp10f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1278918 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:114:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1278a50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1278b48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:10:1 expm1f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1278ab8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1278bf0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1278ce8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:12:1 __expm1f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1278c58 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:119:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1278d90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1278e88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:15:1 log1pf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1278df8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1278f30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1279028 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:17:1 __log1pf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1278f98 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:122:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12790d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12791c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:18:1 logbf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1279138 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1279270 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1279368 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:20:1 __logbf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12792d8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:125:31> col:31 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1279410 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1279508 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:23:1 exp2f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1279478 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12795b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12796a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:25:1 __exp2f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1279618 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:130:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1279750 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1279848 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:28:1 log2f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12797b8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12798f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12799e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:30:1 __log2f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1279958 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:133:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1279a90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1279c08 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:33:1 powf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1279af8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1279b70 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1279cb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1279e30 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:35:1 __powf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1279d20 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:140:34> col:34 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1279d98 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:140:49> col:49 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1279ee0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c126ff90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:36:1 sqrtf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c126ff00 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1270038 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1270130 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:38:1 __sqrtf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12700a0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:143:31> col:31 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12701d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1270350 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:41:1 hypotf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1270240 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12702b8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1270400 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1270578 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:43:1 __hypotf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1270468 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:147:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12704e0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:147:51> col:51 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1270628 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1270720 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:46:1 cbrtf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1270690 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c12707c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12708c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:48:1 __cbrtf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1270830 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:152:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1270968 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1270a60 </usr/include/math.h:297:3, line:294:66> <scratch space>:49:1 ceilf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12709d0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1270b08 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1270b60 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c1270c28 </usr/include/math.h:297:3, line:295:79> <scratch space>:51:1 __ceilf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1270b98 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:159:32> col:32 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1270cd0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1270d28 </usr/include/bits/mathcalls.h:159:39>
|-FunctionDecl 0x5608c1270df0 </usr/include/math.h:297:3, line:294:66> <scratch space>:52:1 fabsf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1270d60 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1270e98 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1270ef0 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c1270fb8 </usr/include/math.h:297:3, line:295:79> <scratch space>:54:1 __fabsf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1270f28 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:162:32> col:32 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1271060 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c12710b8 </usr/include/bits/mathcalls.h:162:39>
|-FunctionDecl 0x5608c1271180 </usr/include/math.h:297:3, line:294:66> <scratch space>:55:1 floorf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12710f0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1271228 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1271280 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c1271348 </usr/include/math.h:297:3, line:295:79> <scratch space>:57:1 __floorf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c12712b8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:165:33> col:33 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c12713f0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1271448 </usr/include/bits/mathcalls.h:165:40>
|-FunctionDecl 0x5608c1271590 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:58:1 fmodf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1271480 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c12714f8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1271640 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12717b8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:60:1 __fmodf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c12716a8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:168:31> col:31 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1271720 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:168:46> col:46 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1271868 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c12719e0 </usr/include/math.h:297:3, line:294:66> <scratch space>:61:1 copysignf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c12718d0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1271948 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1271a90 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1271ae8 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c1271c30 </usr/include/math.h:297:3, line:295:79> <scratch space>:63:1 __copysignf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1271b20 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:198:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1271b98 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:198:51> col:51 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1271ce0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1271d38 </usr/include/bits/mathcalls.h:198:58>
|-FunctionDecl 0x5608c1271e38 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:64:1 nanf64x '_Float64x (const char *)' extern
| |-ParmVarDecl 0x5608c1271d78 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c127af80 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127b080 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:66:1 __nanf64x '_Float64x (const char *)' extern
| |-ParmVarDecl 0x5608c127aff0 </usr/include/bits/mathcalls.h:203:20, col:32> col:32 __tagb 'const char *'
| `-NoThrowAttr 0x5608c127b128 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127b220 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:67:1 j0f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127b190 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:220:28 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127b2c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127b3c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:69:1 __j0f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127b330 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:220:28 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127b468 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127b560 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:70:1 j1f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127b4d0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:221:28 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127b608 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127b700 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:72:1 __j1f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127b670 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:221:28 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127b7a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127b968 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:73:1 jnf64x '_Float64x (int, _Float64x)' extern
| |-ParmVarDecl 0x5608c127b818 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c127b890 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:222:33 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127ba18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127bb98 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:75:1 __jnf64x '_Float64x (int, _Float64x)' extern
| |-ParmVarDecl 0x5608c127ba88 </usr/include/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x5608c127bb00 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:222:33 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127bc48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127bd40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:76:1 y0f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127bcb0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:223:28 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127bde8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127bee0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:78:1 __y0f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127be50 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:223:28 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127bf88 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127c080 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:79:1 y1f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127bff0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:224:28 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127c128 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127c220 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:81:1 __y1f64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127c190 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:224:28 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127c2c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127c448 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:82:1 ynf64x '_Float64x (int, _Float64x)' extern
| |-ParmVarDecl 0x5608c127c338 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c127c3b0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:225:33 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127c4f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127c678 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:84:1 __ynf64x '_Float64x (int, _Float64x)' extern
| |-ParmVarDecl 0x5608c127c568 </usr/include/bits/mathcalls.h:225:19> col:22 'int'
| |-ParmVarDecl 0x5608c127c5e0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:225:33 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127c728 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127c820 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:87:1 erff64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127c790 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:231:33 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127c8c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127c9c0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:89:1 __erff64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127c930 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:231:33 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127ca68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127cb60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:92:1 erfcf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127cad0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:232:34 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127cc08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127cd00 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:94:1 __erfcf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127cc70 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:232:34 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127cda8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127cea0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:95:1 lgammaf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127ce10 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:233:32 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127cf48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127d060 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:97:1 __lgammaf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127cfd0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:233:32 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127d108 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127d200 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:98:1 tgammaf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127d170 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:238:32 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127d2a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127d3a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:100:1 __tgammaf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127d310 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:238:32 '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127d448 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127d5c8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:102:1 lgammaf64x_r '_Float64x (_Float64x, int *)' extern
| |-ParmVarDecl 0x5608c127d4b0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:252:34 '_Float64x':'long double'
| |-ParmVarDecl 0x5608c127d530 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c127d678 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127d7f8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:105:1 __lgammaf64x_r '_Float64x (_Float64x, int *)' extern
| |-ParmVarDecl 0x5608c127d6e0 </usr/include/math.h:510:21> /usr/include/bits/mathcalls.h:252:34 '_Float64x':'long double'
| |-ParmVarDecl 0x5608c127d760 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x5608c127d8a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127d9a0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:106:1 rintf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127d910 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127da48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127db40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:108:1 __rintf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127dab0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:259:31> col:31 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127dbe8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127dd60 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:109:1 nextafterf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c127dc50 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c127dcc8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127de10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127df88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:111:1 __nextafterf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c127de78 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:262:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c127def0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:262:51> col:51 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127e038 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127e130 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:113:1 nextdownf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127e0a0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127e1d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127e2d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:115:1 __nextdownf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127e240 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:269:35> col:35 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127e378 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127e470 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:116:1 nextupf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127e3e0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127e518 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127e610 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:118:1 __nextupf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c127e580 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:271:33> col:33 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127e6b8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127e830 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:119:1 remainderf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c127e720 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c127e798 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127e8e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127ea58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:121:1 __remainderf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c127e948 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:275:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c127e9c0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:275:51> col:51 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c127eb08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127ec88 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:122:1 scalbnf64x '_Float64x (_Float64x, int)' extern
| |-ParmVarDecl 0x5608c127eb70 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c127ebf0 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c127ed38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c127eeb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:124:1 __scalbnf64x '_Float64x (_Float64x, int)' extern
| |-ParmVarDecl 0x5608c127eda0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:279:33> col:33 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c127ee20 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x5608c127ef68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13076d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:125:1 ilogbf64x 'int (_Float64x)' extern
| |-ParmVarDecl 0x5608c1307600 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1307778 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1307878 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:127:1 __ilogbf64x 'int (_Float64x)' extern
| |-ParmVarDecl 0x5608c13077e0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:283:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1307920 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1307a50 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:129:1 llogbf64x 'long (_Float64x)' extern
| |-ParmVarDecl 0x5608c1307988 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1307af8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1307bf8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:131:1 __llogbf64x 'long (_Float64x)' extern
| |-ParmVarDecl 0x5608c1307b60 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:288:42> col:42 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1307ca0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1307e58 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:132:1 scalblnf64x '_Float64x (_Float64x, long)' extern
| |-ParmVarDecl 0x5608c1307d08 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1307d88 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c1307f08 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1308088 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:134:1 __scalblnf64x '_Float64x (_Float64x, long)' extern
| |-ParmVarDecl 0x5608c1307f70 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:293:34> col:34 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1307ff0 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x5608c1308138 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1308230 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:135:1 nearbyintf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c13081a0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c13082d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13083d0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:137:1 __nearbyintf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1308340 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:297:36> col:36 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1308478 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1308570 </usr/include/math.h:297:3, line:294:66> <scratch space>:138:1 roundf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c13084e0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1308618 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1308670 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c1308738 </usr/include/math.h:297:3, line:295:79> <scratch space>:140:1 __roundf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c13086a8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:301:33> col:33 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c13087e0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1308838 </usr/include/bits/mathcalls.h:301:40>
|-FunctionDecl 0x5608c1308900 </usr/include/math.h:297:3, line:294:66> <scratch space>:141:1 truncf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1308870 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c13089a8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1308a00 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c1308ac8 </usr/include/math.h:297:3, line:295:79> <scratch space>:143:1 __truncf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c1308a38 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:305:33> col:33 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1308b70 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1308bc8 </usr/include/bits/mathcalls.h:305:40>
|-FunctionDecl 0x5608c1308dd8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:144:1 remquof64x '_Float64x (_Float64x, _Float64x, int *)' extern
| |-ParmVarDecl 0x5608c1308c00 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1308c78 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1308cf8 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c1308e90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1309090 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:146:1 __remquof64x '_Float64x (_Float64x, _Float64x, int *)' extern
| |-ParmVarDecl 0x5608c1308ef8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:310:33> col:33 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1308f70 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:310:48> col:48 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1308ff0 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x5608c1309148 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1309248 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:147:1 lrintf64x 'long (_Float64x)' extern
| |-ParmVarDecl 0x5608c13091b0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c13092f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13093f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:149:1 __lrintf64x 'long (_Float64x)' extern
| |-ParmVarDecl 0x5608c1309358 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:317:41> col:41 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1309498 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1309600 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:150:1 llrintf64x 'long long (_Float64x)' extern
| |-ParmVarDecl 0x5608c1309500 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c13096a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13097a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:152:1 __llrintf64x 'long long (_Float64x)' extern
| |-ParmVarDecl 0x5608c1309710 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:319:47> col:47 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1309850 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1309950 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:153:1 lroundf64x 'long (_Float64x)' extern
| |-ParmVarDecl 0x5608c13098b8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c13099f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1309af8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:155:1 __lroundf64x 'long (_Float64x)' extern
| |-ParmVarDecl 0x5608c1309a60 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:323:42> col:42 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1309ba0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1309ca0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:156:1 llroundf64x 'long long (_Float64x)' extern
| |-ParmVarDecl 0x5608c1309c08 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1309d48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1309e48 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:158:1 __llroundf64x 'long long (_Float64x)' extern
| |-ParmVarDecl 0x5608c1309db0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:325:48> col:48 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1309ef0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130a068 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:159:1 fdimf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1309f58 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1309fd0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c130a118 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130a290 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:161:1 __fdimf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130a180 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:329:31> col:31 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130a1f8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:329:46> col:46 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c130a340 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130a4b8 </usr/include/math.h:297:3, line:294:66> <scratch space>:163:1 fmaxf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130a3a8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130a420 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130a568 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130a5c0 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c130a708 </usr/include/math.h:297:3, line:295:79> <scratch space>:165:1 __fmaxf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130a5f8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:333:32> col:32 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130a670 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:333:47> col:47 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130a7b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130a810 </usr/include/bits/mathcalls.h:333:54>
|-FunctionDecl 0x5608c130a958 </usr/include/math.h:297:3, line:294:66> <scratch space>:166:1 fminf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130a848 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130a8c0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130aa08 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130aa60 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c130aba8 </usr/include/math.h:297:3, line:295:79> <scratch space>:168:1 __fminf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130aa98 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:336:32> col:32 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130ab10 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:336:47> col:47 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130ac58 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130acb0 </usr/include/bits/mathcalls.h:336:54>
|-FunctionDecl 0x5608c130aeb8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:169:1 fmaf64x '_Float64x (_Float64x, _Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130ace8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130ad60 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130add8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z '_Float64x':'long double'
| `-NoThrowAttr 0x5608c130af70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130b168 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:171:1 __fmaf64x '_Float64x (_Float64x, _Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130afd8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:340:30> col:30 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130b050 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:340:45> col:45 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130b0c8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:340:60> col:60 __z '_Float64x':'long double'
| `-NoThrowAttr 0x5608c130b220 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130b318 </usr/include/math.h:297:3, line:294:66> <scratch space>:173:1 roundevenf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c130b288 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130b3c0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130b418 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c130b4e0 </usr/include/math.h:297:3, line:295:79> <scratch space>:175:1 __roundevenf64x '_Float64x (_Float64x)' extern
| |-ParmVarDecl 0x5608c130b450 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:345:37> col:37 __x '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130b588 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130b610 </usr/include/bits/mathcalls.h:345:44>
|-FunctionDecl 0x5608c130b828 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:176:1 fromfpf64x '__intmax_t (_Float64x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c130b648 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130b6c8 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c130b748 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c130b8e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130bae8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:178:1 __fromfpf64x '__intmax_t (_Float64x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c130b948 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:349:45> col:45 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130b9c8 <col:50, col:54> col:54 __round 'int'
| |-ParmVarDecl 0x5608c130ba48 <line:350:7, col:20> col:20 __width 'unsigned int'
| `-NoThrowAttr 0x5608c130bba0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130bde8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:179:1 ufromfpf64x '__uintmax_t (_Float64x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c130bc08 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130bc88 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c130bd08 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c130bea0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130c0a8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:181:1 __ufromfpf64x '__uintmax_t (_Float64x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c130bf08 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:354:47> col:47 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130bf88 <col:52, col:56> col:56 __round 'int'
| |-ParmVarDecl 0x5608c130c008 <line:355:9, col:22> col:22 __width 'unsigned int'
| `-NoThrowAttr 0x5608c130c160 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130c368 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:182:1 fromfpxf64x '__intmax_t (_Float64x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c130c1c8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130c248 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c130c2c8 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c130c420 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130c628 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:184:1 __fromfpxf64x '__intmax_t (_Float64x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c130c488 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:360:46> col:46 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130c508 <col:51, col:55> col:55 __round 'int'
| |-ParmVarDecl 0x5608c130c588 <line:361:8, col:21> col:21 __width 'unsigned int'
| `-NoThrowAttr 0x5608c130c6e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130c8e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:185:1 ufromfpxf64x '__uintmax_t (_Float64x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c130c748 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130c7c8 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c130c848 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c130c9a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130cba8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:187:1 __ufromfpxf64x '__uintmax_t (_Float64x, int, unsigned int)' extern
| |-ParmVarDecl 0x5608c130ca08 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:366:48> col:48 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130ca88 <col:53, col:57> col:57 __round 'int'
| |-ParmVarDecl 0x5608c130cb08 <line:367:10, col:23> col:23 __width 'unsigned int'
| `-NoThrowAttr 0x5608c130cc60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130ce40 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:188:1 canonicalizef64x 'int (_Float64x *, const _Float64x *)' extern
| |-ParmVarDecl 0x5608c130ccc8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:370:47> col:47 __cx '_Float64x *'
| |-ParmVarDecl 0x5608c130cd68 <col:53, col:70> col:70 __x 'const _Float64x *'
| `-NoThrowAttr 0x5608c130cef0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c130d068 </usr/include/math.h:297:3, line:294:66> <scratch space>:191:1 fmaxmagf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130cf58 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130cfd0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130d118 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130d170 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c130d2b8 </usr/include/math.h:297:3, line:295:79> <scratch space>:193:1 __fmaxmagf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130d1a8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:377:35> col:35 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130d220 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:377:50> col:50 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130d368 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130d3c0 </usr/include/bits/mathcalls.h:377:57>
|-FunctionDecl 0x5608c130d508 </usr/include/math.h:297:3, line:294:66> <scratch space>:194:1 fminmagf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130d3f8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130d470 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130d5b8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130d620 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c130d768 </usr/include/math.h:297:3, line:295:79> <scratch space>:196:1 __fminmagf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130d658 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:380:35> col:35 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130d6d0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:380:50> col:50 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130d818 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130d870 </usr/include/bits/mathcalls.h:380:57>
|-FunctionDecl 0x5608c130d9b8 </usr/include/math.h:297:3, line:294:66> <scratch space>:198:1 fmaximumf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130d8a8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130d920 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130da68 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130dac0 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c130dc08 </usr/include/math.h:297:3, line:295:79> <scratch space>:200:1 __fmaximumf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130daf8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:385:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130db70 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:385:51> col:51 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130dcb8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130dd10 </usr/include/bits/mathcalls.h:385:58>
|-FunctionDecl 0x5608c130de58 </usr/include/math.h:297:3, line:294:66> <scratch space>:201:1 fminimumf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130dd48 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130ddc0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130df08 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130df60 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c130e0a8 </usr/include/math.h:297:3, line:295:79> <scratch space>:203:1 __fminimumf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130df98 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:388:36> col:36 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130e010 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:388:51> col:51 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130e158 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130e1b0 </usr/include/bits/mathcalls.h:388:58>
|-FunctionDecl 0x5608c130e2f8 </usr/include/math.h:297:3, line:294:66> <scratch space>:204:1 fmaximum_numf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130e1e8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130e260 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130e3a8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130e400 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c130e548 </usr/include/math.h:297:3, line:295:79> <scratch space>:206:1 __fmaximum_numf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130e438 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:391:40> col:40 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130e4b0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:391:55> col:55 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130e5f8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130e650 </usr/include/bits/mathcalls.h:391:62>
|-FunctionDecl 0x5608c130e798 </usr/include/math.h:297:3, line:294:66> <scratch space>:207:1 fminimum_numf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130e688 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130e700 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130e848 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130e8a0 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c130e9e8 </usr/include/math.h:297:3, line:295:79> <scratch space>:209:1 __fminimum_numf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130e8d8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:394:40> col:40 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130e950 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:394:55> col:55 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130ea98 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130eaf0 </usr/include/bits/mathcalls.h:394:62>
|-FunctionDecl 0x5608c130ec38 </usr/include/math.h:297:3, line:294:66> <scratch space>:210:1 fmaximum_magf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130eb28 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130eba0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130ece8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130ed40 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c130ee88 </usr/include/math.h:297:3, line:295:79> <scratch space>:212:1 __fmaximum_magf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130ed78 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:397:40> col:40 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130edf0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:397:55> col:55 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130ef38 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130ef90 </usr/include/bits/mathcalls.h:397:62>
|-FunctionDecl 0x5608c130f0d8 </usr/include/math.h:297:3, line:294:66> <scratch space>:213:1 fminimum_magf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130efc8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130f040 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130f188 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130f1e0 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c130f328 </usr/include/math.h:297:3, line:295:79> <scratch space>:215:1 __fminimum_magf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130f218 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:400:40> col:40 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130f290 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:400:55> col:55 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c130f3d8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c130f430 </usr/include/bits/mathcalls.h:400:62>
|-FunctionDecl 0x5608c1310610 </usr/include/math.h:297:3, line:294:66> <scratch space>:216:1 fmaximum_mag_numf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c130f468 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c130f4e0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c13106c0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1310718 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c1310860 </usr/include/math.h:297:3, line:295:79> <scratch space>:218:1 __fmaximum_mag_numf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1310750 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:403:44> col:44 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c13107c8 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:403:59> col:59 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1310910 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1310968 </usr/include/bits/mathcalls.h:403:66>
|-FunctionDecl 0x5608c1310ab0 </usr/include/math.h:297:3, line:294:66> <scratch space>:219:1 fminimum_mag_numf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c13109a0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1310a18 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1310b60 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1310bb8 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c1310d00 </usr/include/math.h:297:3, line:295:79> <scratch space>:221:1 __fminimum_mag_numf64x '_Float64x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1310bf0 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:406:44> col:44 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1310c68 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:406:59> col:59 __y '_Float64x':'long double'
| |-NoThrowAttr 0x5608c1310db0 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1310e08 </usr/include/bits/mathcalls.h:406:66>
|-FunctionDecl 0x5608c1310f90 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:223:1 totalorderf64x 'int (const _Float64x *, const _Float64x *)' extern
| |-ParmVarDecl 0x5608c1310e40 </usr/include/bits/mathcalls.h:411:34, col:51> col:51 __x 'const _Float64x *'
| |-ParmVarDecl 0x5608c1310eb8 <line:412:6, col:23> col:23 __y 'const _Float64x *'
| |-NoThrowAttr 0x5608c1311040 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c1311098 <line:308:45>
|-FunctionDecl 0x5608c13111e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:308:54> <scratch space>:224:1 totalordermagf64x 'int (const _Float64x *, const _Float64x *)' extern
| |-ParmVarDecl 0x5608c13110d0 </usr/include/bits/mathcalls.h:416:37, col:54> col:54 __x 'const _Float64x *'
| |-ParmVarDecl 0x5608c1311148 <line:417:9, col:26> col:26 __y 'const _Float64x *'
| |-NoThrowAttr 0x5608c1311298 </usr/include/sys/cdefs.h:79:35>
| `-PureAttr 0x5608c13112f0 <line:308:45>
|-FunctionDecl 0x5608c13113e8 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:225:1 getpayloadf64x '_Float64x (const _Float64x *)' extern
| |-ParmVarDecl 0x5608c1311328 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const _Float64x *'
| `-NoThrowAttr 0x5608c1311490 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1311588 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:227:1 __getpayloadf64x '_Float64x (const _Float64x *)' extern
| |-ParmVarDecl 0x5608c13114f8 </usr/include/bits/mathcalls.h:421:27, col:44> col:44 __x 'const _Float64x *'
| `-NoThrowAttr 0x5608c1311630 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13117f0 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:228:1 setpayloadf64x 'int (_Float64x *, _Float64x)' extern
| |-ParmVarDecl 0x5608c1311698 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:424:45> col:45 __x '_Float64x *'
| |-ParmVarDecl 0x5608c1311710 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:424:60> col:60 __payload '_Float64x':'long double'
| `-NoThrowAttr 0x5608c13118a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1311a20 </usr/include/math.h:297:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:229:1 setpayloadsigf64x 'int (_Float64x *, _Float64x)' extern
| |-ParmVarDecl 0x5608c1311908 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:427:48> col:48 __x '_Float64x *'
| |-ParmVarDecl 0x5608c1311980 </usr/include/math.h:510:21, /usr/include/bits/mathcalls.h:427:63> col:63 __payload '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1311ad0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1311ca0 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:231:1 fadd 'float (double, double)' extern
| |-ParmVarDecl 0x5608c1311b40 </usr/include/math.h:564:17, line:551:42> col:42 __x 'double'
| |-ParmVarDecl 0x5608c1311bc0 <line:564:17, line:551:54> col:54 __y 'double'
| `-NoThrowAttr 0x5608c1311d50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1311ee0 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:233:1 fdiv 'float (double, double)' extern
| |-ParmVarDecl 0x5608c1311dc0 </usr/include/math.h:564:17, line:551:42> col:42 __x 'double'
| |-ParmVarDecl 0x5608c1311e40 <line:564:17, line:551:54> col:54 __y 'double'
| `-NoThrowAttr 0x5608c1311f90 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13121f0 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:235:1 ffma 'float (double, double, double)' extern
| |-ParmVarDecl 0x5608c1312000 </usr/include/math.h:564:17, line:552:42> col:42 __x 'double'
| |-ParmVarDecl 0x5608c1312080 <line:564:17, line:552:54> col:54 __y 'double'
| |-ParmVarDecl 0x5608c1312100 <line:564:17, line:552:66> col:66 __z 'double'
| `-NoThrowAttr 0x5608c13122a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1312438 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:237:1 fmul 'float (double, double)' extern
| |-ParmVarDecl 0x5608c1312318 </usr/include/math.h:564:17, line:551:42> col:42 __x 'double'
| |-ParmVarDecl 0x5608c1312398 <line:564:17, line:551:54> col:54 __y 'double'
| `-NoThrowAttr 0x5608c13124e8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1312650 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:239:1 fsqrt 'float (double)' extern
| |-ParmVarDecl 0x5608c1312558 </usr/include/math.h:564:17, line:550:42> col:42 __x 'double'
| `-NoThrowAttr 0x5608c13126f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1312888 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:241:1 fsub 'float (double, double)' extern
| |-ParmVarDecl 0x5608c1312768 </usr/include/math.h:564:17, line:551:42> col:42 __x 'double'
| |-ParmVarDecl 0x5608c13127e8 <line:564:17, line:551:54> col:54 __y 'double'
| `-NoThrowAttr 0x5608c1312938 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1312b00 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:244:1 faddl 'float (long double, long double)' extern
| |-ParmVarDecl 0x5608c13129a8 </usr/include/math.h:572:17, line:551:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1312a28 <line:572:17, line:551:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c1312bb0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1312d40 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:247:1 fdivl 'float (long double, long double)' extern
| |-ParmVarDecl 0x5608c1312c20 </usr/include/math.h:572:17, line:551:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1312ca0 <line:572:17, line:551:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c1312df0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1313050 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:250:1 ffmal 'float (long double, long double, long double)' extern
| |-ParmVarDecl 0x5608c1312e60 </usr/include/math.h:572:17, line:552:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1312ee0 <line:572:17, line:552:54> col:54 __y 'long double'
| |-ParmVarDecl 0x5608c1312f60 <line:572:17, line:552:66> col:66 __z 'long double'
| `-NoThrowAttr 0x5608c1313108 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1313298 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:253:1 fmull 'float (long double, long double)' extern
| |-ParmVarDecl 0x5608c1313178 </usr/include/math.h:572:17, line:551:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c13131f8 <line:572:17, line:551:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c1313348 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1313480 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:256:1 fsqrtl 'float (long double)' extern
| |-ParmVarDecl 0x5608c13133b8 </usr/include/math.h:572:17, line:550:42> col:42 __x 'long double'
| `-NoThrowAttr 0x5608c1313528 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13136b8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:259:1 fsubl 'float (long double, long double)' extern
| |-ParmVarDecl 0x5608c1313598 </usr/include/math.h:572:17, line:551:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1313618 <line:572:17, line:551:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c1313768 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1313930 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:262:1 daddl 'double (long double, long double)' extern
| |-ParmVarDecl 0x5608c13137d8 </usr/include/math.h:601:17, line:551:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1313858 <line:601:17, line:551:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c13139e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1313b70 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:265:1 ddivl 'double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1313a50 </usr/include/math.h:601:17, line:551:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1313ad0 <line:601:17, line:551:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c1313c20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1313e80 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:268:1 dfmal 'double (long double, long double, long double)' extern
| |-ParmVarDecl 0x5608c1313c90 </usr/include/math.h:601:17, line:552:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1313d10 <line:601:17, line:552:54> col:54 __y 'long double'
| |-ParmVarDecl 0x5608c1313d90 <line:601:17, line:552:66> col:66 __z 'long double'
| `-NoThrowAttr 0x5608c1313f38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13140c8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:271:1 dmull 'double (long double, long double)' extern
| |-ParmVarDecl 0x5608c1313fa8 </usr/include/math.h:601:17, line:551:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1314028 <line:601:17, line:551:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c1314178 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13142b0 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:274:1 dsqrtl 'double (long double)' extern
| |-ParmVarDecl 0x5608c13141e8 </usr/include/math.h:601:17, line:550:42> col:42 __x 'long double'
| `-NoThrowAttr 0x5608c1314358 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13144e8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:277:1 dsubl 'double (long double, long double)' extern
| |-ParmVarDecl 0x5608c13143c8 </usr/include/math.h:601:17, line:551:42> col:42 __x 'long double'
| |-ParmVarDecl 0x5608c1314448 <line:601:17, line:551:54> col:54 __y 'long double'
| `-NoThrowAttr 0x5608c1314598 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1315788 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:281:1 f32addf32x '_Float32 (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c1315640 </usr/include/math.h:695:18, line:551:42> col:42 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c13156b8 <line:695:18, line:551:54> col:54 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c1315838 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13159b0 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:284:1 f32divf32x '_Float32 (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c13158a0 </usr/include/math.h:695:18, line:551:42> col:42 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c1315918 <line:695:18, line:551:54> col:54 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c1315a60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1315c98 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:287:1 f32fmaf32x '_Float32 (_Float32x, _Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c1315ac8 </usr/include/math.h:695:18, line:552:42> col:42 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c1315b40 <line:695:18, line:552:54> col:54 __y '_Float32x':'double'
| |-ParmVarDecl 0x5608c1315bb8 <line:695:18, line:552:66> col:66 __z '_Float32x':'double'
| `-NoThrowAttr 0x5608c1315d50 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1315ec8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:290:1 f32mulf32x '_Float32 (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c1315db8 </usr/include/math.h:695:18, line:551:42> col:42 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c1315e30 <line:695:18, line:551:54> col:54 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c1315f78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13160a8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:293:1 f32sqrtf32x '_Float32 (_Float32x)' extern
| |-ParmVarDecl 0x5608c1315fe0 </usr/include/math.h:695:18, line:550:42> col:42 __x '_Float32x':'double'
| `-NoThrowAttr 0x5608c1316150 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13162c8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:296:1 f32subf32x '_Float32 (_Float32x, _Float32x)' extern
| |-ParmVarDecl 0x5608c13161b8 </usr/include/math.h:695:18, line:551:42> col:42 __x '_Float32x':'double'
| |-ParmVarDecl 0x5608c1316230 <line:695:18, line:551:54> col:54 __y '_Float32x':'double'
| `-NoThrowAttr 0x5608c1316378 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1316528 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:299:1 f32addf64 '_Float32 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c13163e0 </usr/include/math.h:705:18, line:551:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c1316458 <line:705:18, line:551:54> col:54 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c13165d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1316750 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:4:1 f32divf64 '_Float32 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c1316640 </usr/include/math.h:705:18, line:551:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c13166b8 <line:705:18, line:551:54> col:54 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c1316800 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1316a38 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:7:1 f32fmaf64 '_Float32 (_Float64, _Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c1316868 </usr/include/math.h:705:18, line:552:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c13168e0 <line:705:18, line:552:54> col:54 __y '_Float64':'double'
| |-ParmVarDecl 0x5608c1316958 <line:705:18, line:552:66> col:66 __z '_Float64':'double'
| `-NoThrowAttr 0x5608c1316af0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1316c68 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:10:1 f32mulf64 '_Float32 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c1316b58 </usr/include/math.h:705:18, line:551:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c1316bd0 <line:705:18, line:551:54> col:54 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c1316d18 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1316e48 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:13:1 f32sqrtf64 '_Float32 (_Float64)' extern
| |-ParmVarDecl 0x5608c1316d80 </usr/include/math.h:705:18, line:550:42> col:42 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c1316ef0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1317068 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:16:1 f32subf64 '_Float32 (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c1316f58 </usr/include/math.h:705:18, line:551:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c1316fd0 <line:705:18, line:551:54> col:54 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c1317118 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13172c8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:19:1 f32addf64x '_Float32 (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1317180 </usr/include/math.h:715:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c13171f8 <line:715:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1317378 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13174f0 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:22:1 f32divf64x '_Float32 (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c13173e0 </usr/include/math.h:715:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1317458 <line:715:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c13175a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1319858 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:25:1 f32fmaf64x '_Float32 (_Float64x, _Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1319680 </usr/include/math.h:715:18, line:552:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c13196f8 <line:715:18, line:552:54> col:54 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1319770 <line:715:18, line:552:66> col:66 __z '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1319910 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1319a88 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:28:1 f32mulf64x '_Float32 (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1319978 </usr/include/math.h:715:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c13199f0 <line:715:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1319b38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1319c68 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:31:1 f32sqrtf64x '_Float32 (_Float64x)' extern
| |-ParmVarDecl 0x5608c1319ba0 </usr/include/math.h:715:18, line:550:42> col:42 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1319d10 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1319e88 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:34:1 f32subf64x '_Float32 (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c1319d78 </usr/include/math.h:715:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c1319df0 <line:715:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c1319f38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131a0e8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:37:1 f32xaddf64 '_Float32x (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c1319fa0 </usr/include/math.h:745:18, line:551:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c131a018 <line:745:18, line:551:54> col:54 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c131a198 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131a310 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:40:1 f32xdivf64 '_Float32x (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c131a200 </usr/include/math.h:745:18, line:551:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c131a278 <line:745:18, line:551:54> col:54 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c131a3c0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131a5f8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:43:1 f32xfmaf64 '_Float32x (_Float64, _Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c131a428 </usr/include/math.h:745:18, line:552:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c131a4a0 <line:745:18, line:552:54> col:54 __y '_Float64':'double'
| |-ParmVarDecl 0x5608c131a518 <line:745:18, line:552:66> col:66 __z '_Float64':'double'
| `-NoThrowAttr 0x5608c131a6b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131a828 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:46:1 f32xmulf64 '_Float32x (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c131a718 </usr/include/math.h:745:18, line:551:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c131a790 <line:745:18, line:551:54> col:54 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c131a8d8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131aa08 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:49:1 f32xsqrtf64 '_Float32x (_Float64)' extern
| |-ParmVarDecl 0x5608c131a940 </usr/include/math.h:745:18, line:550:42> col:42 __x '_Float64':'double'
| `-NoThrowAttr 0x5608c131aab0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131ac28 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:52:1 f32xsubf64 '_Float32x (_Float64, _Float64)' extern
| |-ParmVarDecl 0x5608c131ab18 </usr/include/math.h:745:18, line:551:42> col:42 __x '_Float64':'double'
| |-ParmVarDecl 0x5608c131ab90 <line:745:18, line:551:54> col:54 __y '_Float64':'double'
| `-NoThrowAttr 0x5608c131acd8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131ae88 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:55:1 f32xaddf64x '_Float32x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131ad40 </usr/include/math.h:755:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131adb8 <line:755:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131af38 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131b0b0 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:58:1 f32xdivf64x '_Float32x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131afa0 </usr/include/math.h:755:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131b018 <line:755:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131b160 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131b398 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:61:1 f32xfmaf64x '_Float32x (_Float64x, _Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131b1c8 </usr/include/math.h:755:18, line:552:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131b240 <line:755:18, line:552:54> col:54 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131b2b8 <line:755:18, line:552:66> col:66 __z '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131b450 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131b5c8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:64:1 f32xmulf64x '_Float32x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131b4b8 </usr/include/math.h:755:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131b530 <line:755:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131c6a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131c7c8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:67:1 f32xsqrtf64x '_Float32x (_Float64x)' extern
| |-ParmVarDecl 0x5608c131c708 </usr/include/math.h:755:18, line:550:42> col:42 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131c870 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131c9e8 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:70:1 f32xsubf64x '_Float32x (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131c8d8 </usr/include/math.h:755:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131c950 <line:755:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131ca98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131cc48 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:73:1 f64addf64x '_Float64 (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131cb00 </usr/include/math.h:785:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131cb78 <line:785:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131ccf8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131ce70 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:76:1 f64divf64x '_Float64 (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131cd60 </usr/include/math.h:785:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131cdd8 <line:785:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131cf20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131d158 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:79:1 f64fmaf64x '_Float64 (_Float64x, _Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131cf88 </usr/include/math.h:785:18, line:552:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131d000 <line:785:18, line:552:54> col:54 __y '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131d078 <line:785:18, line:552:66> col:66 __z '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131d210 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131d388 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:82:1 f64mulf64x '_Float64 (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131d278 </usr/include/math.h:785:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131d2f0 <line:785:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131d438 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131d568 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:85:1 f64sqrtf64x '_Float64 (_Float64x)' extern
| |-ParmVarDecl 0x5608c131d4a0 </usr/include/math.h:785:18, line:550:42> col:42 __x '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131d610 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c131d788 </usr/include/math.h:554:3, /usr/include/sys/cdefs.h:79:54> <scratch space>:88:1 f64subf64x '_Float64 (_Float64x, _Float64x)' extern
| |-ParmVarDecl 0x5608c131d678 </usr/include/math.h:785:18, line:551:42> col:42 __x '_Float64x':'long double'
| |-ParmVarDecl 0x5608c131d6f0 <line:785:18, line:551:54> col:54 __y '_Float64x':'long double'
| `-NoThrowAttr 0x5608c131d838 </usr/include/sys/cdefs.h:79:35>
|-VarDecl 0x5608c131d8a8 </usr/include/math.h:854:1, col:12> col:12 signgam 'int' extern
|-EnumDecl 0x5608c131d910 <line:934:1, line:951:3> line:934:1
| |-EnumConstantDecl 0x5608c131da10 <line:936:5, line:937:17> line:936:5 FP_NAN 'int'
| | `-ConstantExpr 0x5608c131d9f0 <line:937:17> 'int'
| |   |-value: Int 0
| |   `-IntegerLiteral 0x5608c131d9d0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5608c131daa0 <line:939:5, line:940:22> line:939:5 FP_INFINITE 'int'
| | `-ConstantExpr 0x5608c131da80 <line:940:22> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5608c131da60 <col:22> 'int' 1
| |-EnumConstantDecl 0x5608c131db30 <line:942:5, line:943:18> line:942:5 FP_ZERO 'int'
| | `-ConstantExpr 0x5608c131db10 <line:943:18> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5608c131daf0 <col:18> 'int' 2
| |-EnumConstantDecl 0x5608c131dbc0 <line:945:5, line:946:23> line:945:5 FP_SUBNORMAL 'int'
| | `-ConstantExpr 0x5608c131dba0 <line:946:23> 'int'
| |   |-value: Int 3
| |   `-IntegerLiteral 0x5608c131db80 <col:23> 'int' 3
| `-EnumConstantDecl 0x5608c131dc50 <line:948:5, line:949:20> line:948:5 FP_NORMAL 'int'
|   `-ConstantExpr 0x5608c131dc30 <line:949:20> 'int'
|     |-value: Int 4
|     `-IntegerLiteral 0x5608c131dc10 <col:20> 'int' 4
|-FunctionDecl 0x5608c131dd50 </usr/include/bits/iscanonical.h:23:1, line:24:40> line:23:12 __iscanonicall 'int (long double)' extern
| |-ParmVarDecl 0x5608c131dcb8 <col:28, col:40> col:40 __x 'long double'
| |-NoThrowAttr 0x5608c131ddf8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c131de50 </usr/include/bits/iscanonical.h:24:30>
|-TypedefDecl 0x5608c131dec0 <./modules/oniguruma/src/oniguruma.h:103:1, col:24> col:24 referenced OnigCodePoint 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c131df30 <line:104:1, col:24> col:24 referenced OnigUChar 'unsigned char'
| `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c131dfa0 <line:105:1, col:24> col:24 referenced OnigCtype 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c131e010 <line:106:1, col:24> col:24 referenced OnigLen 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c131e080 <line:110:1, col:22> col:22 referenced OnigCaseFoldType 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-VarDecl 0x5608c131e110 <line:90:23, line:112:30> col:30 OnigDefaultCaseFoldFlag 'OnigCaseFoldType':'unsigned int' extern
|-RecordDecl 0x5608c131e178 <line:132:9, line:136:1> line:132:9 struct definition
| |-FieldDecl 0x5608c131e238 <line:133:3, col:7> col:7 byte_len 'int'
| |-FieldDecl 0x5608c131e2a0 <line:134:3, col:7> col:7 code_len 'int'
| `-FieldDecl 0x5608c131e3e8 <line:135:3, col:57> col:17 code 'OnigCodePoint [3]'
|-TypedefDecl 0x5608c131e498 <line:132:1, line:136:3> col:3 referenced OnigCaseFoldCodeItem 'struct OnigCaseFoldCodeItem':'OnigCaseFoldCodeItem'
| `-ElaboratedType 0x5608c131e440 'struct OnigCaseFoldCodeItem' sugar
|   `-RecordType 0x5608c131e200 'OnigCaseFoldCodeItem'
|     `-Record 0x5608c131e178 ''
|-RecordDecl 0x5608c131e508 <line:138:9, line:145:1> line:138:9 struct definition
| |-FieldDecl 0x5608c131e5c0 <line:139:3, col:17> col:17 esc 'OnigCodePoint':'unsigned int'
| |-FieldDecl 0x5608c131e620 <line:140:3, col:17> col:17 anychar 'OnigCodePoint':'unsigned int'
| |-FieldDecl 0x5608c1165bd0 <line:141:3, col:17> col:17 anytime 'OnigCodePoint':'unsigned int'
| |-FieldDecl 0x5608c1165c30 <line:142:3, col:17> col:17 zero_or_one_time 'OnigCodePoint':'unsigned int'
| |-FieldDecl 0x5608c1165c90 <line:143:3, col:17> col:17 one_or_more_time 'OnigCodePoint':'unsigned int'
| `-FieldDecl 0x5608c1165cf0 <line:144:3, col:17> col:17 anychar_anytime 'OnigCodePoint':'unsigned int'
|-TypedefDecl 0x5608c1165d98 <line:138:1, line:145:3> col:3 referenced OnigMetaCharTableType 'struct OnigMetaCharTableType':'OnigMetaCharTableType'
| `-ElaboratedType 0x5608c1165d40 'struct OnigMetaCharTableType' sugar
|   `-RecordType 0x5608c131e590 'OnigMetaCharTableType'
|     `-Record 0x5608c131e508 ''
|-TypedefDecl 0x5608c11661a0 <line:147:1, col:101> col:15 referenced OnigApplyAllCaseFoldFunc 'int (*)(OnigCodePoint, OnigCodePoint *, int, void *)'
| `-PointerType 0x5608c1166120 'int (*)(OnigCodePoint, OnigCodePoint *, int, void *)'
|   `-ParenType 0x5608c11660c0 'int (OnigCodePoint, OnigCodePoint *, int, void *)' sugar
|     `-FunctionProtoType 0x5608c1166070 'int (OnigCodePoint, OnigCodePoint *, int, void *)' cdecl
|       |-BuiltinType 0x5608c10a4880 'int'
|       |-TypedefType 0x5608c131e2f0 'OnigCodePoint' sugar
|       | |-Typedef 0x5608c131dec0 'OnigCodePoint'
|       | `-BuiltinType 0x5608c10a4920 'unsigned int'
|       |-PointerType 0x5608c1165e80 'OnigCodePoint *'
|       | `-TypedefType 0x5608c131e2f0 'OnigCodePoint' sugar
|       |   |-Typedef 0x5608c131dec0 'OnigCodePoint'
|       |   `-BuiltinType 0x5608c10a4920 'unsigned int'
|       |-BuiltinType 0x5608c10a4880 'int'
|       `-PointerType 0x5608c10a4fa0 'void *'
|         `-BuiltinType 0x5608c10a47e0 'void'
|-RecordDecl 0x5608c11661f8 <line:149:9, line:169:1> line:149:16 struct OnigEncodingTypeST definition
| |-FieldDecl 0x5608c11664b8 <line:150:3, col:43> col:12 mbc_enc_len 'int (*)(const OnigUChar *)'
| |-FieldDecl 0x5608c1166520 <line:151:3, col:17> col:17 name 'const char *'
| |-FieldDecl 0x5608c1166588 <line:152:3, col:17> col:17 max_enc_len 'int'
| |-FieldDecl 0x5608c11665f0 <line:153:3, col:17> col:17 min_enc_len 'int'
| |-FieldDecl 0x5608c1166880 <line:154:3, col:68> col:12 is_mbc_newline 'int (*)(const OnigUChar *, const OnigUChar *)'
| |-FieldDecl 0x5608c1166b08 <line:155:3, col:72> col:19 mbc_to_code 'OnigCodePoint (*)(const OnigUChar *, const OnigUChar *)'
| |-FieldDecl 0x5608c1166cf8 <line:156:3, col:46> col:12 code_to_mbclen 'int (*)(OnigCodePoint)'
| |-FieldDecl 0x5608c1166fe0 <line:157:3, col:59> col:12 code_to_mbc 'int (*)(OnigCodePoint, OnigUChar *)'
| |-FieldDecl 0x5608c1167400 <line:158:3, col:107> col:12 mbc_case_fold 'int (*)(OnigCaseFoldType, const OnigUChar **, const OnigUChar *, OnigUChar *)'
| |-FieldDecl 0x5608c1167748 <line:159:3, col:93> col:12 apply_all_case_fold 'int (*)(OnigCaseFoldType, OnigApplyAllCaseFoldFunc, void *)'
| |-FieldDecl 0x5608c1338e38 <line:160:3, col:131> col:12 get_case_fold_codes_by_str 'int (*)(OnigCaseFoldType, const OnigUChar *, const OnigUChar *, OnigCaseFoldCodeItem *)'
| |-FieldDecl 0x5608c13391f8 <line:161:3, col:96> col:12 property_name_to_ctype 'int (*)(struct OnigEncodingTypeST *, OnigUChar *, OnigUChar *)'
| |-FieldDecl 0x5608c13394b0 <line:162:3, col:62> col:12 is_code_ctype 'int (*)(OnigCodePoint, OnigCtype)'
| |-FieldDecl 0x5608c1339928 <line:163:3, col:103> col:12 get_ctype_code_range 'int (*)(OnigCtype, OnigCodePoint *, const OnigCodePoint **)'
| |-FieldDecl 0x5608c1339bb8 <line:164:3, col:81> col:16 left_adjust_char_head 'OnigUChar *(*)(const OnigUChar *, const OnigUChar *)'
| |-FieldDecl 0x5608c1339d40 <line:165:3, col:78> col:12 is_allowed_reverse_match 'int (*)(const OnigUChar *, const OnigUChar *)'
| |-FieldDecl 0x5608c1339ed0 <line:166:3, col:22> col:12 init 'int (*)(void)'
| |-FieldDecl 0x5608c1339fd0 <line:167:3, col:32> col:12 is_initialized 'int (*)(void)'
| `-FieldDecl 0x5608c133a158 <line:168:3, col:73> col:12 is_valid_mbc_string 'int (*)(const OnigUChar *, const OnigUChar *)'
|-TypedefDecl 0x5608c133a208 <line:149:1, line:169:3> col:3 referenced OnigEncodingType 'struct OnigEncodingTypeST':'struct OnigEncodingTypeST'
| `-ElaboratedType 0x5608c133a1b0 'struct OnigEncodingTypeST' sugar
|   `-RecordType 0x5608c1166280 'struct OnigEncodingTypeST'
|     `-Record 0x5608c11661f8 'OnigEncodingTypeST'
|-TypedefDecl 0x5608c133a2d8 <line:171:1, col:27> col:27 referenced OnigEncoding 'OnigEncodingType *'
| `-PointerType 0x5608c133a2a0 'OnigEncodingType *'
|   `-TypedefType 0x5608c133a280 'OnigEncodingType' sugar
|     |-Typedef 0x5608c133a208 'OnigEncodingType'
|     `-ElaboratedType 0x5608c133a1b0 'struct OnigEncodingTypeST' sugar
|       `-RecordType 0x5608c1166280 'struct OnigEncodingTypeST'
|         `-Record 0x5608c11661f8 'OnigEncodingTypeST'
|-VarDecl 0x5608c133a340 <line:90:23, line:173:30> col:30 OnigEncodingASCII 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a3b8 <line:90:23, line:174:30> col:30 OnigEncodingISO_8859_1 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a430 <line:90:23, line:175:30> col:30 OnigEncodingISO_8859_2 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a4a8 <line:90:23, line:176:30> col:30 OnigEncodingISO_8859_3 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a520 <line:90:23, line:177:30> col:30 OnigEncodingISO_8859_4 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a598 <line:90:23, line:178:30> col:30 OnigEncodingISO_8859_5 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a610 <line:90:23, line:179:30> col:30 OnigEncodingISO_8859_6 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a688 <line:90:23, line:180:30> col:30 OnigEncodingISO_8859_7 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a700 <line:90:23, line:181:30> col:30 OnigEncodingISO_8859_8 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a778 <line:90:23, line:182:30> col:30 OnigEncodingISO_8859_9 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a7f0 <line:90:23, line:183:30> col:30 OnigEncodingISO_8859_10 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a868 <line:90:23, line:184:30> col:30 OnigEncodingISO_8859_11 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a8e0 <line:90:23, line:185:30> col:30 OnigEncodingISO_8859_13 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a958 <line:90:23, line:186:30> col:30 OnigEncodingISO_8859_14 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133a9d0 <line:90:23, line:187:30> col:30 OnigEncodingISO_8859_15 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133aa48 <line:90:23, line:188:30> col:30 OnigEncodingISO_8859_16 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133aac0 <line:90:23, line:189:30> col:30 used OnigEncodingUTF8 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133ab38 <line:90:23, line:190:30> col:30 OnigEncodingUTF16_BE 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133abb0 <line:90:23, line:191:30> col:30 OnigEncodingUTF16_LE 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133ac28 <line:90:23, line:192:30> col:30 OnigEncodingUTF32_BE 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133aca0 <line:90:23, line:193:30> col:30 OnigEncodingUTF32_LE 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133ad18 <line:90:23, line:194:30> col:30 OnigEncodingEUC_JP 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133adf0 <line:90:23, line:195:30> col:30 OnigEncodingEUC_TW 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133ae68 <line:90:23, line:196:30> col:30 OnigEncodingEUC_KR 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133aee0 <line:90:23, line:197:30> col:30 OnigEncodingEUC_CN 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133af58 <line:90:23, line:198:30> col:30 OnigEncodingSJIS 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133afd0 <line:90:23, line:199:30> col:30 OnigEncodingKOI8 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133b048 <line:90:23, line:200:30> col:30 OnigEncodingKOI8_R 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133b0c0 <line:90:23, line:201:30> col:30 OnigEncodingCP1251 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133b138 <line:90:23, line:202:30> col:30 OnigEncodingBIG5 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-VarDecl 0x5608c133b1b0 <line:90:23, line:203:30> col:30 OnigEncodingGB18030 'OnigEncodingType':'struct OnigEncodingTypeST' extern
|-FunctionDecl 0x5608c133b508 <line:90:23, line:338:101> col:12 onigenc_step_back 'OnigUChar *(OnigEncoding, const OnigUChar *, const OnigUChar *, int)' extern
| |-ParmVarDecl 0x5608c133b250 <col:34, col:47> col:47 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c133b2c8 <col:52, col:69> col:69 start 'const OnigUChar *'
| |-ParmVarDecl 0x5608c133b340 <col:76, col:93> col:93 s 'const OnigUChar *'
| `-ParmVarDecl 0x5608c133b3c0 <col:96, col:100> col:100 n 'int'
|-FunctionDecl 0x5608c133b668 <line:90:23, line:343:26> col:5 onigenc_init 'int (void)' extern
|-FunctionDecl 0x5608c133b810 <line:90:23, line:345:50> col:5 onig_initialize_encoding 'int (OnigEncoding)' extern
| `-ParmVarDecl 0x5608c133b718 <col:34, col:47> col:47 enc 'OnigEncoding':'OnigEncodingType *'
|-FunctionDecl 0x5608c133b960 <line:90:23, line:347:54> col:5 onigenc_set_default_encoding 'int (OnigEncoding)' extern
| `-ParmVarDecl 0x5608c133b8c8 <col:38, col:51> col:51 enc 'OnigEncoding':'OnigEncodingType *'
|-FunctionDecl 0x5608c133baf8 <line:90:23, line:349:51> col:14 onigenc_get_default_encoding 'OnigEncoding (void)' extern
|-FunctionDecl 0x5608c133bc98 <line:90:23, line:351:68> col:7 onigenc_set_default_caseconv_table 'void (const OnigUChar *)' extern
| `-ParmVarDecl 0x5608c133bba8 <col:46, col:63> col:63 table 'const OnigUChar *'
|-FunctionDecl 0x5608c133c008 <line:90:23, line:353:145> col:12 onigenc_get_right_adjust_char_head_with_prev 'OnigUChar *(OnigEncoding, const OnigUChar *, const OnigUChar *, const OnigUChar **)' extern
| |-ParmVarDecl 0x5608c133bd50 <col:61, col:74> col:74 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c133bdc8 <col:79, col:96> col:96 start 'const OnigUChar *'
| |-ParmVarDecl 0x5608c133be40 <col:103, col:120> col:120 s 'const OnigUChar *'
| `-ParmVarDecl 0x5608c133bec0 <col:123, col:141> col:141 prev 'const OnigUChar **'
|-FunctionDecl 0x5608c133c2e8 <line:90:23, line:355:103> col:12 onigenc_get_prev_char_head 'OnigUChar *(OnigEncoding, const OnigUChar *, const OnigUChar *)' extern
| |-ParmVarDecl 0x5608c133c0d8 <col:43, col:56> col:56 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c133c150 <col:61, col:78> col:78 start 'const OnigUChar *'
| `-ParmVarDecl 0x5608c133c1c8 <col:85, col:102> col:102 s 'const OnigUChar *'
|-FunctionDecl 0x5608c133c540 <line:90:23, line:357:110> col:12 onigenc_get_left_adjust_char_head 'OnigUChar *(OnigEncoding, const OnigUChar *, const OnigUChar *)' extern
| |-ParmVarDecl 0x5608c133c3b0 <col:50, col:63> col:63 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c133c428 <col:68, col:85> col:85 start 'const OnigUChar *'
| `-ParmVarDecl 0x5608c133c4a0 <col:92, col:109> col:109 s 'const OnigUChar *'
|-FunctionDecl 0x5608c133c798 <line:90:23, line:359:111> col:12 onigenc_get_right_adjust_char_head 'OnigUChar *(OnigEncoding, const OnigUChar *, const OnigUChar *)' extern
| |-ParmVarDecl 0x5608c133c608 <col:51, col:64> col:64 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c133c680 <col:69, col:86> col:86 start 'const OnigUChar *'
| `-ParmVarDecl 0x5608c133c6f8 <col:93, col:110> col:110 s 'const OnigUChar *'
|-FunctionDecl 0x5608c133ca80 <line:90:23, line:361:82> col:5 onigenc_strlen 'int (OnigEncoding, const OnigUChar *, const OnigUChar *)' extern
| |-ParmVarDecl 0x5608c133c860 <col:24, col:37> col:37 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c133c8d8 <col:42, col:59> col:59 p 'const OnigUChar *'
| `-ParmVarDecl 0x5608c133c950 <col:62, col:79> col:79 end 'const OnigUChar *'
|-FunctionDecl 0x5608c133cce0 <line:90:23, line:363:65> col:5 onigenc_strlen_null 'int (OnigEncoding, const OnigUChar *)' extern
| |-ParmVarDecl 0x5608c133cb48 <col:29, col:42> col:42 enc 'OnigEncoding':'OnigEncodingType *'
| `-ParmVarDecl 0x5608c133cbc0 <col:47, col:64> col:64 p 'const OnigUChar *'
|-FunctionDecl 0x5608c13474d8 <line:90:23, line:365:70> col:5 onigenc_str_bytelen_null 'int (OnigEncoding, const OnigUChar *)' extern
| |-ParmVarDecl 0x5608c13473c0 <col:34, col:47> col:47 enc 'OnigEncoding':'OnigEncodingType *'
| `-ParmVarDecl 0x5608c1347438 <col:52, col:69> col:69 p 'const OnigUChar *'
|-FunctionDecl 0x5608c1347730 <line:90:23, line:367:95> col:5 onigenc_is_valid_mbc_string 'int (OnigEncoding, const OnigUChar *, const OnigUChar *)' extern
| |-ParmVarDecl 0x5608c1347598 <col:37, col:50> col:50 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c1347610 <col:55, col:72> col:72 s 'const OnigUChar *'
| `-ParmVarDecl 0x5608c1347688 <col:75, col:92> col:92 end 'const OnigUChar *'
|-TypedefDecl 0x5608c1347800 <line:382:1, col:29> col:29 referenced OnigOptionType 'unsigned int'
| `-BuiltinType 0x5608c10a4920 'unsigned int'
|-RecordDecl 0x5608c1347858 <line:409:9, line:415:1> line:409:9 struct definition
| |-FieldDecl 0x5608c1347918 <line:410:3, col:18> col:18 op 'unsigned int'
| |-FieldDecl 0x5608c1347980 <line:411:3, col:18> col:18 op2 'unsigned int'
| |-FieldDecl 0x5608c13479e8 <line:412:3, col:18> col:18 behavior 'unsigned int'
| |-FieldDecl 0x5608c1347a70 <line:413:3, col:18> col:18 options 'OnigOptionType':'unsigned int'
| `-FieldDecl 0x5608c1347af0 <line:414:3, col:25> col:25 meta_char_table 'OnigMetaCharTableType':'OnigMetaCharTableType'
|-TypedefDecl 0x5608c1347b98 <line:409:1, line:415:3> col:3 referenced OnigSyntaxType 'struct OnigSyntaxType':'OnigSyntaxType'
| `-ElaboratedType 0x5608c1347b40 'struct OnigSyntaxType' sugar
|   `-RecordType 0x5608c13478e0 'OnigSyntaxType'
|     `-Record 0x5608c1347858 ''
|-VarDecl 0x5608c1347c40 <line:90:23, line:417:28> col:28 OnigSyntaxASIS 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1347cb8 <line:90:23, line:418:28> col:28 OnigSyntaxPosixBasic 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1347d30 <line:90:23, line:419:28> col:28 OnigSyntaxPosixExtended 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1347da8 <line:90:23, line:420:28> col:28 OnigSyntaxEmacs 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1347e20 <line:90:23, line:421:28> col:28 OnigSyntaxGrep 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1347e98 <line:90:23, line:422:28> col:28 OnigSyntaxGnuRegex 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1347f10 <line:90:23, line:423:28> col:28 OnigSyntaxJava 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1347f88 <line:90:23, line:424:28> col:28 OnigSyntaxPerl 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1348000 <line:90:23, line:425:28> col:28 used OnigSyntaxPerl_NG 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1348078 <line:90:23, line:426:28> col:28 OnigSyntaxRuby 'OnigSyntaxType':'OnigSyntaxType' extern
|-VarDecl 0x5608c1348148 <line:90:23, line:441:31> col:31 OnigDefaultSyntax 'OnigSyntaxType *' extern
|-RecordDecl 0x5608c13481b0 <line:615:9, line:622:1> line:615:16 struct OnigCaptureTreeNodeStruct definition
| |-FieldDecl 0x5608c1348268 <line:616:3, col:7> col:7 group 'int'
| |-FieldDecl 0x5608c13482d0 <line:617:3, col:7> col:7 beg 'int'
| |-FieldDecl 0x5608c1348338 <line:618:3, col:7> col:7 end 'int'
| |-FieldDecl 0x5608c13483a0 <line:619:3, col:7> col:7 allocated 'int'
| |-FieldDecl 0x5608c1348408 <line:620:3, col:7> col:7 num_childs 'int'
| `-FieldDecl 0x5608c1348570 <line:621:3, col:38> col:38 childs 'struct OnigCaptureTreeNodeStruct **'
|-TypedefDecl 0x5608c1348618 <line:615:1, line:622:3> col:3 referenced OnigCaptureTreeNode 'struct OnigCaptureTreeNodeStruct':'struct OnigCaptureTreeNodeStruct'
| `-ElaboratedType 0x5608c13485c0 'struct OnigCaptureTreeNodeStruct' sugar
|   `-RecordType 0x5608c1348230 'struct OnigCaptureTreeNodeStruct'
|     `-Record 0x5608c13481b0 'OnigCaptureTreeNodeStruct'
|-RecordDecl 0x5608c1348688 <line:625:1, line:632:1> line:625:8 struct re_registers definition
| |-FieldDecl 0x5608c1348748 <line:626:3, col:8> col:8 allocated 'int'
| |-FieldDecl 0x5608c13487b0 <line:627:3, col:8> col:8 referenced num_regs 'int'
| |-FieldDecl 0x5608c1348818 <line:628:3, col:8> col:8 referenced beg 'int *'
| |-FieldDecl 0x5608c1348880 <line:629:3, col:8> col:8 referenced end 'int *'
| `-FieldDecl 0x5608c1348928 <line:631:3, col:24> col:24 history_root 'OnigCaptureTreeNode *'
|-TypedefDecl 0x5608c13489d0 <line:643:1, col:31> col:31 referenced OnigRegion 'struct re_registers':'struct re_registers'
| `-ElaboratedType 0x5608c1348980 'struct re_registers' sugar
|   `-RecordType 0x5608c1348710 'struct re_registers'
|     `-Record 0x5608c1348688 're_registers'
|-RecordDecl 0x5608c1348a28 <line:645:9, line:649:1> line:645:9 struct definition
| |-FieldDecl 0x5608c1348ae0 <line:646:3, col:16> col:16 enc 'OnigEncoding':'OnigEncodingType *'
| |-FieldDecl 0x5608c1348b40 <line:647:3, col:14> col:14 par 'OnigUChar *'
| `-FieldDecl 0x5608c1348ba0 <line:648:3, col:14> col:14 par_end 'OnigUChar *'
|-TypedefDecl 0x5608c1348c48 <line:645:1, line:649:3> col:3 referenced OnigErrorInfo 'struct OnigErrorInfo':'OnigErrorInfo'
| `-ElaboratedType 0x5608c1348bf0 'struct OnigErrorInfo' sugar
|   `-RecordType 0x5608c1348ab0 'OnigErrorInfo'
|     `-Record 0x5608c1348a28 ''
|-RecordDecl 0x5608c1348cb8 <line:651:9, line:654:1> line:651:9 struct definition
| |-FieldDecl 0x5608c1348d78 <line:652:3, col:7> col:7 lower 'int'
| `-FieldDecl 0x5608c1348de0 <line:653:3, col:7> col:7 upper 'int'
|-TypedefDecl 0x5608c1348e88 <line:651:1, line:654:3> col:3 referenced OnigRepeatRange 'struct OnigRepeatRange':'OnigRepeatRange'
| `-ElaboratedType 0x5608c1348e30 'struct OnigRepeatRange' sugar
|   `-RecordType 0x5608c1348d40 'OnigRepeatRange'
|     `-Record 0x5608c1348cb8 ''
|-TypedefDecl 0x5608c1349070 <line:656:1, col:47> col:16 referenced OnigWarnFunc 'void (*)(const char *)'
| `-PointerType 0x5608c1349010 'void (*)(const char *)'
|   `-ParenType 0x5608c1348fb0 'void (const char *)' sugar
|     `-FunctionProtoType 0x5608c1348f80 'void (const char *)' cdecl
|       |-BuiltinType 0x5608c10a47e0 'void'
|       `-PointerType 0x5608c10a5240 'const char *'
|         `-QualType 0x5608c10a4821 'const char' const
|           `-BuiltinType 0x5608c10a4820 'char'
|-FunctionDecl 0x5608c1349170 <line:657:1, col:45> col:13 onig_null_warn 'void (const char *)' extern
| `-ParmVarDecl 0x5608c13490e0 <col:32, col:44> col:44 s 'const char *'
|-RecordDecl 0x5608c1349218 <line:662:9, line:703:1> line:662:16 struct re_pattern_buffer definition
| |-FieldDecl 0x5608c13492d8 <line:664:3, col:18> col:18 p 'unsigned char *'
| |-FieldDecl 0x5608c1349340 <line:665:3, col:16> col:16 used 'unsigned int'
| |-FieldDecl 0x5608c135be50 <line:666:3, col:16> col:16 alloc 'unsigned int'
| |-FieldDecl 0x5608c135beb8 <line:668:3, col:7> col:7 num_mem 'int'
| |-FieldDecl 0x5608c135bf20 <line:669:3, col:7> col:7 num_repeat 'int'
| |-FieldDecl 0x5608c135bf88 <line:670:3, col:7> col:7 num_null_check 'int'
| |-FieldDecl 0x5608c135bff0 <line:671:3, col:7> col:7 num_comb_exp_check 'int'
| |-FieldDecl 0x5608c135c058 <line:672:3, col:7> col:7 num_call 'int'
| |-FieldDecl 0x5608c135c0c0 <line:673:3, col:16> col:16 capture_history 'unsigned int'
| |-FieldDecl 0x5608c135c128 <line:674:3, col:16> col:16 bt_mem_start 'unsigned int'
| |-FieldDecl 0x5608c135c190 <line:675:3, col:16> col:16 bt_mem_end 'unsigned int'
| |-FieldDecl 0x5608c135c1f8 <line:676:3, col:7> col:7 stack_pop_level 'int'
| |-FieldDecl 0x5608c135c260 <line:677:3, col:7> col:7 repeat_range_alloc 'int'
| |-FieldDecl 0x5608c135c338 <line:678:3, col:20> col:20 repeat_range 'OnigRepeatRange *'
| |-FieldDecl 0x5608c135c398 <line:680:3, col:21> col:21 enc 'OnigEncoding':'OnigEncodingType *'
| |-FieldDecl 0x5608c135c3f8 <line:681:3, col:21> col:21 options 'OnigOptionType':'unsigned int'
| |-FieldDecl 0x5608c135c458 <line:682:3, col:21> col:21 syntax 'OnigSyntaxType *'
| |-FieldDecl 0x5608c135c4b8 <line:683:3, col:21> col:21 case_fold_flag 'OnigCaseFoldType':'unsigned int'
| |-FieldDecl 0x5608c135c520 <line:684:3, col:21> col:21 name_table 'void *'
| |-FieldDecl 0x5608c135c588 <line:687:3, col:18> col:18 optimize 'int'
| |-FieldDecl 0x5608c135c5f0 <line:688:3, col:18> col:18 threshold_len 'int'
| |-FieldDecl 0x5608c135c658 <line:689:3, col:18> col:18 anchor 'int'
| |-FieldDecl 0x5608c135c6e0 <line:690:3, col:13> col:13 anchor_dmin 'OnigLen':'unsigned int'
| |-FieldDecl 0x5608c135c740 <line:691:3, col:13> col:13 anchor_dmax 'OnigLen':'unsigned int'
| |-FieldDecl 0x5608c135c7a8 <line:692:3, col:18> col:18 sub_anchor 'int'
| |-FieldDecl 0x5608c135c810 <line:693:3, col:18> col:18 exact 'unsigned char *'
| |-FieldDecl 0x5608c135c878 <line:694:3, col:18> col:18 exact_end 'unsigned char *'
| |-FieldDecl 0x5608c135c970 <line:695:3, col:42> col:18 map 'unsigned char [256]'
| |-FieldDecl 0x5608c135c9d8 <line:696:3, col:18> col:18 int_map 'int *'
| |-FieldDecl 0x5608c135ca40 <line:697:3, col:18> col:18 int_map_backward 'int *'
| |-FieldDecl 0x5608c135caa0 <line:698:3, col:13> col:13 dmin 'OnigLen':'unsigned int'
| |-FieldDecl 0x5608c135cb00 <line:699:3, col:13> col:13 dmax 'OnigLen':'unsigned int'
| `-FieldDecl 0x5608c135cc00 <line:702:3, col:29> col:29 chain 'struct re_pattern_buffer *'
|-TypedefDecl 0x5608c135cca8 <line:662:1, line:703:3> col:3 referenced OnigRegexType 'struct re_pattern_buffer':'struct re_pattern_buffer'
| `-ElaboratedType 0x5608c135cc50 'struct re_pattern_buffer' sugar
|   `-RecordType 0x5608c13492a0 'struct re_pattern_buffer'
|     `-Record 0x5608c1349218 're_pattern_buffer'
|-TypedefDecl 0x5608c135cd78 <line:705:1, col:25> col:25 referenced OnigRegex 'OnigRegexType *'
| `-PointerType 0x5608c135cd40 'OnigRegexType *'
|   `-TypedefType 0x5608c135cd20 'OnigRegexType' sugar
|     |-Typedef 0x5608c135cca8 'OnigRegexType'
|     `-ElaboratedType 0x5608c135cc50 'struct re_pattern_buffer' sugar
|       `-RecordType 0x5608c13492a0 'struct re_pattern_buffer'
|         `-Record 0x5608c1349218 're_pattern_buffer'
|-TypedefDecl 0x5608c135cde0 <line:708:3, col:26> col:26 referenced regex_t 'OnigRegexType':'struct re_pattern_buffer'
| `-TypedefType 0x5608c135cd20 'OnigRegexType' sugar
|   |-Typedef 0x5608c135cca8 'OnigRegexType'
|   `-ElaboratedType 0x5608c135cc50 'struct re_pattern_buffer' sugar
|     `-RecordType 0x5608c13492a0 'struct re_pattern_buffer'
|       `-Record 0x5608c1349218 're_pattern_buffer'
|-RecordDecl 0x5608c135ce38 <line:712:9, line:719:1> line:712:9 struct definition
| |-FieldDecl 0x5608c135cef8 <line:713:3, col:19> col:19 num_of_elements 'int'
| |-FieldDecl 0x5608c135cf58 <line:714:3, col:19> col:19 pattern_enc 'OnigEncoding':'OnigEncodingType *'
| |-FieldDecl 0x5608c135cfb8 <line:715:3, col:19> col:19 target_enc 'OnigEncoding':'OnigEncodingType *'
| |-FieldDecl 0x5608c135d018 <line:716:3, col:19> col:19 syntax 'OnigSyntaxType *'
| |-FieldDecl 0x5608c135d078 <line:717:3, col:19> col:19 option 'OnigOptionType':'unsigned int'
| `-FieldDecl 0x5608c135d0d8 <line:718:3, col:22> col:22 case_fold_flag 'OnigCaseFoldType':'unsigned int'
|-TypedefDecl 0x5608c135d188 <line:712:1, line:719:3> col:3 referenced OnigCompileInfo 'struct OnigCompileInfo':'OnigCompileInfo'
| `-ElaboratedType 0x5608c135d130 'struct OnigCompileInfo' sugar
|   `-RecordType 0x5608c135cec0 'OnigCompileInfo'
|     `-Record 0x5608c135ce38 ''
|-FunctionDecl 0x5608c135d4b0 <line:90:23, line:724:56> col:5 onig_initialize 'int (OnigEncoding *, int)' extern
| |-ParmVarDecl 0x5608c135d310 <col:25, col:48> col:38 encodings 'OnigEncoding *':'OnigEncoding *'
| `-ParmVarDecl 0x5608c135d390 <col:51, col:55> col:55 n 'int'
|-FunctionDecl 0x5608c135d600 <line:90:23, line:727:23> col:5 onig_init 'int (void)' extern
|-FunctionDecl 0x5608c135d6f0 <line:90:23, line:75:21> line:729:5 used onig_error_code_to_str 'int ()' extern
|-FunctionDecl 0x5608c135d8b8 <line:90:23, line:731:43> col:6 onig_set_warn_func 'void (OnigWarnFunc)' extern
| `-ParmVarDecl 0x5608c135d7c0 <col:29, col:42> col:42 f 'OnigWarnFunc':'void (*)(const char *)'
|-FunctionDecl 0x5608c135da00 <line:90:23, line:733:48> col:6 onig_set_verb_warn_func 'void (OnigWarnFunc)' extern
| `-ParmVarDecl 0x5608c135d970 <col:34, col:47> col:47 f 'OnigWarnFunc':'void (*)(const char *)'
|-FunctionDecl 0x5608c135e430 <line:90:23, line:735:171> col:5 used onig_new 'int (OnigRegex *, const OnigUChar *, const OnigUChar *, OnigOptionType, OnigEncoding, OnigSyntaxType *, OnigErrorInfo *)' extern
| |-ParmVarDecl 0x5608c135db38 <col:18, col:27> col:28 'OnigRegex *'
| |-ParmVarDecl 0x5608c135dbb0 <col:30, col:47> col:47 pattern 'const OnigUChar *'
| |-ParmVarDecl 0x5608c135dc28 <col:56, col:73> col:73 pattern_end 'const OnigUChar *'
| |-ParmVarDecl 0x5608c135dca0 <col:86, col:101> col:101 option 'OnigOptionType':'unsigned int'
| |-ParmVarDecl 0x5608c135dd18 <col:109, col:122> col:122 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c135dd90 <col:127, col:143> col:143 syntax 'OnigSyntaxType *'
| `-ParmVarDecl 0x5608c135e2a8 <col:151, col:166> col:166 einfo 'OnigErrorInfo *'
|-FunctionDecl 0x5608c135e8a0 <line:90:23, line:737:134> col:6 onig_reg_init 'int (regex_t *, OnigOptionType, OnigCaseFoldType, OnigEncoding, OnigSyntaxType *)' extern
| |-ParmVarDecl 0x5608c135e568 <col:24, col:33> col:33 reg 'regex_t *'
| |-ParmVarDecl 0x5608c135e5e0 <col:38, col:53> col:53 option 'OnigOptionType':'unsigned int'
| |-ParmVarDecl 0x5608c135e658 <col:61, col:78> col:78 case_fold_flag 'OnigCaseFoldType':'unsigned int'
| |-ParmVarDecl 0x5608c135e6d0 <col:94, col:107> col:107 enc 'OnigEncoding':'OnigEncodingType *'
| `-ParmVarDecl 0x5608c135e748 <col:112, col:128> col:128 syntax 'OnigSyntaxType *'
|-FunctionDecl 0x5608c135edd0 <line:738:1, col:184> col:5 onig_new_without_alloc 'int (OnigRegex, const OnigUChar *, const OnigUChar *, OnigOptionType, OnigEncoding, OnigSyntaxType *, OnigErrorInfo *)'
| |-ParmVarDecl 0x5608c135e978 <col:32> col:41 'OnigRegex':'OnigRegexType *'
| |-ParmVarDecl 0x5608c135e9f0 <col:43, col:60> col:60 pattern 'const OnigUChar *'
| |-ParmVarDecl 0x5608c135ea68 <col:69, col:86> col:86 pattern_end 'const OnigUChar *'
| |-ParmVarDecl 0x5608c135eae0 <col:99, col:114> col:114 option 'OnigOptionType':'unsigned int'
| |-ParmVarDecl 0x5608c135eb58 <col:122, col:135> col:135 enc 'OnigEncoding':'OnigEncodingType *'
| |-ParmVarDecl 0x5608c135ebd0 <col:140, col:156> col:156 syntax 'OnigSyntaxType *'
| `-ParmVarDecl 0x5608c135ec48 <col:164, col:179> col:179 einfo 'OnigErrorInfo *'
|-FunctionDecl 0x5608c135f270 <line:90:23, line:740:138> col:5 onig_new_deluxe 'int (OnigRegex *, const OnigUChar *, const OnigUChar *, OnigCompileInfo *, OnigErrorInfo *)' extern
| |-ParmVarDecl 0x5608c135eeb8 <col:25, col:36> col:36 reg 'OnigRegex *'
| |-ParmVarDecl 0x5608c135ef30 <col:41, col:58> col:58 pattern 'const OnigUChar *'
| |-ParmVarDecl 0x5608c135efa8 <col:67, col:84> col:84 pattern_end 'const OnigUChar *'
| |-ParmVarDecl 0x5608c135f098 <col:97, col:114> col:114 ci 'OnigCompileInfo *'
| `-ParmVarDecl 0x5608c135f110 <col:118, col:133> col:133 einfo 'OnigErrorInfo *'
|-FunctionDecl 0x5608c135f438 <line:90:23, line:742:29> col:6 used onig_free 'void (OnigRegex)' extern
| `-ParmVarDecl 0x5608c135f348 <col:20> col:29 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c135f580 <line:90:23, line:744:34> col:6 onig_free_body 'void (OnigRegex)' extern
| `-ParmVarDecl 0x5608c135f4f0 <col:25> col:34 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c135fe80 <line:90:23, line:746:186> col:5 onig_scan 'int (regex_t *, const OnigUChar *, const OnigUChar *, OnigRegion *, OnigOptionType, int (*)(int, int, OnigRegion *, void *), void *)' extern
| |-ParmVarDecl 0x5608c135f638 <col:15, col:24> col:24 reg 'regex_t *'
| |-ParmVarDecl 0x5608c135f6b0 <col:29, col:46> col:46 str 'const OnigUChar *'
| |-ParmVarDecl 0x5608c135f728 <col:51, col:68> col:68 end 'const OnigUChar *'
| |-ParmVarDecl 0x5608c135f818 <col:73, col:85> col:85 region 'OnigRegion *'
| |-ParmVarDecl 0x5608c135f890 <col:93, col:108> col:108 option 'OnigOptionType':'unsigned int'
| |-ParmVarDecl 0x5608c135fc70 <col:116, col:165> col:122 scan_callback 'int (*)(int, int, OnigRegion *, void *)'
| `-ParmVarDecl 0x5608c135fcf0 <col:168, col:174> col:174 callback_arg 'void *'
|-FunctionDecl 0x5608c1360410 <line:90:23, line:748:165> col:5 used onig_search 'int (OnigRegex, const OnigUChar *, const OnigUChar *, const OnigUChar *, const OnigUChar *, OnigRegion *, OnigOptionType)' extern
| |-ParmVarDecl 0x5608c135ff68 <col:21> col:30 'OnigRegex':'OnigRegexType *'
| |-ParmVarDecl 0x5608c135ffe0 <col:32, col:49> col:49 str 'const OnigUChar *'
| |-ParmVarDecl 0x5608c1360058 <col:54, col:71> col:71 end 'const OnigUChar *'
| |-ParmVarDecl 0x5608c13600d0 <col:76, col:93> col:93 start 'const OnigUChar *'
| |-ParmVarDecl 0x5608c1360148 <col:100, col:117> col:117 range 'const OnigUChar *'
| |-ParmVarDecl 0x5608c13601c0 <col:124, col:136> col:136 region 'OnigRegion *'
| `-ParmVarDecl 0x5608c1360280 <col:144, col:159> col:159 option 'OnigOptionType':'unsigned int'
|-FunctionDecl 0x5608c13608d0 <line:90:23, line:750:137> col:5 onig_match 'int (OnigRegex, const OnigUChar *, const OnigUChar *, const OnigUChar *, OnigRegion *, OnigOptionType)' extern
| |-ParmVarDecl 0x5608c13604f8 <col:20> col:29 'OnigRegex':'OnigRegexType *'
| |-ParmVarDecl 0x5608c1360570 <col:31, col:48> col:48 str 'const OnigUChar *'
| |-ParmVarDecl 0x5608c13605e8 <col:53, col:70> col:70 end 'const OnigUChar *'
| |-ParmVarDecl 0x5608c1360660 <col:75, col:92> col:92 at 'const OnigUChar *'
| |-ParmVarDecl 0x5608c13606d8 <col:96, col:108> col:108 region 'OnigRegion *'
| `-ParmVarDecl 0x5608c1360750 <col:116, col:131> col:131 option 'OnigOptionType':'unsigned int'
|-FunctionDecl 0x5608c1360a98 <line:90:23, line:752:37> col:13 used onig_region_new 'OnigRegion *(void)' extern
|-FunctionDecl 0x5608c1360c38 <line:90:23, line:754:45> col:6 onig_region_init 'void (OnigRegion *)' extern
| `-ParmVarDecl 0x5608c1360b48 <col:27, col:39> col:39 region 'OnigRegion *'
|-FunctionDecl 0x5608c1360e88 <line:90:23, line:756:60> col:6 used onig_region_free 'void (OnigRegion *, int)' extern
| |-ParmVarDecl 0x5608c1360cf0 <col:27, col:39> col:39 region 'OnigRegion *'
| `-ParmVarDecl 0x5608c1360d70 <col:47, col:51> col:51 free_self 'int'
|-FunctionDecl 0x5608c13610d8 <line:90:23, line:758:59> col:6 onig_region_copy 'void (OnigRegion *, OnigRegion *)' extern
| |-ParmVarDecl 0x5608c1360f48 <col:27, col:39> col:39 to 'OnigRegion *'
| `-ParmVarDecl 0x5608c1360fc0 <col:43, col:55> col:55 from 'OnigRegion *'
|-FunctionDecl 0x5608c1361228 <line:90:23, line:760:46> col:6 onig_region_clear 'void (OnigRegion *)' extern
| `-ParmVarDecl 0x5608c1361198 <col:28, col:40> col:40 region 'OnigRegion *'
|-FunctionDecl 0x5608c1361480 <line:90:23, line:762:53> col:5 onig_region_resize 'int (OnigRegion *, int)' extern
| |-ParmVarDecl 0x5608c13612e0 <col:28, col:40> col:40 region 'OnigRegion *'
| `-ParmVarDecl 0x5608c1361360 <col:48, col:52> col:52 n 'int'
|-FunctionDecl 0x5608c1361810 <line:90:23, line:764:69> col:5 onig_region_set 'int (OnigRegion *, int, int, int)' extern
| |-ParmVarDecl 0x5608c1361540 <col:25, col:37> col:37 region 'OnigRegion *'
| |-ParmVarDecl 0x5608c13615c0 <col:45, col:49> col:49 at 'int'
| |-ParmVarDecl 0x5608c1361640 <col:53, col:57> col:57 beg 'int'
| `-ParmVarDecl 0x5608c13616c0 <col:62, col:66> col:66 end 'int'
|-FunctionDecl 0x5608c1361bd0 <line:90:23, line:766:111> col:5 onig_name_to_group_numbers 'int (OnigRegex, const OnigUChar *, const OnigUChar *, int **)' extern
| |-ParmVarDecl 0x5608c13618e0 <col:36, col:46> col:46 reg 'OnigRegex':'OnigRegexType *'
| |-ParmVarDecl 0x5608c1361958 <col:51, col:68> col:68 name 'const OnigUChar *'
| |-ParmVarDecl 0x5608c13619d0 <col:74, col:91> col:91 name_end 'const OnigUChar *'
| `-ParmVarDecl 0x5608c1361a88 <col:101, col:107> col:107 nums 'int **'
|-FunctionDecl 0x5608c1361f50 <line:90:23, line:768:120> col:5 onig_name_to_backref_number 'int (OnigRegex, const OnigUChar *, const OnigUChar *, OnigRegion *)' extern
| |-ParmVarDecl 0x5608c1361ca0 <col:37, col:47> col:47 reg 'OnigRegex':'OnigRegexType *'
| |-ParmVarDecl 0x5608c1361d18 <col:52, col:69> col:69 name 'const OnigUChar *'
| |-ParmVarDecl 0x5608c1361d90 <col:75, col:92> col:92 name_end 'const OnigUChar *'
| `-ParmVarDecl 0x5608c1361e08 <col:102, col:114> col:114 region 'OnigRegion *'
|-FunctionDecl 0x5608c1363700 <line:90:23, line:770:125> col:5 used onig_foreach_name 'int (OnigRegex, int (*)(const OnigUChar *, const OnigUChar *, int, int *, OnigRegex, void *), void *)' extern
| |-ParmVarDecl 0x5608c1362020 <col:27, col:37> col:37 reg 'OnigRegex':'OnigRegexType *'
| |-ParmVarDecl 0x5608c1363550 <col:42, col:113> col:48 func 'int (*)(const OnigUChar *, const OnigUChar *, int, int *, OnigRegex, void *)'
| `-ParmVarDecl 0x5608c13635d0 <col:116, col:122> col:122 arg 'void *'
|-FunctionDecl 0x5608c13638c0 <line:90:23, line:772:43> col:5 onig_number_of_names 'int (OnigRegex)' extern
| `-ParmVarDecl 0x5608c13637c8 <col:30, col:40> col:40 reg 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c1363a10 <line:90:23, line:774:46> col:5 onig_number_of_captures 'int (OnigRegex)' extern
| `-ParmVarDecl 0x5608c1363978 <col:33, col:43> col:43 reg 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c1363b60 <line:90:23, line:776:55> col:5 onig_number_of_capture_histories 'int (OnigRegex)' extern
| `-ParmVarDecl 0x5608c1363ac8 <col:42, col:52> col:52 reg 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c1363d08 <line:90:23, line:778:66> col:22 onig_get_capture_tree 'OnigCaptureTreeNode *(OnigRegion *)' extern
| `-ParmVarDecl 0x5608c1363c18 <col:48, col:60> col:60 region 'OnigRegion *'
|-FunctionDecl 0x5608c13644d0 <line:90:23, line:780:121> col:5 onig_capture_tree_traverse 'int (OnigRegion *, int, int (*)(int, int, int, int, int, void *), void *)' extern
| |-ParmVarDecl 0x5608c1363dc0 <col:36, col:48> col:48 region 'OnigRegion *'
| |-ParmVarDecl 0x5608c1363e40 <col:56, col:60> col:60 at 'int'
| |-ParmVarDecl 0x5608c1364300 <col:64, col:109> col:69 callback_func 'int (*)(int, int, int, int, int, void *)'
| `-ParmVarDecl 0x5608c1364380 <col:112, col:118> col:118 arg 'void *'
|-FunctionDecl 0x5608c1364638 <line:90:23, line:782:58> col:5 onig_noname_group_capture_is_active 'int (OnigRegex)' extern
| `-ParmVarDecl 0x5608c13645a0 <col:45, col:55> col:55 reg 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c13647e8 <line:90:23, line:784:49> col:14 onig_get_encoding 'OnigEncoding (OnigRegex)' extern
| `-ParmVarDecl 0x5608c13646f0 <col:36, col:46> col:46 reg 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c1364998 <line:90:23, line:786:50> col:16 onig_get_options 'OnigOptionType (OnigRegex)' extern
| `-ParmVarDecl 0x5608c13648a0 <col:37, col:47> col:47 reg 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c1364b18 <line:90:23, line:788:59> col:18 onig_get_case_fold_flag 'OnigCaseFoldType (OnigRegex)' extern
| `-ParmVarDecl 0x5608c1364a50 <col:46, col:56> col:56 reg 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c1364cc8 <line:90:23, line:790:50> col:17 onig_get_syntax 'OnigSyntaxType *(OnigRegex)' extern
| `-ParmVarDecl 0x5608c1364bd0 <col:37, col:47> col:47 reg 'OnigRegex':'OnigRegexType *'
|-FunctionDecl 0x5608c1364e80 <line:90:23, line:792:55> col:5 onig_set_default_syntax 'int (OnigSyntaxType *)' extern
| `-ParmVarDecl 0x5608c1364d80 <col:33, col:49> col:49 syntax 'OnigSyntaxType *'
|-FunctionDecl 0x5608c13650c8 <line:90:23, line:794:67> col:6 onig_copy_syntax 'void (OnigSyntaxType *, OnigSyntaxType *)' extern
| |-ParmVarDecl 0x5608c1364f38 <col:27, col:43> col:43 to 'OnigSyntaxType *'
| `-ParmVarDecl 0x5608c1364fb0 <col:47, col:63> col:63 from 'OnigSyntaxType *'
|-FunctionDecl 0x5608c13652b0 <line:90:23, line:796:59> col:14 onig_get_syntax_op 'unsigned int (OnigSyntaxType *)' extern
| `-ParmVarDecl 0x5608c1365188 <col:37, col:53> col:53 syntax 'OnigSyntaxType *'
|-FunctionDecl 0x5608c1365400 <line:90:23, line:798:60> col:14 onig_get_syntax_op2 'unsigned int (OnigSyntaxType *)' extern
| `-ParmVarDecl 0x5608c1365368 <col:38, col:54> col:54 syntax 'OnigSyntaxType *'
|-FunctionDecl 0x5608c1365550 <line:90:23, line:800:65> col:14 onig_get_syntax_behavior 'unsigned int (OnigSyntaxType *)' extern
| `-ParmVarDecl 0x5608c13654b8 <col:43, col:59> col:59 syntax 'OnigSyntaxType *'
|-FunctionDecl 0x5608c13656c8 <line:90:23, line:802:66> col:16 onig_get_syntax_options 'OnigOptionType (OnigSyntaxType *)' extern
| `-ParmVarDecl 0x5608c1365608 <col:44, col:60> col:60 syntax 'OnigSyntaxType *'
|-FunctionDecl 0x5608c1365918 <line:90:23, line:804:68> col:6 onig_set_syntax_op 'void (OnigSyntaxType *, unsigned int)' extern
| |-ParmVarDecl 0x5608c1365780 <col:29, col:45> col:45 syntax 'OnigSyntaxType *'
| `-ParmVarDecl 0x5608c1365800 <col:53, col:66> col:66 op 'unsigned int'
|-FunctionDecl 0x5608c1365af0 <line:90:23, line:806:70> col:6 onig_set_syntax_op2 'void (OnigSyntaxType *, unsigned int)' extern
| |-ParmVarDecl 0x5608c13659d8 <col:30, col:46> col:46 syntax 'OnigSyntaxType *'
| `-ParmVarDecl 0x5608c1365a58 <col:54, col:67> col:67 op2 'unsigned int'
|-FunctionDecl 0x5608c1365cc8 <line:90:23, line:808:80> col:6 onig_set_syntax_behavior 'void (OnigSyntaxType *, unsigned int)' extern
| |-ParmVarDecl 0x5608c1365bb0 <col:35, col:51> col:51 syntax 'OnigSyntaxType *'
| `-ParmVarDecl 0x5608c1365c30 <col:59, col:72> col:72 behavior 'unsigned int'
|-FunctionDecl 0x5608c1365ed8 <line:90:23, line:810:80> col:6 onig_set_syntax_options 'void (OnigSyntaxType *, OnigOptionType)' extern
| |-ParmVarDecl 0x5608c1365d88 <col:34, col:50> col:50 syntax 'OnigSyntaxType *'
| `-ParmVarDecl 0x5608c1365e00 <col:58, col:73> col:73 options 'OnigOptionType':'unsigned int'
|-FunctionDecl 0x5608c13661c0 <line:90:23, line:812:89> col:5 onig_set_meta_char 'int (OnigSyntaxType *, unsigned int, OnigCodePoint)' extern
| |-ParmVarDecl 0x5608c1365f98 <col:28, col:44> col:44 syntax 'OnigSyntaxType *'
| |-ParmVarDecl 0x5608c1366018 <col:52, col:65> col:65 what 'unsigned int'
| `-ParmVarDecl 0x5608c1366090 <col:71, col:85> col:85 code 'OnigCodePoint':'unsigned int'
|-FunctionDecl 0x5608c1366418 <line:90:23, line:814:63> col:6 onig_copy_encoding 'void (OnigEncoding, OnigEncoding)' extern
| |-ParmVarDecl 0x5608c1366288 <col:29, col:42> col:42 to 'OnigEncoding':'OnigEncodingType *'
| `-ParmVarDecl 0x5608c1366300 <col:46, col:59> col:59 from 'OnigEncoding':'OnigEncodingType *'
|-FunctionDecl 0x5608c13665b8 <line:90:23, line:816:58> col:18 onig_get_default_case_fold_flag 'OnigCaseFoldType (void)' extern
|-FunctionDecl 0x5608c1366730 <line:90:23, line:818:72> col:5 onig_set_default_case_fold_flag 'int (OnigCaseFoldType)' extern
| `-ParmVarDecl 0x5608c1366668 <col:41, col:58> col:58 case_fold_flag 'OnigCaseFoldType':'unsigned int'
|-FunctionDecl 0x5608c1366878 <line:90:23, line:820:54> col:14 onig_get_match_stack_limit_size 'unsigned int (void)' extern
|-FunctionDecl 0x5608c13669c8 <line:90:23, line:822:58> col:5 onig_set_match_stack_limit_size 'int (unsigned int)' extern
| `-ParmVarDecl 0x5608c1366930 <col:41, col:54> col:54 size 'unsigned int'
|-FunctionDecl 0x5608c1366c20 <line:90:23, line:824:82> col:5 onig_unicode_define_user_property 'int (const char *, OnigCodePoint *)' extern
| |-ParmVarDecl 0x5608c1366a88 <col:43, col:55> col:55 name 'const char *'
| `-ParmVarDecl 0x5608c1366b00 <col:61, col:76> col:76 ranges 'OnigCodePoint *'
|-FunctionDecl 0x5608c1366d70 <line:90:23, line:826:22> col:5 onig_end 'int (void)' extern
|-FunctionDecl 0x5608c1366ee0 <line:90:23, line:828:34> col:13 onig_version 'const char *(void)' extern
|-FunctionDecl 0x5608c1367020 <line:90:23, line:830:36> col:13 onig_copyright 'const char *(void)' extern
|-FunctionDecl 0x5608c1367500 </usr/include/string.h:43:14> col:14 implicit memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c13675f8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x5608c1367660 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c13676c8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c13675a0 <<invalid sloc>> Implicit 779
|-FunctionDecl 0x5608c1367748 prev 0x5608c1367500 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:43:14 memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c13670d8 <col:22, col:39> col:39 __dest 'void *restrict'
| |-ParmVarDecl 0x5608c1367158 <col:47, col:70> col:70 __src 'const void *restrict'
| |-ParmVarDecl 0x5608c13671d0 <line:44:8, col:15> col:15 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1367898 <<invalid sloc>> Inherited Implicit 779
| |-NoThrowAttr 0x5608c1367800 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1367858 <line:384:57, /usr/include/string.h:44:44> 1 2
|-FunctionDecl 0x5608c1367b00 <line:47:14> col:14 implicit memmove 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c1367bf8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x5608c1367c60 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c1367cc8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1367ba0 <<invalid sloc>> Implicit 781
|-FunctionDecl 0x5608c1367d48 prev 0x5608c1367b00 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:47:14 memmove 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c13678d8 <col:23, col:29> col:29 __dest 'void *'
| |-ParmVarDecl 0x5608c1367958 <col:37, col:49> col:49 __src 'const void *'
| |-ParmVarDecl 0x5608c13679d0 <col:56, col:63> col:63 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1367e98 <<invalid sloc>> Inherited Implicit 781
| |-NoThrowAttr 0x5608c1367e00 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1367e58 <line:384:57, /usr/include/string.h:48:30> 1 2
|-FunctionDecl 0x5608c13681e0 <line:54:14> col:14 implicit memccpy 'void *(void *, const void *, int, unsigned long)' extern
| |-ParmVarDecl 0x5608c13682d8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x5608c1368340 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c13683a8 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x5608c1368410 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1368280 <<invalid sloc>> Implicit 843
|-FunctionDecl 0x5608c1368498 prev 0x5608c13681e0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:54:14 memccpy 'void *(void *, const void *, int, unsigned long)' extern
| |-ParmVarDecl 0x5608c1367ed8 <col:23, col:40> col:40 __dest 'void *restrict'
| |-ParmVarDecl 0x5608c1367f58 <col:48, col:71> col:71 __src 'const void *restrict'
| |-ParmVarDecl 0x5608c1367fd8 <line:55:9, col:13> col:13 __c 'int'
| |-ParmVarDecl 0x5608c1368050 <col:18, col:25> col:25 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c13685e8 <<invalid sloc>> Inherited Implicit 843
| |-NoThrowAttr 0x5608c1368558 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c13685b0 <line:384:57, /usr/include/string.h:56:29> 1 2
|-FunctionDecl 0x5608c1368870 <line:61:14> col:14 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x5608c1368968 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x5608c13689d0 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x5608c1368a38 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1368910 <<invalid sloc>> Implicit 797
|-FunctionDecl 0x5608c1368ab8 prev 0x5608c1368870 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:61:14 used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x5608c1368628 <col:22, col:28> col:28 __s 'void *'
| |-ParmVarDecl 0x5608c13686a8 <col:33, col:37> col:37 __c 'int'
| |-ParmVarDecl 0x5608c1368720 <col:42, col:49> col:49 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1368c08 <<invalid sloc>> Inherited Implicit 797
| |-NoThrowAttr 0x5608c1368b70 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1368bc8 <line:384:57, /usr/include/string.h:61:75> 1
|-FunctionDecl 0x5608c1368eb0 <line:64:12> col:12 implicit used memcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c1368fa8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c1369010 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c1369078 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1368f50 <<invalid sloc>> Implicit 780
|-FunctionDecl 0x5608c13690f8 prev 0x5608c1368eb0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:64:12 used memcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c1368c48 <col:20, col:32> col:32 __s1 'const void *'
| |-ParmVarDecl 0x5608c1368cc8 <col:38, col:50> col:50 __s2 'const void *'
| |-ParmVarDecl 0x5608c1368d40 <col:56, col:63> col:63 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1369268 <<invalid sloc>> Inherited Implicit 780
| |-NoThrowAttr 0x5608c13691b0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1369208 <line:308:45>
| `-NonNullAttr 0x5608c1369230 <line:384:57, /usr/include/string.h:65:49> 1 2
|-FunctionDecl 0x5608c13694b0 <line:80:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:80:12 __memcmpeq 'int (const void *, const void *, size_t)' extern
| |-ParmVarDecl 0x5608c13692a8 <col:24, col:36> col:36 __s1 'const void *'
| |-ParmVarDecl 0x5608c1369328 <col:42, col:54> col:54 __s2 'const void *'
| |-ParmVarDecl 0x5608c13693a0 <col:60, col:67> col:67 __n 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c1369568 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c13695c0 <line:308:45>
| `-NonNullAttr 0x5608c13695e8 <line:384:57, /usr/include/string.h:81:49> 1 2
|-FunctionDecl 0x5608c1369880 <line:107:14> col:14 implicit memchr 'void *(const void *, int, unsigned long)' extern
| |-ParmVarDecl 0x5608c1369978 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c13699e0 <<invalid sloc>> <invalid sloc> 'int'
| |-ParmVarDecl 0x5608c1369a48 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1369920 <<invalid sloc>> Implicit 789
|-FunctionDecl 0x5608c1369ac8 prev 0x5608c1369880 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:107:14 memchr 'void *(const void *, int, unsigned long)' extern
| |-ParmVarDecl 0x5608c1369640 <col:22, col:34> col:34 __s 'const void *'
| |-ParmVarDecl 0x5608c13696c0 <col:39, col:43> col:43 __c 'int'
| |-ParmVarDecl 0x5608c1369738 <col:48, col:55> col:55 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1369c38 <<invalid sloc>> Inherited Implicit 789
| |-NoThrowAttr 0x5608c1369b80 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1369bd8 <line:308:45>
| `-NonNullAttr 0x5608c1369c00 <line:384:57, /usr/include/string.h:108:47> 1
|-FunctionDecl 0x5608c1369df0 <line:120:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:120:14 rawmemchr 'void *(const void *, int)' extern
| |-ParmVarDecl 0x5608c1369c78 <col:25, col:37> col:37 __s 'const void *'
| |-ParmVarDecl 0x5608c1369cf8 <col:42, col:46> col:46 __c 'int'
| |-NoThrowAttr 0x5608c1369ea0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1369ef8 <line:308:45>
| `-NonNullAttr 0x5608c1369f20 <line:384:57, /usr/include/string.h:121:46> 1
|-FunctionDecl 0x5608c136a130 <line:133:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:133:14 memrchr 'void *(const void *, int, size_t)' extern
| |-ParmVarDecl 0x5608c1369f70 <col:23, col:35> col:35 __s 'const void *'
| |-ParmVarDecl 0x5608c1369ff0 <col:40, col:44> col:44 __c 'int'
| |-ParmVarDecl 0x5608c136a068 <col:49, col:56> col:56 __n 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c136a1e8 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c136a240 <line:308:45>
| `-NonNullAttr 0x5608c136a268 <line:384:57, /usr/include/string.h:134:47> 1
|-FunctionDecl 0x5608c136a4a0 <line:141:14> col:14 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x5608c136a598 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c136a600 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c136a540 <<invalid sloc>> Implicit 782
|-FunctionDecl 0x5608c136a678 prev 0x5608c136a4a0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:141:14 strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x5608c136a2c0 <col:22, col:39> col:39 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c136a340 <col:47, col:70> col:70 __src 'const char *restrict'
| |-BuiltinAttr 0x5608c136a7b8 <<invalid sloc>> Inherited Implicit 782
| |-NoThrowAttr 0x5608c136a728 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c136a780 <line:384:57, /usr/include/string.h:142:30> 1 2
|-FunctionDecl 0x5608c136aa60 <line:144:14> col:14 implicit strncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136ab58 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c136abc0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136ac28 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c136ab00 <<invalid sloc>> Implicit 783
|-FunctionDecl 0x5608c136aca8 prev 0x5608c136aa60 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:144:14 strncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136a7f8 <col:23, col:40> col:40 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c136a878 <line:145:9, col:32> col:32 __src 'const char *restrict'
| |-ParmVarDecl 0x5608c136a8f0 <col:39, col:46> col:46 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c136adf8 <<invalid sloc>> Inherited Implicit 783
| |-NoThrowAttr 0x5608c136ad60 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c136adb8 <line:384:57, /usr/include/string.h:146:30> 1 2
|-FunctionDecl 0x5608c136af98 <line:149:14> col:14 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x5608c136b090 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c136b0f8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c136b038 <<invalid sloc>> Implicit 786
|-FunctionDecl 0x5608c136b170 prev 0x5608c136af98 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:149:14 strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x5608c136ae38 <col:22, col:39> col:39 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c136aeb8 <col:47, col:70> col:70 __src 'const char *restrict'
| |-BuiltinAttr 0x5608c136b2b8 <<invalid sloc>> Inherited Implicit 786
| |-NoThrowAttr 0x5608c136b220 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c136b278 <line:384:57, /usr/include/string.h:150:30> 1 2
|-FunctionDecl 0x5608c136b548 <line:152:14> col:14 implicit strncat 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136b640 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c136b6a8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136b710 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c136b5e8 <<invalid sloc>> Implicit 787
|-FunctionDecl 0x5608c136b790 prev 0x5608c136b548 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:152:14 strncat 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136b2f8 <col:23, col:40> col:40 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c136b378 <col:48, col:71> col:71 __src 'const char *restrict'
| |-ParmVarDecl 0x5608c136b460 <line:153:9, col:16> col:16 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c136b8d8 <<invalid sloc>> Inherited Implicit 787
| |-NoThrowAttr 0x5608c136b848 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c136b8a0 <line:384:57, /usr/include/string.h:153:45> 1 2
|-FunctionDecl 0x5608c136bab0 <line:156:12> col:12 implicit used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c136bba8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136bc10 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c136bb50 <<invalid sloc>> Implicit 784
|-FunctionDecl 0x5608c136bc88 prev 0x5608c136bab0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:156:12 used strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c136b918 <col:20, col:32> col:32 __s1 'const char *'
| |-ParmVarDecl 0x5608c136b998 <col:38, col:50> col:50 __s2 'const char *'
| |-BuiltinAttr 0x5608c136bdf8 <<invalid sloc>> Inherited Implicit 784
| |-NoThrowAttr 0x5608c136bd38 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c136bd90 <line:308:45>
| `-NonNullAttr 0x5608c136bdb8 <line:384:57, /usr/include/string.h:157:49> 1 2
|-FunctionDecl 0x5608c136c0a0 <line:159:12> col:12 implicit strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136c198 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136c200 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136c268 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c136c140 <<invalid sloc>> Implicit 785
|-FunctionDecl 0x5608c136c2e8 prev 0x5608c136c0a0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:159:12 strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136be38 <col:21, col:33> col:33 __s1 'const char *'
| |-ParmVarDecl 0x5608c136beb8 <col:39, col:51> col:51 __s2 'const char *'
| |-ParmVarDecl 0x5608c136bf30 <col:57, col:64> col:64 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c136c458 <<invalid sloc>> Inherited Implicit 785
| |-NoThrowAttr 0x5608c136c3a0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c136c3f8 <line:308:45>
| `-NonNullAttr 0x5608c136c420 <line:384:57, /usr/include/string.h:160:49> 1 2
|-FunctionDecl 0x5608c136c5f8 <line:163:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:163:12 strcoll 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c136c498 <col:21, col:33> col:33 __s1 'const char *'
| |-ParmVarDecl 0x5608c136c518 <col:39, col:51> col:51 __s2 'const char *'
| |-NoThrowAttr 0x5608c136c6a8 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c136c700 <line:308:45>
| `-NonNullAttr 0x5608c136c728 <line:384:57, /usr/include/string.h:164:49> 1 2
|-FunctionDecl 0x5608c136c9b8 <line:166:15> col:15 implicit strxfrm 'unsigned long (char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136cab0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c136cb18 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136cb80 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c136ca58 <<invalid sloc>> Implicit 788
|-FunctionDecl 0x5608c136cc00 prev 0x5608c136c9b8 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:166:15 strxfrm 'unsigned long (char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136c780 <col:24, col:41> col:41 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c136c800 <line:167:10, col:33> col:33 __src 'const char *restrict'
| |-ParmVarDecl 0x5608c136c878 <col:40, col:47> col:47 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c136cd48 <<invalid sloc>> Inherited Implicit 788
| |-NoThrowAttr 0x5608c136ccb8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c136cd10 <line:384:57, /usr/include/string.h:168:26> 2
|-FunctionDecl 0x5608c136d010 <line:175:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:175:12 strcoll_l 'int (const char *, const char *, locale_t)' extern
| |-ParmVarDecl 0x5608c136cd88 <col:23, col:35> col:35 __s1 'const char *'
| |-ParmVarDecl 0x5608c136ce08 <col:41, col:53> col:53 __s2 'const char *'
| |-ParmVarDecl 0x5608c136ce80 <col:59, col:68> col:68 __l 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c136d0c8 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c136d120 <line:308:45>
| `-NonNullAttr 0x5608c136d148 <line:384:57, /usr/include/string.h:176:52> 1 2 3
|-FunctionDecl 0x5608c136e4c0 <line:179:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:179:15 strxfrm_l 'size_t (char *, const char *, size_t, locale_t)' extern
| |-ParmVarDecl 0x5608c136d1a8 <col:26, col:32> col:32 __dest 'char *'
| |-ParmVarDecl 0x5608c136d228 <col:40, col:52> col:52 __src 'const char *'
| |-ParmVarDecl 0x5608c136d2a0 <col:59, col:66> col:66 __n 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c136d318 <line:180:5, col:14> col:14 __l 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c136e580 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c136e5d8 <line:384:57, /usr/include/string.h:180:43> 2 4
|-FunctionDecl 0x5608c136e6e8 <line:187:14> col:14 implicit strdup 'char *(const char *)' extern
| |-ParmVarDecl 0x5608c136e7e0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c136e788 <<invalid sloc>> Implicit 847
|-FunctionDecl 0x5608c136e850 prev 0x5608c136e6e8 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:187:14 strdup 'char *(const char *)' extern
| |-ParmVarDecl 0x5608c136e630 <col:22, col:34> col:34 __s 'const char *'
| |-BuiltinAttr 0x5608c136e9b8 <<invalid sloc>> Inherited Implicit 847
| |-NoThrowAttr 0x5608c136e8f8 </usr/include/sys/cdefs.h:79:35>
| |-RestrictAttr 0x5608c136e950 <line:281:47> malloc
| `-NonNullAttr 0x5608c136e978 <line:384:57, /usr/include/string.h:188:48> 1
|-FunctionDecl 0x5608c136ebb0 <line:195:14> col:14 implicit strndup 'char *(const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136eca8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136ed10 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c136ec50 <<invalid sloc>> Implicit 848
|-FunctionDecl 0x5608c136ed88 prev 0x5608c136ebb0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:195:14 strndup 'char *(const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c136e9f8 <col:23, col:35> col:35 __string 'const char *'
| |-ParmVarDecl 0x5608c136ea70 <col:45, col:52> col:52 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c136eef8 <<invalid sloc>> Inherited Implicit 848
| |-NoThrowAttr 0x5608c136ee38 </usr/include/sys/cdefs.h:79:35>
| |-RestrictAttr 0x5608c136ee90 <line:281:47> malloc
| `-NonNullAttr 0x5608c136eeb8 <line:384:57, /usr/include/string.h:196:48> 1
|-FunctionDecl 0x5608c136f0b0 <line:246:14> col:14 implicit used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c136f1a8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136f210 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c136f150 <<invalid sloc>> Implicit 790
|-FunctionDecl 0x5608c136f288 prev 0x5608c136f0b0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:246:14 used strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c136ef38 <col:22, col:34> col:34 __s 'const char *'
| |-ParmVarDecl 0x5608c136efb8 <col:39, col:43> col:43 __c 'int'
| |-BuiltinAttr 0x5608c136f3f8 <<invalid sloc>> Inherited Implicit 790
| |-NoThrowAttr 0x5608c136f338 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c136f390 <line:308:45>
| `-NonNullAttr 0x5608c136f3b8 <line:384:57, /usr/include/string.h:247:46> 1
|-FunctionDecl 0x5608c136f578 <line:273:14> col:14 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c136f670 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136f6d8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c136f618 <<invalid sloc>> Implicit 793
|-FunctionDecl 0x5608c136f750 prev 0x5608c136f578 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:273:14 strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c136f438 <col:23, col:35> col:35 __s 'const char *'
| |-ParmVarDecl 0x5608c136f4b8 <col:40, col:44> col:44 __c 'int'
| |-BuiltinAttr 0x5608c136f8b8 <<invalid sloc>> Inherited Implicit 793
| |-NoThrowAttr 0x5608c136f800 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c136f858 <line:308:45>
| `-NonNullAttr 0x5608c136f880 <line:384:57, /usr/include/string.h:274:46> 1
|-FunctionDecl 0x5608c136fa38 <line:286:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:286:14 strchrnul 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c136f8f8 <col:25, col:37> col:37 __s 'const char *'
| |-ParmVarDecl 0x5608c136f978 <col:42, col:46> col:46 __c 'int'
| |-NoThrowAttr 0x5608c136fae8 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c136fb40 <line:308:45>
| `-NonNullAttr 0x5608c136fb68 <line:384:57, /usr/include/string.h:287:46> 1
|-FunctionDecl 0x5608c136fd98 <line:293:15> col:15 implicit strcspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c136fe90 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c136fef8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c136fe38 <<invalid sloc>> Implicit 791
|-FunctionDecl 0x5608c136ff70 prev 0x5608c136fd98 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:293:15 strcspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c136fbc0 <col:24, col:36> col:36 __s 'const char *'
| |-ParmVarDecl 0x5608c136fc40 <col:41, col:53> col:53 __reject 'const char *'
| |-BuiltinAttr 0x5608c13700d8 <<invalid sloc>> Inherited Implicit 791
| |-NoThrowAttr 0x5608c1370020 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1370078 <line:308:45>
| `-NonNullAttr 0x5608c13700a0 <line:384:57, /usr/include/string.h:294:49> 1 2
|-FunctionDecl 0x5608c1370270 <line:297:15> col:15 implicit strspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c1370368 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c13703d0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c1370310 <<invalid sloc>> Implicit 794
|-FunctionDecl 0x5608c1370b40 prev 0x5608c1370270 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:297:15 strspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c1370118 <col:23, col:35> col:35 __s 'const char *'
| |-ParmVarDecl 0x5608c1370198 <col:40, col:52> col:52 __accept 'const char *'
| |-BuiltinAttr 0x5608c1370ca8 <<invalid sloc>> Inherited Implicit 794
| |-NoThrowAttr 0x5608c1370bf0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1370c48 <line:308:45>
| `-NonNullAttr 0x5608c1370c70 <line:384:57, /usr/include/string.h:298:49> 1 2
|-FunctionDecl 0x5608c1370e80 <line:323:14> col:14 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c1370f78 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1370fe0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c1370f20 <<invalid sloc>> Implicit 792
|-FunctionDecl 0x5608c1371058 prev 0x5608c1370e80 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:323:14 strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c1370ce8 <col:23, col:35> col:35 __s 'const char *'
| |-ParmVarDecl 0x5608c1370d68 <col:40, col:52> col:52 __accept 'const char *'
| |-BuiltinAttr 0x5608c13711c8 <<invalid sloc>> Inherited Implicit 792
| |-NoThrowAttr 0x5608c1371108 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1371160 <line:308:45>
| `-NonNullAttr 0x5608c1371188 <line:384:57, /usr/include/string.h:324:49> 1 2
|-FunctionDecl 0x5608c1371368 <line:350:14> col:14 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c1371460 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c13714c8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c1371408 <<invalid sloc>> Implicit 795
|-FunctionDecl 0x5608c1371540 prev 0x5608c1371368 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:350:14 strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c1371208 <col:22, col:34> col:34 __haystack 'const char *'
| |-ParmVarDecl 0x5608c1371288 <col:46, col:58> col:58 __needle 'const char *'
| |-BuiltinAttr 0x5608c13716a8 <<invalid sloc>> Inherited Implicit 795
| |-NoThrowAttr 0x5608c13715f0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1371648 <line:308:45>
| `-NonNullAttr 0x5608c1371670 <line:384:57, /usr/include/string.h:351:49> 1 2
|-FunctionDecl 0x5608c1371828 <line:356:14> col:14 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x5608c1371920 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c1371988 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c13718c8 <<invalid sloc>> Implicit 796
|-FunctionDecl 0x5608c1371a00 prev 0x5608c1371828 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:356:14 strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x5608c13716e8 <col:22, col:39> col:39 __s 'char *restrict'
| |-ParmVarDecl 0x5608c1371768 <col:44, col:67> col:67 __delim 'const char *restrict'
| |-BuiltinAttr 0x5608c1371b48 <<invalid sloc>> Inherited Implicit 796
| |-NoThrowAttr 0x5608c1371ab0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1371b08 <line:384:57, /usr/include/string.h:357:27> 2
|-FunctionDecl 0x5608c1371df0 <line:361:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:361:14 __strtok_r 'char *(char *restrict, const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x5608c1371b88 <col:26, col:43> col:43 __s 'char *restrict'
| |-ParmVarDecl 0x5608c1371c08 <line:362:5, col:28> col:28 __delim 'const char *restrict'
| |-ParmVarDecl 0x5608c1371c88 <line:363:5, col:23> col:23 __save_ptr 'char **restrict'
| |-NoThrowAttr 0x5608c1371ea8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1371f00 <line:384:57, /usr/include/string.h:364:30> 2 3
|-FunctionDecl 0x5608c1372138 <line:366:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:366:14 strtok_r 'char *(char *restrict, const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x5608c1371f50 <col:24, col:41> col:41 __s 'char *restrict'
| |-ParmVarDecl 0x5608c1371fd0 <col:46, col:69> col:69 __delim 'const char *restrict'
| |-ParmVarDecl 0x5608c1372050 <line:367:10, col:28> col:28 __save_ptr 'char **restrict'
| |-NoThrowAttr 0x5608c13721f0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1372248 <line:384:57, /usr/include/string.h:368:30> 2 3
|-FunctionDecl 0x5608c1372400 <line:380:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:380:14 strcasestr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c13722a0 <col:26, col:38> col:38 __haystack 'const char *'
| |-ParmVarDecl 0x5608c1372320 <col:50, col:62> col:62 __needle 'const char *'
| |-NoThrowAttr 0x5608c13724b0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1372508 <line:308:45>
| `-NonNullAttr 0x5608c1372530 <line:384:57, /usr/include/string.h:381:49> 1 2
|-FunctionDecl 0x5608c1372880 <line:389:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:389:14 memmem 'void *(const void *, size_t, const void *, size_t)' extern
| |-ParmVarDecl 0x5608c1372580 <col:22, col:34> col:34 __haystack 'const void *'
| |-ParmVarDecl 0x5608c13725f8 <col:46, col:53> col:53 __haystacklen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1372678 <line:390:8, col:20> col:20 __needle 'const void *'
| |-ParmVarDecl 0x5608c13726f0 <col:30, col:37> col:37 __needlelen 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c1372940 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1372998 <line:308:45>
| `-NonNullAttr 0x5608c13729c0 <line:384:57, /usr/include/string.h:391:49> 1 3
|-FunctionDecl 0x5608c1373c48 <line:397:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:397:14 __mempcpy 'void *(void *restrict, const void *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c1372a10 <col:25, col:42> col:42 __dest 'void *restrict'
| |-ParmVarDecl 0x5608c1372a90 <line:398:4, col:27> col:27 __src 'const void *restrict'
| |-ParmVarDecl 0x5608c1373b60 <col:34, col:41> col:41 __n 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c1373d00 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1373d58 <line:384:57, /usr/include/string.h:399:30> 1 2
|-FunctionDecl 0x5608c1373f90 <line:400:14> col:14 implicit mempcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c1374088 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x5608c13740f0 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c1374158 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1374030 <<invalid sloc>> Implicit 844
|-FunctionDecl 0x5608c13741d8 prev 0x5608c1373f90 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:400:14 mempcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c1373db0 <col:23, col:40> col:40 __dest 'void *restrict'
| |-ParmVarDecl 0x5608c1373e30 <line:401:9, col:32> col:32 __src 'const void *restrict'
| |-ParmVarDecl 0x5608c1373ea8 <col:39, col:46> col:46 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1374328 <<invalid sloc>> Inherited Implicit 844
| |-NoThrowAttr 0x5608c1374290 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c13742e8 <line:384:57, /usr/include/string.h:402:30> 1 2
|-FunctionDecl 0x5608c1374478 <line:407:15> col:15 implicit used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x5608c1374570 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c1374518 <<invalid sloc>> Implicit 799
|-FunctionDecl 0x5608c13745e0 prev 0x5608c1374478 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:407:15 used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x5608c1374368 <col:23, col:35> col:35 __s 'const char *'
| |-BuiltinAttr 0x5608c1374748 <<invalid sloc>> Inherited Implicit 799
| |-NoThrowAttr 0x5608c1374688 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c13746e0 <line:308:45>
| `-NonNullAttr 0x5608c1374708 <line:384:57, /usr/include/string.h:408:46> 1
|-FunctionDecl 0x5608c1374938 <line:413:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:413:15 strnlen 'size_t (const char *, size_t)' extern
| |-ParmVarDecl 0x5608c1374788 <col:24, col:36> col:36 __string 'const char *'
| |-ParmVarDecl 0x5608c1374800 <col:46, col:53> col:53 __maxlen 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c13749e8 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1374a40 <line:308:45>
| `-NonNullAttr 0x5608c1374a68 <line:384:57, /usr/include/string.h:414:46> 1
|-FunctionDecl 0x5608c1374b58 <line:419:14> col:14 implicit strerror 'char *(int)' extern
| |-ParmVarDecl 0x5608c1374c50 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c1374bf8 <<invalid sloc>> Implicit 798
|-FunctionDecl 0x5608c1374cc0 prev 0x5608c1374b58 <col:1, /usr/include/sys/cdefs.h:79:54> /usr/include/string.h:419:14 strerror 'char *(int)' extern
| |-ParmVarDecl 0x5608c1374ac0 <col:24, col:28> col:28 __errnum 'int'
| |-BuiltinAttr 0x5608c1374dc0 <<invalid sloc>> Inherited Implicit 798
| `-NoThrowAttr 0x5608c1374d68 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1375040 </usr/include/string.h:444:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:444:14 strerror_r 'char *(int, char *, size_t)' extern
| |-ParmVarDecl 0x5608c1374e00 <col:26, col:30> col:30 __errnum 'int'
| |-ParmVarDecl 0x5608c1374e80 <col:40, col:46> col:46 __buf 'char *'
| |-ParmVarDecl 0x5608c1374ef8 <col:53, col:60> col:60 __buflen 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c13750f8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1375150 <line:384:57, /usr/include/string.h:445:27> 2
|-FunctionDecl 0x5608c1375270 <line:450:1, /usr/include/sys/cdefs.h:79:54> /usr/include/string.h:450:20 strerrordesc_np 'const char *(int)' extern
| |-ParmVarDecl 0x5608c13751a0 <col:37, col:41> col:41 __err 'int'
| `-NoThrowAttr 0x5608c1375318 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1375420 </usr/include/string.h:452:1, /usr/include/sys/cdefs.h:79:54> /usr/include/string.h:452:20 strerrorname_np 'const char *(int)' extern
| |-ParmVarDecl 0x5608c1375388 <col:37, col:41> col:41 __err 'int'
| `-NoThrowAttr 0x5608c13754c8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13756d0 </usr/include/string.h:458:1, /usr/include/sys/cdefs.h:79:54> /usr/include/string.h:458:14 strerror_l 'char *(int, locale_t)' extern
| |-ParmVarDecl 0x5608c1375538 <col:26, col:30> col:30 __errnum 'int'
| |-ParmVarDecl 0x5608c13755b0 <col:40, col:49> col:49 __l 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c1375780 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13759d0 </usr/include/strings.h:34:12> col:12 implicit bcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c1375ac8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c1376fc0 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c1377028 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1375a70 <<invalid sloc>> Implicit 852
|-FunctionDecl 0x5608c13770a8 prev 0x5608c13759d0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:34:12 bcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c13757f0 <col:18, col:30> col:30 __s1 'const void *'
| |-ParmVarDecl 0x5608c1375870 <col:36, col:48> col:48 __s2 'const void *'
| |-ParmVarDecl 0x5608c13758e8 <col:54, col:61> col:61 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1377218 <<invalid sloc>> Inherited Implicit 852
| |-NoThrowAttr 0x5608c1377160 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c13771b8 <line:308:45>
| `-NonNullAttr 0x5608c13771e0 <line:384:57, /usr/include/strings.h:35:49> 1 2
|-FunctionDecl 0x5608c13774b8 <line:38:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:38:13 bcopy 'void (const void *, void *, size_t)' extern
| |-ParmVarDecl 0x5608c1377258 <col:20, col:32> col:32 __src 'const void *'
| |-ParmVarDecl 0x5608c13772d8 <col:39, col:45> col:45 __dest 'void *'
| |-ParmVarDecl 0x5608c1377350 <col:53, col:60> col:60 __n 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c1377570 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c13775c8 <line:384:57, /usr/include/strings.h:39:27> 1 2
|-FunctionDecl 0x5608c13777c8 <line:42:13> col:13 implicit bzero 'void (void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c13778c0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x5608c1377928 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1377868 <<invalid sloc>> Implicit 851
|-FunctionDecl 0x5608c13779a0 prev 0x5608c13777c8 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:42:13 bzero 'void (void *, unsigned long)' extern
| |-ParmVarDecl 0x5608c1377620 <col:20, col:26> col:26 __s 'void *'
| |-ParmVarDecl 0x5608c1377698 <col:31, col:38> col:38 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1377ae8 <<invalid sloc>> Inherited Implicit 851
| |-NoThrowAttr 0x5608c1377a50 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c1377aa8 <line:384:57, /usr/include/strings.h:42:64> 1
|-FunctionDecl 0x5608c1377c68 <line:68:14> col:14 implicit index 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c1377d60 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1377dc8 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c1377d08 <<invalid sloc>> Implicit 849
|-FunctionDecl 0x5608c1377e40 prev 0x5608c1377c68 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:68:14 index 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c1377b28 <col:21, col:33> col:33 __s 'const char *'
| |-ParmVarDecl 0x5608c1377ba8 <col:38, col:42> col:42 __c 'int'
| |-BuiltinAttr 0x5608c1377fa8 <<invalid sloc>> Inherited Implicit 849
| |-NoThrowAttr 0x5608c1377ef0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1377f48 <line:308:45>
| `-NonNullAttr 0x5608c1377f70 <line:384:57, /usr/include/strings.h:69:46> 1
|-FunctionDecl 0x5608c1378128 <line:96:14> col:14 implicit rindex 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c1378220 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1378288 <<invalid sloc>> <invalid sloc> 'int'
| `-BuiltinAttr 0x5608c13781c8 <<invalid sloc>> Implicit 850
|-FunctionDecl 0x5608c1378300 prev 0x5608c1378128 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:96:14 rindex 'char *(const char *, int)' extern
| |-ParmVarDecl 0x5608c1377fe8 <col:22, col:34> col:34 __s 'const char *'
| |-ParmVarDecl 0x5608c1378068 <col:39, col:43> col:43 __c 'int'
| |-BuiltinAttr 0x5608c1378468 <<invalid sloc>> Inherited Implicit 850
| |-NoThrowAttr 0x5608c13783b0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1378408 <line:308:45>
| `-NonNullAttr 0x5608c1378430 <line:384:57, /usr/include/strings.h:97:46> 1
|-FunctionDecl 0x5608c1378540 <line:104:1, /usr/include/sys/cdefs.h:315:56> /usr/include/strings.h:104:12 ffs 'int (int)' extern
| |-ParmVarDecl 0x5608c13784a8 <col:17, col:21> col:21 __i 'int'
| |-NoThrowAttr 0x5608c13785e8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1378640 <line:315:46>
|-FunctionDecl 0x5608c1378750 </usr/include/strings.h:110:1, /usr/include/sys/cdefs.h:315:56> /usr/include/strings.h:110:12 ffsl 'int (long)' extern
| |-ParmVarDecl 0x5608c1378680 <col:18, col:27> col:27 __l 'long'
| |-NoThrowAttr 0x5608c13787f8 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1378850 <line:315:46>
|-FunctionDecl 0x5608c1378960 </usr/include/strings.h:111:15, /usr/include/sys/cdefs.h:315:56> /usr/include/strings.h:111:26 ffsll 'int (long long)' extern
| |-ParmVarDecl 0x5608c1378890 <col:33, col:47> col:47 __ll 'long long'
| |-NoThrowAttr 0x5608c1378a08 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1378a60 <line:315:46>
|-FunctionDecl 0x5608c1378c00 </usr/include/strings.h:116:12> col:12 implicit strcasecmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c1378cf8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1378d60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c1378ca0 <<invalid sloc>> Implicit 853
|-FunctionDecl 0x5608c1378dd8 prev 0x5608c1378c00 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:116:12 strcasecmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c1378aa0 <col:24, col:36> col:36 __s1 'const char *'
| |-ParmVarDecl 0x5608c1378b20 <col:42, col:54> col:54 __s2 'const char *'
| |-BuiltinAttr 0x5608c1378f48 <<invalid sloc>> Inherited Implicit 853
| |-NoThrowAttr 0x5608c1378e88 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1378ee0 <line:308:45>
| `-NonNullAttr 0x5608c1378f08 <line:384:57, /usr/include/strings.h:117:49> 1 2
|-FunctionDecl 0x5608c13791b0 <line:120:12> col:12 implicit strncasecmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c13792a8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1379310 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c1379378 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c1379250 <<invalid sloc>> Implicit 854
|-FunctionDecl 0x5608c13793f8 prev 0x5608c13791b0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:120:12 strncasecmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c1378fd0 <col:25, col:37> col:37 __s1 'const char *'
| |-ParmVarDecl 0x5608c1379050 <col:43, col:55> col:55 __s2 'const char *'
| |-ParmVarDecl 0x5608c13790c8 <col:61, col:68> col:68 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c1379568 <<invalid sloc>> Inherited Implicit 854
| |-NoThrowAttr 0x5608c13794b0 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1379508 <line:308:45>
| `-NonNullAttr 0x5608c1379530 <line:384:57, /usr/include/strings.h:121:49> 1 2
|-FunctionDecl 0x5608c13797a8 <line:128:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:128:12 strcasecmp_l 'int (const char *, const char *, locale_t)' extern
| |-ParmVarDecl 0x5608c13795a8 <col:26, col:38> col:38 __s1 'const char *'
| |-ParmVarDecl 0x5608c1379628 <col:44, col:56> col:56 __s2 'const char *'
| |-ParmVarDecl 0x5608c13796a0 <col:62, col:71> col:71 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c1379860 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c13798b8 <line:308:45>
| `-NonNullAttr 0x5608c13798e0 <line:384:57, /usr/include/strings.h:129:52> 1 2 3
|-FunctionDecl 0x5608c1379c50 <line:133:1, /usr/include/sys/cdefs.h:384:76> /usr/include/strings.h:133:12 strncasecmp_l 'int (const char *, const char *, size_t, locale_t)' extern
| |-ParmVarDecl 0x5608c1379938 <col:27, col:39> col:39 __s1 'const char *'
| |-ParmVarDecl 0x5608c13799b8 <col:45, col:57> col:57 __s2 'const char *'
| |-ParmVarDecl 0x5608c1379a30 <line:134:6, col:13> col:13 __n 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1379aa8 <col:18, col:27> col:27 __loc 'locale_t':'struct __locale_struct *'
| |-NoThrowAttr 0x5608c1379d10 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c1379d68 <line:308:45>
| `-NonNullAttr 0x5608c1379d90 <line:384:57, /usr/include/strings.h:135:52> 1 2 4
|-FunctionDecl 0x5608c1379f18 </usr/include/string.h:466:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:466:13 explicit_bzero 'void (void *, size_t)' extern
| |-ParmVarDecl 0x5608c1379de8 <col:29, col:35> col:35 __s 'void *'
| |-ParmVarDecl 0x5608c1379e60 <col:40, col:47> col:47 __n 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c1379fc8 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137a020 <line:384:57, /usr/include/string.h:466:73> 1
|-FunctionDecl 0x5608c137a250 <line:471:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:471:14 strsep 'char *(char **restrict, const char *restrict)' extern
| |-ParmVarDecl 0x5608c137a070 <col:22, col:40> col:40 __stringp 'char **restrict'
| |-ParmVarDecl 0x5608c137a0f0 <line:472:8, col:31> col:31 __delim 'const char *restrict'
| |-NoThrowAttr 0x5608c137a300 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137a358 <line:384:57, /usr/include/string.h:473:30> 1 2
|-FunctionDecl 0x5608c137a448 <line:478:1, /usr/include/sys/cdefs.h:79:54> /usr/include/string.h:478:14 strsignal 'char *(int)' extern
| |-ParmVarDecl 0x5608c137a3b0 <col:25, col:29> col:29 __sig 'int'
| `-NoThrowAttr 0x5608c137a4f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c137a5f8 </usr/include/string.h:482:1, /usr/include/sys/cdefs.h:79:54> /usr/include/string.h:482:20 sigabbrev_np 'const char *(int)' extern
| |-ParmVarDecl 0x5608c137a560 <col:34, col:38> col:38 __sig 'int'
| `-NoThrowAttr 0x5608c137a6a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c137a7a8 </usr/include/string.h:485:1, /usr/include/sys/cdefs.h:79:54> /usr/include/string.h:485:20 sigdescr_np 'const char *(int)' extern
| |-ParmVarDecl 0x5608c137a710 <col:33, col:37> col:37 __sig 'int'
| `-NoThrowAttr 0x5608c137a850 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c137aa20 </usr/include/string.h:489:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:489:14 __stpcpy 'char *(char *restrict, const char *restrict)' extern
| |-ParmVarDecl 0x5608c137a8c0 <col:24, col:41> col:41 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c137a940 <col:49, col:72> col:72 __src 'const char *restrict'
| |-NoThrowAttr 0x5608c137aad0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137ab28 <line:384:57, /usr/include/string.h:490:30> 1 2
|-FunctionDecl 0x5608c137ace0 <line:491:14> col:14 implicit stpcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x5608c137add8 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c137ae40 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c137ad80 <<invalid sloc>> Implicit 845
|-FunctionDecl 0x5608c137aeb8 prev 0x5608c137ace0 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:491:14 stpcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x5608c137ab80 <col:22, col:39> col:39 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c137ac00 <col:47, col:70> col:70 __src 'const char *restrict'
| |-BuiltinAttr 0x5608c137b018 <<invalid sloc>> Inherited Implicit 845
| |-NoThrowAttr 0x5608c137af68 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137afe0 <line:384:57, /usr/include/string.h:492:30> 1 2
|-FunctionDecl 0x5608c137b238 <line:496:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:496:14 __stpncpy 'char *(char *restrict, const char *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c137b058 <col:25, col:42> col:42 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c137b0d8 <line:497:4, col:27> col:27 __src 'const char *restrict'
| |-ParmVarDecl 0x5608c137b150 <col:34, col:41> col:41 __n 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c137b2f0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137b348 <line:384:57, /usr/include/string.h:498:30> 1 2
|-FunctionDecl 0x5608c137b580 <line:499:14> col:14 implicit stpncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c137b678 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c137b6e0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c137b748 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-BuiltinAttr 0x5608c137b620 <<invalid sloc>> Implicit 846
|-FunctionDecl 0x5608c137b7c8 prev 0x5608c137b580 <col:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:499:14 stpncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x5608c137b3a0 <col:23, col:40> col:40 __dest 'char *restrict'
| |-ParmVarDecl 0x5608c137b420 <line:500:9, col:32> col:32 __src 'const char *restrict'
| |-ParmVarDecl 0x5608c137b498 <col:39, col:46> col:46 __n 'size_t':'unsigned long'
| |-BuiltinAttr 0x5608c137b918 <<invalid sloc>> Inherited Implicit 846
| |-NoThrowAttr 0x5608c137b880 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137b8d8 <line:384:57, /usr/include/string.h:501:30> 1 2
|-FunctionDecl 0x5608c137bab8 <line:506:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:506:12 strverscmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c137b958 <col:24, col:36> col:36 __s1 'const char *'
| |-ParmVarDecl 0x5608c137b9d8 <col:42, col:54> col:54 __s2 'const char *'
| |-NoThrowAttr 0x5608c137bb68 </usr/include/sys/cdefs.h:79:35>
| |-PureAttr 0x5608c137bbc0 <line:308:45>
| `-NonNullAttr 0x5608c137bbe8 <line:384:57, /usr/include/string.h:507:49> 1 2
|-FunctionDecl 0x5608c137bcf8 <line:510:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:510:14 strfry 'char *(char *)' extern
| |-ParmVarDecl 0x5608c137bc40 <col:22, col:28> col:28 __string 'char *'
| |-NoThrowAttr 0x5608c137bda0 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137bdf8 <line:384:57, /usr/include/string.h:510:59> 1
|-FunctionDecl 0x5608c137bf88 <line:513:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:513:14 memfrob 'void *(void *, size_t)' extern
| |-ParmVarDecl 0x5608c137be50 <col:23, col:29> col:29 __s 'void *'
| |-ParmVarDecl 0x5608c137bec8 <col:34, col:41> col:41 __n 'size_t':'unsigned long'
| |-NoThrowAttr 0x5608c137c038 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137c090 <line:384:57, /usr/include/string.h:513:67> 1
|-FunctionDecl 0x5608c137c198 <line:527:1, /usr/include/sys/cdefs.h:384:76> /usr/include/string.h:527:14 basename 'char *(const char *)' extern
| |-ParmVarDecl 0x5608c137c0e0 <col:24, col:36> col:36 __filename 'const char *'
| |-NoThrowAttr 0x5608c137c240 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c137c298 <line:384:57, /usr/include/string.h:527:69> 1
|-RecordDecl 0x5608c137c2d8 </usr/include/bits/timex.h:26:1, line:85:1> line:26:8 struct timex definition
| |-FieldDecl 0x5608c137c398 <line:58:3, col:16> col:16 modes 'unsigned int'
| |-FieldDecl 0x5608c137c3f8 <line:59:3, col:21> col:21 offset '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c458 <line:60:3, col:21> col:21 freq '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c4b8 <line:61:3, col:21> col:21 maxerror '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c518 <line:62:3, col:21> col:21 esterror '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c580 <line:63:3, col:7> col:7 status 'int'
| |-FieldDecl 0x5608c137c5e0 <line:64:3, col:21> col:21 constant '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c640 <line:65:3, col:21> col:21 precision '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c6a0 <line:66:3, col:21> col:21 tolerance '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c710 <line:67:3, col:18> col:18 time 'struct timeval':'struct timeval'
| |-FieldDecl 0x5608c137c770 <line:68:3, col:21> col:21 tick '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c7d0 <line:69:3, col:21> col:21 ppsfreq '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c830 <line:70:3, col:21> col:21 jitter '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c898 <line:71:3, col:7> col:7 shift 'int'
| |-FieldDecl 0x5608c137c8f8 <line:72:3, col:21> col:21 stabil '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c958 <line:73:3, col:21> col:21 jitcnt '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137c9b8 <line:74:3, col:21> col:21 calcnt '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137ca18 <line:75:3, col:21> col:21 errcnt '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137ca78 <line:76:3, col:21> col:21 stbcnt '__syscall_slong_t':'long'
| |-FieldDecl 0x5608c137cae0 <line:78:3, col:7> col:7 tai 'int'
| |-FieldDecl 0x5608c137cb88 <line:81:3, col:9> col:3 'int'
| | `-ConstantExpr 0x5608c137cb68 <col:9> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c137cb30 <col:9> 'int' 32
| |-FieldDecl 0x5608c137cc30 <col:13, col:19> col:13 'int'
| | `-ConstantExpr 0x5608c137cc10 <col:19> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c137cbd8 <col:19> 'int' 32
| |-FieldDecl 0x5608c137ccd8 <col:23, col:29> col:23 'int'
| | `-ConstantExpr 0x5608c137ccb8 <col:29> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c137cc80 <col:29> 'int' 32
| |-FieldDecl 0x5608c137cd80 <col:33, col:39> col:33 'int'
| | `-ConstantExpr 0x5608c137cd60 <col:39> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c137cd28 <col:39> 'int' 32
| |-FieldDecl 0x5608c137ce28 <line:82:3, col:9> col:3 'int'
| | `-ConstantExpr 0x5608c137ce08 <col:9> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c137cdd0 <col:9> 'int' 32
| |-FieldDecl 0x5608c137ced0 <col:13, col:19> col:13 'int'
| | `-ConstantExpr 0x5608c137ceb0 <col:19> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c137ce78 <col:19> 'int' 32
| |-FieldDecl 0x5608c137cf78 <col:23, col:29> col:23 'int'
| | `-ConstantExpr 0x5608c137cf58 <col:29> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c137cf20 <col:29> 'int' 32
| |-FieldDecl 0x5608c13853c8 <col:33, col:39> col:33 'int'
| | `-ConstantExpr 0x5608c13853a8 <col:39> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c1385370 <col:39> 'int' 32
| |-FieldDecl 0x5608c1385470 <line:83:3, col:9> col:3 'int'
| | `-ConstantExpr 0x5608c1385450 <col:9> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c1385418 <col:9> 'int' 32
| |-FieldDecl 0x5608c1385518 <col:13, col:19> col:13 'int'
| | `-ConstantExpr 0x5608c13854f8 <col:19> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c13854c0 <col:19> 'int' 32
| `-FieldDecl 0x5608c13855c0 <col:23, col:29> col:23 'int'
|   `-ConstantExpr 0x5608c13855a0 <col:29> 'int'
|     |-value: Int 32
|     `-IntegerLiteral 0x5608c1385568 <col:29> 'int' 32
|-FunctionDecl 0x5608c1385860 </usr/include/bits/time.h:78:1, /usr/include/sys/cdefs.h:79:54> /usr/include/bits/time.h:78:12 clock_adjtime 'int (__clockid_t, struct timex *)' extern
| |-ParmVarDecl 0x5608c1385620 <col:27, col:39> col:39 __clock_id '__clockid_t':'int'
| |-ParmVarDecl 0x5608c1385740 <col:51, col:65> col:65 __utx 'struct timex *'
| `-NoThrowAttr 0x5608c1385910 </usr/include/sys/cdefs.h:79:35>
|-RecordDecl 0x5608c1385968 </usr/include/bits/types/struct_tm.h:7:1, line:26:1> line:7:8 struct tm definition
| |-FieldDecl 0x5608c1385a28 <line:9:3, col:7> col:7 referenced tm_sec 'int'
| |-FieldDecl 0x5608c1385a90 <line:10:3, col:7> col:7 referenced tm_min 'int'
| |-FieldDecl 0x5608c1385af8 <line:11:3, col:7> col:7 referenced tm_hour 'int'
| |-FieldDecl 0x5608c1385b60 <line:12:3, col:7> col:7 referenced tm_mday 'int'
| |-FieldDecl 0x5608c1385bc8 <line:13:3, col:7> col:7 referenced tm_mon 'int'
| |-FieldDecl 0x5608c1385c30 <line:14:3, col:7> col:7 referenced tm_year 'int'
| |-FieldDecl 0x5608c1385c98 <line:15:3, col:7> col:7 referenced tm_wday 'int'
| |-FieldDecl 0x5608c1385d00 <line:16:3, col:7> col:7 referenced tm_yday 'int'
| |-FieldDecl 0x5608c1385d68 <line:17:3, col:7> col:7 tm_isdst 'int'
| |-FieldDecl 0x5608c1385dd0 <line:20:3, col:12> col:12 tm_gmtoff 'long'
| `-FieldDecl 0x5608c1385e38 <line:21:3, col:15> col:15 tm_zone 'const char *'
|-RecordDecl 0x5608c1385e88 </usr/include/bits/types/struct_itimerspec.h:8:1, line:12:3> line:8:8 struct itimerspec definition
| |-FieldDecl 0x5608c1385f50 <line:10:5, col:21> col:21 it_interval 'struct timespec':'struct timespec'
| `-FieldDecl 0x5608c1385fc0 <line:11:5, col:21> col:21 it_value 'struct timespec':'struct timespec'
|-RecordDecl 0x5608c1386070 </usr/include/time.h:49:1, col:8> col:8 struct sigevent
|-FunctionDecl 0x5608c13861f8 <line:72:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:72:16 clock 'clock_t (void)' extern
| `-NoThrowAttr 0x5608c1386298 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1386438 </usr/include/time.h:76:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:76:15 used time 'time_t (time_t *)' extern
| |-ParmVarDecl 0x5608c1386348 <col:21, col:29> col:29 __timer 'time_t *'
| `-NoThrowAttr 0x5608c13864e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13866e0 </usr/include/time.h:79:1, line:80:40> line:79:15 difftime 'double (time_t, time_t)' extern
| |-ParmVarDecl 0x5608c1386548 <col:25, col:32> col:32 __time1 'time_t':'long'
| |-ParmVarDecl 0x5608c13865c0 <col:41, col:48> col:48 __time0 'time_t':'long'
| |-NoThrowAttr 0x5608c1386790 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c13867e8 </usr/include/time.h:80:30>
|-FunctionDecl 0x5608c13869b8 <line:83:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:83:15 mktime 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5608c13868c0 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x5608c1386a60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1386df8 </usr/include/time.h:100:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:100:15 used strftime 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' extern
| |-ParmVarDecl 0x5608c1386ad0 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x5608c1386b48 <col:47, col:54> col:54 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1386bc8 <line:101:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c1386cb0 <line:102:4, col:32> col:32 __tp 'const struct tm *restrict'
| `-NoThrowAttr 0x5608c1386eb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1387160 </usr/include/time.h:107:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:107:14 used strptime 'char *(const char *restrict, const char *restrict, struct tm *)' extern
| |-ParmVarDecl 0x5608c1386f28 <col:24, col:47> col:47 __s 'const char *restrict'
| |-ParmVarDecl 0x5608c1386fa8 <line:108:10, col:33> col:33 __fmt 'const char *restrict'
| |-ParmVarDecl 0x5608c1387038 <col:40, col:51> col:51 __tp 'struct tm *'
| `-NoThrowAttr 0x5608c1387218 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1392e58 </usr/include/time.h:116:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:116:15 strftime_l 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict, locale_t)' extern
| |-ParmVarDecl 0x5608c1387288 <col:27, col:44> col:44 __s 'char *restrict'
| |-ParmVarDecl 0x5608c1387300 <col:49, col:56> col:56 __maxsize 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c1392bf8 <line:117:6, col:29> col:29 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c1392c88 <line:118:6, col:34> col:34 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x5608c1392d00 <line:119:6, col:15> col:15 __loc 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c1392f20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1393260 </usr/include/time.h:123:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:123:14 strptime_l 'char *(const char *restrict, const char *restrict, struct tm *, locale_t)' extern
| |-ParmVarDecl 0x5608c1392f90 <col:26, col:49> col:49 __s 'const char *restrict'
| |-ParmVarDecl 0x5608c1393010 <line:124:5, col:28> col:28 __fmt 'const char *restrict'
| |-ParmVarDecl 0x5608c13930a0 <col:35, col:46> col:46 __tp 'struct tm *'
| |-ParmVarDecl 0x5608c1393118 <line:125:5, col:14> col:14 __loc 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x5608c1393320 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13934f0 </usr/include/time.h:132:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:132:19 gmtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x5608c13933e8 <col:27, col:41> col:41 __timer 'const time_t *'
| `-NoThrowAttr 0x5608c1393598 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13936a8 </usr/include/time.h:136:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:136:19 localtime 'struct tm *(const time_t *)' extern
| |-ParmVarDecl 0x5608c1393600 <col:30, col:44> col:44 __timer 'const time_t *'
| `-NoThrowAttr 0x5608c1393750 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1393970 </usr/include/time.h:154:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:154:19 used gmtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x5608c13937b8 <col:29, col:54> col:54 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5608c1393848 <line:155:8, col:30> col:30 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x5608c1393a20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1393bc8 </usr/include/time.h:159:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:159:19 used localtime_r 'struct tm *(const time_t *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x5608c1393a88 <col:32, col:57> col:57 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5608c1393b18 <line:160:11, col:33> col:33 __tp 'struct tm *restrict'
| `-NoThrowAttr 0x5608c1393c78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1393df0 </usr/include/time.h:179:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:179:14 asctime 'char *(const struct tm *)' extern
| |-ParmVarDecl 0x5608c1393cf8 <col:23, col:40> col:40 __tp 'const struct tm *'
| `-NoThrowAttr 0x5608c1393e98 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1394000 </usr/include/time.h:183:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:183:14 ctime 'char *(const time_t *)' extern
| |-ParmVarDecl 0x5608c1393f00 <col:21, col:35> col:35 __timer 'const time_t *'
| `-NoThrowAttr 0x5608c13940a8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13942c0 </usr/include/time.h:197:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:197:14 asctime_r 'char *(const struct tm *restrict, char *restrict)' extern
| |-ParmVarDecl 0x5608c1394128 <col:25, col:53> col:53 __tp 'const struct tm *restrict'
| |-ParmVarDecl 0x5608c13941a8 <line:198:4, col:21> col:21 __buf 'char *restrict'
| `-NoThrowAttr 0x5608c1394370 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1394570 </usr/include/time.h:202:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:202:14 ctime_r 'char *(const time_t *restrict, char *restrict)' extern
| |-ParmVarDecl 0x5608c13943d8 <col:23, col:48> col:48 __timer 'const time_t *restrict'
| |-ParmVarDecl 0x5608c1394458 <line:203:9, col:26> col:26 __buf 'char *restrict'
| `-NoThrowAttr 0x5608c1394620 </usr/include/sys/cdefs.h:79:35>
|-VarDecl 0x5608c1394720 </usr/include/time.h:217:1, col:24> col:14 __tzname 'char *[2]' extern
|-VarDecl 0x5608c13947a0 <line:218:1, col:12> col:12 __daylight 'int' extern
|-VarDecl 0x5608c1394820 <line:219:1, col:17> col:17 __timezone 'long' extern
|-VarDecl 0x5608c13948f0 <line:224:1, col:22> col:14 tzname 'char *[2]' extern
|-FunctionDecl 0x5608c13949f0 <line:228:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:228:13 tzset 'void (void)' extern
| `-NoThrowAttr 0x5608c1394a90 </usr/include/sys/cdefs.h:79:35>
|-VarDecl 0x5608c1394b00 </usr/include/time.h:232:1, col:12> col:12 daylight 'int' extern
|-VarDecl 0x5608c1394bf0 <line:233:1, col:17> col:17 timezone 'long' extern
|-FunctionDecl 0x5608c1394d10 <line:249:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:249:15 used timegm 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5608c1394c80 <col:23, col:34> col:34 __tp 'struct tm *'
| `-NoThrowAttr 0x5608c1394db8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1394ec8 </usr/include/time.h:251:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:251:15 timelocal 'time_t (struct tm *)' extern
| |-ParmVarDecl 0x5608c1394e38 <col:26, col:37> col:37 __tp 'struct tm *'
| `-NoThrowAttr 0x5608c1394f70 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1395078 </usr/include/time.h:262:1, col:67> col:12 dysize 'int (int)' extern
| |-ParmVarDecl 0x5608c1394fe0 <col:20, col:24> col:24 __year 'int'
| |-NoThrowAttr 0x5608c1395120 </usr/include/sys/cdefs.h:79:35>
| `-ConstAttr 0x5608c1395178 </usr/include/time.h:262:57>
|-FunctionDecl 0x5608c13953d0 <line:272:1, line:273:37> line:272:12 nanosleep 'int (const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x5608c13951c8 <col:23, col:46> col:46 __requested_time 'const struct timespec *'
| `-ParmVarDecl 0x5608c13952b0 <line:273:9, col:26> col:26 __remaining 'struct timespec *'
|-FunctionDecl 0x5608c1395660 <line:276:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:276:12 clock_getres 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x5608c13954b0 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5608c1395540 <col:48, col:65> col:65 __res 'struct timespec *'
| `-NoThrowAttr 0x5608c1395710 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13958a8 </usr/include/time.h:279:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:279:12 clock_gettime 'int (clockid_t, struct timespec *)' extern
| |-ParmVarDecl 0x5608c1395778 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5608c1395808 <col:49, col:66> col:66 __tp 'struct timespec *'
| `-NoThrowAttr 0x5608c1395958 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1395b70 </usr/include/time.h:282:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:282:12 clock_settime 'int (clockid_t, const struct timespec *)' extern
| |-ParmVarDecl 0x5608c13959c0 <col:27, col:37> col:37 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5608c1395a50 <col:49, col:72> col:72 __tp 'const struct timespec *'
| `-NoThrowAttr 0x5608c1395c20 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1395f70 </usr/include/time.h:311:1, line:313:30> line:311:12 clock_nanosleep 'int (clockid_t, int, const struct timespec *, struct timespec *)' extern
| |-ParmVarDecl 0x5608c1395c88 <col:29, col:39> col:39 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5608c1395d08 <col:51, col:55> col:55 __flags 'int'
| |-ParmVarDecl 0x5608c1395d98 <line:312:8, col:31> col:31 __req 'const struct timespec *'
| `-ParmVarDecl 0x5608c1395e28 <line:313:8, col:25> col:25 __rem 'struct timespec *'
|-FunctionDecl 0x5608c1396220 <line:326:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:326:12 clock_getcpuclockid 'int (pid_t, clockid_t *)' extern
| |-ParmVarDecl 0x5608c1396060 <col:33, col:39> col:39 __pid 'pid_t':'int'
| |-ParmVarDecl 0x5608c1396108 <col:46, col:57> col:57 __clock_id 'clockid_t *'
| `-NoThrowAttr 0x5608c13962d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1396640 </usr/include/time.h:331:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:331:12 timer_create 'int (clockid_t, struct sigevent *restrict, timer_t *restrict)' extern
| |-ParmVarDecl 0x5608c1396338 <col:26, col:36> col:36 __clock_id 'clockid_t':'int'
| |-ParmVarDecl 0x5608c1396450 <line:332:5, col:33> col:33 __evp 'struct sigevent *restrict'
| |-ParmVarDecl 0x5608c1396518 <line:333:5, col:25> col:25 __timerid 'timer_t *restrict'
| `-NoThrowAttr 0x5608c13966f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1396860 </usr/include/time.h:336:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:336:12 timer_delete 'int (timer_t)' extern
| |-ParmVarDecl 0x5608c1396760 <col:26, col:34> col:34 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x5608c1396908 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1396d70 </usr/include/time.h:340:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:340:12 timer_settime 'int (timer_t, int, const struct itimerspec *restrict, struct itimerspec *restrict)' extern
| |-ParmVarDecl 0x5608c1396970 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x5608c13969f0 <col:46, col:50> col:50 __flags 'int'
| |-ParmVarDecl 0x5608c1396b10 <line:341:6, col:42> col:42 __value 'const struct itimerspec *restrict'
| |-ParmVarDecl 0x5608c1396c28 <line:342:6, col:36> col:36 __ovalue 'struct itimerspec *restrict'
| `-NoThrowAttr 0x5608c1396e30 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c1397040 </usr/include/time.h:345:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:345:12 timer_gettime 'int (timer_t, struct itimerspec *)' extern
| |-ParmVarDecl 0x5608c1396e98 <col:27, col:35> col:35 __timerid 'timer_t':'void *'
| |-ParmVarDecl 0x5608c1396f28 <col:46, col:65> col:65 __value 'struct itimerspec *'
| `-NoThrowAttr 0x5608c13970f0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13971f0 </usr/include/time.h:364:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:364:12 timer_getoverrun 'int (timer_t)' extern
| |-ParmVarDecl 0x5608c1397158 <col:30, col:38> col:38 __timerid 'timer_t':'void *'
| `-NoThrowAttr 0x5608c1397298 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13974d0 </usr/include/time.h:371:1, /usr/include/sys/cdefs.h:384:76> /usr/include/time.h:371:12 timespec_get 'int (struct timespec *, int)' extern
| |-ParmVarDecl 0x5608c1397318 <col:26, col:43> col:43 __ts 'struct timespec *'
| |-ParmVarDecl 0x5608c1397398 <col:49, col:53> col:53 __base 'int'
| |-NoThrowAttr 0x5608c1397580 </usr/include/sys/cdefs.h:79:35>
| `-NonNullAttr 0x5608c13975d8 <line:384:57, /usr/include/time.h:372:27> 1
|-FunctionDecl 0x5608c1397760 <line:387:1, /usr/include/sys/cdefs.h:79:54> /usr/include/time.h:387:12 timespec_getres 'int (struct timespec *, int)' extern
| |-ParmVarDecl 0x5608c1397640 <col:29, col:46> col:46 __ts 'struct timespec *'
| |-ParmVarDecl 0x5608c13976c0 <col:52, col:56> col:56 __base 'int'
| `-NoThrowAttr 0x5608c1397810 </usr/include/sys/cdefs.h:79:35>
|-VarDecl 0x5608c1397880 </usr/include/time.h:413:1, col:12> col:12 getdate_err 'int' extern
|-FunctionDecl 0x5608c1397a10 <line:422:1, col:48> col:19 getdate 'struct tm *(const char *)' extern
| `-ParmVarDecl 0x5608c1397900 <col:28, col:40> col:40 __string 'const char *'
|-FunctionDecl 0x5608c1397c80 <line:436:1, line:437:40> line:436:12 getdate_r 'int (const char *restrict, struct tm *restrict)' extern
| |-ParmVarDecl 0x5608c1397ad0 <col:23, col:46> col:46 __string 'const char *restrict'
| `-ParmVarDecl 0x5608c1397b60 <line:437:9, col:31> col:31 __resbufp 'struct tm *restrict'
|-TypedefDecl 0x5608c1397d60 </usr/lib/clang/13.0.1/include/stdarg.h:14:1, col:27> col:27 va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5608c1397d30 '__builtin_va_list' sugar
|   |-Typedef 0x5608c10e64b0 '__builtin_va_list'
|   `-ConstantArrayType 0x5608c10a56f0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x5608c10a5530 'struct __va_list_tag'
|       `-Record 0x5608c10a54a8 '__va_list_tag'
|-TypedefDecl 0x5608c1397dc8 <line:32:1, col:27> col:27 referenced __gnuc_va_list '__builtin_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5608c1397d30 '__builtin_va_list' sugar
|   |-Typedef 0x5608c10e64b0 '__builtin_va_list'
|   `-ConstantArrayType 0x5608c10a56f0 'struct __va_list_tag [1]' 1 
|     `-RecordType 0x5608c10a5530 'struct __va_list_tag'
|       `-Record 0x5608c10a54a8 '__va_list_tag'
|-RecordDecl 0x5608c1397e20 </usr/include/bits/types/__mbstate_t.h:13:9, line:21:1> line:13:9 struct definition
| |-FieldDecl 0x5608c1397ed8 <line:15:3, col:7> col:7 __count 'int'
| |-RecordDecl 0x5608c1397f28 <line:16:3, line:20:3> line:16:3 union definition
| | |-FieldDecl 0x5608c1397fe8 <<built-in>:90:23, /usr/include/bits/types/__mbstate_t.h:18:19> col:19 __wch 'unsigned int'
| | `-FieldDecl 0x5608c1398098 <line:19:5, col:18> col:10 __wchb 'char [4]'
| `-FieldDecl 0x5608c1398148 <line:16:3, line:20:5> col:5 __value 'union (unnamed union at /usr/include/bits/types/__mbstate_t.h:16:3)':'union __mbstate_t::(unnamed at /usr/include/bits/types/__mbstate_t.h:16:3)'
|-TypedefDecl 0x5608c13981f8 <line:13:1, line:21:3> col:3 referenced __mbstate_t 'struct __mbstate_t':'__mbstate_t'
| `-ElaboratedType 0x5608c13981a0 'struct __mbstate_t' sugar
|   `-RecordType 0x5608c1397ea0 '__mbstate_t'
|     `-Record 0x5608c1397e20 ''
|-RecordDecl 0x5608c1398268 </usr/include/bits/types/__fpos_t.h:10:9, line:14:1> line:10:16 struct _G_fpos_t definition
| |-FieldDecl 0x5608c1398320 <line:12:3, col:11> col:11 __pos '__off_t':'long'
| `-FieldDecl 0x5608c13983a0 <line:13:3, col:15> col:15 __state '__mbstate_t':'__mbstate_t'
|-TypedefDecl 0x5608c1398448 <line:10:1, line:14:3> col:3 referenced __fpos_t 'struct _G_fpos_t':'struct _G_fpos_t'
| `-ElaboratedType 0x5608c13983f0 'struct _G_fpos_t' sugar
|   `-RecordType 0x5608c13982f0 'struct _G_fpos_t'
|     `-Record 0x5608c1398268 '_G_fpos_t'
|-RecordDecl 0x5608c13984b8 </usr/include/bits/types/__fpos64_t.h:10:9, line:14:1> line:10:16 struct _G_fpos64_t definition
| |-FieldDecl 0x5608c1398570 <line:12:3, col:13> col:13 __pos '__off64_t':'long'
| `-FieldDecl 0x5608c13985d0 <line:13:3, col:15> col:15 __state '__mbstate_t':'__mbstate_t'
|-TypedefDecl 0x5608c1398678 <line:10:1, line:14:3> col:3 referenced __fpos64_t 'struct _G_fpos64_t':'struct _G_fpos64_t'
| `-ElaboratedType 0x5608c1398620 'struct _G_fpos64_t' sugar
|   `-RecordType 0x5608c1398540 'struct _G_fpos64_t'
|     `-Record 0x5608c13984b8 '_G_fpos64_t'
|-RecordDecl 0x5608c13986e8 </usr/include/bits/types/__FILE.h:4:1, col:8> col:8 struct _IO_FILE
|-TypedefDecl 0x5608c13987e0 <line:5:1, col:25> col:25 __FILE 'struct _IO_FILE':'struct _IO_FILE'
| `-ElaboratedType 0x5608c1398790 'struct _IO_FILE' sugar
|   `-RecordType 0x5608c1398770 'struct _IO_FILE'
|     `-Record 0x5608c139e1b0 '_IO_FILE'
|-RecordDecl 0x5608c1398838 prev 0x5608c13986e8 </usr/include/bits/types/FILE.h:4:1, col:8> col:8 struct _IO_FILE
|-TypedefDecl 0x5608c13988d8 <line:7:1, col:25> col:25 referenced FILE 'struct _IO_FILE':'struct _IO_FILE'
| `-ElaboratedType 0x5608c1398790 'struct _IO_FILE' sugar
|   `-RecordType 0x5608c1398770 'struct _IO_FILE'
|     `-Record 0x5608c139e1b0 '_IO_FILE'
|-RecordDecl 0x5608c1398930 prev 0x5608c1398838 </usr/include/bits/types/struct_FILE.h:35:1, col:8> col:8 struct _IO_FILE
|-RecordDecl 0x5608c13989b0 <line:36:1, col:8> col:8 struct _IO_marker
|-RecordDecl 0x5608c1398a50 <line:37:1, col:8> col:8 struct _IO_codecvt
|-RecordDecl 0x5608c1398af0 <line:38:1, col:8> col:8 struct _IO_wide_data
|-TypedefDecl 0x5608c1398ba0 <line:43:1, col:14> col:14 referenced _IO_lock_t 'void'
| `-BuiltinType 0x5608c10a47e0 'void'
|-RecordDecl 0x5608c139e1b0 prev 0x5608c1398930 <line:49:1, line:99:1> line:49:8 struct _IO_FILE definition
| |-FieldDecl 0x5608c139e248 <line:51:3, col:7> col:7 referenced _flags 'int'
| |-FieldDecl 0x5608c139e2b0 <line:54:3, col:9> col:9 referenced _IO_read_ptr 'char *'
| |-FieldDecl 0x5608c139e318 <line:55:3, col:9> col:9 referenced _IO_read_end 'char *'
| |-FieldDecl 0x5608c139e380 <line:56:3, col:9> col:9 _IO_read_base 'char *'
| |-FieldDecl 0x5608c139e3e8 <line:57:3, col:9> col:9 _IO_write_base 'char *'
| |-FieldDecl 0x5608c139e450 <line:58:3, col:9> col:9 referenced _IO_write_ptr 'char *'
| |-FieldDecl 0x5608c139e4b8 <line:59:3, col:9> col:9 referenced _IO_write_end 'char *'
| |-FieldDecl 0x5608c139e520 <line:60:3, col:9> col:9 _IO_buf_base 'char *'
| |-FieldDecl 0x5608c139e588 <line:61:3, col:9> col:9 _IO_buf_end 'char *'
| |-FieldDecl 0x5608c139e5f0 <line:64:3, col:9> col:9 _IO_save_base 'char *'
| |-FieldDecl 0x5608c139e658 <line:65:3, col:9> col:9 _IO_backup_base 'char *'
| |-FieldDecl 0x5608c139e6c0 <line:66:3, col:9> col:9 _IO_save_end 'char *'
| |-FieldDecl 0x5608c139e7c0 <line:68:3, col:22> col:22 _markers 'struct _IO_marker *'
| |-FieldDecl 0x5608c139e890 <line:70:3, col:20> col:20 _chain 'struct _IO_FILE *'
| |-FieldDecl 0x5608c139e8f8 <line:72:3, col:7> col:7 _fileno 'int'
| |-FieldDecl 0x5608c139e960 <line:73:3, col:7> col:7 _flags2 'int'
| |-FieldDecl 0x5608c139e9c0 <line:74:3, col:11> col:11 _old_offset '__off_t':'long'
| |-FieldDecl 0x5608c139ea28 <line:77:3, col:18> col:18 _cur_column 'unsigned short'
| |-FieldDecl 0x5608c139ea90 <line:78:3, col:15> col:15 _vtable_offset 'signed char'
| |-FieldDecl 0x5608c139eb78 <line:79:3, col:19> col:8 _shortbuf 'char [1]'
| |-FieldDecl 0x5608c139ec28 <line:81:3, col:15> col:15 _lock '_IO_lock_t *'
| |-FieldDecl 0x5608c139ec88 <line:89:3, col:13> col:13 _offset '__off64_t':'long'
| |-FieldDecl 0x5608c139ed90 <line:91:3, col:23> col:23 _codecvt 'struct _IO_codecvt *'
| |-FieldDecl 0x5608c139ee90 <line:92:3, col:25> col:25 _wide_data 'struct _IO_wide_data *'
| |-FieldDecl 0x5608c139ef08 <line:93:3, col:20> col:20 _freeres_list 'struct _IO_FILE *'
| |-FieldDecl 0x5608c139ef70 <line:94:3, col:9> col:9 _freeres_buf 'void *'
| |-FieldDecl 0x5608c139efd0 <line:95:3, col:10> col:10 __pad5 'size_t':'unsigned long'
| |-FieldDecl 0x5608c139f038 <line:96:3, col:7> col:7 _mode 'int'
| `-FieldDecl 0x5608c139f298 <line:98:3, col:74> col:8 _unused2 'char [20]'
|-TypedefDecl 0x5608c139f518 </usr/include/bits/types/cookie_io_functions_t.h:27:1, line:28:58> line:27:19 referenced cookie_read_function_t '__ssize_t (void *, char *, size_t)'
| `-FunctionProtoType 0x5608c139f4a0 '__ssize_t (void *, char *, size_t)' cdecl
|   |-TypedefType 0x5608c11464c0 '__ssize_t' sugar
|   | |-Typedef 0x5608c1143000 '__ssize_t'
|   | `-BuiltinType 0x5608c10a48a0 'long'
|   |-PointerType 0x5608c10a4fa0 'void *'
|   | `-BuiltinType 0x5608c10a47e0 'void'
|   |-PointerType 0x5608c10a5410 'char *'
|   | `-BuiltinType 0x5608c10a4820 'char'
|   `-TypedefType 0x5608c1170a10 'size_t' sugar
|     |-Typedef 0x5608c11560c8 'size_t'
|     `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c139f7a8 <line:36:1, line:37:59> line:36:19 referenced cookie_write_function_t '__ssize_t (void *, const char *, size_t)'
| `-FunctionProtoType 0x5608c139f730 '__ssize_t (void *, const char *, size_t)' cdecl
|   |-TypedefType 0x5608c11464c0 '__ssize_t' sugar
|   | |-Typedef 0x5608c1143000 '__ssize_t'
|   | `-BuiltinType 0x5608c10a48a0 'long'
|   |-PointerType 0x5608c10a4fa0 'void *'
|   | `-BuiltinType 0x5608c10a47e0 'void'
|   |-PointerType 0x5608c10a5240 'const char *'
|   | `-QualType 0x5608c10a4821 'const char' const
|   |   `-BuiltinType 0x5608c10a4820 'char'
|   `-TypedefType 0x5608c1170a10 'size_t' sugar
|     |-Typedef 0x5608c11560c8 'size_t'
|     `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c139fa60 <line:45:1, col:78> col:13 referenced cookie_seek_function_t 'int (void *, __off64_t *, int)'
| `-FunctionProtoType 0x5608c139f9e0 'int (void *, __off64_t *, int)' cdecl
|   |-BuiltinType 0x5608c10a4880 'int'
|   |-PointerType 0x5608c10a4fa0 'void *'
|   | `-BuiltinType 0x5608c10a47e0 'void'
|   |-PointerType 0x5608c139f880 '__off64_t *'
|   | `-TypedefType 0x5608c1143140 '__off64_t' sugar
|   |   |-Typedef 0x5608c10e7420 '__off64_t'
|   |   `-BuiltinType 0x5608c10a48a0 'long'
|   `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c139fb68 <line:48:1, col:52> col:13 referenced cookie_close_function_t 'int (void *)'
| `-FunctionProtoType 0x5608c13967d0 'int (void *)' cdecl
|   |-BuiltinType 0x5608c10a4880 'int'
|   `-PointerType 0x5608c10a4fa0 'void *'
|     `-BuiltinType 0x5608c10a47e0 'void'
|-RecordDecl 0x5608c139fbc0 <line:55:9, line:61:1> line:55:16 struct _IO_cookie_io_functions_t definition
| |-FieldDecl 0x5608c139fce8 <line:57:3, col:27> col:27 read 'cookie_read_function_t *'
| |-FieldDecl 0x5608c139fdc8 <line:58:3, col:28> col:28 write 'cookie_write_function_t *'
| |-FieldDecl 0x5608c139fea8 <line:59:3, col:27> col:27 seek 'cookie_seek_function_t *'
| `-FieldDecl 0x5608c139ff88 <line:60:3, col:28> col:28 close 'cookie_close_function_t *'
|-TypedefDecl 0x5608c13a0038 <line:55:1, line:61:3> col:3 referenced cookie_io_functions_t 'struct _IO_cookie_io_functions_t':'struct _IO_cookie_io_functions_t'
| `-ElaboratedType 0x5608c139ffe0 'struct _IO_cookie_io_functions_t' sugar
|   `-RecordType 0x5608c139fc40 'struct _IO_cookie_io_functions_t'
|     `-Record 0x5608c139fbc0 '_IO_cookie_io_functions_t'
|-TypedefDecl 0x5608c13a00e0 prev 0x5608c1397d60 </usr/include/stdio.h:52:1, col:24> col:24 referenced va_list '__gnuc_va_list':'struct __va_list_tag [1]'
| `-TypedefType 0x5608c13a00b0 '__gnuc_va_list' sugar
|   |-Typedef 0x5608c1397dc8 '__gnuc_va_list'
|   `-TypedefType 0x5608c1397d30 '__builtin_va_list' sugar
|     |-Typedef 0x5608c10e64b0 '__builtin_va_list'
|     `-ConstantArrayType 0x5608c10a56f0 'struct __va_list_tag [1]' 1 
|       `-RecordType 0x5608c10a5530 'struct __va_list_tag'
|         `-Record 0x5608c10a54a8 '__va_list_tag'
|-TypedefDecl 0x5608c13a1a00 <line:84:1, col:18> col:18 referenced fpos_t '__fpos_t':'struct _G_fpos_t'
| `-TypedefType 0x5608c13a0140 '__fpos_t' sugar
|   |-Typedef 0x5608c1398448 '__fpos_t'
|   `-ElaboratedType 0x5608c13983f0 'struct _G_fpos_t' sugar
|     `-RecordType 0x5608c13982f0 'struct _G_fpos_t'
|       `-Record 0x5608c1398268 '_G_fpos_t'
|-TypedefDecl 0x5608c13a1a90 <line:89:1, col:20> col:20 referenced fpos64_t '__fpos64_t':'struct _G_fpos64_t'
| `-TypedefType 0x5608c13a1a60 '__fpos64_t' sugar
|   |-Typedef 0x5608c1398678 '__fpos64_t'
|   `-ElaboratedType 0x5608c1398620 'struct _G_fpos64_t' sugar
|     `-RecordType 0x5608c1398540 'struct _G_fpos64_t'
|       `-Record 0x5608c13984b8 '_G_fpos64_t'
|-VarDecl 0x5608c13a1b48 <line:143:1, col:14> col:14 used stdin 'FILE *' extern
|-VarDecl 0x5608c13a1bc0 <line:144:1, col:14> col:14 used stdout 'FILE *' extern
|-VarDecl 0x5608c13a1c38 <line:145:1, col:14> col:14 used stderr 'FILE *' extern
|-FunctionDecl 0x5608c13a1d50 <line:152:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:152:12 remove 'int (const char *)' extern
| |-ParmVarDecl 0x5608c13a1cb8 <col:20, col:32> col:32 __filename 'const char *'
| `-NoThrowAttr 0x5608c13a1df8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a1f88 </usr/include/stdio.h:154:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:154:12 rename 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x5608c13a1e68 <col:20, col:32> col:32 __old 'const char *'
| |-ParmVarDecl 0x5608c13a1ee8 <col:39, col:51> col:51 __new 'const char *'
| `-NoThrowAttr 0x5608c13a2038 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a2320 </usr/include/stdio.h:158:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:158:12 renameat 'int (int, const char *, int, const char *)' extern
| |-ParmVarDecl 0x5608c13a20a8 <col:22, col:26> col:26 __oldfd 'int'
| |-ParmVarDecl 0x5608c13a2128 <col:35, col:47> col:47 __old 'const char *'
| |-ParmVarDecl 0x5608c13a21a8 <col:54, col:58> col:58 __newfd 'int'
| |-ParmVarDecl 0x5608c13a2228 <line:159:8, col:20> col:20 __new 'const char *'
| `-NoThrowAttr 0x5608c13a23e0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a2760 </usr/include/stdio.h:170:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:170:12 renameat2 'int (int, const char *, int, const char *, unsigned int)' extern
| |-ParmVarDecl 0x5608c13a2450 <col:23, col:27> col:27 __oldfd 'int'
| |-ParmVarDecl 0x5608c13a24d0 <col:36, col:48> col:48 __old 'const char *'
| |-ParmVarDecl 0x5608c13a2550 <col:55, col:59> col:59 __newfd 'int'
| |-ParmVarDecl 0x5608c13a25d0 <line:171:9, col:21> col:21 __new 'const char *'
| |-ParmVarDecl 0x5608c13a2650 <col:28, col:41> col:41 __flags 'unsigned int'
| `-NoThrowAttr 0x5608c13a2828 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a2990 </usr/include/stdio.h:178:1, col:34> col:12 fclose 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13a2890 <col:20, col:26> col:26 __stream 'FILE *'
|-FunctionDecl 0x5608c13a2b28 <line:188:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:188:14 tmpfile 'FILE *(void)' extern
| `-RestrictAttr 0x5608c13a2bc8 </usr/include/sys/cdefs.h:281:47> malloc
|-FunctionDecl 0x5608c13a2cb8 </usr/include/stdio.h:200:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:200:14 tmpfile64 'FILE *(void)' extern
| `-RestrictAttr 0x5608c13a2d58 </usr/include/sys/cdefs.h:281:47> malloc
|-FunctionDecl 0x5608c13a2f10 </usr/include/stdio.h:205:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:205:14 tmpnam 'char *(char *)' extern
| |-ParmVarDecl 0x5608c13a2e40 <col:22, col:35> col:26 'char *':'char *'
| `-NoThrowAttr 0x5608c13a2fb8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a3108 </usr/include/stdio.h:210:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:210:14 tmpnam_r 'char *(char *)' extern
| |-ParmVarDecl 0x5608c13a3070 <col:24, col:41> col:29 __s 'char *':'char *'
| `-NoThrowAttr 0x5608c13a31b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a3340 </usr/include/stdio.h:222:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:222:14 tempnam 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c13a3220 <col:23, col:35> col:35 __dir 'const char *'
| |-ParmVarDecl 0x5608c13a32a0 <col:42, col:54> col:54 __pfx 'const char *'
| |-NoThrowAttr 0x5608c13a33f0 </usr/include/sys/cdefs.h:79:35>
| `-RestrictAttr 0x5608c13a3448 <line:281:47> malloc
|-FunctionDecl 0x5608c13a3518 </usr/include/stdio.h:230:1, col:34> col:12 fflush 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13a3480 <col:20, col:26> col:26 __stream 'FILE *'
|-FunctionDecl 0x5608c13a3668 <line:239:1, col:43> col:12 fflush_unlocked 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13a35d0 <col:29, col:35> col:35 __stream 'FILE *'
|-FunctionDecl 0x5608c13a37b0 <line:249:1, col:27> col:12 fcloseall 'int (void)' extern
|-FunctionDecl 0x5608c13a7088 <line:258:14> col:14 implicit fopen 'FILE *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c13a7180 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c13a71e8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-BuiltinAttr 0x5608c13a7128 <<invalid sloc>> Implicit 814
|-FunctionDecl 0x5608c13a7260 prev 0x5608c13a7088 <col:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:258:14 fopen 'FILE *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c13a3868 <col:21, col:44> col:44 __filename 'const char *restrict'
| |-ParmVarDecl 0x5608c13a38e8 <line:259:7, col:30> col:30 __modes 'const char *restrict'
| |-BuiltinAttr 0x5608c13a7368 <<invalid sloc>> Inherited Implicit 814
| `-RestrictAttr 0x5608c13a7310 </usr/include/sys/cdefs.h:281:47> malloc
|-FunctionDecl 0x5608c13a75c8 </usr/include/stdio.h:265:1, line:267:34> line:265:14 freopen 'FILE *(const char *restrict, const char *restrict, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13a73a8 <col:23, col:46> col:46 __filename 'const char *restrict'
| |-ParmVarDecl 0x5608c13a7428 <line:266:9, col:32> col:32 __modes 'const char *restrict'
| `-ParmVarDecl 0x5608c13a74a0 <line:267:9, col:26> col:26 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13a77b0 <line:283:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:283:14 fopen64 'FILE *(const char *restrict, const char *restrict)' extern
| |-ParmVarDecl 0x5608c13a7698 <col:23, col:46> col:46 __filename 'const char *restrict'
| |-ParmVarDecl 0x5608c13a7718 <line:284:9, col:32> col:32 __modes 'const char *restrict'
| `-RestrictAttr 0x5608c13a7860 </usr/include/sys/cdefs.h:281:47> malloc
|-FunctionDecl 0x5608c13a7a68 </usr/include/stdio.h:286:1, line:288:29> line:286:14 freopen64 'FILE *(const char *restrict, const char *restrict, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13a78d0 <col:25, col:48> col:48 __filename 'const char *restrict'
| |-ParmVarDecl 0x5608c13a7950 <line:287:4, col:27> col:27 __modes 'const char *restrict'
| `-ParmVarDecl 0x5608c13a79c8 <line:288:4, col:21> col:21 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13a7cc8 <line:293:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:293:14 fdopen 'FILE *(int, const char *)' extern
| |-ParmVarDecl 0x5608c13a7b38 <col:22, col:26> col:26 __fd 'int'
| |-ParmVarDecl 0x5608c13a7bb8 <col:32, col:44> col:44 __modes 'const char *'
| |-NoThrowAttr 0x5608c13a7d78 </usr/include/sys/cdefs.h:79:35>
| `-RestrictAttr 0x5608c13a7dd0 <line:281:47> malloc
|-FunctionDecl 0x5608c13a8058 </usr/include/stdio.h:300:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:300:14 fopencookie 'FILE *(void *restrict, const char *restrict, cookie_io_functions_t)' extern
| |-ParmVarDecl 0x5608c13a7e10 <col:27, col:44> col:44 __magic_cookie 'void *restrict'
| |-ParmVarDecl 0x5608c13a7e90 <line:301:6, col:29> col:29 __modes 'const char *restrict'
| |-ParmVarDecl 0x5608c13a7f30 <line:302:6, col:28> col:28 __io_funcs 'cookie_io_functions_t':'struct _IO_cookie_io_functions_t'
| |-NoThrowAttr 0x5608c13a8110 </usr/include/sys/cdefs.h:79:35>
| `-RestrictAttr 0x5608c13a8168 <line:281:47> malloc
|-FunctionDecl 0x5608c13a83c8 </usr/include/stdio.h:308:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:308:14 fmemopen 'FILE *(void *, size_t, const char *)' extern
| |-ParmVarDecl 0x5608c13a81a8 <col:24, col:30> col:30 __s 'void *'
| |-ParmVarDecl 0x5608c13a8220 <col:35, col:42> col:42 __len 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13a82a0 <col:49, col:61> col:61 __modes 'const char *'
| |-NoThrowAttr 0x5608c13a8480 </usr/include/sys/cdefs.h:79:35>
| `-RestrictAttr 0x5608c13a84d8 <line:281:47> malloc
|-FunctionDecl 0x5608c13a86f8 </usr/include/stdio.h:314:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:314:14 open_memstream 'FILE *(char **, size_t *)' extern
| |-ParmVarDecl 0x5608c13a8518 <col:30, col:37> col:37 __bufloc 'char **'
| |-ParmVarDecl 0x5608c13a85e8 <col:47, col:55> col:55 __sizeloc 'size_t *'
| |-NoThrowAttr 0x5608c13a87a8 </usr/include/sys/cdefs.h:79:35>
| `-RestrictAttr 0x5608c13a8800 <line:281:47> malloc
|-FunctionDecl 0x5608c13a89c8 </usr/include/stdio.h:328:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:328:13 setbuf 'void (FILE *restrict, char *restrict)' extern
| |-ParmVarDecl 0x5608c13a8838 <col:21, col:38> col:38 __stream 'FILE *restrict'
| |-ParmVarDecl 0x5608c13a88b8 <col:48, col:65> col:65 __buf 'char *restrict'
| `-NoThrowAttr 0x5608c13a8a78 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a8da0 </usr/include/stdio.h:332:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:332:12 setvbuf 'int (FILE *restrict, char *restrict, int, size_t)' extern
| |-ParmVarDecl 0x5608c13a8ae0 <col:21, col:38> col:38 __stream 'FILE *restrict'
| |-ParmVarDecl 0x5608c13a8b60 <col:48, col:65> col:65 __buf 'char *restrict'
| |-ParmVarDecl 0x5608c13a8be0 <line:333:7, col:11> col:11 __modes 'int'
| |-ParmVarDecl 0x5608c13a8c58 <col:20, col:27> col:27 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x5608c13a8e60 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a9118 </usr/include/stdio.h:338:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:338:13 setbuffer 'void (FILE *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x5608c13a8ec8 <col:24, col:41> col:41 __stream 'FILE *restrict'
| |-ParmVarDecl 0x5608c13a8f48 <col:51, col:68> col:68 __buf 'char *restrict'
| |-ParmVarDecl 0x5608c13a8fc0 <line:339:10, col:17> col:17 __size 'size_t':'unsigned long'
| `-NoThrowAttr 0x5608c13a91d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a9328 </usr/include/stdio.h:342:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:342:13 setlinebuf 'void (FILE *)' extern
| |-ParmVarDecl 0x5608c13a9238 <col:25, col:31> col:31 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13a93d0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13a9620 </usr/include/stdio.h:350:12> col:12 implicit fprintf 'int (FILE *, const char *, ...)' extern
| |-ParmVarDecl 0x5608c13a9718 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x5608c13a9780 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x5608c13a96c0 <<invalid sloc>> Implicit 801
| `-FormatAttr 0x5608c13a97f8 <col:12> Implicit printf 2 3
|-FunctionDecl 0x5608c13a9830 prev 0x5608c13a9620 <col:1, line:351:43> line:350:12 fprintf 'int (FILE *, const char *, ...)' extern
| |-ParmVarDecl 0x5608c13a9438 <col:21, col:38> col:38 __stream 'FILE *restrict'
| |-ParmVarDecl 0x5608c13a94b8 <line:351:7, col:30> col:30 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13a9910 <<invalid sloc>> Inherited Implicit 801
| `-FormatAttr 0x5608c13a9938 <line:350:12> Inherited printf 2 3
|-FunctionDecl 0x5608c13a9a98 <line:356:12> col:12 implicit printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x5608c13a9b90 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x5608c13a9b38 <<invalid sloc>> Implicit 800
| `-FormatAttr 0x5608c13a9c00 <col:12> Implicit printf 1 2
|-FunctionDecl 0x5608c13a9c38 prev 0x5608c13a9a98 <col:1, col:56> col:12 printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x5608c13a9988 <col:20, col:43> col:43 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13a9d10 <<invalid sloc>> Inherited Implicit 800
| `-FormatAttr 0x5608c13a9d38 <col:12> Inherited printf 1 2
|-FunctionDecl 0x5608c13a9f28 <line:358:12> col:12 implicit sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x5608c13aa020 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c13aa088 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x5608c13a9fc8 <<invalid sloc>> Implicit 803
| `-FormatAttr 0x5608c13aa100 <col:12> Implicit printf 2 3
|-FunctionDecl 0x5608c13aa138 prev 0x5608c13a9f28 <col:1, /usr/include/sys/cdefs.h:80:49> /usr/include/stdio.h:358:12 sprintf 'int (char *, const char *, ...)' extern
| |-ParmVarDecl 0x5608c13a9d88 <col:21, col:38> col:38 __s 'char *restrict'
| |-ParmVarDecl 0x5608c13a9e08 <line:359:7, col:30> col:30 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13aa240 <<invalid sloc>> Inherited Implicit 803
| |-FormatAttr 0x5608c13aa268 <line:358:12> Inherited printf 2 3
| `-NoThrowAttr 0x5608c13aa1e8 </usr/include/sys/cdefs.h:80:37>
|-FunctionDecl 0x5608c13aa580 </usr/include/stdio.h:365:12> col:12 implicit used vfprintf 'int (FILE *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13aa678 <<invalid sloc>> <invalid sloc> 'FILE *'
| |-ParmVarDecl 0x5608c13aa6e0 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c13aa748 <<invalid sloc>> <invalid sloc> 'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13aa620 <<invalid sloc>> Implicit 805
| `-FormatAttr 0x5608c13aa7c8 <col:12> Implicit printf 2 0
|-FunctionDecl 0x5608c13aa800 prev 0x5608c13aa580 <col:1, line:366:28> line:365:12 used vfprintf 'int (FILE *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13aa2b0 <col:22, col:39> col:39 __s 'FILE *restrict'
| |-ParmVarDecl 0x5608c13aa330 <col:44, col:67> col:67 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13aa410 <line:366:8, col:23> col:23 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13aa8e8 <<invalid sloc>> Inherited Implicit 805
| `-FormatAttr 0x5608c13aa910 <line:365:12> Inherited printf 2 0
|-FunctionDecl 0x5608c13aaaf0 <line:371:12> col:12 implicit vprintf 'int (const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13aabe8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c13aac50 <<invalid sloc>> <invalid sloc> 'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13aab90 <<invalid sloc>> Implicit 804
| `-FormatAttr 0x5608c13aacc8 <col:12> Implicit printf 1 0
|-FunctionDecl 0x5608c13aad00 prev 0x5608c13aaaf0 <col:1, col:74> col:12 vprintf 'int (const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13aa960 <col:21, col:44> col:44 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13aa9d8 <col:54, col:69> col:69 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13aade0 <<invalid sloc>> Inherited Implicit 804
| `-FormatAttr 0x5608c13aae08 <col:12> Inherited printf 1 0
|-FunctionDecl 0x5608c13ab0b0 <line:373:12> col:12 implicit vsprintf 'int (char *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13ab1a8 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c13ab210 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c13ab278 <<invalid sloc>> <invalid sloc> 'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13ab150 <<invalid sloc>> Implicit 807
| `-FormatAttr 0x5608c13ab2f8 <col:12> Implicit printf 2 0
|-FunctionDecl 0x5608c13ab330 prev 0x5608c13ab0b0 <col:1, /usr/include/sys/cdefs.h:80:49> /usr/include/stdio.h:373:12 vsprintf 'int (char *, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13aae58 <col:22, col:39> col:39 __s 'char *restrict'
| |-ParmVarDecl 0x5608c13aaed8 <col:44, col:67> col:67 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13aaf50 <line:374:8, col:23> col:23 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13ab440 <<invalid sloc>> Inherited Implicit 807
| |-FormatAttr 0x5608c13ab468 <line:373:12> Inherited printf 2 0
| `-NoThrowAttr 0x5608c13ab3e8 </usr/include/sys/cdefs.h:80:37>
|-FunctionDecl 0x5608c13ab748 </usr/include/stdio.h:378:12> col:12 implicit snprintf 'int (char *, unsigned long, const char *, ...)' extern
| |-ParmVarDecl 0x5608c13ab840 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c13ab8a8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x5608c13ab910 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x5608c13ab7e8 <<invalid sloc>> Implicit 802
| `-FormatAttr 0x5608c13ab990 <col:12> Implicit printf 3 4
|-FunctionDecl 0x5608c13ab9c8 prev 0x5608c13ab748 <col:1, line:380:62> line:378:12 snprintf 'int (char *, unsigned long, const char *, ...)' extern
| |-ParmVarDecl 0x5608c13ab4b8 <col:22, col:39> col:39 __s 'char *restrict'
| |-ParmVarDecl 0x5608c13ab530 <col:44, col:51> col:51 __maxlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13ab5b0 <line:379:8, col:31> col:31 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13abb10 <<invalid sloc>> Inherited Implicit 802
| |-NoThrowAttr 0x5608c13aba80 </usr/include/sys/cdefs.h:80:37>
| `-FormatAttr 0x5608c13abad8 </usr/include/stdio.h:380:32, col:60> printf 3 4
|-FunctionDecl 0x5608c13abe60 <line:382:12> col:12 implicit vsnprintf 'int (char *, unsigned long, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13abf58 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x5608c13abfc0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x5608c13ac028 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x5608c13ac090 <<invalid sloc>> <invalid sloc> 'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13abf00 <<invalid sloc>> Implicit 806
| `-FormatAttr 0x5608c13ac118 <col:12> Implicit printf 3 0
|-FunctionDecl 0x5608c13ac150 prev 0x5608c13abe60 <col:1, line:384:62> line:382:12 vsnprintf 'int (char *, unsigned long, const char *, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13abb50 <col:23, col:40> col:40 __s 'char *restrict'
| |-ParmVarDecl 0x5608c13abbc8 <col:45, col:52> col:52 __maxlen 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13abc48 <line:383:9, col:32> col:32 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13abcc0 <col:42, col:57> col:57 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13ac2a0 <<invalid sloc>> Inherited Implicit 806
| |-NoThrowAttr 0x5608c13ac210 </usr/include/sys/cdefs.h:80:37>
| `-FormatAttr 0x5608c13ac268 </usr/include/stdio.h:384:32, col:60> printf 3 0
|-FunctionDecl 0x5608c13ac550 <line:390:1, line:392:62> line:390:12 vasprintf 'int (char **restrict, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13ac2e0 <col:23, col:41> col:41 __ptr 'char **restrict'
| |-ParmVarDecl 0x5608c13ac360 <col:48, col:71> col:71 __f 'const char *restrict'
| |-ParmVarDecl 0x5608c13ac3d8 <line:391:9, col:24> col:24 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-NoThrowAttr 0x5608c13ac608 </usr/include/sys/cdefs.h:80:37>
| `-FormatAttr 0x5608c13ac660 </usr/include/stdio.h:392:32, col:60> printf 2 0
|-FunctionDecl 0x5608c13ac8a8 <line:393:1, line:395:62> line:393:12 __asprintf 'int (char **restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13ac6b0 <col:24, col:42> col:42 __ptr 'char **restrict'
| |-ParmVarDecl 0x5608c13ac730 <line:394:10, col:33> col:33 __fmt 'const char *restrict'
| |-NoThrowAttr 0x5608c13ac958 </usr/include/sys/cdefs.h:80:37>
| `-FormatAttr 0x5608c13ac9b0 </usr/include/stdio.h:395:32, col:60> printf 2 3
|-FunctionDecl 0x5608c13acb70 <line:396:1, line:398:62> line:396:12 asprintf 'int (char **restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13aca00 <col:22, col:40> col:40 __ptr 'char **restrict'
| |-ParmVarDecl 0x5608c13aca80 <line:397:8, col:31> col:31 __fmt 'const char *restrict'
| |-NoThrowAttr 0x5608c13acc20 </usr/include/sys/cdefs.h:80:37>
| `-FormatAttr 0x5608c13acc78 </usr/include/stdio.h:398:32, col:60> printf 2 3
|-FunctionDecl 0x5608c13acf40 <line:403:1, line:405:52> line:403:12 vdprintf 'int (int, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13accc8 <col:22, col:26> col:26 __fd 'int'
| |-ParmVarDecl 0x5608c13acd48 <col:32, col:55> col:55 __fmt 'const char *restrict'
| |-ParmVarDecl 0x5608c13acdc0 <line:404:8, col:23> col:23 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5608c13acff8 <line:405:22, col:50> printf 2 0
|-FunctionDecl 0x5608c13af2b8 <line:406:1, line:407:52> line:406:12 dprintf 'int (int, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13af0c8 <col:21, col:25> col:25 __fd 'int'
| |-ParmVarDecl 0x5608c13af148 <col:31, col:54> col:54 __fmt 'const char *restrict'
| `-FormatAttr 0x5608c13af368 <line:407:22, col:50> printf 2 3
|-FunctionDecl 0x5608c13af500 <line:415:12> col:12 implicit fscanf 'int (FILE *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13af5f8 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x5608c13af660 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-BuiltinAttr 0x5608c13af5a0 <<invalid sloc>> Implicit 809
| `-FormatAttr 0x5608c13af6d8 <col:12> Implicit scanf 2 3
|-FunctionDecl 0x5608c13af710 prev 0x5608c13af500 <col:1, line:416:42> line:415:12 fscanf 'int (FILE *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13af3e0 <col:20, col:37> col:37 __stream 'FILE *restrict'
| |-ParmVarDecl 0x5608c13af460 <line:416:6, col:29> col:29 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13af7f0 <<invalid sloc>> Inherited Implicit 809
| `-FormatAttr 0x5608c13af818 <line:415:12> Inherited scanf 2 3
|-FunctionDecl 0x5608c13af900 <line:421:12> col:12 implicit scanf 'int (const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13af9f8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-BuiltinAttr 0x5608c13af9a0 <<invalid sloc>> Implicit 808
| `-FormatAttr 0x5608c13afa68 <col:12> Implicit scanf 1 2
|-FunctionDecl 0x5608c13afaa0 prev 0x5608c13af900 <col:1, col:55> col:12 scanf 'int (const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13af868 <col:19, col:42> col:42 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13afb78 <<invalid sloc>> Inherited Implicit 808
| `-FormatAttr 0x5608c13afba0 <col:12> Inherited scanf 1 2
|-FunctionDecl 0x5608c13afd98 <line:423:12> col:12 implicit sscanf 'int (const char *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13afe90 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x5608c13afef8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-BuiltinAttr 0x5608c13afe38 <<invalid sloc>> Implicit 810
| `-FormatAttr 0x5608c13aff70 <col:12> Implicit scanf 2 3
|-FunctionDecl 0x5608c13affa8 prev 0x5608c13afd98 <col:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:423:12 sscanf 'int (const char *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13afbf0 <col:20, col:43> col:43 __s 'const char *restrict'
| |-ParmVarDecl 0x5608c13afc70 <line:424:6, col:29> col:29 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13b00b0 <<invalid sloc>> Inherited Implicit 810
| |-FormatAttr 0x5608c13b00d8 <line:423:12> Inherited scanf 2 3
| `-NoThrowAttr 0x5608c13b0058 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b02b0 prev 0x5608c13af710 </usr/include/stdio.h:434:1, /usr/include/sys/cdefs.h:247:79> /usr/include/stdio.h:434:24 fscanf 'int (FILE *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13b0120 <col:33, col:50> col:50 __stream 'FILE *restrict'
| |-ParmVarDecl 0x5608c13b01a0 <line:435:5, col:28> col:28 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13b03d8 <<invalid sloc>> Inherited Implicit 809
| |-FormatAttr 0x5608c13b0400 <line:415:12> Inherited scanf 2 3
| `-AsmLabelAttr 0x5608c13b0350 <<scratch space>:118:1> "__isoc99_fscanf" IsLiteralLabel
|-FunctionDecl 0x5608c13b0558 prev 0x5608c13afaa0 </usr/include/stdio.h:437:1, /usr/include/sys/cdefs.h:247:79> /usr/include/stdio.h:437:24 scanf 'int (const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13b0450 <col:32, col:55> col:55 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13b0678 <<invalid sloc>> Inherited Implicit 808
| |-FormatAttr 0x5608c13b06a0 <line:421:12> Inherited scanf 1 2
| `-AsmLabelAttr 0x5608c13b05f8 <<scratch space>:120:1> "__isoc99_scanf" IsLiteralLabel
|-FunctionDecl 0x5608c13b0840 prev 0x5608c13affa8 </usr/include/stdio.h:439:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:439:28 sscanf 'int (const char *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13b06f0 <col:37, col:60> col:60 __s 'const char *restrict'
| |-ParmVarDecl 0x5608c13b0770 <line:440:9, col:32> col:32 __format 'const char *restrict'
| |-BuiltinAttr 0x5608c13b0990 <<invalid sloc>> Inherited Implicit 810
| |-FormatAttr 0x5608c13b09b8 <line:423:12> Inherited scanf 2 3
| |-AsmLabelAttr 0x5608c13b08e0 <<scratch space>:122:1> "__isoc99_sscanf" IsLiteralLabel
| `-NoThrowAttr 0x5608c13b0968 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b0c30 </usr/include/stdio.h:459:12> col:12 implicit vfscanf 'int (FILE *restrict, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b0d28 <<invalid sloc>> <invalid sloc> 'FILE *restrict'
| |-ParmVarDecl 0x5608c13b0d90 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x5608c13b0df8 <<invalid sloc>> <invalid sloc> 'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b0cd0 <<invalid sloc>> Implicit 812
| `-FormatAttr 0x5608c13b0e78 <col:12> Implicit scanf 2 0
|-FunctionDecl 0x5608c13b0eb0 prev 0x5608c13b0c30 <col:1, line:461:51> line:459:12 vfscanf 'int (FILE *restrict, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b0a00 <col:21, col:38> col:38 __s 'FILE *restrict'
| |-ParmVarDecl 0x5608c13b0a80 <col:43, col:66> col:66 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13b0af8 <line:460:7, col:22> col:22 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b0fd0 <<invalid sloc>> Inherited Implicit 812
| `-FormatAttr 0x5608c13b0f68 <line:461:22, col:49> scanf 2 0
|-FunctionDecl 0x5608c13b11e8 <line:467:12> col:12 implicit vscanf 'int (const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b12e0 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x5608c13b1348 <<invalid sloc>> <invalid sloc> 'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b1288 <<invalid sloc>> Implicit 811
| `-FormatAttr 0x5608c13b13c0 <col:12> Implicit scanf 1 0
|-FunctionDecl 0x5608c13b13f8 prev 0x5608c13b11e8 <col:1, line:468:51> line:467:12 vscanf 'int (const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b1010 <col:20, col:43> col:43 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13b10c0 <col:53, col:68> col:68 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b1510 <<invalid sloc>> Inherited Implicit 811
| `-FormatAttr 0x5608c13b14a8 <line:468:22, col:49> scanf 1 0
|-FunctionDecl 0x5608c13b1800 <line:471:12> col:12 implicit vsscanf 'int (const char *restrict, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b18f8 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x5608c13b1960 <<invalid sloc>> <invalid sloc> 'const char *restrict'
| |-ParmVarDecl 0x5608c13b19c8 <<invalid sloc>> <invalid sloc> 'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b18a0 <<invalid sloc>> Implicit 813
| `-FormatAttr 0x5608c13b1a48 <col:12> Implicit scanf 2 0
|-FunctionDecl 0x5608c13b1a80 prev 0x5608c13b1800 <col:1, line:473:59> line:471:12 vsscanf 'int (const char *restrict, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b1550 <col:21, col:44> col:44 __s 'const char *restrict'
| |-ParmVarDecl 0x5608c13b15d0 <line:472:7, col:30> col:30 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13b1648 <col:40, col:55> col:55 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b1bc8 <<invalid sloc>> Inherited Implicit 813
| |-NoThrowAttr 0x5608c13b1b38 </usr/include/sys/cdefs.h:79:35>
| `-FormatAttr 0x5608c13b1b90 </usr/include/stdio.h:473:30, col:57> scanf 2 0
|-FunctionDecl 0x5608c13b1e58 prev 0x5608c13b0eb0 <line:479:1, line:483:51> line:479:24 vfscanf 'int (FILE *restrict, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b1c00 <line:480:11, col:28> col:28 __s 'FILE *restrict'
| |-ParmVarDecl 0x5608c13b1c80 <line:481:4, col:27> col:27 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13b1cf8 <col:37, col:52> col:52 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b1fc0 <<invalid sloc>> Inherited Implicit 812
| |-AsmLabelAttr 0x5608c13b1ef8 <<scratch space>:125:1> "__isoc99_vfscanf" IsLiteralLabel
| `-FormatAttr 0x5608c13b1f88 </usr/include/stdio.h:483:22, col:49> scanf 2 0
|-FunctionDecl 0x5608c13b2198 prev 0x5608c13b13f8 <line:484:1, line:486:51> line:484:24 vscanf 'int (const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b2000 <col:33, col:56> col:56 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13b2078 <line:485:5, col:20> col:20 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b22f8 <<invalid sloc>> Inherited Implicit 811
| |-AsmLabelAttr 0x5608c13b2238 <<scratch space>:127:1> "__isoc99_vscanf" IsLiteralLabel
| `-FormatAttr 0x5608c13b22c0 </usr/include/stdio.h:486:22, col:49> scanf 1 0
|-FunctionDecl 0x5608c13b2558 prev 0x5608c13b1a80 <line:487:1, line:491:51> line:487:28 vsscanf 'int (const char *restrict, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13b2338 <line:488:8, col:31> col:31 __s 'const char *restrict'
| |-ParmVarDecl 0x5608c13b23b8 <line:489:8, col:31> col:31 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13b2430 <line:490:8, col:23> col:23 __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13b26e8 <<invalid sloc>> Inherited Implicit 813
| |-AsmLabelAttr 0x5608c13b25f8 <<scratch space>:129:1> "__isoc99_vsscanf" IsLiteralLabel
| |-NoThrowAttr 0x5608c13b2688 </usr/include/sys/cdefs.h:79:35>
| `-FormatAttr 0x5608c13b26b0 </usr/include/stdio.h:491:22, col:49> scanf 2 0
|-FunctionDecl 0x5608c13b27b8 <line:513:1, col:33> col:12 fgetc 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13b2720 <col:19, col:25> col:25 __stream 'FILE *'
|-FunctionDecl 0x5608c13b2908 <line:514:1, col:32> col:12 used getc 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13b2870 <col:18, col:24> col:24 __stream 'FILE *'
|-FunctionDecl 0x5608c13b2a50 <line:520:1, col:25> col:12 getchar 'int (void)' extern
|-FunctionDecl 0x5608c13b2b98 <line:527:1, col:41> col:12 getc_unlocked 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13b2b00 <col:27, col:33> col:33 __stream 'FILE *'
|-FunctionDecl 0x5608c13b2ce0 <line:528:1, col:34> col:12 getchar_unlocked 'int (void)' extern
|-FunctionDecl 0x5608c13b2e28 <line:538:1, col:42> col:12 fgetc_unlocked 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13b2d90 <col:28, col:34> col:34 __stream 'FILE *'
|-FunctionDecl 0x5608c13b30d0 <line:549:1, col:42> col:12 fputc 'int (int, FILE *)' extern
| |-ParmVarDecl 0x5608c13b2ee8 <col:19, col:23> col:23 __c 'int'
| `-ParmVarDecl 0x5608c13b2f60 <col:28, col:34> col:34 __stream 'FILE *'
|-FunctionDecl 0x5608c13b32b0 <line:550:1, col:41> col:12 used putc 'int (int, FILE *)' extern
| |-ParmVarDecl 0x5608c13b3198 <col:18, col:22> col:22 __c 'int'
| `-ParmVarDecl 0x5608c13b3210 <col:27, col:33> col:33 __stream 'FILE *'
|-FunctionDecl 0x5608c13b3410 <line:556:1, col:28> col:12 putchar 'int (int)' extern
| `-ParmVarDecl 0x5608c13b3378 <col:21, col:25> col:25 __c 'int'
|-FunctionDecl 0x5608c13b35e8 <line:565:1, col:51> col:12 fputc_unlocked 'int (int, FILE *)' extern
| |-ParmVarDecl 0x5608c13b34d0 <col:28, col:32> col:32 __c 'int'
| `-ParmVarDecl 0x5608c13b3548 <col:37, col:43> col:43 __stream 'FILE *'
|-FunctionDecl 0x5608c13b37c8 <line:573:1, col:50> col:12 putc_unlocked 'int (int, FILE *)' extern
| |-ParmVarDecl 0x5608c13b36b0 <col:27, col:31> col:31 __c 'int'
| `-ParmVarDecl 0x5608c13b3728 <col:36, col:42> col:42 __stream 'FILE *'
|-FunctionDecl 0x5608c13b3928 <line:574:1, col:37> col:12 putchar_unlocked 'int (int)' extern
| `-ParmVarDecl 0x5608c13b3890 <col:30, col:34> col:34 __c 'int'
|-FunctionDecl 0x5608c13b3a78 <line:581:1, col:32> col:12 getw 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13b39e0 <col:18, col:24> col:24 __stream 'FILE *'
|-FunctionDecl 0x5608c13b3c50 <line:584:1, col:41> col:12 putw 'int (int, FILE *)' extern
| |-ParmVarDecl 0x5608c13b3b38 <col:18, col:22> col:22 __w 'int'
| `-ParmVarDecl 0x5608c13b3bb0 <col:27, col:33> col:33 __stream 'FILE *'
|-FunctionDecl 0x5608c13b3f40 <line:592:1, col:77> col:14 fgets 'char *(char *restrict, int, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b3d18 <col:21, col:38> col:38 __s 'char *restrict'
| |-ParmVarDecl 0x5608c13b3d98 <col:43, col:47> col:47 __n 'int'
| `-ParmVarDecl 0x5608c13b3e10 <col:52, col:69> col:69 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b41b0 <line:615:1, line:616:34> line:615:14 fgets_unlocked 'char *(char *restrict, int, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b4010 <col:30, col:47> col:47 __s 'char *restrict'
| |-ParmVarDecl 0x5608c13b4090 <col:52, col:56> col:56 __n 'int'
| `-ParmVarDecl 0x5608c13b4108 <line:616:9, col:26> col:26 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b4538 <line:632:1, line:634:55> line:632:18 used __getdelim '__ssize_t (char **restrict, size_t *restrict, int, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b4280 <col:30, col:48> col:48 __lineptr 'char **restrict'
| |-ParmVarDecl 0x5608c13b42f8 <line:633:30, col:49> col:49 __n 'size_t *restrict'
| |-ParmVarDecl 0x5608c13b4378 <col:54, col:58> col:58 __delimiter 'int'
| `-ParmVarDecl 0x5608c13b43f0 <line:634:30, col:47> col:47 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b4828 <line:635:1, line:637:53> line:635:18 getdelim '__ssize_t (char **restrict, size_t *restrict, int, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b4610 <col:28, col:46> col:46 __lineptr 'char **restrict'
| |-ParmVarDecl 0x5608c13b4688 <line:636:28, col:47> col:47 __n 'size_t *restrict'
| |-ParmVarDecl 0x5608c13b4708 <col:52, col:56> col:56 __delimiter 'int'
| `-ParmVarDecl 0x5608c13b4780 <line:637:28, col:45> col:45 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b4b18 <line:645:1, line:647:52> line:645:18 getline '__ssize_t (char **restrict, size_t *restrict, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b4900 <col:27, col:45> col:45 __lineptr 'char **restrict'
| |-ParmVarDecl 0x5608c13b4978 <line:646:27, col:46> col:46 __n 'size_t *restrict'
| `-ParmVarDecl 0x5608c13b49f0 <line:647:27, col:44> col:44 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b4d80 <line:655:1, col:72> col:12 fputs 'int (const char *restrict, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b4be8 <col:19, col:42> col:42 __s 'const char *restrict'
| `-ParmVarDecl 0x5608c13b4c60 <col:47, col:64> col:64 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b4ee0 <line:661:1, col:33> col:12 puts 'int (const char *)' extern
| `-ParmVarDecl 0x5608c13b4e48 <col:18, col:30> col:30 __s 'const char *'
|-FunctionDecl 0x5608c13b60f0 <line:668:1, col:43> col:12 ungetc 'int (int, FILE *)' extern
| |-ParmVarDecl 0x5608c13b4fa0 <col:20, col:24> col:24 __c 'int'
| `-ParmVarDecl 0x5608c13b5018 <col:29, col:35> col:35 __stream 'FILE *'
|-FunctionDecl 0x5608c13b64b8 <line:675:15> col:15 implicit fread 'unsigned long (void *, unsigned long, unsigned long, FILE *)' extern
| |-ParmVarDecl 0x5608c13b65b0 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x5608c13b6618 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x5608c13b6680 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x5608c13b66e8 <<invalid sloc>> <invalid sloc> 'FILE *'
| `-BuiltinAttr 0x5608c13b6558 <<invalid sloc>> Implicit 815
|-FunctionDecl 0x5608c13b6770 prev 0x5608c13b64b8 <col:1, line:676:45> line:675:15 fread 'unsigned long (void *, unsigned long, unsigned long, FILE *)' extern
| |-ParmVarDecl 0x5608c13b61b8 <col:22, col:39> col:39 __ptr 'void *restrict'
| |-ParmVarDecl 0x5608c13b6230 <col:46, col:53> col:53 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13b62a8 <line:676:8, col:15> col:15 __n 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13b6320 <col:20, col:37> col:37 __stream 'FILE *restrict'
| `-BuiltinAttr 0x5608c13b6860 <<invalid sloc>> Inherited Implicit 815
|-FunctionDecl 0x5608c13b6b98 <line:681:15> col:15 implicit fwrite 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' extern
| |-ParmVarDecl 0x5608c13b6c90 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x5608c13b6cf8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x5608c13b6d60 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-ParmVarDecl 0x5608c13b6dc8 <<invalid sloc>> <invalid sloc> 'FILE *'
| `-BuiltinAttr 0x5608c13b6c38 <<invalid sloc>> Implicit 816
|-FunctionDecl 0x5608c13b6e50 prev 0x5608c13b6b98 <col:1, line:682:41> line:681:15 fwrite 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' extern
| |-ParmVarDecl 0x5608c13b68a0 <col:23, col:46> col:46 __ptr 'const void *restrict'
| |-ParmVarDecl 0x5608c13b6918 <col:53, col:60> col:60 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13b6990 <line:682:9, col:16> col:16 __n 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13b6a08 <col:21, col:38> col:38 __s 'FILE *restrict'
| `-BuiltinAttr 0x5608c13b6f40 <<invalid sloc>> Inherited Implicit 816
|-FunctionDecl 0x5608c13b7098 <line:691:1, line:692:32> line:691:12 fputs_unlocked 'int (const char *restrict, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b6f80 <col:28, col:51> col:51 __s 'const char *restrict'
| `-ParmVarDecl 0x5608c13b6ff8 <line:692:7, col:24> col:24 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b7370 <line:702:1, line:703:47> line:702:15 fread_unlocked 'size_t (void *restrict, size_t, size_t, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b7160 <col:31, col:48> col:48 __ptr 'void *restrict'
| |-ParmVarDecl 0x5608c13b71d8 <col:55, col:62> col:62 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13b7250 <line:703:10, col:17> col:17 __n 'size_t':'unsigned long'
| `-ParmVarDecl 0x5608c13b72c8 <col:22, col:39> col:39 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b7658 <line:704:1, line:705:48> line:704:15 fwrite_unlocked 'size_t (const void *restrict, size_t, size_t, FILE *restrict)' extern
| |-ParmVarDecl 0x5608c13b7448 <col:32, col:55> col:55 __ptr 'const void *restrict'
| |-ParmVarDecl 0x5608c13b74c0 <col:62, col:69> col:69 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x5608c13b7538 <line:705:11, col:18> col:18 __n 'size_t':'unsigned long'
| `-ParmVarDecl 0x5608c13b75b0 <col:23, col:40> col:40 __stream 'FILE *restrict'
|-FunctionDecl 0x5608c13b7950 <line:713:1, col:63> col:12 fseek 'int (FILE *, long, int)' extern
| |-ParmVarDecl 0x5608c13b7728 <col:19, col:25> col:25 __stream 'FILE *'
| |-ParmVarDecl 0x5608c13b77a8 <col:35, col:44> col:44 __off 'long'
| `-ParmVarDecl 0x5608c13b7828 <col:51, col:55> col:55 __whence 'int'
|-FunctionDecl 0x5608c13b7b10 <line:718:1, col:38> col:17 ftell 'long (FILE *)' extern
| `-ParmVarDecl 0x5608c13b7a18 <col:24, col:30> col:30 __stream 'FILE *'
|-FunctionDecl 0x5608c13b7c58 <line:723:1, col:35> col:13 rewind 'void (FILE *)' extern
| `-ParmVarDecl 0x5608c13b7bc8 <col:21, col:27> col:27 __stream 'FILE *'
|-FunctionDecl 0x5608c13b7ef0 <line:736:1, col:63> col:12 fseeko 'int (FILE *, __off_t, int)' extern
| |-ParmVarDecl 0x5608c13b7d10 <col:20, col:26> col:26 __stream 'FILE *'
| |-ParmVarDecl 0x5608c13b7d88 <col:36, col:44> col:44 __off '__off_t':'long'
| `-ParmVarDecl 0x5608c13b7e08 <col:51, col:55> col:55 __whence 'int'
|-FunctionDecl 0x5608c13b8100 <line:741:1, col:38> col:16 ftello '__off_t (FILE *)' extern
| `-ParmVarDecl 0x5608c13b7fb8 <col:24, col:30> col:30 __stream 'FILE *'
|-FunctionDecl 0x5608c13b83c0 <line:760:1, col:72> col:12 fgetpos 'int (FILE *restrict, fpos_t *restrict)' extern
| |-ParmVarDecl 0x5608c13b81b8 <col:21, col:38> col:38 __stream 'FILE *restrict'
| `-ParmVarDecl 0x5608c13b82a8 <col:48, col:67> col:67 __pos 'fpos_t *restrict'
|-FunctionDecl 0x5608c13b8670 <line:765:1, col:56> col:12 fsetpos 'int (FILE *, const fpos_t *)' extern
| |-ParmVarDecl 0x5608c13b8480 <col:21, col:27> col:27 __stream 'FILE *'
| `-ParmVarDecl 0x5608c13b8558 <col:37, col:51> col:51 __pos 'const fpos_t *'
|-FunctionDecl 0x5608c13b8910 <line:779:1, col:67> col:12 fseeko64 'int (FILE *, __off64_t, int)' extern
| |-ParmVarDecl 0x5608c13b8730 <col:22, col:28> col:28 __stream 'FILE *'
| |-ParmVarDecl 0x5608c13b87a8 <col:38, col:48> col:48 __off '__off64_t':'long'
| `-ParmVarDecl 0x5608c13b8828 <col:55, col:59> col:59 __whence 'int'
|-FunctionDecl 0x5608c13b8a98 <line:780:1, col:42> col:18 ftello64 '__off64_t (FILE *)' extern
| `-ParmVarDecl 0x5608c13b89d8 <col:28, col:34> col:34 __stream 'FILE *'
|-FunctionDecl 0x5608c13b8d60 <line:781:1, col:76> col:12 fgetpos64 'int (FILE *restrict, fpos64_t *restrict)' extern
| |-ParmVarDecl 0x5608c13b8b50 <col:23, col:40> col:40 __stream 'FILE *restrict'
| `-ParmVarDecl 0x5608c13b8c48 <col:50, col:71> col:71 __pos 'fpos64_t *restrict'
|-FunctionDecl 0x5608c13b9010 <line:782:1, col:60> col:12 fsetpos64 'int (FILE *, const fpos64_t *)' extern
| |-ParmVarDecl 0x5608c13b8e20 <col:23, col:29> col:29 __stream 'FILE *'
| `-ParmVarDecl 0x5608c13b8ef8 <col:39, col:55> col:55 __pos 'const fpos64_t *'
|-FunctionDecl 0x5608c13b9160 <line:786:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:786:13 clearerr 'void (FILE *)' extern
| |-ParmVarDecl 0x5608c13b90d0 <col:23, col:29> col:29 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13b9208 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b9308 </usr/include/stdio.h:788:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:788:12 feof 'int (FILE *)' extern
| |-ParmVarDecl 0x5608c13b9270 <col:18, col:24> col:24 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13b93b0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b94b0 </usr/include/stdio.h:790:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:790:12 ferror 'int (FILE *)' extern
| |-ParmVarDecl 0x5608c13b9418 <col:20, col:26> col:26 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13b9558 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b9650 </usr/include/stdio.h:794:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:794:13 clearerr_unlocked 'void (FILE *)' extern
| |-ParmVarDecl 0x5608c13b95c0 <col:32, col:38> col:38 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13b96f8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b97f8 </usr/include/stdio.h:795:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:795:12 feof_unlocked 'int (FILE *)' extern
| |-ParmVarDecl 0x5608c13b9760 <col:27, col:33> col:33 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13b98a0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b99a0 </usr/include/stdio.h:796:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:796:12 ferror_unlocked 'int (FILE *)' extern
| |-ParmVarDecl 0x5608c13b9908 <col:29, col:35> col:35 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13b9a48 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b9b48 </usr/include/stdio.h:804:1, col:36> col:13 perror 'void (const char *)' extern
| `-ParmVarDecl 0x5608c13b9ab8 <col:21, col:33> col:33 __s 'const char *'
|-FunctionDecl 0x5608c13b9c98 <line:809:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:809:12 fileno 'int (FILE *)' extern
| |-ParmVarDecl 0x5608c13b9c00 <col:20, col:26> col:26 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13b9d40 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b9e40 </usr/include/stdio.h:814:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:814:12 fileno_unlocked 'int (FILE *)' extern
| |-ParmVarDecl 0x5608c13b9da8 <col:29, col:35> col:35 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13b9ee8 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13b9fe8 </usr/include/stdio.h:823:1, col:34> col:12 pclose 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13b9f50 <col:20, col:26> col:26 __stream 'FILE *'
|-FunctionDecl 0x5608c13ba228 <line:829:1, /usr/include/sys/cdefs.h:281:58> /usr/include/stdio.h:829:14 popen 'FILE *(const char *, const char *)' extern
| |-ParmVarDecl 0x5608c13ba110 <col:21, col:33> col:33 __command 'const char *'
| |-ParmVarDecl 0x5608c13ba190 <col:44, col:56> col:56 __modes 'const char *'
| `-RestrictAttr 0x5608c13ba2d8 </usr/include/sys/cdefs.h:281:47> malloc
|-FunctionDecl 0x5608c13ba3e0 </usr/include/stdio.h:837:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:837:14 ctermid 'char *(char *)' extern
| |-ParmVarDecl 0x5608c13ba348 <col:23, col:29> col:29 __s 'char *'
| `-NoThrowAttr 0x5608c13ba488 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13ba590 </usr/include/stdio.h:844:1, col:32> col:14 cuserid 'char *(char *)' extern
| `-ParmVarDecl 0x5608c13ba4f8 <col:23, col:29> col:29 __s 'char *'
|-RecordDecl 0x5608c13ba638 <line:850:1, col:8> col:8 struct obstack
|-FunctionDecl 0x5608c13ba988 <line:853:1, line:855:62> line:853:12 obstack_printf 'int (struct obstack *restrict, const char *restrict, ...)' extern
| |-ParmVarDecl 0x5608c13ba790 <col:28, col:55> col:55 __obstack 'struct obstack *restrict'
| |-ParmVarDecl 0x5608c13ba810 <line:854:7, col:30> col:30 __format 'const char *restrict'
| |-NoThrowAttr 0x5608c13baa38 </usr/include/sys/cdefs.h:80:37>
| `-FormatAttr 0x5608c13baa90 </usr/include/stdio.h:855:32, col:60> printf 2 3
|-FunctionDecl 0x5608c13bad60 <line:856:1, line:859:62> line:856:12 obstack_vprintf 'int (struct obstack *restrict, const char *restrict, struct __va_list_tag *)' extern
| |-ParmVarDecl 0x5608c13baaf0 <col:29, col:56> col:56 __obstack 'struct obstack *restrict'
| |-ParmVarDecl 0x5608c13bab70 <line:857:8, col:31> col:31 __format 'const char *restrict'
| |-ParmVarDecl 0x5608c13babe8 <line:858:8, col:23> col:23 __args 'struct __va_list_tag *':'struct __va_list_tag *'
| |-NoThrowAttr 0x5608c13bae18 </usr/include/sys/cdefs.h:80:37>
| `-FormatAttr 0x5608c13bae70 </usr/include/stdio.h:859:32, col:60> printf 2 0
|-FunctionDecl 0x5608c13baf48 <line:867:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:867:13 flockfile 'void (FILE *)' extern
| |-ParmVarDecl 0x5608c13baeb8 <col:24, col:30> col:30 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13baff0 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13bb0f0 </usr/include/stdio.h:871:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:871:12 ftrylockfile 'int (FILE *)' extern
| |-ParmVarDecl 0x5608c13bb058 <col:26, col:32> col:32 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13bb198 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13bb290 </usr/include/stdio.h:874:1, /usr/include/sys/cdefs.h:79:54> /usr/include/stdio.h:874:13 funlockfile 'void (FILE *)' extern
| |-ParmVarDecl 0x5608c13bb200 <col:26, col:32> col:32 __stream 'FILE *'
| `-NoThrowAttr 0x5608c13bb338 </usr/include/sys/cdefs.h:79:35>
|-FunctionDecl 0x5608c13bb438 </usr/include/stdio.h:885:1, col:27> col:12 used __uflow 'int (FILE *)' extern
| `-ParmVarDecl 0x5608c13bb3a0 <col:21, col:26> col:27 'FILE *'
|-FunctionDecl 0x5608c13bb690 <line:886:1, col:35> col:12 used __overflow 'int (FILE *, int)' extern
| |-ParmVarDecl 0x5608c13bb4f0 <col:24, col:29> col:30 'FILE *'
| `-ParmVarDecl 0x5608c13bb570 <col:32> col:35 'int'
|-FunctionDecl 0x5608c13bb870 prev 0x5608c13aad00 </usr/include/sys/cdefs.h:451:27, /usr/include/bits/stdio.h:42:1> line:39:1 vprintf 'int (const char *, struct __va_list_tag *)' extern inline
| |-ParmVarDecl 0x5608c13bb758 <col:10, col:33> col:33 used __fmt 'const char *restrict'
| |-ParmVarDecl 0x5608c13bb7d0 <col:40, col:55> col:55 used __arg 'struct __va_list_tag *':'struct __va_list_tag *'
| |-CompoundStmt 0x5608c13bbd48 <line:40:1, line:42:1>
| | `-ReturnStmt 0x5608c13bbd38 <line:41:3, col:40>
| |   `-CallExpr 0x5608c13bbb10 <col:10, col:40> 'int'
| |     |-ImplicitCastExpr 0x5608c13bbaf8 <col:10> 'int (*)(FILE *, const char *, struct __va_list_tag *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5608c13bb9d8 <col:10> 'int (FILE *, const char *, struct __va_list_tag *)' Function 0x5608c13aa800 'vfprintf' 'int (FILE *, const char *, struct __va_list_tag *)'
| |     |-ImplicitCastExpr 0x5608c13bbb48 </usr/include/stdio.h:148:16> 'FILE *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5608c13bb9f8 <col:16> 'FILE *' lvalue Var 0x5608c13a1bc0 'stdout' 'FILE *'
| |     |-ImplicitCastExpr 0x5608c13bbb60 </usr/include/bits/stdio.h:41:28> 'const char *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5608c13bba18 <col:28> 'const char *restrict' lvalue ParmVar 0x5608c13bb758 '__fmt' 'const char *restrict'
| |     `-ImplicitCastExpr 0x5608c13bbb78 <col:35> 'struct __va_list_tag *':'struct __va_list_tag *' <LValueToRValue>
| |       `-DeclRefExpr 0x5608c13bba38 <col:35> 'struct __va_list_tag *':'struct __va_list_tag *' lvalue ParmVar 0x5608c13bb7d0 '__arg' 'struct __va_list_tag *':'struct __va_list_tag *'
| |-BuiltinAttr 0x5608c13bb978 <<invalid sloc>> Inherited Implicit 804
| |-FormatAttr 0x5608c13bb9a0 </usr/include/stdio.h:371:12> Inherited printf 1 0
| `-GNUInlineAttr 0x5608c13bb920 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13bbe00 prev 0x5608c13b2a50 <col:27, /usr/include/bits/stdio.h:50:1> line:47:1 getchar 'int (void)' extern inline
| |-CompoundStmt 0x5608c13bc000 <line:48:1, line:50:1>
| | `-ReturnStmt 0x5608c13bbff0 <line:49:3, col:21>
| |   `-CallExpr 0x5608c13bbfb0 <col:10, col:21> 'int'
| |     |-ImplicitCastExpr 0x5608c13bbf98 <col:10> 'int (*)(FILE *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5608c13bbef8 <col:10> 'int (FILE *)' Function 0x5608c13b2908 'getc' 'int (FILE *)'
| |     `-ImplicitCastExpr 0x5608c13bbfd8 </usr/include/stdio.h:147:15> 'FILE *' <LValueToRValue>
| |       `-DeclRefExpr 0x5608c13bbf18 <col:15> 'FILE *' lvalue Var 0x5608c13a1b48 'stdin' 'FILE *'
| `-GNUInlineAttr 0x5608c13bbea0 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13bd750 prev 0x5608c13b2e28 <col:27, /usr/include/bits/stdio.h:59:1> line:56:1 fgetc_unlocked 'int (FILE *)' extern inline
| |-ParmVarDecl 0x5608c13bc028 <col:17, col:23> col:23 used __fp 'FILE *'
| |-CompoundStmt 0x5608c13bdf50 <line:57:1, line:59:1>
| | `-ReturnStmt 0x5608c13bdf40 <line:58:3, /usr/include/bits/types/struct_FILE.h:104:62>
| |   `-ParenExpr 0x5608c13bdf20 <line:103:3, line:104:62> 'int'
| |     `-ConditionalOperator 0x5608c13bdef0 </usr/include/sys/cdefs.h:510:33, /usr/include/bits/types/struct_FILE.h:104:60> 'int'
| |       |-CallExpr 0x5608c13bdcb0 </usr/include/sys/cdefs.h:510:33, col:60> 'long'
| |       | |-ImplicitCastExpr 0x5608c13bdc98 <col:33> 'long (*)(long, long)' <BuiltinFnToFnPtr>
| |       | | `-DeclRefExpr 0x5608c13bdab0 <col:33> '<builtin fn type>' Function 0x5608c13bd888 '__builtin_expect' 'long (long, long)'
| |       | |-ImplicitCastExpr 0x5608c13bdce0 <col:51, col:56> 'long' <IntegralCast>
| |       | | `-ParenExpr 0x5608c13bdc30 <col:51, col:56> 'int'
| |       | |   `-BinaryOperator 0x5608c13bdc10 </usr/include/bits/types/struct_FILE.h:103:22, col:52> 'int' '>='
| |       | |     |-ImplicitCastExpr 0x5608c13bdbe0 <col:22, col:29> 'char *' <LValueToRValue>
| |       | |     | `-MemberExpr 0x5608c13bdb28 <col:22, col:29> 'char *' lvalue ->_IO_read_ptr 0x5608c139e2b0
| |       | |     |   `-ImplicitCastExpr 0x5608c13bdb10 <col:22, col:26> 'FILE *' <LValueToRValue>
| |       | |     |     `-ParenExpr 0x5608c13bdaf0 <col:22, col:26> 'FILE *' lvalue
| |       | |     |       `-DeclRefExpr 0x5608c13bdad0 </usr/include/bits/stdio.h:58:32> 'FILE *' lvalue ParmVar 0x5608c13bc028 '__fp' 'FILE *'
| |       | |     `-ImplicitCastExpr 0x5608c13bdbf8 </usr/include/bits/types/struct_FILE.h:103:45, col:52> 'char *' <LValueToRValue>
| |       | |       `-MemberExpr 0x5608c13bdbb0 <col:45, col:52> 'char *' lvalue ->_IO_read_end 0x5608c139e318
| |       | |         `-ImplicitCastExpr 0x5608c13bdb98 <col:45, col:49> 'FILE *' <LValueToRValue>
| |       | |           `-ParenExpr 0x5608c13bdb78 <col:45, col:49> 'FILE *' lvalue
| |       | |             `-DeclRefExpr 0x5608c13bdb58 </usr/include/bits/stdio.h:58:32> 'FILE *' lvalue ParmVar 0x5608c13bc028 '__fp' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13bdcf8 </usr/include/sys/cdefs.h:510:59> 'long' <IntegralCast>
| |       |   `-IntegerLiteral 0x5608c13bdc50 <col:59> 'int' 0
| |       |-CallExpr 0x5608c13bdd68 </usr/include/bits/types/struct_FILE.h:104:6, col:18> 'int'
| |       | |-ImplicitCastExpr 0x5608c13bdd50 <col:6> 'int (*)(FILE *)' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5608c13bdd10 <col:6> 'int (FILE *)' Function 0x5608c13bb438 '__uflow' 'int (FILE *)'
| |       | `-ImplicitCastExpr 0x5608c13bdd90 </usr/include/bits/stdio.h:58:32> 'FILE *' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5608c13bdd30 <col:32> 'FILE *' lvalue ParmVar 0x5608c13bc028 '__fp' 'FILE *'
| |       `-ImplicitCastExpr 0x5608c13bded8 </usr/include/bits/types/struct_FILE.h:104:22, col:60> 'int' <IntegralCast>
| |         `-ImplicitCastExpr 0x5608c13bdec0 <col:22, col:60> 'unsigned char' <LValueToRValue>
| |           `-UnaryOperator 0x5608c13bdea8 <col:22, col:60> 'unsigned char' lvalue prefix '*' cannot overflow
| |             `-CStyleCastExpr 0x5608c13bde80 <col:23, col:60> 'unsigned char *' <BitCast>
| |               `-UnaryOperator 0x5608c13bde50 <col:41, col:60> 'char *' postfix '++'
| |                 `-MemberExpr 0x5608c13bde20 <col:41, col:48> 'char *' lvalue ->_IO_read_ptr 0x5608c139e2b0
| |                   `-ImplicitCastExpr 0x5608c13bde08 <col:41, col:45> 'FILE *' <LValueToRValue>
| |                     `-ParenExpr 0x5608c13bdde8 <col:41, col:45> 'FILE *' lvalue
| |                       `-DeclRefExpr 0x5608c13bdda8 </usr/include/bits/stdio.h:58:32> 'FILE *' lvalue ParmVar 0x5608c13bc028 '__fp' 'FILE *'
| `-GNUInlineAttr 0x5608c13bd7f8 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13bd888 <line:510:33> col:33 implicit used __builtin_expect 'long (long, long)' extern
| |-ParmVarDecl 0x5608c13bd980 <<invalid sloc>> <invalid sloc> 'long'
| |-ParmVarDecl 0x5608c13bd9e8 <<invalid sloc>> <invalid sloc> 'long'
| |-BuiltinAttr 0x5608c13bd928 <<invalid sloc>> Implicit 486
| |-NoThrowAttr 0x5608c13bda60 <col:33> Implicit
| `-ConstAttr 0x5608c13bda88 <col:33> Implicit
|-FunctionDecl 0x5608c13be010 prev 0x5608c13b2b98 <line:451:27, /usr/include/bits/stdio.h:69:1> line:66:1 getc_unlocked 'int (FILE *)' extern inline
| |-ParmVarDecl 0x5608c13bdf78 <col:16, col:22> col:22 used __fp 'FILE *'
| |-CompoundStmt 0x5608c13be588 <line:67:1, line:69:1>
| | `-ReturnStmt 0x5608c13be578 <line:68:3, /usr/include/bits/types/struct_FILE.h:104:62>
| |   `-ParenExpr 0x5608c13be558 <line:103:3, line:104:62> 'int'
| |     `-ConditionalOperator 0x5608c13be528 </usr/include/sys/cdefs.h:510:33, /usr/include/bits/types/struct_FILE.h:104:60> 'int'
| |       |-CallExpr 0x5608c13be2e8 </usr/include/sys/cdefs.h:510:33, col:60> 'long'
| |       | |-ImplicitCastExpr 0x5608c13be2d0 <col:33> 'long (*)(long, long)' <BuiltinFnToFnPtr>
| |       | | `-DeclRefExpr 0x5608c13be110 <col:33> '<builtin fn type>' Function 0x5608c13bd888 '__builtin_expect' 'long (long, long)'
| |       | |-ImplicitCastExpr 0x5608c13be318 <col:51, col:56> 'long' <IntegralCast>
| |       | | `-ParenExpr 0x5608c13be290 <col:51, col:56> 'int'
| |       | |   `-BinaryOperator 0x5608c13be270 </usr/include/bits/types/struct_FILE.h:103:22, col:52> 'int' '>='
| |       | |     |-ImplicitCastExpr 0x5608c13be240 <col:22, col:29> 'char *' <LValueToRValue>
| |       | |     | `-MemberExpr 0x5608c13be188 <col:22, col:29> 'char *' lvalue ->_IO_read_ptr 0x5608c139e2b0
| |       | |     |   `-ImplicitCastExpr 0x5608c13be170 <col:22, col:26> 'FILE *' <LValueToRValue>
| |       | |     |     `-ParenExpr 0x5608c13be150 <col:22, col:26> 'FILE *' lvalue
| |       | |     |       `-DeclRefExpr 0x5608c13be130 </usr/include/bits/stdio.h:68:32> 'FILE *' lvalue ParmVar 0x5608c13bdf78 '__fp' 'FILE *'
| |       | |     `-ImplicitCastExpr 0x5608c13be258 </usr/include/bits/types/struct_FILE.h:103:45, col:52> 'char *' <LValueToRValue>
| |       | |       `-MemberExpr 0x5608c13be210 <col:45, col:52> 'char *' lvalue ->_IO_read_end 0x5608c139e318
| |       | |         `-ImplicitCastExpr 0x5608c13be1f8 <col:45, col:49> 'FILE *' <LValueToRValue>
| |       | |           `-ParenExpr 0x5608c13be1d8 <col:45, col:49> 'FILE *' lvalue
| |       | |             `-DeclRefExpr 0x5608c13be1b8 </usr/include/bits/stdio.h:68:32> 'FILE *' lvalue ParmVar 0x5608c13bdf78 '__fp' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13be330 </usr/include/sys/cdefs.h:510:59> 'long' <IntegralCast>
| |       |   `-IntegerLiteral 0x5608c13be2b0 <col:59> 'int' 0
| |       |-CallExpr 0x5608c13be3a0 </usr/include/bits/types/struct_FILE.h:104:6, col:18> 'int'
| |       | |-ImplicitCastExpr 0x5608c13be388 <col:6> 'int (*)(FILE *)' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5608c13be348 <col:6> 'int (FILE *)' Function 0x5608c13bb438 '__uflow' 'int (FILE *)'
| |       | `-ImplicitCastExpr 0x5608c13be3c8 </usr/include/bits/stdio.h:68:32> 'FILE *' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5608c13be368 <col:32> 'FILE *' lvalue ParmVar 0x5608c13bdf78 '__fp' 'FILE *'
| |       `-ImplicitCastExpr 0x5608c13be510 </usr/include/bits/types/struct_FILE.h:104:22, col:60> 'int' <IntegralCast>
| |         `-ImplicitCastExpr 0x5608c13be4f8 <col:22, col:60> 'unsigned char' <LValueToRValue>
| |           `-UnaryOperator 0x5608c13be4e0 <col:22, col:60> 'unsigned char' lvalue prefix '*' cannot overflow
| |             `-CStyleCastExpr 0x5608c13be4b8 <col:23, col:60> 'unsigned char *' <BitCast>
| |               `-UnaryOperator 0x5608c13be488 <col:41, col:60> 'char *' postfix '++'
| |                 `-MemberExpr 0x5608c13be458 <col:41, col:48> 'char *' lvalue ->_IO_read_ptr 0x5608c139e2b0
| |                   `-ImplicitCastExpr 0x5608c13be440 <col:41, col:45> 'FILE *' <LValueToRValue>
| |                     `-ParenExpr 0x5608c13be420 <col:41, col:45> 'FILE *' lvalue
| |                       `-DeclRefExpr 0x5608c13be3e0 </usr/include/bits/stdio.h:68:32> 'FILE *' lvalue ParmVar 0x5608c13bdf78 '__fp' 'FILE *'
| `-GNUInlineAttr 0x5608c13be0b8 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13be640 prev 0x5608c13b2ce0 <col:27, /usr/include/bits/stdio.h:76:1> line:73:1 getchar_unlocked 'int (void)' extern inline
| |-CompoundStmt 0x5608c13bebb0 <line:74:1, line:76:1>
| | `-ReturnStmt 0x5608c13beba0 <line:75:3, /usr/include/bits/types/struct_FILE.h:104:62>
| |   `-ParenExpr 0x5608c13beb80 <line:103:3, line:104:62> 'int'
| |     `-ConditionalOperator 0x5608c13beb50 </usr/include/sys/cdefs.h:510:33, /usr/include/bits/types/struct_FILE.h:104:60> 'int'
| |       |-CallExpr 0x5608c13be910 </usr/include/sys/cdefs.h:510:33, col:60> 'long'
| |       | |-ImplicitCastExpr 0x5608c13be8f8 <col:33> 'long (*)(long, long)' <BuiltinFnToFnPtr>
| |       | | `-DeclRefExpr 0x5608c13be738 <col:33> '<builtin fn type>' Function 0x5608c13bd888 '__builtin_expect' 'long (long, long)'
| |       | |-ImplicitCastExpr 0x5608c13be940 <col:51, col:56> 'long' <IntegralCast>
| |       | | `-ParenExpr 0x5608c13be8b8 <col:51, col:56> 'int'
| |       | |   `-BinaryOperator 0x5608c13be898 </usr/include/bits/types/struct_FILE.h:103:22, col:52> 'int' '>='
| |       | |     |-ImplicitCastExpr 0x5608c13be868 <col:22, col:29> 'char *' <LValueToRValue>
| |       | |     | `-MemberExpr 0x5608c13be7b0 <col:22, col:29> 'char *' lvalue ->_IO_read_ptr 0x5608c139e2b0
| |       | |     |   `-ImplicitCastExpr 0x5608c13be798 <col:22, col:26> 'FILE *' <LValueToRValue>
| |       | |     |     `-ParenExpr 0x5608c13be778 <col:22, col:26> 'FILE *' lvalue
| |       | |     |       `-DeclRefExpr 0x5608c13be758 </usr/include/stdio.h:147:15> 'FILE *' lvalue Var 0x5608c13a1b48 'stdin' 'FILE *'
| |       | |     `-ImplicitCastExpr 0x5608c13be880 </usr/include/bits/types/struct_FILE.h:103:45, col:52> 'char *' <LValueToRValue>
| |       | |       `-MemberExpr 0x5608c13be838 <col:45, col:52> 'char *' lvalue ->_IO_read_end 0x5608c139e318
| |       | |         `-ImplicitCastExpr 0x5608c13be820 <col:45, col:49> 'FILE *' <LValueToRValue>
| |       | |           `-ParenExpr 0x5608c13be800 <col:45, col:49> 'FILE *' lvalue
| |       | |             `-DeclRefExpr 0x5608c13be7e0 </usr/include/stdio.h:147:15> 'FILE *' lvalue Var 0x5608c13a1b48 'stdin' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13be958 </usr/include/sys/cdefs.h:510:59> 'long' <IntegralCast>
| |       |   `-IntegerLiteral 0x5608c13be8d8 <col:59> 'int' 0
| |       |-CallExpr 0x5608c13be9c8 </usr/include/bits/types/struct_FILE.h:104:6, col:18> 'int'
| |       | |-ImplicitCastExpr 0x5608c13be9b0 <col:6> 'int (*)(FILE *)' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5608c13be970 <col:6> 'int (FILE *)' Function 0x5608c13bb438 '__uflow' 'int (FILE *)'
| |       | `-ImplicitCastExpr 0x5608c13be9f0 </usr/include/stdio.h:147:15> 'FILE *' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5608c13be990 <col:15> 'FILE *' lvalue Var 0x5608c13a1b48 'stdin' 'FILE *'
| |       `-ImplicitCastExpr 0x5608c13beb38 </usr/include/bits/types/struct_FILE.h:104:22, col:60> 'int' <IntegralCast>
| |         `-ImplicitCastExpr 0x5608c13beb20 <col:22, col:60> 'unsigned char' <LValueToRValue>
| |           `-UnaryOperator 0x5608c13beb08 <col:22, col:60> 'unsigned char' lvalue prefix '*' cannot overflow
| |             `-CStyleCastExpr 0x5608c13beae0 <col:23, col:60> 'unsigned char *' <BitCast>
| |               `-UnaryOperator 0x5608c13beab0 <col:41, col:60> 'char *' postfix '++'
| |                 `-MemberExpr 0x5608c13bea80 <col:41, col:48> 'char *' lvalue ->_IO_read_ptr 0x5608c139e2b0
| |                   `-ImplicitCastExpr 0x5608c13bea68 <col:41, col:45> 'FILE *' <LValueToRValue>
| |                     `-ParenExpr 0x5608c13bea48 <col:41, col:45> 'FILE *' lvalue
| |                       `-DeclRefExpr 0x5608c13bea08 </usr/include/stdio.h:147:15> 'FILE *' lvalue Var 0x5608c13a1b48 'stdin' 'FILE *'
| `-GNUInlineAttr 0x5608c13be6e0 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13bec78 prev 0x5608c13b3410 <col:27, /usr/include/bits/stdio.h:85:1> line:82:1 putchar 'int (int)' extern inline
| |-ParmVarDecl 0x5608c13bebe0 <col:10, col:14> col:14 used __c 'int'
| |-CompoundStmt 0x5608c13beec0 <line:83:1, line:85:1>
| | `-ReturnStmt 0x5608c13beeb0 <line:84:3, col:27>
| |   `-CallExpr 0x5608c13bee50 <col:10, col:27> 'int'
| |     |-ImplicitCastExpr 0x5608c13bee38 <col:10> 'int (*)(int, FILE *)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5608c13bed78 <col:10> 'int (int, FILE *)' Function 0x5608c13b32b0 'putc' 'int (int, FILE *)'
| |     |-ImplicitCastExpr 0x5608c13bee80 <col:16> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x5608c13bed98 <col:16> 'int' lvalue ParmVar 0x5608c13bebe0 '__c' 'int'
| |     `-ImplicitCastExpr 0x5608c13bee98 </usr/include/stdio.h:148:16> 'FILE *' <LValueToRValue>
| |       `-DeclRefExpr 0x5608c13bedb8 <col:16> 'FILE *' lvalue Var 0x5608c13a1bc0 'stdout' 'FILE *'
| `-GNUInlineAttr 0x5608c13bed20 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13bf008 prev 0x5608c13b35e8 <col:27, /usr/include/bits/stdio.h:94:1> line:91:1 fputc_unlocked 'int (int, FILE *)' extern inline
| |-ParmVarDecl 0x5608c13beef0 <col:17, col:21> col:21 used __c 'int'
| |-ParmVarDecl 0x5608c13bef68 <col:26, col:32> col:32 used __stream 'FILE *'
| |-CompoundStmt 0x5608c13c0770 <line:92:1, line:94:1>
| | `-ReturnStmt 0x5608c13bf740 <line:93:3, /usr/include/bits/types/struct_FILE.h:109:55>
| |   `-ParenExpr 0x5608c13bf720 <line:107:3, line:109:55> 'int'
| |     `-ConditionalOperator 0x5608c13bf6f0 </usr/include/sys/cdefs.h:510:33, /usr/include/bits/types/struct_FILE.h:109:54> 'int'
| |       |-CallExpr 0x5608c13bf2e8 </usr/include/sys/cdefs.h:510:33, col:60> 'long'
| |       | |-ImplicitCastExpr 0x5608c13bf2d0 <col:33> 'long (*)(long, long)' <BuiltinFnToFnPtr>
| |       | | `-DeclRefExpr 0x5608c13bf110 <col:33> '<builtin fn type>' Function 0x5608c13bd888 '__builtin_expect' 'long (long, long)'
| |       | |-ImplicitCastExpr 0x5608c13bf318 <col:51, col:56> 'long' <IntegralCast>
| |       | | `-ParenExpr 0x5608c13bf290 <col:51, col:56> 'int'
| |       | |   `-BinaryOperator 0x5608c13bf270 </usr/include/bits/types/struct_FILE.h:107:22, col:53> 'int' '>='
| |       | |     |-ImplicitCastExpr 0x5608c13bf240 <col:22, col:29> 'char *' <LValueToRValue>
| |       | |     | `-MemberExpr 0x5608c13bf188 <col:22, col:29> 'char *' lvalue ->_IO_write_ptr 0x5608c139e450
| |       | |     |   `-ImplicitCastExpr 0x5608c13bf170 <col:22, col:26> 'FILE *' <LValueToRValue>
| |       | |     |     `-ParenExpr 0x5608c13bf150 <col:22, col:26> 'FILE *' lvalue
| |       | |     |       `-DeclRefExpr 0x5608c13bf130 </usr/include/bits/stdio.h:93:37> 'FILE *' lvalue ParmVar 0x5608c13bef68 '__stream' 'FILE *'
| |       | |     `-ImplicitCastExpr 0x5608c13bf258 </usr/include/bits/types/struct_FILE.h:107:46, col:53> 'char *' <LValueToRValue>
| |       | |       `-MemberExpr 0x5608c13bf210 <col:46, col:53> 'char *' lvalue ->_IO_write_end 0x5608c139e4b8
| |       | |         `-ImplicitCastExpr 0x5608c13bf1f8 <col:46, col:50> 'FILE *' <LValueToRValue>
| |       | |           `-ParenExpr 0x5608c13bf1d8 <col:46, col:50> 'FILE *' lvalue
| |       | |             `-DeclRefExpr 0x5608c13bf1b8 </usr/include/bits/stdio.h:93:37> 'FILE *' lvalue ParmVar 0x5608c13bef68 '__stream' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13bf330 </usr/include/sys/cdefs.h:510:59> 'long' <IntegralCast>
| |       |   `-IntegerLiteral 0x5608c13bf2b0 <col:59> 'int' 0
| |       |-CallExpr 0x5608c13bf4b0 </usr/include/bits/types/struct_FILE.h:108:6, col:44> 'int'
| |       | |-ImplicitCastExpr 0x5608c13bf498 <col:6> 'int (*)(FILE *, int)' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5608c13bf348 <col:6> 'int (FILE *, int)' Function 0x5608c13bb690 '__overflow' 'int (FILE *, int)'
| |       | |-ImplicitCastExpr 0x5608c13bf4e0 </usr/include/bits/stdio.h:93:37> 'FILE *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5608c13bf368 <col:37> 'FILE *' lvalue ParmVar 0x5608c13bef68 '__stream' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13bf4f8 </usr/include/bits/types/struct_FILE.h:108:23, col:43> 'int' <IntegralCast>
| |       |   `-CStyleCastExpr 0x5608c13bf418 <col:23, col:43> 'unsigned char' <IntegralCast>
| |       |     `-ImplicitCastExpr 0x5608c13bf400 <col:39, col:43> 'int' <LValueToRValue> part_of_explicit_cast
| |       |       `-ParenExpr 0x5608c13bf3e0 <col:39, col:43> 'int' lvalue
| |       |         `-DeclRefExpr 0x5608c13bf388 </usr/include/bits/stdio.h:93:32> 'int' lvalue ParmVar 0x5608c13beef0 '__c' 'int'
| |       `-ImplicitCastExpr 0x5608c13bf6d8 </usr/include/bits/types/struct_FILE.h:109:6, col:54> 'int' <IntegralCast>
| |         `-CStyleCastExpr 0x5608c13bf6b0 <col:6, col:54> 'unsigned char' <IntegralCast>
| |           `-ParenExpr 0x5608c13bf690 <col:22, col:54> 'char'
| |             `-BinaryOperator 0x5608c13bf638 <col:23, col:53> 'char' '='
| |               |-UnaryOperator 0x5608c13bf5b0 <col:23, col:44> 'char' lvalue prefix '*' cannot overflow
| |               | `-UnaryOperator 0x5608c13bf598 <col:24, col:44> 'char *' postfix '++'
| |               |   `-MemberExpr 0x5608c13bf568 <col:24, col:31> 'char *' lvalue ->_IO_write_ptr 0x5608c139e450
| |               |     `-ImplicitCastExpr 0x5608c13bf550 <col:24, col:28> 'FILE *' <LValueToRValue>
| |               |       `-ParenExpr 0x5608c13bf530 <col:24, col:28> 'FILE *' lvalue
| |               |         `-DeclRefExpr 0x5608c13bf510 </usr/include/bits/stdio.h:93:37> 'FILE *' lvalue ParmVar 0x5608c13bef68 '__stream' 'FILE *'
| |               `-ImplicitCastExpr 0x5608c13bf620 </usr/include/bits/types/struct_FILE.h:109:49, col:53> 'char' <IntegralCast>
| |                 `-ImplicitCastExpr 0x5608c13bf608 <col:49, col:53> 'int' <LValueToRValue>
| |                   `-ParenExpr 0x5608c13bf5e8 <col:49, col:53> 'int' lvalue
| |                     `-DeclRefExpr 0x5608c13bf5c8 </usr/include/bits/stdio.h:93:32> 'int' lvalue ParmVar 0x5608c13beef0 '__c' 'int'
| `-GNUInlineAttr 0x5608c13bf0b8 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13c08b8 prev 0x5608c13b37c8 <col:27, /usr/include/bits/stdio.h:104:1> line:101:1 putc_unlocked 'int (int, FILE *)' extern inline
| |-ParmVarDecl 0x5608c13c07a0 <col:16, col:20> col:20 used __c 'int'
| |-ParmVarDecl 0x5608c13c0818 <col:25, col:31> col:31 used __stream 'FILE *'
| |-CompoundStmt 0x5608c13c0fa8 <line:102:1, line:104:1>
| | `-ReturnStmt 0x5608c13c0f98 <line:103:3, /usr/include/bits/types/struct_FILE.h:109:55>
| |   `-ParenExpr 0x5608c13c0f78 <line:107:3, line:109:55> 'int'
| |     `-ConditionalOperator 0x5608c13c0f48 </usr/include/sys/cdefs.h:510:33, /usr/include/bits/types/struct_FILE.h:109:54> 'int'
| |       |-CallExpr 0x5608c13c0b98 </usr/include/sys/cdefs.h:510:33, col:60> 'long'
| |       | |-ImplicitCastExpr 0x5608c13c0b80 <col:33> 'long (*)(long, long)' <BuiltinFnToFnPtr>
| |       | | `-DeclRefExpr 0x5608c13c09c0 <col:33> '<builtin fn type>' Function 0x5608c13bd888 '__builtin_expect' 'long (long, long)'
| |       | |-ImplicitCastExpr 0x5608c13c0bc8 <col:51, col:56> 'long' <IntegralCast>
| |       | | `-ParenExpr 0x5608c13c0b40 <col:51, col:56> 'int'
| |       | |   `-BinaryOperator 0x5608c13c0b20 </usr/include/bits/types/struct_FILE.h:107:22, col:53> 'int' '>='
| |       | |     |-ImplicitCastExpr 0x5608c13c0af0 <col:22, col:29> 'char *' <LValueToRValue>
| |       | |     | `-MemberExpr 0x5608c13c0a38 <col:22, col:29> 'char *' lvalue ->_IO_write_ptr 0x5608c139e450
| |       | |     |   `-ImplicitCastExpr 0x5608c13c0a20 <col:22, col:26> 'FILE *' <LValueToRValue>
| |       | |     |     `-ParenExpr 0x5608c13c0a00 <col:22, col:26> 'FILE *' lvalue
| |       | |     |       `-DeclRefExpr 0x5608c13c09e0 </usr/include/bits/stdio.h:103:37> 'FILE *' lvalue ParmVar 0x5608c13c0818 '__stream' 'FILE *'
| |       | |     `-ImplicitCastExpr 0x5608c13c0b08 </usr/include/bits/types/struct_FILE.h:107:46, col:53> 'char *' <LValueToRValue>
| |       | |       `-MemberExpr 0x5608c13c0ac0 <col:46, col:53> 'char *' lvalue ->_IO_write_end 0x5608c139e4b8
| |       | |         `-ImplicitCastExpr 0x5608c13c0aa8 <col:46, col:50> 'FILE *' <LValueToRValue>
| |       | |           `-ParenExpr 0x5608c13c0a88 <col:46, col:50> 'FILE *' lvalue
| |       | |             `-DeclRefExpr 0x5608c13c0a68 </usr/include/bits/stdio.h:103:37> 'FILE *' lvalue ParmVar 0x5608c13c0818 '__stream' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13c0be0 </usr/include/sys/cdefs.h:510:59> 'long' <IntegralCast>
| |       |   `-IntegerLiteral 0x5608c13c0b60 <col:59> 'int' 0
| |       |-CallExpr 0x5608c13c0d08 </usr/include/bits/types/struct_FILE.h:108:6, col:44> 'int'
| |       | |-ImplicitCastExpr 0x5608c13c0cf0 <col:6> 'int (*)(FILE *, int)' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5608c13c0bf8 <col:6> 'int (FILE *, int)' Function 0x5608c13bb690 '__overflow' 'int (FILE *, int)'
| |       | |-ImplicitCastExpr 0x5608c13c0d38 </usr/include/bits/stdio.h:103:37> 'FILE *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5608c13c0c18 <col:37> 'FILE *' lvalue ParmVar 0x5608c13c0818 '__stream' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13c0d50 </usr/include/bits/types/struct_FILE.h:108:23, col:43> 'int' <IntegralCast>
| |       |   `-CStyleCastExpr 0x5608c13c0cc8 <col:23, col:43> 'unsigned char' <IntegralCast>
| |       |     `-ImplicitCastExpr 0x5608c13c0cb0 <col:39, col:43> 'int' <LValueToRValue> part_of_explicit_cast
| |       |       `-ParenExpr 0x5608c13c0c90 <col:39, col:43> 'int' lvalue
| |       |         `-DeclRefExpr 0x5608c13c0c38 </usr/include/bits/stdio.h:103:32> 'int' lvalue ParmVar 0x5608c13c07a0 '__c' 'int'
| |       `-ImplicitCastExpr 0x5608c13c0f30 </usr/include/bits/types/struct_FILE.h:109:6, col:54> 'int' <IntegralCast>
| |         `-CStyleCastExpr 0x5608c13c0f08 <col:6, col:54> 'unsigned char' <IntegralCast>
| |           `-ParenExpr 0x5608c13c0ee8 <col:22, col:54> 'char'
| |             `-BinaryOperator 0x5608c13c0e90 <col:23, col:53> 'char' '='
| |               |-UnaryOperator 0x5608c13c0e08 <col:23, col:44> 'char' lvalue prefix '*' cannot overflow
| |               | `-UnaryOperator 0x5608c13c0df0 <col:24, col:44> 'char *' postfix '++'
| |               |   `-MemberExpr 0x5608c13c0dc0 <col:24, col:31> 'char *' lvalue ->_IO_write_ptr 0x5608c139e450
| |               |     `-ImplicitCastExpr 0x5608c13c0da8 <col:24, col:28> 'FILE *' <LValueToRValue>
| |               |       `-ParenExpr 0x5608c13c0d88 <col:24, col:28> 'FILE *' lvalue
| |               |         `-DeclRefExpr 0x5608c13c0d68 </usr/include/bits/stdio.h:103:37> 'FILE *' lvalue ParmVar 0x5608c13c0818 '__stream' 'FILE *'
| |               `-ImplicitCastExpr 0x5608c13c0e78 </usr/include/bits/types/struct_FILE.h:109:49, col:53> 'char' <IntegralCast>
| |                 `-ImplicitCastExpr 0x5608c13c0e60 <col:49, col:53> 'int' <LValueToRValue>
| |                   `-ParenExpr 0x5608c13c0e40 <col:49, col:53> 'int' lvalue
| |                     `-DeclRefExpr 0x5608c13c0e20 </usr/include/bits/stdio.h:103:32> 'int' lvalue ParmVar 0x5608c13c07a0 '__c' 'int'
| `-GNUInlineAttr 0x5608c13c0968 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13c1070 prev 0x5608c13b3928 <col:27, /usr/include/bits/stdio.h:111:1> line:108:1 putchar_unlocked 'int (int)' extern inline
| |-ParmVarDecl 0x5608c13c0fd8 <col:19, col:23> col:23 used __c 'int'
| |-CompoundStmt 0x5608c13c1758 <line:109:1, line:111:1>
| | `-ReturnStmt 0x5608c13c1748 <line:110:3, /usr/include/bits/types/struct_FILE.h:109:55>
| |   `-ParenExpr 0x5608c13c1728 <line:107:3, line:109:55> 'int'
| |     `-ConditionalOperator 0x5608c13c16f8 </usr/include/sys/cdefs.h:510:33, /usr/include/bits/types/struct_FILE.h:109:54> 'int'
| |       |-CallExpr 0x5608c13c1348 </usr/include/sys/cdefs.h:510:33, col:60> 'long'
| |       | |-ImplicitCastExpr 0x5608c13c1330 <col:33> 'long (*)(long, long)' <BuiltinFnToFnPtr>
| |       | | `-DeclRefExpr 0x5608c13c1170 <col:33> '<builtin fn type>' Function 0x5608c13bd888 '__builtin_expect' 'long (long, long)'
| |       | |-ImplicitCastExpr 0x5608c13c1378 <col:51, col:56> 'long' <IntegralCast>
| |       | | `-ParenExpr 0x5608c13c12f0 <col:51, col:56> 'int'
| |       | |   `-BinaryOperator 0x5608c13c12d0 </usr/include/bits/types/struct_FILE.h:107:22, col:53> 'int' '>='
| |       | |     |-ImplicitCastExpr 0x5608c13c12a0 <col:22, col:29> 'char *' <LValueToRValue>
| |       | |     | `-MemberExpr 0x5608c13c11e8 <col:22, col:29> 'char *' lvalue ->_IO_write_ptr 0x5608c139e450
| |       | |     |   `-ImplicitCastExpr 0x5608c13c11d0 <col:22, col:26> 'FILE *' <LValueToRValue>
| |       | |     |     `-ParenExpr 0x5608c13c11b0 <col:22, col:26> 'FILE *' lvalue
| |       | |     |       `-DeclRefExpr 0x5608c13c1190 </usr/include/stdio.h:148:16> 'FILE *' lvalue Var 0x5608c13a1bc0 'stdout' 'FILE *'
| |       | |     `-ImplicitCastExpr 0x5608c13c12b8 </usr/include/bits/types/struct_FILE.h:107:46, col:53> 'char *' <LValueToRValue>
| |       | |       `-MemberExpr 0x5608c13c1270 <col:46, col:53> 'char *' lvalue ->_IO_write_end 0x5608c139e4b8
| |       | |         `-ImplicitCastExpr 0x5608c13c1258 <col:46, col:50> 'FILE *' <LValueToRValue>
| |       | |           `-ParenExpr 0x5608c13c1238 <col:46, col:50> 'FILE *' lvalue
| |       | |             `-DeclRefExpr 0x5608c13c1218 </usr/include/stdio.h:148:16> 'FILE *' lvalue Var 0x5608c13a1bc0 'stdout' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13c1390 </usr/include/sys/cdefs.h:510:59> 'long' <IntegralCast>
| |       |   `-IntegerLiteral 0x5608c13c1310 <col:59> 'int' 0
| |       |-CallExpr 0x5608c13c14b8 </usr/include/bits/types/struct_FILE.h:108:6, col:44> 'int'
| |       | |-ImplicitCastExpr 0x5608c13c14a0 <col:6> 'int (*)(FILE *, int)' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5608c13c13a8 <col:6> 'int (FILE *, int)' Function 0x5608c13bb690 '__overflow' 'int (FILE *, int)'
| |       | |-ImplicitCastExpr 0x5608c13c14e8 </usr/include/stdio.h:148:16> 'FILE *' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5608c13c13c8 <col:16> 'FILE *' lvalue Var 0x5608c13a1bc0 'stdout' 'FILE *'
| |       | `-ImplicitCastExpr 0x5608c13c1500 </usr/include/bits/types/struct_FILE.h:108:23, col:43> 'int' <IntegralCast>
| |       |   `-CStyleCastExpr 0x5608c13c1478 <col:23, col:43> 'unsigned char' <IntegralCast>
| |       |     `-ImplicitCastExpr 0x5608c13c1460 <col:39, col:43> 'int' <LValueToRValue> part_of_explicit_cast
| |       |       `-ParenExpr 0x5608c13c1440 <col:39, col:43> 'int' lvalue
| |       |         `-DeclRefExpr 0x5608c13c13e8 </usr/include/bits/stdio.h:110:32> 'int' lvalue ParmVar 0x5608c13c0fd8 '__c' 'int'
| |       `-ImplicitCastExpr 0x5608c13c16e0 </usr/include/bits/types/struct_FILE.h:109:6, col:54> 'int' <IntegralCast>
| |         `-CStyleCastExpr 0x5608c13c16b8 <col:6, col:54> 'unsigned char' <IntegralCast>
| |           `-ParenExpr 0x5608c13c1698 <col:22, col:54> 'char'
| |             `-BinaryOperator 0x5608c13c1640 <col:23, col:53> 'char' '='
| |               |-UnaryOperator 0x5608c13c15b8 <col:23, col:44> 'char' lvalue prefix '*' cannot overflow
| |               | `-UnaryOperator 0x5608c13c15a0 <col:24, col:44> 'char *' postfix '++'
| |               |   `-MemberExpr 0x5608c13c1570 <col:24, col:31> 'char *' lvalue ->_IO_write_ptr 0x5608c139e450
| |               |     `-ImplicitCastExpr 0x5608c13c1558 <col:24, col:28> 'FILE *' <LValueToRValue>
| |               |       `-ParenExpr 0x5608c13c1538 <col:24, col:28> 'FILE *' lvalue
| |               |         `-DeclRefExpr 0x5608c13c1518 </usr/include/stdio.h:148:16> 'FILE *' lvalue Var 0x5608c13a1bc0 'stdout' 'FILE *'
| |               `-ImplicitCastExpr 0x5608c13c1628 </usr/include/bits/types/struct_FILE.h:109:49, col:53> 'char' <IntegralCast>
| |                 `-ImplicitCastExpr 0x5608c13c1610 <col:49, col:53> 'int' <LValueToRValue>
| |                   `-ParenExpr 0x5608c13c15f0 <col:49, col:53> 'int' lvalue
| |                     `-DeclRefExpr 0x5608c13c15d0 </usr/include/bits/stdio.h:110:32> 'int' lvalue ParmVar 0x5608c13c0fd8 '__c' 'int'
| `-GNUInlineAttr 0x5608c13c1118 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13c1958 prev 0x5608c13b4b18 <col:27, /usr/include/bits/stdio.h:121:1> line:118:1 getline '__ssize_t (char **restrict, size_t *restrict, FILE *restrict)' extern inline
| |-ParmVarDecl 0x5608c13c1788 <col:10, col:17> col:17 used __lineptr 'char **'
| |-ParmVarDecl 0x5608c13c1800 <col:28, col:36> col:36 used __n 'size_t *'
| |-ParmVarDecl 0x5608c13c1878 <col:41, col:47> col:47 used __stream 'FILE *'
| |-CompoundStmt 0x5608c13c1c08 <line:119:1, line:121:1>
| | `-ReturnStmt 0x5608c13c1bf8 <line:120:3, col:52>
| |   `-CallExpr 0x5608c13c1b70 <col:10, col:52> '__ssize_t':'long'
| |     |-ImplicitCastExpr 0x5608c13c1b58 <col:10> '__ssize_t (*)(char **restrict, size_t *restrict, int, FILE *restrict)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5608c13c1a68 <col:10> '__ssize_t (char **restrict, size_t *restrict, int, FILE *restrict)' Function 0x5608c13b4538 '__getdelim' '__ssize_t (char **restrict, size_t *restrict, int, FILE *restrict)'
| |     |-ImplicitCastExpr 0x5608c13c1bb0 <col:22> 'char **' <LValueToRValue>
| |     | `-DeclRefExpr 0x5608c13c1a88 <col:22> 'char **' lvalue ParmVar 0x5608c13c1788 '__lineptr' 'char **'
| |     |-ImplicitCastExpr 0x5608c13c1bc8 <col:33> 'size_t *' <LValueToRValue>
| |     | `-DeclRefExpr 0x5608c13c1aa8 <col:33> 'size_t *' lvalue ParmVar 0x5608c13c1800 '__n' 'size_t *'
| |     |-CharacterLiteral 0x5608c13c1ac8 <col:38> 'int' 10
| |     `-ImplicitCastExpr 0x5608c13c1be0 <col:44> 'FILE *' <LValueToRValue>
| |       `-DeclRefExpr 0x5608c13c1ae0 <col:44> 'FILE *' lvalue ParmVar 0x5608c13c1878 '__stream' 'FILE *'
| `-GNUInlineAttr 0x5608c13c1a10 </usr/include/sys/cdefs.h:451:59>
|-FunctionDecl 0x5608c13c1cc8 prev 0x5608c13b97f8 <col:27, /usr/include/bits/stdio.h:131:1> line:128:8 feof_unlocked 'int (FILE *)' extern inline
| |-ParmVarDecl 0x5608c13c1c30 <col:23, col:29> col:29 used __stream 'FILE *'
| |-CompoundStmt 0x5608c13c1f60 <line:129:1, line:131:1>
| | `-ReturnStmt 0x5608c13c1f50 <line:130:3, /usr/include/bits/types/struct_FILE.h:112:71>
| |   `-ParenExpr 0x5608c13c1f30 <col:35, col:71> 'int'
| |     `-BinaryOperator 0x5608c13c1f10 <col:36, col:70> 'int' '!='
| |       |-ParenExpr 0x5608c13c1ed0 <col:36, col:65> 'int'
| |       | `-BinaryOperator 0x5608c13c1eb0 <col:37, line:111:22> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5608c13c1e98 <line:112:37, col:44> 'int' <LValueToRValue>
| |       |   | `-MemberExpr 0x5608c13c1e48 <col:37, col:44> 'int' lvalue ->_flags 0x5608c139e248
| |       |   |   `-ImplicitCastExpr 0x5608c13c1e30 <col:37, col:41> 'FILE *' <LValueToRValue>
| |       |   |     `-ParenExpr 0x5608c13c1e10 <col:37, col:41> 'FILE *' lvalue
| |       |   |       `-DeclRefExpr 0x5608c13c1df0 </usr/include/bits/stdio.h:130:32> 'FILE *' lvalue ParmVar 0x5608c13c1c30 '__stream' 'FILE *'
| |       |   `-IntegerLiteral 0x5608c13c1e78 </usr/include/bits/types/struct_FILE.h:111:22> 'int' 16
| |       `-IntegerLiteral 0x5608c13c1ef0 <line:112:70> 'int' 0
| |-NoThrowAttr 0x5608c13c1d70 </usr/include/sys/cdefs.h:81:38>
| `-GNUInlineAttr 0x5608c13c1dc8 <line:451:59>
|-FunctionDecl 0x5608c13c2020 prev 0x5608c13b99a0 <col:27, /usr/include/bits/stdio.h:138:1> line:135:8 ferror_unlocked 'int (FILE *)' extern inline
| |-ParmVarDecl 0x5608c13c1f88 <col:25, col:31> col:31 used __stream 'FILE *'
| |-CompoundStmt 0x5608c13c22b8 <line:136:1, line:138:1>
| | `-ReturnStmt 0x5608c13c22a8 <line:137:3, /usr/include/bits/types/struct_FILE.h:115:73>
| |   `-ParenExpr 0x5608c13c2288 <col:37, col:73> 'int'
| |     `-BinaryOperator 0x5608c13c2268 <col:38, col:72> 'int' '!='
| |       |-ParenExpr 0x5608c13c2228 <col:38, col:67> 'int'
| |       | `-BinaryOperator 0x5608c13c2208 <col:39, line:114:22> 'int' '&'
| |       |   |-ImplicitCastExpr 0x5608c13c21f0 <line:115:39, col:46> 'int' <LValueToRValue>
| |       |   | `-MemberExpr 0x5608c13c21a0 <col:39, col:46> 'int' lvalue ->_flags 0x5608c139e248
| |       |   |   `-ImplicitCastExpr 0x5608c13c2188 <col:39, col:43> 'FILE *' <LValueToRValue>
| |       |   |     `-ParenExpr 0x5608c13c2168 <col:39, col:43> 'FILE *' lvalue
| |       |   |       `-DeclRefExpr 0x5608c13c2148 </usr/include/bits/stdio.h:137:34> 'FILE *' lvalue ParmVar 0x5608c13c1f88 '__stream' 'FILE *'
| |       |   `-IntegerLiteral 0x5608c13c21d0 </usr/include/bits/types/struct_FILE.h:114:22> 'int' 32
| |       `-IntegerLiteral 0x5608c13c2248 <line:115:72> 'int' 0
| |-NoThrowAttr 0x5608c13c20c8 </usr/include/sys/cdefs.h:81:38>
| `-GNUInlineAttr 0x5608c13c2120 <line:451:59>
|-TypedefDecl 0x5608c13c22e0 </usr/include/bits/stdint-uintn.h:24:1, col:19> col:19 uint8_t '__uint8_t':'unsigned char'
| `-TypedefType 0x5608c10e6ae0 '__uint8_t' sugar
|   |-Typedef 0x5608c10e6750 '__uint8_t'
|   `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c13c2348 <line:25:1, col:20> col:20 referenced uint16_t '__uint16_t':'unsigned short'
| `-TypedefType 0x5608c10e6c00 '__uint16_t' sugar
|   |-Typedef 0x5608c10e6830 '__uint16_t'
|   `-BuiltinType 0x5608c10a4900 'unsigned short'
|-TypedefDecl 0x5608c13c23b0 <line:26:1, col:20> col:20 referenced uint32_t '__uint32_t':'unsigned int'
| `-TypedefType 0x5608c10e6d20 '__uint32_t' sugar
|   |-Typedef 0x5608c10e6910 '__uint32_t'
|   `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c13c2418 <line:27:1, col:20> col:20 uint64_t '__uint64_t':'unsigned long'
| `-TypedefType 0x5608c10e6e40 '__uint64_t' sugar
|   |-Typedef 0x5608c10e69f0 '__uint64_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c13c24a0 </usr/include/stdint.h:43:1, col:24> col:24 int_least8_t '__int_least8_t':'signed char'
| `-TypedefType 0x5608c13c2470 '__int_least8_t' sugar
|   |-Typedef 0x5608c10e6a80 '__int_least8_t'
|   `-TypedefType 0x5608c10e6a50 '__int8_t' sugar
|     |-Typedef 0x5608c10e66e0 '__int8_t'
|     `-BuiltinType 0x5608c10a4840 'signed char'
|-TypedefDecl 0x5608c13c2530 <line:44:1, col:25> col:25 int_least16_t '__int_least16_t':'short'
| `-TypedefType 0x5608c13c2500 '__int_least16_t' sugar
|   |-Typedef 0x5608c10e6ba0 '__int_least16_t'
|   `-TypedefType 0x5608c10e6b70 '__int16_t' sugar
|     |-Typedef 0x5608c10e67c0 '__int16_t'
|     `-BuiltinType 0x5608c10a4860 'short'
|-TypedefDecl 0x5608c13c25c0 <line:45:1, col:25> col:25 int_least32_t '__int_least32_t':'int'
| `-TypedefType 0x5608c13c2590 '__int_least32_t' sugar
|   |-Typedef 0x5608c10e6cc0 '__int_least32_t'
|   `-TypedefType 0x5608c10e6c90 '__int32_t' sugar
|     |-Typedef 0x5608c10e68a0 '__int32_t'
|     `-BuiltinType 0x5608c10a4880 'int'
|-TypedefDecl 0x5608c13c2650 <line:46:1, col:25> col:25 int_least64_t '__int_least64_t':'long'
| `-TypedefType 0x5608c13c2620 '__int_least64_t' sugar
|   |-Typedef 0x5608c10e6de0 '__int_least64_t'
|   `-TypedefType 0x5608c10e6db0 '__int64_t' sugar
|     |-Typedef 0x5608c10e6980 '__int64_t'
|     `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c13c26e0 <line:49:1, col:25> col:25 uint_least8_t '__uint_least8_t':'unsigned char'
| `-TypedefType 0x5608c13c26b0 '__uint_least8_t' sugar
|   |-Typedef 0x5608c10e6b10 '__uint_least8_t'
|   `-TypedefType 0x5608c10e6ae0 '__uint8_t' sugar
|     |-Typedef 0x5608c10e6750 '__uint8_t'
|     `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c13d0280 <line:50:1, col:26> col:26 uint_least16_t '__uint_least16_t':'unsigned short'
| `-TypedefType 0x5608c13c2740 '__uint_least16_t' sugar
|   |-Typedef 0x5608c10e6c30 '__uint_least16_t'
|   `-TypedefType 0x5608c10e6c00 '__uint16_t' sugar
|     |-Typedef 0x5608c10e6830 '__uint16_t'
|     `-BuiltinType 0x5608c10a4900 'unsigned short'
|-TypedefDecl 0x5608c13d0310 <line:51:1, col:26> col:26 uint_least32_t '__uint_least32_t':'unsigned int'
| `-TypedefType 0x5608c13d02e0 '__uint_least32_t' sugar
|   |-Typedef 0x5608c10e6d50 '__uint_least32_t'
|   `-TypedefType 0x5608c10e6d20 '__uint32_t' sugar
|     |-Typedef 0x5608c10e6910 '__uint32_t'
|     `-BuiltinType 0x5608c10a4920 'unsigned int'
|-TypedefDecl 0x5608c13d03a0 <line:52:1, col:26> col:26 uint_least64_t '__uint_least64_t':'unsigned long'
| `-TypedefType 0x5608c13d0370 '__uint_least64_t' sugar
|   |-Typedef 0x5608c10e6e70 '__uint_least64_t'
|   `-TypedefType 0x5608c10e6e40 '__uint64_t' sugar
|     |-Typedef 0x5608c10e69f0 '__uint64_t'
|     `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c13d0410 <line:58:1, col:22> col:22 int_fast8_t 'signed char'
| `-BuiltinType 0x5608c10a4840 'signed char'
|-TypedefDecl 0x5608c13d0480 <line:60:1, col:19> col:19 int_fast16_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c13d04f0 <line:61:1, col:19> col:19 int_fast32_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c13d0560 <line:62:1, col:19> col:19 int_fast64_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c13d05d0 <line:71:1, col:24> col:24 uint_fast8_t 'unsigned char'
| `-BuiltinType 0x5608c10a48e0 'unsigned char'
|-TypedefDecl 0x5608c13d0640 <line:73:1, col:27> col:27 uint_fast16_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c13d06b0 <line:74:1, col:27> col:27 uint_fast32_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c13d0720 <line:75:1, col:27> col:27 uint_fast64_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c13d0790 <line:87:1, col:19> col:19 intptr_t 'long'
| `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c13d0800 <line:90:1, col:27> col:27 uintptr_t 'unsigned long'
| `-BuiltinType 0x5608c10a4940 'unsigned long'
|-TypedefDecl 0x5608c13d0868 <line:101:1, col:21> col:21 referenced intmax_t '__intmax_t':'long'
| `-TypedefType 0x5608c1240fb0 '__intmax_t' sugar
|   |-Typedef 0x5608c10e6fc0 '__intmax_t'
|   `-BuiltinType 0x5608c10a48a0 'long'
|-TypedefDecl 0x5608c13d08d0 <line:102:1, col:22> col:22 uintmax_t '__uintmax_t':'unsigned long'
| `-TypedefType 0x5608c1241fc0 '__uintmax_t' sugar
|   |-Typedef 0x5608c10e7030 '__uintmax_t'
|   `-BuiltinType 0x5608c10a4940 'unsigned long'
|-EnumDecl 0x5608c13d0928 <./src/jv.h:8:9, line:17:1> line:8:9
| |-EnumConstantDecl 0x5608c13d09f0 <line:9:3> col:3 referenced JV_KIND_INVALID 'int'
| |-EnumConstantDecl 0x5608c13d0a40 <line:10:3> col:3 referenced JV_KIND_NULL 'int'
| |-EnumConstantDecl 0x5608c13d0a90 <line:11:3> col:3 referenced JV_KIND_FALSE 'int'
| |-EnumConstantDecl 0x5608c13d0ae0 <line:12:3> col:3 referenced JV_KIND_TRUE 'int'
| |-EnumConstantDecl 0x5608c13d0b30 <line:13:3> col:3 referenced JV_KIND_NUMBER 'int'
| |-EnumConstantDecl 0x5608c13d0b80 <line:14:3> col:3 referenced JV_KIND_STRING 'int'
| |-EnumConstantDecl 0x5608c13d0bd0 <line:15:3> col:3 referenced JV_KIND_ARRAY 'int'
| `-EnumConstantDecl 0x5608c13d0c20 <line:16:3> col:3 referenced JV_KIND_OBJECT 'int'
|-TypedefDecl 0x5608c13d0cc8 <line:8:1, line:17:3> col:3 referenced jv_kind 'enum jv_kind':'jv_kind'
| `-ElaboratedType 0x5608c13d0c70 'enum jv_kind' sugar
|   `-EnumType 0x5608c13d09d0 'jv_kind'
|     `-Enum 0x5608c13d0928 ''
|-RecordDecl 0x5608c13d0d38 <line:19:1, col:8> col:8 struct jv_refcnt
|-RecordDecl 0x5608c13d0de0 <line:23:9, line:32:1> line:23:9 struct definition
| |-FieldDecl 0x5608c13d0e98 <line:24:3, col:17> col:17 kind_flags 'unsigned char'
| |-FieldDecl 0x5608c13d0f00 <line:25:3, col:17> col:17 pad_ 'unsigned char'
| |-FieldDecl 0x5608c13d0f68 <line:26:3, col:18> col:18 offset 'unsigned short'
| |-FieldDecl 0x5608c13d0fd0 <line:27:3, col:7> col:7 size 'int'
| |-RecordDecl 0x5608c13d1020 <line:28:3, line:31:3> line:28:3 union definition
| | |-FieldDecl 0x5608c13d1170 <line:29:5, col:23> col:23 ptr 'struct jv_refcnt *'
| | `-FieldDecl 0x5608c13d11d8 <line:30:5, col:12> col:12 number 'double'
| `-FieldDecl 0x5608c13d1288 <line:28:3, line:31:5> col:5 u 'union (unnamed union at ./src/jv.h:28:3)':'union jv::(unnamed at ./src/jv.h:28:3)'
|-TypedefDecl 0x5608c13d1338 <line:23:1, line:32:3> col:3 referenced jv 'struct jv':'jv'
| `-ElaboratedType 0x5608c13d12e0 'struct jv' sugar
|   `-RecordType 0x5608c13d0e60 'jv'
|     `-Record 0x5608c13d0de0 ''
|-FunctionDecl 0x5608c13d14f8 <line:39:1, col:23> col:9 used jv_get_kind 'jv_kind (jv)'
| `-ParmVarDecl 0x5608c13d1400 <col:21> col:23 'jv':'jv'
|-FunctionDecl 0x5608c13d16b0 <line:40:1, col:33> col:13 used jv_kind_name 'const char *(jv_kind)'
| `-ParmVarDecl 0x5608c13d15b0 <col:26> col:33 'jv_kind':'jv_kind'
|-FunctionDecl 0x5608c13d1860 <line:41:1, col:74> col:12 used jv_is_valid 'int (jv)' static
| |-ParmVarDecl 0x5608c13d1768 <col:24, col:27> col:27 used x 'jv':'jv'
| `-CompoundStmt 0x5608c13d1a80 <col:30, col:74>
|   `-ReturnStmt 0x5608c13d1a70 <col:32, col:57>
|     `-BinaryOperator 0x5608c13d1a50 <col:39, col:57> 'int' '!='
|       |-ImplicitCastExpr 0x5608c13d1a20 <col:39, col:52> 'unsigned int' <IntegralCast>
|       | `-CallExpr 0x5608c13d19c0 <col:39, col:52> 'jv_kind':'jv_kind'
|       |   |-ImplicitCastExpr 0x5608c13d19a8 <col:39> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5608c13d1908 <col:39> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|       |   `-ImplicitCastExpr 0x5608c13d19e8 <col:51> 'jv':'jv' <LValueToRValue>
|       |     `-DeclRefExpr 0x5608c13d1928 <col:51> 'jv':'jv' lvalue ParmVar 0x5608c13d1768 'x' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c13d1a38 <col:57> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5608c13d1a00 <col:57> 'int' EnumConstant 0x5608c13d09f0 'JV_KIND_INVALID' 'int'
|-FunctionDecl 0x5608c13d1b98 <line:43:1, col:14> col:4 used jv_copy 'jv (jv)'
| `-ParmVarDecl 0x5608c13d1aa8 <col:12> col:14 'jv':'jv'
|-FunctionDecl 0x5608c13d1d48 <line:44:1, col:16> col:6 used jv_free 'void (jv)'
| `-ParmVarDecl 0x5608c13d1c50 <col:14> col:16 'jv':'jv'
|-FunctionDecl 0x5608c13d1e98 <line:46:1, col:21> col:5 jv_get_refcnt 'int (jv)'
| `-ParmVarDecl 0x5608c13d1e00 <col:19> col:21 'jv':'jv'
|-FunctionDecl 0x5608c13d20e0 <line:48:1, col:20> col:5 used jv_equal 'int (jv, jv)'
| |-ParmVarDecl 0x5608c13d1f50 <col:14> col:16 'jv':'jv'
| `-ParmVarDecl 0x5608c13d1fc8 <col:18> col:20 'jv':'jv'
|-FunctionDecl 0x5608c13da7f8 <line:49:1, col:24> col:5 jv_identical 'int (jv, jv)'
| |-ParmVarDecl 0x5608c13d21a0 <col:18> col:20 'jv':'jv'
| `-ParmVarDecl 0x5608c13d2218 <col:22> col:24 'jv':'jv'
|-FunctionDecl 0x5608c13da9d0 <line:50:1, col:23> col:5 used jv_contains 'int (jv, jv)'
| |-ParmVarDecl 0x5608c13da8b8 <col:17> col:19 'jv':'jv'
| `-ParmVarDecl 0x5608c13da930 <col:21> col:23 'jv':'jv'
|-FunctionDecl 0x5608c13dab78 <line:52:1, col:19> col:4 used jv_invalid 'jv (void)'
|-FunctionDecl 0x5608c13dacb8 <line:53:1, col:26> col:4 used jv_invalid_with_msg 'jv (jv)'
| `-ParmVarDecl 0x5608c13dac28 <col:24> col:26 'jv':'jv'
|-FunctionDecl 0x5608c13dae00 <line:54:1, col:25> col:4 jv_invalid_get_msg 'jv (jv)'
| `-ParmVarDecl 0x5608c13dad70 <col:23> col:25 'jv':'jv'
|-FunctionDecl 0x5608c13daf50 <line:55:1, col:26> col:5 used jv_invalid_has_msg 'int (jv)'
| `-ParmVarDecl 0x5608c13daeb8 <col:24> col:26 'jv':'jv'
|-FunctionDecl 0x5608c13db090 <line:57:1, col:16> col:4 used jv_null 'jv (void)'
|-FunctionDecl 0x5608c13db1c8 <line:58:1, col:16> col:4 used jv_true 'jv (void)'
|-FunctionDecl 0x5608c13db300 <line:59:1, col:17> col:4 used jv_false 'jv (void)'
|-FunctionDecl 0x5608c13db4a8 <line:60:1, col:15> col:4 used jv_bool 'jv (int)'
| `-ParmVarDecl 0x5608c13db3b8 <col:12> col:15 'int'
|-FunctionDecl 0x5608c13db658 <line:62:1, col:20> col:4 used jv_number 'jv (double)'
| `-ParmVarDecl 0x5608c13db568 <col:14> col:20 'double'
|-FunctionDecl 0x5608c13db808 <line:63:1, col:38> col:4 jv_number_with_literal 'jv (const char *)'
| `-ParmVarDecl 0x5608c13db718 <col:27, col:37> col:38 'const char *'
|-FunctionDecl 0x5608c13db9c0 <line:64:1, col:26> col:8 used jv_number_value 'double (jv)'
| `-ParmVarDecl 0x5608c13db8c0 <col:24> col:26 'jv':'jv'
|-FunctionDecl 0x5608c13dbb10 <line:65:1, col:21> col:5 jv_is_integer 'int (jv)'
| `-ParmVarDecl 0x5608c13dba78 <col:19> col:21 'jv':'jv'
|-FunctionDecl 0x5608c13dbc60 <line:67:1, col:31> col:5 jv_number_has_literal 'int (jv)'
| `-ParmVarDecl 0x5608c13dbbc8 <col:27, col:30> col:30 n 'jv':'jv'
|-FunctionDecl 0x5608c13dbe10 <line:68:1, col:37> col:13 jv_number_get_literal 'const char *(jv)'
| `-ParmVarDecl 0x5608c13dbd18 <col:35> col:37 'jv':'jv'
|-FunctionDecl 0x5608c13dbf50 <line:70:1, col:17> col:4 used jv_array 'jv (void)'
|-FunctionDecl 0x5608c13dc098 <line:71:1, col:22> col:4 jv_array_sized 'jv (int)'
| `-ParmVarDecl 0x5608c13dc008 <col:19> col:22 'int'
|-FunctionDecl 0x5608c13dc1e8 <line:72:1, col:23> col:5 used jv_array_length 'int (jv)'
| `-ParmVarDecl 0x5608c13dc150 <col:21> col:23 'jv':'jv'
|-FunctionDecl 0x5608c13dc438 <line:73:1, col:24> col:4 used jv_array_get 'jv (jv, int)'
| |-ParmVarDecl 0x5608c13dc2a0 <col:17> col:19 'jv':'jv'
| `-ParmVarDecl 0x5608c13dc320 <col:21> col:24 'int'
|-FunctionDecl 0x5608c13dc718 <line:74:1, col:28> col:4 used jv_array_set 'jv (jv, int, jv)'
| |-ParmVarDecl 0x5608c13dc4f8 <col:17> col:19 'jv':'jv'
| |-ParmVarDecl 0x5608c13dc578 <col:21> col:24 'int'
| `-ParmVarDecl 0x5608c13dc5f0 <col:26> col:28 'jv':'jv'
|-FunctionDecl 0x5608c13dd998 <line:75:1, col:26> col:4 used jv_array_append 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13dd808 <col:20> col:22 'jv':'jv'
| `-ParmVarDecl 0x5608c13dd880 <col:24> col:26 'jv':'jv'
|-FunctionDecl 0x5608c13ddb68 <line:76:1, col:26> col:4 used jv_array_concat 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13dda58 <col:20> col:22 'jv':'jv'
| `-ParmVarDecl 0x5608c13ddad0 <col:24> col:26 'jv':'jv'
|-FunctionDecl 0x5608c13dde48 <line:77:1, col:31> col:4 jv_array_slice 'jv (jv, int, int)'
| |-ParmVarDecl 0x5608c13ddc28 <col:19> col:21 'jv':'jv'
| |-ParmVarDecl 0x5608c13ddca8 <col:23> col:26 'int'
| `-ParmVarDecl 0x5608c13ddd28 <col:28> col:31 'int'
|-FunctionDecl 0x5608c13de020 <line:78:1, col:27> col:4 jv_array_indexes 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13ddf10 <col:21> col:23 'jv':'jv'
| `-ParmVarDecl 0x5608c13ddf88 <col:25> col:27 'jv':'jv'
|-FunctionDecl 0x5608c13de178 <line:108:1, col:25> col:4 used jv_string 'jv (const char *)'
| `-ParmVarDecl 0x5608c13de0e8 <col:14, col:24> col:25 'const char *'
|-FunctionDecl 0x5608c13de3c8 <line:109:1, col:36> col:4 used jv_string_sized 'jv (const char *, int)'
| |-ParmVarDecl 0x5608c13de238 <col:20, col:30> col:31 'const char *'
| `-ParmVarDecl 0x5608c13de2b8 <col:33> col:36 'int'
|-FunctionDecl 0x5608c13de520 <line:110:1, col:27> col:4 used jv_string_empty 'jv (int)'
| `-ParmVarDecl 0x5608c13de490 <col:20, col:24> col:24 len 'int'
|-FunctionDecl 0x5608c13de670 <line:111:1, col:30> col:5 used jv_string_length_bytes 'int (jv)'
| `-ParmVarDecl 0x5608c13de5d8 <col:28> col:30 'jv':'jv'
|-FunctionDecl 0x5608c13de7c0 <line:112:1, col:35> col:5 used jv_string_length_codepoints 'int (jv)'
| `-ParmVarDecl 0x5608c13de728 <col:33> col:35 'jv':'jv'
|-FunctionDecl 0x5608c13de970 <line:113:1, col:32> col:15 jv_string_hash 'unsigned long (jv)'
| `-ParmVarDecl 0x5608c13de878 <col:30> col:32 'jv':'jv'
|-FunctionDecl 0x5608c13deac0 <line:114:1, col:31> col:13 used jv_string_value 'const char *(jv)'
| `-ParmVarDecl 0x5608c13dea28 <col:29> col:31 'jv':'jv'
|-FunctionDecl 0x5608c13dec88 <line:115:1, col:32> col:4 used jv_string_indexes 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13deb78 <col:22, col:25> col:25 j 'jv':'jv'
| `-ParmVarDecl 0x5608c13debf0 <col:28, col:31> col:31 k 'jv':'jv'
|-FunctionDecl 0x5608c13deee8 <line:116:1, col:44> col:4 jv_string_slice 'jv (jv, int, int)'
| |-ParmVarDecl 0x5608c13ded48 <col:20, col:23> col:23 j 'jv':'jv'
| |-ParmVarDecl 0x5608c13dedc8 <col:26, col:30> col:30 start 'int'
| `-ParmVarDecl 0x5608c13dee48 <col:37, col:41> col:41 end 'int'
|-FunctionDecl 0x5608c13df0c0 <line:117:1, col:27> col:4 used jv_string_concat 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13defb0 <col:21> col:23 'jv':'jv'
| `-ParmVarDecl 0x5608c13df028 <col:25> col:27 'jv':'jv'
|-FunctionDecl 0x5608c13df3b8 <line:118:1, line:104:59> line:118:4 jv_string_vfmt 'jv (const char *, struct __va_list_tag *)'
| |-ParmVarDecl 0x5608c13df188 <col:19, col:29> col:30 'const char *'
| |-ParmVarDecl 0x5608c13df250 <col:32> col:39 'struct __va_list_tag *':'struct __va_list_tag *'
| `-FormatAttr 0x5608c13df468 <line:104:19, col:57> printf 1 0
|-FunctionDecl 0x5608c13df640 <line:119:1, line:102:66> line:119:4 used jv_string_fmt 'jv (const char *, ...)'
| |-ParmVarDecl 0x5608c13df4e8 <col:18, col:28> col:29 'const char *'
| `-FormatAttr 0x5608c13df6e8 <line:102:19, col:64> printf 1 2
|-FunctionDecl 0x5608c13e3be8 <line:120:1, col:47> col:4 jv_string_append_codepoint 'jv (jv, uint32_t)'
| |-ParmVarDecl 0x5608c13df760 <col:31, col:34> col:34 a 'jv':'jv'
| `-ParmVarDecl 0x5608c13e3ad0 <col:37, col:46> col:46 c 'uint32_t':'unsigned int'
|-FunctionDecl 0x5608c13e3ec8 <line:121:1, col:55> col:4 used jv_string_append_buf 'jv (jv, const char *, int)'
| |-ParmVarDecl 0x5608c13e3ca8 <col:25, col:28> col:28 a 'jv':'jv'
| |-ParmVarDecl 0x5608c13e3d28 <col:31, col:43> col:43 buf 'const char *'
| `-ParmVarDecl 0x5608c13e3da8 <col:48, col:52> col:52 len 'int'
|-FunctionDecl 0x5608c13e4128 <line:122:1, col:46> col:4 used jv_string_append_str 'jv (jv, const char *)'
| |-ParmVarDecl 0x5608c13e3f90 <col:25, col:28> col:28 a 'jv':'jv'
| `-ParmVarDecl 0x5608c13e4010 <col:31, col:43> col:43 str 'const char *'
|-FunctionDecl 0x5608c13e42f8 <line:123:1, col:32> col:4 used jv_string_split 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13e41e8 <col:20, col:23> col:23 j 'jv':'jv'
| `-ParmVarDecl 0x5608c13e4260 <col:26, col:29> col:29 sep 'jv':'jv'
|-FunctionDecl 0x5608c13e4448 <line:124:1, col:26> col:4 used jv_string_explode 'jv (jv)'
| `-ParmVarDecl 0x5608c13e43b8 <col:22, col:25> col:25 j 'jv':'jv'
|-FunctionDecl 0x5608c13e4590 <line:125:1, col:26> col:4 used jv_string_implode 'jv (jv)'
| `-ParmVarDecl 0x5608c13e4500 <col:22, col:25> col:25 j 'jv':'jv'
|-FunctionDecl 0x5608c13e46d0 <line:127:1, col:18> col:4 used jv_object 'jv (void)'
|-FunctionDecl 0x5608c13e4890 <line:128:1, col:35> col:4 jv_object_get 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13e4780 <col:18, col:21> col:21 object 'jv':'jv'
| `-ParmVarDecl 0x5608c13e47f8 <col:29, col:32> col:32 key 'jv':'jv'
|-FunctionDecl 0x5608c13e4a68 <line:129:1, col:36> col:5 jv_object_has 'int (jv, jv)'
| |-ParmVarDecl 0x5608c13e4950 <col:19, col:22> col:22 object 'jv':'jv'
| `-ParmVarDecl 0x5608c13e49c8 <col:30, col:33> col:33 key 'jv':'jv'
|-FunctionDecl 0x5608c13e4d38 <line:130:1, col:45> col:4 used jv_object_set 'jv (jv, jv, jv)'
| |-ParmVarDecl 0x5608c13e4b28 <col:18, col:21> col:21 object 'jv':'jv'
| |-ParmVarDecl 0x5608c13e4ba0 <col:29, col:32> col:32 key 'jv':'jv'
| `-ParmVarDecl 0x5608c13e4c18 <col:37, col:40> col:40 value 'jv':'jv'
|-FunctionDecl 0x5608c13e4f10 <line:131:1, col:38> col:4 jv_object_delete 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13e4e00 <col:21, col:24> col:24 object 'jv':'jv'
| `-ParmVarDecl 0x5608c13e4e78 <col:32, col:35> col:35 key 'jv':'jv'
|-FunctionDecl 0x5608c13e5068 <line:132:1, col:31> col:5 used jv_object_length 'int (jv)'
| `-ParmVarDecl 0x5608c13e4fd0 <col:22, col:25> col:25 object 'jv':'jv'
|-FunctionDecl 0x5608c13e5230 <line:133:1, col:26> col:4 used jv_object_merge 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13e5120 <col:20> col:22 'jv':'jv'
| `-ParmVarDecl 0x5608c13e5198 <col:24> col:26 'jv':'jv'
|-FunctionDecl 0x5608c13e5400 <line:134:1, col:36> col:4 used jv_object_merge_recursive 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13e52f0 <col:30> col:32 'jv':'jv'
| `-ParmVarDecl 0x5608c13e5368 <col:34> col:36 'jv':'jv'
|-FunctionDecl 0x5608c13e5558 <line:136:1, col:22> col:5 jv_object_iter 'int (jv)'
| `-ParmVarDecl 0x5608c13e54c0 <col:20> col:22 'jv':'jv'
|-FunctionDecl 0x5608c13e57b0 <line:137:1, col:32> col:5 jv_object_iter_next 'int (jv, int)'
| |-ParmVarDecl 0x5608c13e5610 <col:25> col:27 'jv':'jv'
| `-ParmVarDecl 0x5608c13e5690 <col:29> col:32 'int'
|-FunctionDecl 0x5608c13e5990 <line:138:1, col:33> col:5 jv_object_iter_valid 'int (jv, int)'
| |-ParmVarDecl 0x5608c13e5870 <col:26> col:28 'jv':'jv'
| `-ParmVarDecl 0x5608c13e58f0 <col:30> col:33 'int'
|-FunctionDecl 0x5608c13e6bd8 <line:139:1, col:30> col:4 jv_object_iter_key 'jv (jv, int)'
| |-ParmVarDecl 0x5608c13e6ac0 <col:23> col:25 'jv':'jv'
| `-ParmVarDecl 0x5608c13e6b40 <col:27> col:30 'int'
|-FunctionDecl 0x5608c13e6db0 <line:140:1, col:32> col:4 jv_object_iter_value 'jv (jv, int)'
| |-ParmVarDecl 0x5608c13e6c98 <col:25> col:27 'jv':'jv'
| `-ParmVarDecl 0x5608c13e6d18 <col:29> col:32 'int'
|-FunctionDecl 0x5608c13e6f08 prev 0x5608c13d1e98 <line:199:1, col:21> col:5 jv_get_refcnt 'int (jv)'
| `-ParmVarDecl 0x5608c13e6e70 <col:19> col:21 'jv':'jv'
|-EnumDecl 0x5608c13e6fb0 <line:201:1, line:213:1> line:201:6 jv_print_flags
| |-EnumConstantDecl 0x5608c13e70b0 <line:202:3, col:23> col:3 JV_PRINT_PRETTY 'int'
| | `-ConstantExpr 0x5608c13e7090 <col:23> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5608c13e7070 <col:23> 'int' 1
| |-EnumConstantDecl 0x5608c13e7140 <line:203:3, col:23> col:3 JV_PRINT_ASCII 'int'
| | `-ConstantExpr 0x5608c13e7120 <col:23> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5608c13e7100 <col:23> 'int' 2
| |-EnumConstantDecl 0x5608c13e71d0 <line:204:3, col:23> col:3 JV_PRINT_COLOR 'int'
| | `-ConstantExpr 0x5608c13e71b0 <col:23> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5608c13e7190 <col:23> 'int' 4
| |-EnumConstantDecl 0x5608c13e7260 <col:26, col:44> col:26 JV_PRINT_COLOUR 'int'
| | `-ConstantExpr 0x5608c13e7240 <col:44> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5608c13e7220 <col:44> 'int' 4
| |-EnumConstantDecl 0x5608c13e72f0 <line:205:3, col:23> col:3 JV_PRINT_SORTED 'int'
| | `-ConstantExpr 0x5608c13e72d0 <col:23> 'int'
| |   |-value: Int 8
| |   `-IntegerLiteral 0x5608c13e72b0 <col:23> 'int' 8
| |-EnumConstantDecl 0x5608c13e7380 <line:206:3, col:23> col:3 JV_PRINT_INVALID 'int'
| | `-ConstantExpr 0x5608c13e7360 <col:23> 'int'
| |   |-value: Int 16
| |   `-IntegerLiteral 0x5608c13e7340 <col:23> 'int' 16
| |-EnumConstantDecl 0x5608c13e7410 <line:207:3, col:23> col:3 JV_PRINT_REFCOUNT 'int'
| | `-ConstantExpr 0x5608c13e73f0 <col:23> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c13e73d0 <col:23> 'int' 32
| |-EnumConstantDecl 0x5608c13e74a0 <line:208:3, col:23> col:3 JV_PRINT_TAB 'int'
| | `-ConstantExpr 0x5608c13e7480 <col:23> 'int'
| |   |-value: Int 64
| |   `-IntegerLiteral 0x5608c13e7460 <col:23> 'int' 64
| |-EnumConstantDecl 0x5608c13e7530 <line:209:3, col:23> col:3 JV_PRINT_ISATTY 'int'
| | `-ConstantExpr 0x5608c13e7510 <col:23> 'int'
| |   |-value: Int 128
| |   `-IntegerLiteral 0x5608c13e74f0 <col:23> 'int' 128
| |-EnumConstantDecl 0x5608c13e75c0 <line:210:3, col:23> col:3 JV_PRINT_SPACE0 'int'
| | `-ConstantExpr 0x5608c13e75a0 <col:23> 'int'
| |   |-value: Int 256
| |   `-IntegerLiteral 0x5608c13e7580 <col:23> 'int' 256
| |-EnumConstantDecl 0x5608c13e7650 <line:211:3, col:23> col:3 JV_PRINT_SPACE1 'int'
| | `-ConstantExpr 0x5608c13e7630 <col:23> 'int'
| |   |-value: Int 512
| |   `-IntegerLiteral 0x5608c13e7610 <col:23> 'int' 512
| `-EnumConstantDecl 0x5608c13e76e0 <line:212:3, col:23> col:3 JV_PRINT_SPACE2 'int'
|   `-ConstantExpr 0x5608c13e76c0 <col:23> 'int'
|     |-value: Int 1024
|     `-IntegerLiteral 0x5608c13e76a0 <col:23> 'int' 1024
|-FunctionDecl 0x5608c13e7958 <line:216:1, col:37> col:6 used jv_dumpf 'void (jv, FILE *, int)'
| |-ParmVarDecl 0x5608c13e7740 <col:15> col:17 'jv':'jv'
| |-ParmVarDecl 0x5608c13e77b8 <col:19, col:25> col:25 f 'FILE *'
| `-ParmVarDecl 0x5608c13e7838 <col:28, col:32> col:32 flags 'int'
|-FunctionDecl 0x5608c13e7bb8 <line:217:1, col:27> col:6 jv_dump 'void (jv, int)'
| |-ParmVarDecl 0x5608c13e7a20 <col:14> col:16 'jv':'jv'
| `-ParmVarDecl 0x5608c13e7aa0 <col:18, col:22> col:22 flags 'int'
|-FunctionDecl 0x5608c13e7d90 <line:218:1, col:27> col:6 jv_show 'void (jv, int)'
| |-ParmVarDecl 0x5608c13e7c78 <col:14> col:16 'jv':'jv'
| `-ParmVarDecl 0x5608c13e7cf8 <col:18, col:22> col:22 flags 'int'
|-FunctionDecl 0x5608c13e7f68 <line:219:1, col:32> col:4 used jv_dump_string 'jv (jv, int)'
| |-ParmVarDecl 0x5608c13e7e50 <col:19> col:21 'jv':'jv'
| `-ParmVarDecl 0x5608c13e7ed0 <col:23, col:27> col:27 flags 'int'
|-FunctionDecl 0x5608c13e8250 <line:220:1, col:62> col:7 used jv_dump_string_trunc 'char *(jv, char *, size_t)'
| |-ParmVarDecl 0x5608c13e8028 <col:28, col:31> col:31 x 'jv':'jv'
| |-ParmVarDecl 0x5608c13e80a8 <col:34, col:40> col:40 outbuf 'char *'
| `-ParmVarDecl 0x5608c13e8120 <col:48, col:55> col:55 bufsize 'size_t':'unsigned long'
|-EnumDecl 0x5608c13e8308 <line:222:1, line:226:1> line:222:1
| |-EnumConstantDecl 0x5608c13e8410 <line:223:3, col:31> col:3 JV_PARSE_SEQ 'int'
| | `-ConstantExpr 0x5608c13e83f0 <col:31> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5608c13e83d0 <col:31> 'int' 1
| |-EnumConstantDecl 0x5608c13e84a0 <line:224:3, col:31> col:3 JV_PARSE_STREAMING 'int'
| | `-ConstantExpr 0x5608c13e8480 <col:31> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5608c13e8460 <col:31> 'int' 2
| `-EnumConstantDecl 0x5608c13e8530 <line:225:3, col:31> col:3 JV_PARSE_STREAM_ERRORS 'int'
|   `-ConstantExpr 0x5608c13e8510 <col:31> 'int'
|     |-value: Int 4
|     `-IntegerLiteral 0x5608c13e84f0 <col:31> 'int' 4
|-FunctionDecl 0x5608c13e8628 <line:228:1, col:31> col:4 used jv_parse 'jv (const char *)'
| `-ParmVarDecl 0x5608c13e8598 <col:13, col:25> col:25 string 'const char *'
|-FunctionDecl 0x5608c13e8800 <line:229:1, col:49> col:4 used jv_parse_sized 'jv (const char *, int)'
| |-ParmVarDecl 0x5608c13e86e8 <col:19, col:31> col:31 string 'const char *'
| `-ParmVarDecl 0x5608c13e8768 <col:39, col:43> col:43 length 'int'
|-TypedefDecl 0x5608c13e89f0 <line:231:1, col:42> col:16 referenced jv_nomem_handler_f 'void (*)(void *)'
| `-PointerType 0x5608c13e8990 'void (*)(void *)'
|   `-ParenType 0x5608c13e8930 'void (void *)' sugar
|     `-FunctionProtoType 0x5608c116cbd0 'void (void *)' cdecl
|       |-BuiltinType 0x5608c10a47e0 'void'
|       `-PointerType 0x5608c10a4fa0 'void *'
|         `-BuiltinType 0x5608c10a47e0 'void'
|-FunctionDecl 0x5608c13f4228 <line:232:1, col:49> col:6 jv_nomem_handler 'void (jv_nomem_handler_f, void *)'
| |-ParmVarDecl 0x5608c13f4090 <col:23> col:41 'jv_nomem_handler_f':'void (*)(void *)'
| `-ParmVarDecl 0x5608c13f4110 <col:43, col:48> col:49 'void *'
|-FunctionDecl 0x5608c13f4408 <line:234:1, col:34> col:4 jv_load_file 'jv (const char *, int)'
| |-ParmVarDecl 0x5608c13f42f0 <col:17, col:28> col:29 'const char *'
| `-ParmVarDecl 0x5608c13f4370 <col:31> col:34 'int'
|-RecordDecl 0x5608c13f44b8 <line:236:9, col:16> col:16 struct jv_parser
|-TypedefDecl 0x5608c13f45b8 <col:1, col:26> col:26 referenced jv_parser 'struct jv_parser':'struct jv_parser'
| `-ElaboratedType 0x5608c13f4560 'struct jv_parser' sugar
|   `-RecordType 0x5608c13f4540 'struct jv_parser'
|     `-Record 0x5608c13f44b8 'jv_parser'
|-FunctionDecl 0x5608c13f47b8 <line:237:1, col:29> col:12 jv_parser_new 'jv_parser *(int)'
| `-ParmVarDecl 0x5608c13f4668 <col:26> col:29 'int'
|-FunctionDecl 0x5608c13f4b38 <line:238:1, col:57> col:6 jv_parser_set_buf 'void (jv_parser *, const char *, int, int)'
| |-ParmVarDecl 0x5608c13f4870 <col:24, col:33> col:34 'jv_parser *'
| |-ParmVarDecl 0x5608c13f48f0 <col:36, col:46> col:47 'const char *'
| |-ParmVarDecl 0x5608c13f4970 <col:49> col:52 'int'
| `-ParmVarDecl 0x5608c13f49f0 <col:54> col:57 'int'
|-FunctionDecl 0x5608c13f4d00 <line:239:1, col:35> col:5 jv_parser_remaining 'int (jv_parser *)'
| `-ParmVarDecl 0x5608c13f4c08 <col:25, col:34> col:35 'jv_parser *'
|-FunctionDecl 0x5608c13f4ea8 <line:240:1, col:29> col:4 jv_parser_next 'jv (jv_parser *)'
| `-ParmVarDecl 0x5608c13f4db8 <col:19, col:28> col:29 'jv_parser *'
|-FunctionDecl 0x5608c13f5058 <line:241:1, col:31> col:6 jv_parser_free 'void (jv_parser *)'
| `-ParmVarDecl 0x5608c13f4f60 <col:21, col:30> col:31 'jv_parser *'
|-FunctionDecl 0x5608c13f5220 <line:243:1, col:17> col:4 jv_get 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13f5110 <col:11> col:13 'jv':'jv'
| `-ParmVarDecl 0x5608c13f5188 <col:15> col:17 'jv':'jv'
|-FunctionDecl 0x5608c13f5470 <line:244:1, col:21> col:4 jv_set 'jv (jv, jv, jv)'
| |-ParmVarDecl 0x5608c13f52e0 <col:11> col:13 'jv':'jv'
| |-ParmVarDecl 0x5608c13f5358 <col:15> col:17 'jv':'jv'
| `-ParmVarDecl 0x5608c13f53d0 <col:19> col:21 'jv':'jv'
|-FunctionDecl 0x5608c13f5648 <line:245:1, col:17> col:4 used jv_has 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13f5538 <col:11> col:13 'jv':'jv'
| `-ParmVarDecl 0x5608c13f55b0 <col:15> col:17 'jv':'jv'
|-FunctionDecl 0x5608c13f5898 <line:246:1, col:25> col:4 used jv_setpath 'jv (jv, jv, jv)'
| |-ParmVarDecl 0x5608c13f5708 <col:15> col:17 'jv':'jv'
| |-ParmVarDecl 0x5608c13f5780 <col:19> col:21 'jv':'jv'
| `-ParmVarDecl 0x5608c13f57f8 <col:23> col:25 'jv':'jv'
|-FunctionDecl 0x5608c13f5a70 <line:247:1, col:21> col:4 used jv_getpath 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13f5960 <col:15> col:17 'jv':'jv'
| `-ParmVarDecl 0x5608c13f59d8 <col:19> col:21 'jv':'jv'
|-FunctionDecl 0x5608c13f5c40 <line:248:1, col:22> col:4 used jv_delpaths 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13f5b30 <col:16> col:18 'jv':'jv'
| `-ParmVarDecl 0x5608c13f5ba8 <col:20> col:22 'jv':'jv'
|-FunctionDecl 0x5608c13f5d90 <line:249:1, col:34> col:4 used jv_keys 'jv (jv)'
| `-ParmVarDecl 0x5608c13f5d00 <col:12> col:34 'jv':'jv'
|-FunctionDecl 0x5608c13f5ed8 <line:250:1, col:43> col:4 used jv_keys_unsorted 'jv (jv)'
| `-ParmVarDecl 0x5608c13f5e48 <col:21> col:43 'jv':'jv'
|-FunctionDecl 0x5608c13f60d8 <line:251:1, col:18> col:5 used jv_cmp 'int (jv, jv)'
| |-ParmVarDecl 0x5608c13f5f90 <col:12> col:14 'jv':'jv'
| `-ParmVarDecl 0x5608c13f6008 <col:16> col:18 'jv':'jv'
|-FunctionDecl 0x5608c13f62a8 <line:252:1, col:19> col:4 used jv_group 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13f6198 <col:13> col:15 'jv':'jv'
| `-ParmVarDecl 0x5608c13f6210 <col:17> col:19 'jv':'jv'
|-FunctionDecl 0x5608c13f6478 <line:253:1, col:18> col:4 used jv_sort 'jv (jv, jv)'
| |-ParmVarDecl 0x5608c13f6368 <col:12> col:14 'jv':'jv'
| `-ParmVarDecl 0x5608c13f63e0 <col:16> col:18 'jv':'jv'
|-EnumDecl 0x5608c13f6528 <./src/jq.h:7:1, line:11:1> line:7:1
| |-EnumConstantDecl 0x5608c13f6630 <line:8:3, col:20> col:3 referenced JQ_DEBUG_TRACE 'int'
| | `-ConstantExpr 0x5608c13f6610 <col:20> 'int'
| |   |-value: Int 1
| |   `-IntegerLiteral 0x5608c13f65f0 <col:20> 'int' 1
| |-EnumConstantDecl 0x5608c13f66c0 <line:9:3, col:27> col:3 referenced JQ_DEBUG_TRACE_DETAIL 'int'
| | `-ConstantExpr 0x5608c13f66a0 <col:27> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5608c13f6680 <col:27> 'int' 2
| `-EnumConstantDecl 0x5608c13f6790 <line:10:3, col:41> col:3 JQ_DEBUG_TRACE_ALL 'int'
|   `-ConstantExpr 0x5608c13f6770 <col:24, col:41> 'int'
|     |-value: Int 3
|     `-BinaryOperator 0x5608c13f6750 <col:24, col:41> 'int' '|'
|       |-DeclRefExpr 0x5608c13f6710 <col:24> 'int' EnumConstant 0x5608c13f6630 'JQ_DEBUG_TRACE' 'int'
|       `-DeclRefExpr 0x5608c13f6730 <col:41> 'int' EnumConstant 0x5608c13f66c0 'JQ_DEBUG_TRACE_DETAIL' 'int'
|-RecordDecl 0x5608c13f67e0 <line:13:9, col:16> col:16 struct jq_state
|-TypedefDecl 0x5608c13f68d8 <col:1, col:25> col:25 referenced jq_state 'struct jq_state':'struct jq_state'
| `-ElaboratedType 0x5608c13f6880 'struct jq_state' sugar
|   `-RecordType 0x5608c13f6860 'struct jq_state'
|     `-Record 0x5608c13f67e0 'jq_state'
|-TypedefDecl 0x5608c13f6b88 <line:14:1, col:37> col:16 referenced jq_msg_cb 'void (*)(void *, jv)'
| `-PointerType 0x5608c13f6b20 'void (*)(void *, jv)'
|   `-ParenType 0x5608c13f6ac0 'void (void *, jv)' sugar
|     `-FunctionProtoType 0x5608c13f6a80 'void (void *, jv)' cdecl
|       |-BuiltinType 0x5608c10a47e0 'void'
|       |-PointerType 0x5608c10a4fa0 'void *'
|       | `-BuiltinType 0x5608c10a47e0 'void'
|       `-TypedefType 0x5608c13d13d0 'jv' sugar
|         |-Typedef 0x5608c13d1338 'jv'
|         `-ElaboratedType 0x5608c13d12e0 'struct jv' sugar
|           `-RecordType 0x5608c13d0e60 'jv'
|             `-Record 0x5608c13d0de0 ''
|-FunctionDecl 0x5608c13f6d58 <line:16:1, col:23> col:11 jq_init 'jq_state *(void)'
|-FunctionDecl 0x5608c13f7048 <line:17:1, col:51> col:6 jq_set_error_cb 'void (jq_state *, jq_msg_cb, void *)'
| |-ParmVarDecl 0x5608c13f6e08 <col:22, col:31> col:32 'jq_state *'
| |-ParmVarDecl 0x5608c13f6ea0 <col:34> col:43 'jq_msg_cb':'void (*)(void *, jv)'
| `-ParmVarDecl 0x5608c13f6f20 <col:45, col:50> col:51 'void *'
|-FunctionDecl 0x5608c13f7388 <line:18:1, col:54> col:6 jq_get_error_cb 'void (jq_state *, jq_msg_cb *, void **)'
| |-ParmVarDecl 0x5608c13f7110 <col:22, col:31> col:32 'jq_state *'
| |-ParmVarDecl 0x5608c13f71e8 <col:34, col:44> col:45 'jq_msg_cb *'
| `-ParmVarDecl 0x5608c13f7268 <col:47, col:53> col:54 'void **'
|-FunctionDecl 0x5608c13f7718 <line:19:1, col:63> col:6 jq_set_nomem_handler 'void (jq_state *, void (*)(void *), void *)'
| |-ParmVarDecl 0x5608c13f7450 <col:27, col:36> col:37 'jq_state *'
| |-ParmVarDecl 0x5608c13f7570 <col:39, col:54> col:46 'void (*)(void *)'
| `-ParmVarDecl 0x5608c13f75f0 <col:57, col:62> col:63 'void *'
|-FunctionDecl 0x5608c13f7870 <line:20:1, col:26> col:4 jq_format_error 'jv (jv)'
| `-ParmVarDecl 0x5608c13f77e0 <col:20, col:23> col:23 msg 'jv':'jv'
|-FunctionDecl 0x5608c13f7ab8 <line:21:1, col:36> col:6 jq_report_error 'void (jq_state *, jv)'
| |-ParmVarDecl 0x5608c13f7928 <col:22, col:31> col:32 'jq_state *'
| `-ParmVarDecl 0x5608c13f79a0 <col:34> col:36 'jv':'jv'
|-FunctionDecl 0x5608c13f7d10 <line:22:1, col:39> col:5 jq_compile 'int (jq_state *, const char *)'
| |-ParmVarDecl 0x5608c13f7b78 <col:16, col:25> col:26 'jq_state *'
| `-ParmVarDecl 0x5608c13f7bf8 <col:28, col:38> col:39 'const char *'
|-FunctionDecl 0x5608c13f7ff0 <line:23:1, col:48> col:5 jq_compile_args 'int (jq_state *, const char *, jv)'
| |-ParmVarDecl 0x5608c13f7dd0 <col:21, col:30> col:31 'jq_state *'
| |-ParmVarDecl 0x5608c13f7e50 <col:33, col:43> col:44 'const char *'
| `-ParmVarDecl 0x5608c13f7ec8 <col:46> col:48 'jv':'jv'
|-FunctionDecl 0x5608c13f8268 <line:24:1, col:41> col:6 jq_dump_disassembly 'void (jq_state *, int)'
| |-ParmVarDecl 0x5608c13f80d8 <col:26, col:35> col:36 'jq_state *'
| `-ParmVarDecl 0x5608c13f8158 <col:38> col:41 'int'
|-FunctionDecl 0x5608c13f8548 <line:25:1, col:40> col:6 jq_start 'void (jq_state *, jv, int)'
| |-ParmVarDecl 0x5608c13f8328 <col:15, col:24> col:25 'jq_state *'
| |-ParmVarDecl 0x5608c13f83a0 <col:27, col:30> col:30 value 'jv':'jv'
| `-ParmVarDecl 0x5608c13f8420 <col:37> col:40 'int'
|-FunctionDecl 0x5608c13f8708 <line:26:1, col:22> col:4 jq_next 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13f8610 <col:12, col:21> col:22 'jq_state *'
|-FunctionDecl 0x5608c13f8918 <line:27:1, col:29> col:6 jq_teardown 'void (jq_state **)'
| `-ParmVarDecl 0x5608c13f8820 <col:18, col:28> col:29 'jq_state **'
|-FunctionDecl 0x5608c13f8be8 <line:29:1, col:32> col:6 used jq_halt 'void (jq_state *, jv, jv)'
| |-ParmVarDecl 0x5608c13f89d0 <col:14, col:23> col:24 'jq_state *'
| |-ParmVarDecl 0x5608c13f8a48 <col:26> col:28 'jv':'jv'
| `-ParmVarDecl 0x5608c13f8ac0 <col:30> col:32 'jv':'jv'
|-FunctionDecl 0x5608c13f8db0 <line:30:1, col:25> col:5 jq_halted 'int (jq_state *)'
| `-ParmVarDecl 0x5608c13f8cb0 <col:15, col:24> col:25 'jq_state *'
|-FunctionDecl 0x5608c13f8ef8 <line:31:1, col:31> col:4 jq_get_exit_code 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13f8e68 <col:21, col:30> col:31 'jq_state *'
|-FunctionDecl 0x5608c13f9040 <line:32:1, col:35> col:4 jq_get_error_message 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13f8fb0 <col:25, col:34> col:35 'jq_state *'
|-TypedefDecl 0x5608c13f9328 <line:34:1, col:45> col:14 referenced jq_input_cb 'jv (*)(jq_state *, void *)'
| `-PointerType 0x5608c13f92c0 'jv (*)(jq_state *, void *)'
|   `-ParenType 0x5608c13f9260 'jv (jq_state *, void *)' sugar
|     `-FunctionProtoType 0x5608c13f9220 'jv (jq_state *, void *)' cdecl
|       |-TypedefType 0x5608c13d13d0 'jv' sugar
|       | |-Typedef 0x5608c13d1338 'jv'
|       | `-ElaboratedType 0x5608c13d12e0 'struct jv' sugar
|       |   `-RecordType 0x5608c13d0e60 'jv'
|       |     `-Record 0x5608c13d0de0 ''
|       |-PointerType 0x5608c13f6cb0 'jq_state *'
|       | `-TypedefType 0x5608c13f6be0 'jq_state' sugar
|       |   |-Typedef 0x5608c13f68d8 'jq_state'
|       |   `-ElaboratedType 0x5608c13f6880 'struct jq_state' sugar
|       |     `-RecordType 0x5608c13f6860 'struct jq_state'
|       |       `-Record 0x5608c13f67e0 'jq_state'
|       `-PointerType 0x5608c10a4fa0 'void *'
|         `-BuiltinType 0x5608c10a47e0 'void'
|-FunctionDecl 0x5608c13f95d8 <line:35:1, col:53> col:6 jq_set_input_cb 'void (jq_state *, jq_input_cb, void *)'
| |-ParmVarDecl 0x5608c13f9390 <col:22, col:31> col:32 'jq_state *'
| |-ParmVarDecl 0x5608c13f9430 <col:34> col:45 'jq_input_cb':'jv (*)(jq_state *, void *)'
| `-ParmVarDecl 0x5608c13f94b0 <col:47, col:52> col:53 'void *'
|-FunctionDecl 0x5608c13f9918 <line:36:1, col:56> col:6 used jq_get_input_cb 'void (jq_state *, jq_input_cb *, void **)'
| |-ParmVarDecl 0x5608c13f96a0 <col:22, col:31> col:32 'jq_state *'
| |-ParmVarDecl 0x5608c13f9778 <col:34, col:46> col:47 'jq_input_cb *'
| `-ParmVarDecl 0x5608c13f97f8 <col:49, col:55> col:56 'void **'
|-FunctionDecl 0x5608c13f9b78 <line:38:1, col:51> col:6 jq_set_debug_cb 'void (jq_state *, jq_msg_cb, void *)'
| |-ParmVarDecl 0x5608c13f99e0 <col:22, col:31> col:32 'jq_state *'
| |-ParmVarDecl 0x5608c13f9a58 <col:34> col:43 'jq_msg_cb':'void (*)(void *, jv)'
| `-ParmVarDecl 0x5608c13f9ad8 <col:45, col:50> col:51 'void *'
|-FunctionDecl 0x5608c13f9dd8 <line:39:1, col:54> col:6 used jq_get_debug_cb 'void (jq_state *, jq_msg_cb *, void **)'
| |-ParmVarDecl 0x5608c13f9c40 <col:22, col:31> col:32 'jq_state *'
| |-ParmVarDecl 0x5608c13f9cb8 <col:34, col:44> col:45 'jq_msg_cb *'
| `-ParmVarDecl 0x5608c13f9d38 <col:47, col:53> col:54 'void **'
|-FunctionDecl 0x5608c13f9fb0 <line:41:1, col:33> col:6 jq_set_attrs 'void (jq_state *, jv)'
| |-ParmVarDecl 0x5608c13f9ea0 <col:19, col:28> col:29 'jq_state *'
| `-ParmVarDecl 0x5608c13f9f18 <col:31> col:33 'jv':'jv'
|-FunctionDecl 0x5608c13fa150 <line:42:1, col:27> col:4 jq_get_attrs 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13fa0c0 <col:17, col:26> col:27 'jq_state *'
|-FunctionDecl 0x5608c13fa298 <line:43:1, col:31> col:4 used jq_get_jq_origin 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13fa208 <col:21, col:30> col:31 'jq_state *'
|-FunctionDecl 0x5608c13fa3e0 <line:44:1, col:33> col:4 used jq_get_prog_origin 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13fa350 <col:23, col:32> col:33 'jq_state *'
|-FunctionDecl 0x5608c13fa528 <line:45:1, col:30> col:4 used jq_get_lib_dirs 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13fa498 <col:20, col:29> col:30 'jq_state *'
|-FunctionDecl 0x5608c13fa770 <line:46:1, col:36> col:6 jq_set_attr 'void (jq_state *, jv, jv)'
| |-ParmVarDecl 0x5608c13fa5e0 <col:18, col:27> col:28 'jq_state *'
| |-ParmVarDecl 0x5608c13fa658 <col:30> col:32 'jv':'jv'
| `-ParmVarDecl 0x5608c13fa6d0 <col:34> col:36 'jv':'jv'
|-FunctionDecl 0x5608c13fa9c8 <line:47:1, col:30> col:4 jq_get_attr 'jv (jq_state *, jv)'
| |-ParmVarDecl 0x5608c13fa838 <col:16, col:25> col:26 'jq_state *'
| `-ParmVarDecl 0x5608c13fa8b0 <col:28> col:30 'jv':'jv'
|-RecordDecl 0x5608c13faa78 <line:55:9, col:16> col:16 struct jq_util_input_state
|-TypedefDecl 0x5608c13fab78 <col:1, col:36> col:36 referenced jq_util_input_state 'struct jq_util_input_state':'struct jq_util_input_state'
| `-ElaboratedType 0x5608c13fab20 'struct jq_util_input_state' sugar
|   `-RecordType 0x5608c13fab00 'struct jq_util_input_state'
|     `-Record 0x5608c13faa78 'jq_util_input_state'
|-TypedefDecl 0x5608c13fadf8 <line:56:1, col:52> col:16 referenced jq_util_msg_cb 'void (*)(void *, const char *)'
| `-PointerType 0x5608c13fad90 'void (*)(void *, const char *)'
|   `-ParenType 0x5608c13fad30 'void (void *, const char *)' sugar
|     `-FunctionProtoType 0x5608c13facf0 'void (void *, const char *)' cdecl
|       |-BuiltinType 0x5608c10a47e0 'void'
|       |-PointerType 0x5608c10a4fa0 'void *'
|       | `-BuiltinType 0x5608c10a47e0 'void'
|       `-PointerType 0x5608c10a5240 'const char *'
|         `-QualType 0x5608c10a4821 'const char' const
|           `-BuiltinType 0x5608c10a4820 'char'
|-FunctionDecl 0x5608c13fb098 <line:58:1, col:63> col:22 jq_util_input_init 'jq_util_input_state *(jq_util_msg_cb, void *)'
| |-ParmVarDecl 0x5608c13faea0 <col:41> col:55 'jq_util_msg_cb':'void (*)(void *, const char *)'
| `-ParmVarDecl 0x5608c13faf20 <col:57, col:62> col:63 'void *'
|-FunctionDecl 0x5608c13fb378 <line:59:1, col:70> col:6 jq_util_input_set_parser 'void (jq_util_input_state *, jv_parser *, int)'
| |-ParmVarDecl 0x5608c13fb158 <col:31, col:51> col:52 'jq_util_input_state *'
| |-ParmVarDecl 0x5608c13fb1d0 <col:54, col:64> col:65 'jv_parser *'
| `-ParmVarDecl 0x5608c13fb250 <col:67> col:70 'int'
|-FunctionDecl 0x5608c13fb598 <line:60:1, col:47> col:6 jq_util_input_free 'void (jq_util_input_state **)'
| `-ParmVarDecl 0x5608c13fb4a0 <col:25, col:46> col:47 'jq_util_input_state **'
|-FunctionDecl 0x5608c13fb7e8 <line:61:1, col:65> col:6 jq_util_input_add_input 'void (jq_util_input_state *, const char *)'
| |-ParmVarDecl 0x5608c13fb650 <col:30, col:50> col:51 'jq_util_input_state *'
| `-ParmVarDecl 0x5608c13fb6d0 <col:53, col:64> col:65 'const char *'
|-FunctionDecl 0x5608c13fb9a0 <line:62:1, col:47> col:5 jq_util_input_errors 'int (jq_util_input_state *)'
| `-ParmVarDecl 0x5608c13fb8a8 <col:26, col:46> col:47 'jq_util_input_state *'
|-FunctionDecl 0x5608c13fbb48 <line:63:1, col:50> col:4 jq_util_input_next_input 'jv (jq_util_input_state *)'
| `-ParmVarDecl 0x5608c13fba58 <col:29, col:49> col:50 'jq_util_input_state *'
|-FunctionDecl 0x5608c13fbd18 <line:64:1, col:50> col:4 jq_util_input_next_input_cb 'jv (jq_state *, void *)'
| |-ParmVarDecl 0x5608c13fbc00 <col:32, col:41> col:42 'jq_state *'
| `-ParmVarDecl 0x5608c13fbc80 <col:44, col:49> col:50 'void *'
|-FunctionDecl 0x5608c13fbe68 <line:65:1, col:40> col:4 jq_util_input_get_position 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13fbdd8 <col:31, col:39> col:40 'jq_state *'
|-FunctionDecl 0x5608c13fbfb0 <line:66:1, col:48> col:4 used jq_util_input_get_current_filename 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13fbf20 <col:39, col:47> col:48 'jq_state *'
|-FunctionDecl 0x5608c13fd170 <line:67:1, col:44> col:4 used jq_util_input_get_current_line 'jv (jq_state *)'
| `-ParmVarDecl 0x5608c13fd0e0 <col:35, col:43> col:44 'jq_state *'
|-FunctionDecl 0x5608c13fd2c8 <line:69:1, col:31> col:5 jq_set_colors 'int (const char *)'
| `-ParmVarDecl 0x5608c13fd230 <col:19, col:30> col:31 'const char *'
|-EnumDecl 0x5608c13fd370 <./src/bytecode.h:7:9, line:11:1> line:7:9
| |-EnumConstantDecl 0x5608c13fd430 <./src/opcode_list.h:1:4> col:4 LOADK 'int'
| |-EnumConstantDecl 0x5608c13fd480 <line:2:4> col:4 referenced DUP 'int'
| |-EnumConstantDecl 0x5608c13fd4d0 <line:3:4> col:4 DUPN 'int'
| |-EnumConstantDecl 0x5608c13fd520 <line:4:4> col:4 DUP2 'int'
| |-EnumConstantDecl 0x5608c13fd570 <line:5:4> col:4 PUSHK_UNDER 'int'
| |-EnumConstantDecl 0x5608c13fd5c0 <line:6:4> col:4 POP 'int'
| |-EnumConstantDecl 0x5608c13fd610 <line:7:4> col:4 referenced LOADV 'int'
| |-EnumConstantDecl 0x5608c13fd660 <line:8:4> col:4 LOADVN 'int'
| |-EnumConstantDecl 0x5608c13fd6b0 <line:9:4> col:4 referenced STOREV 'int'
| |-EnumConstantDecl 0x5608c13fd700 <line:10:4> col:4 STORE_GLOBAL 'int'
| |-EnumConstantDecl 0x5608c13fd750 <line:11:4> col:4 INDEX 'int'
| |-EnumConstantDecl 0x5608c13fd7a0 <line:12:4> col:4 INDEX_OPT 'int'
| |-EnumConstantDecl 0x5608c13fd7f0 <line:13:4> col:4 EACH 'int'
| |-EnumConstantDecl 0x5608c13fd840 <line:14:4> col:4 EACH_OPT 'int'
| |-EnumConstantDecl 0x5608c13fd890 <line:15:4> col:4 FORK 'int'
| |-EnumConstantDecl 0x5608c13fd8e0 <line:16:4> col:4 FORK_OPT 'int'
| |-EnumConstantDecl 0x5608c13fd930 <line:17:4> col:4 JUMP 'int'
| |-EnumConstantDecl 0x5608c13fd980 <line:18:4> col:4 JUMP_F 'int'
| |-EnumConstantDecl 0x5608c13fd9d0 <line:19:4> col:4 referenced BACKTRACK 'int'
| |-EnumConstantDecl 0x5608c13fda20 <line:20:4> col:4 APPEND 'int'
| |-EnumConstantDecl 0x5608c13fda70 <line:21:4> col:4 INSERT 'int'
| |-EnumConstantDecl 0x5608c13fdac0 <line:22:4> col:4 referenced RANGE 'int'
| |-EnumConstantDecl 0x5608c13fdb10 <line:24:4> col:4 SUBEXP_BEGIN 'int'
| |-EnumConstantDecl 0x5608c13fdb60 <line:25:4> col:4 SUBEXP_END 'int'
| |-EnumConstantDecl 0x5608c13fdbb0 <line:27:4> col:4 referenced PATH_BEGIN 'int'
| |-EnumConstantDecl 0x5608c13fdc00 <line:28:4> col:4 referenced PATH_END 'int'
| |-EnumConstantDecl 0x5608c13fdc50 <line:30:4> col:4 CALL_BUILTIN 'int'
| |-EnumConstantDecl 0x5608c13fdca0 <line:32:4> col:4 CALL_JQ 'int'
| |-EnumConstantDecl 0x5608c13fdcf0 <line:33:4> col:4 RET 'int'
| |-EnumConstantDecl 0x5608c13fdd40 <line:34:4> col:4 TAIL_CALL_JQ 'int'
| |-EnumConstantDecl 0x5608c13fdd90 <line:36:4> col:4 CLOSURE_PARAM 'int'
| |-EnumConstantDecl 0x5608c13fdde0 <line:37:4> col:4 CLOSURE_REF 'int'
| |-EnumConstantDecl 0x5608c13fde30 <line:38:4> col:4 CLOSURE_CREATE 'int'
| |-EnumConstantDecl 0x5608c13fde80 <line:39:4> col:4 CLOSURE_CREATE_C 'int'
| |-EnumConstantDecl 0x5608c13fded0 <line:41:4> col:4 TOP 'int'
| |-EnumConstantDecl 0x5608c13fdf20 <line:42:4> col:4 CLOSURE_PARAM_REGULAR 'int'
| |-EnumConstantDecl 0x5608c13fdf70 <line:43:4> col:4 DEPS 'int'
| |-EnumConstantDecl 0x5608c13fdfc0 <line:44:4> col:4 MODULEMETA 'int'
| |-EnumConstantDecl 0x5608c13fe010 <line:45:4> col:4 GENLABEL 'int'
| |-EnumConstantDecl 0x5608c13fe060 <line:47:4> col:4 DESTRUCTURE_ALT 'int'
| `-EnumConstantDecl 0x5608c13fe0b0 <line:48:4> col:4 STOREVN 'int'
|-TypedefDecl 0x5608c13fe158 <./src/bytecode.h:7:1, line:11:3> col:3 referenced opcode 'enum opcode':'opcode'
| `-ElaboratedType 0x5608c13fe100 'enum opcode' sugar
|   `-EnumType 0x5608c13fd410 'opcode'
|     `-Enum 0x5608c13fd370 ''
|-EnumDecl 0x5608c13fe1c8 <line:13:1, line:18:1> line:13:1
| `-EnumConstantDecl 0x5608c13fece8 <line:14:3, line:15:33> line:14:3 NUM_OPCODES 'int'
|   `-ConstantExpr 0x5608c13fecc8 <line:15:32, col:33> 'int'
|     |-value: Int 41
|     `-BinaryOperator 0x5608c13feca8 <col:32, col:33> 'int' '+'
|       |-BinaryOperator 0x5608c13fec68 <col:32, col:33> 'int' '+'
|       | |-BinaryOperator 0x5608c13fec28 <col:32, col:33> 'int' '+'
|       | | |-BinaryOperator 0x5608c13febe8 <col:32, col:33> 'int' '+'
|       | | | |-BinaryOperator 0x5608c13feba8 <col:32, col:33> 'int' '+'
|       | | | | |-BinaryOperator 0x5608c13feb68 <col:32, col:33> 'int' '+'
|       | | | | | |-BinaryOperator 0x5608c13feb28 <col:32, col:33> 'int' '+'
|       | | | | | | |-BinaryOperator 0x5608c13feae8 <col:32, col:33> 'int' '+'
|       | | | | | | | |-BinaryOperator 0x5608c13feaa8 <col:32, col:33> 'int' '+'
|       | | | | | | | | |-BinaryOperator 0x5608c13fea68 <col:32, col:33> 'int' '+'
|       | | | | | | | | | |-BinaryOperator 0x5608c13fea28 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | |-BinaryOperator 0x5608c13fe9e8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | |-BinaryOperator 0x5608c13fe9a8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe968 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe928 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe8e8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe8a8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe868 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe828 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe7e8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe7a8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe768 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe728 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe6e8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe6a8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe668 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe628 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe5e8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe5a8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe568 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe528 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe4e8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe4a8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe468 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe428 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe3e8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe3a8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe368 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe328 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-BinaryOperator 0x5608c13fe2e8 <col:32, col:33> 'int' '+'
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |-UnaryOperator 0x5608c13fe2b0 <col:32, col:33> 'int' prefix '+' cannot overflow
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe290 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe2c8 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe308 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe348 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe388 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe3c8 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe408 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe448 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe488 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe4c8 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe508 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe548 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe588 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe5c8 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe608 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe648 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe688 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe6c8 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe708 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe748 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe788 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe7c8 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe808 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe848 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe888 <col:33> 'int' 1
|       | | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe8c8 <col:33> 'int' 1
|       | | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe908 <col:33> 'int' 1
|       | | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe948 <col:33> 'int' 1
|       | | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe988 <col:33> 'int' 1
|       | | | | | | | | | | | `-IntegerLiteral 0x5608c13fe9c8 <col:33> 'int' 1
|       | | | | | | | | | | `-IntegerLiteral 0x5608c13fea08 <col:33> 'int' 1
|       | | | | | | | | | `-IntegerLiteral 0x5608c13fea48 <col:33> 'int' 1
|       | | | | | | | | `-IntegerLiteral 0x5608c13fea88 <col:33> 'int' 1
|       | | | | | | | `-IntegerLiteral 0x5608c13feac8 <col:33> 'int' 1
|       | | | | | | `-IntegerLiteral 0x5608c13feb08 <col:33> 'int' 1
|       | | | | | `-IntegerLiteral 0x5608c13feb48 <col:33> 'int' 1
|       | | | | `-IntegerLiteral 0x5608c13feb88 <col:33> 'int' 1
|       | | | `-IntegerLiteral 0x5608c13febc8 <col:33> 'int' 1
|       | | `-IntegerLiteral 0x5608c13fec08 <col:33> 'int' 1
|       | `-IntegerLiteral 0x5608c13fec48 <col:33> 'int' 1
|       `-IntegerLiteral 0x5608c13fec88 <col:33> 'int' 1
|-EnumDecl 0x5608c13fed38 <line:20:1, line:31:1> line:20:1
| |-EnumConstantDecl 0x5608c13fee40 <line:21:3, col:21> col:3 OP_HAS_CONSTANT 'int'
| | `-ConstantExpr 0x5608c13fee20 <col:21> 'int'
| |   |-value: Int 2
| |   `-IntegerLiteral 0x5608c13fee00 <col:21> 'int' 2
| |-EnumConstantDecl 0x5608c13feed0 <line:22:3, col:21> col:3 OP_HAS_VARIABLE 'int'
| | `-ConstantExpr 0x5608c13feeb0 <col:21> 'int'
| |   |-value: Int 4
| |   `-IntegerLiteral 0x5608c13fee90 <col:21> 'int' 4
| |-EnumConstantDecl 0x5608c13fef60 <line:23:3, col:19> col:3 OP_HAS_BRANCH 'int'
| | `-ConstantExpr 0x5608c13fef40 <col:19> 'int'
| |   |-value: Int 8
| |   `-IntegerLiteral 0x5608c13fef20 <col:19> 'int' 8
| |-EnumConstantDecl 0x5608c13feff0 <line:24:3, col:18> col:3 OP_HAS_CFUNC 'int'
| | `-ConstantExpr 0x5608c13fefd0 <col:18> 'int'
| |   |-value: Int 32
| |   `-IntegerLiteral 0x5608c13fefb0 <col:18> 'int' 32
| |-EnumConstantDecl 0x5608c13ff080 <line:25:3, col:18> col:3 OP_HAS_UFUNC 'int'
| | `-ConstantExpr 0x5608c13ff060 <col:18> 'int'
| |   |-value: Int 64
| |   `-IntegerLiteral 0x5608c13ff040 <col:18> 'int' 64
| |-EnumConstantDecl 0x5608c1400d70 <line:26:3, col:23> col:3 referenced OP_IS_CALL_PSEUDO 'int'
| | `-ConstantExpr 0x5608c1400d50 <col:23> 'int'
| |   |-value: Int 128
| |   `-IntegerLiteral 0x5608c1400d30 <col:23> 'int' 128
| |-EnumConstantDecl 0x5608c1400e00 <line:27:3, col:20> col:3 OP_HAS_BINDING 'int'
| | `-ConstantExpr 0x5608c1400de0 <col:20> 'int'
| |   |-value: Int 1024
| |   `-IntegerLiteral 0x5608c1400dc0 <col:20> 'int' 1024
| `-EnumConstantDecl 0x5608c1400e90 <line:30:3, col:22> col:3 OP_BIND_WILDCARD 'int'
|   `-ConstantExpr 0x5608c1400e70 <col:22> 'int'
|     |-value: Int 2048
|     `-IntegerLiteral 0x5608c1400e50 <col:22> 'int' 2048
|-RecordDecl 0x5608c1400ee0 <line:32:1, line:42:1> line:32:8 struct opcode_description definition
| |-FieldDecl 0x5608c1400fb0 <line:33:3, col:10> col:10 op 'opcode':'opcode'
| |-FieldDecl 0x5608c1401018 <line:34:3, col:15> col:15 name 'const char *'
| |-FieldDecl 0x5608c1401080 <line:36:3, col:7> col:7 flags 'int'
| |-FieldDecl 0x5608c14010e8 <line:39:3, col:7> col:7 length 'int'
| |-FieldDecl 0x5608c1401150 <line:41:3, col:7> col:7 stack_in 'int'
| `-FieldDecl 0x5608c14011b8 <col:3, col:17> col:17 stack_out 'int'
|-FunctionDecl 0x5608c14013b0 <line:44:1, col:59> col:34 opcode_describe 'const struct opcode_description *(opcode)'
| `-ParmVarDecl 0x5608c1401218 <col:50, col:57> col:57 op 'opcode':'opcode'
|-TypedefDecl 0x5608c1401548 <line:48:1, col:31> col:16 referenced cfunction_ptr 'void (*)()'
| `-PointerType 0x5608c14014f0 'void (*)()'
|   `-ParenType 0x5608c1401490 'void ()' sugar
|     `-FunctionNoProtoType 0x5608c1401460 'void ()' cdecl
|       `-BuiltinType 0x5608c10a47e0 'void'
|-RecordDecl 0x5608c14015a0 <line:49:1, line:53:1> line:49:8 struct cfunction definition
| |-FieldDecl 0x5608c1401670 <line:50:3, col:17> col:17 fptr 'cfunction_ptr':'void (*)()'
| |-FieldDecl 0x5608c14016d8 <line:51:3, col:15> col:15 name 'const char *'
| `-FieldDecl 0x5608c1401740 <line:52:3, col:7> col:7 nargs 'int'
|-RecordDecl 0x5608c1401790 <line:55:1, line:59:1> line:55:8 struct symbol_table definition
| |-FieldDecl 0x5608c14018e0 <line:56:3, col:21> col:21 cfunctions 'struct cfunction *'
| |-FieldDecl 0x5608c1401948 <line:57:3, col:7> col:7 ncfunctions 'int'
| `-FieldDecl 0x5608c14019a8 <line:58:3, col:6> col:6 cfunc_names 'jv':'jv'
|-RecordDecl 0x5608c14019f8 <line:68:1, line:84:1> line:68:8 struct bytecode definition
| |-FieldDecl 0x5608c1401af8 <line:69:3, col:13> col:13 code 'uint16_t *'
| |-FieldDecl 0x5608c1401b60 <line:70:3, col:7> col:7 codelen 'int'
| |-FieldDecl 0x5608c1401bc8 <line:72:3, col:7> col:7 nlocals 'int'
| |-FieldDecl 0x5608c1401c30 <line:73:3, col:7> col:7 nclosures 'int'
| |-FieldDecl 0x5608c1401c90 <line:75:3, col:6> col:6 constants 'jv':'jv'
| |-FieldDecl 0x5608c1401d90 <line:76:3, col:24> col:24 globals 'struct symbol_table *'
| |-FieldDecl 0x5608c1401ef0 <line:78:3, col:21> col:21 subfunctions 'struct bytecode **'
| |-FieldDecl 0x5608c1401f58 <line:79:3, col:7> col:7 nsubfunctions 'int'
| |-FieldDecl 0x5608c1401fd0 <line:81:3, col:20> col:20 parent 'struct bytecode *'
| `-FieldDecl 0x5608c1402030 <line:83:3, col:6> col:6 debuginfo 'jv':'jv'
|-FunctionDecl 0x5608c1402238 <line:86:1, col:49> col:6 dump_disassembly 'void (int, struct bytecode *)'
| |-ParmVarDecl 0x5608c1402098 <col:23> col:26 'int'
| `-ParmVarDecl 0x5608c1402128 <col:28, col:45> col:45 code 'struct bytecode *'
|-FunctionDecl 0x5608c1402498 <line:87:1, col:54> col:6 dump_operation 'void (struct bytecode *, uint16_t *)'
| |-ParmVarDecl 0x5608c1402310 <col:21, col:38> col:38 bc 'struct bytecode *'
| `-ParmVarDecl 0x5608c1402388 <col:42, col:52> col:52 op 'uint16_t *'
|-FunctionDecl 0x5608c1402650 <line:89:1, col:48> col:5 bytecode_operation_length 'int (uint16_t *)'
| `-ParmVarDecl 0x5608c1402558 <col:31, col:41> col:41 codeptr 'uint16_t *'
|-FunctionDecl 0x5608c1402818 <line:90:1, col:39> col:6 bytecode_free 'void (struct bytecode *)'
| `-ParmVarDecl 0x5608c1402720 <col:20, col:37> col:37 bc 'struct bytecode *'
|-RecordDecl 0x5608c14028c0 <./src/locfile.h:6:9, line:8:1> line:6:9 struct definition
| |-FieldDecl 0x5608c1402978 <line:7:3, col:7> col:7 start 'int'
| `-FieldDecl 0x5608c14029e0 <col:3, col:14> col:14 end 'int'
|-TypedefDecl 0x5608c1402a88 <line:6:1, line:8:3> col:3 referenced location 'struct location':'location'
| `-ElaboratedType 0x5608c1402a30 'struct location' sugar
|   `-RecordType 0x5608c1402940 'location'
|     `-Record 0x5608c14028c0 ''
|-VarDecl 0x5608c1402b30 <line:10:1, col:49> col:23 UNKNOWN_LOCATION 'const location':'const location' static cinit
| `-InitListExpr 0x5608c1402c68 <col:42, col:49> 'location':'location'
|   |-UnaryOperator 0x5608c1402bb8 <col:43, col:44> 'int' prefix '-'
|   | `-IntegerLiteral 0x5608c1402b98 <col:44> 'int' 1
|   `-UnaryOperator 0x5608c1402bf0 <col:47, col:48> 'int' prefix '-'
|     `-IntegerLiteral 0x5608c1402bd0 <col:48> 'int' 1
|-RecordDecl 0x5608c1403e90 <line:12:1, line:21:1> line:12:8 struct locfile definition
| |-FieldDecl 0x5608c1403f40 <line:13:3, col:6> col:6 fname 'jv':'jv'
| |-FieldDecl 0x5608c1403fa8 <line:14:3, col:15> col:15 data 'const char *'
| |-FieldDecl 0x5608c1404010 <line:15:3, col:7> col:7 length 'int'
| |-FieldDecl 0x5608c1404078 <line:16:3, col:8> col:8 linemap 'int *'
| |-FieldDecl 0x5608c14040e0 <line:17:3, col:7> col:7 nlines 'int'
| |-FieldDecl 0x5608c1404148 <line:18:3, col:9> col:9 error 'char *'
| |-FieldDecl 0x5608c14041a8 <line:19:3, col:13> col:13 jq 'jq_state *'
| `-FieldDecl 0x5608c1404210 <line:20:3, col:7> col:7 refct 'int'
|-FunctionDecl 0x5608c14046b0 <line:23:1, col:73> col:17 used locfile_init 'struct locfile *(jq_state *, const char *, const char *, int)'
| |-ParmVarDecl 0x5608c1404348 <col:30, col:39> col:40 'jq_state *'
| |-ParmVarDecl 0x5608c14043c8 <col:42, col:53> col:54 'const char *'
| |-ParmVarDecl 0x5608c1404448 <col:56, col:67> col:68 'const char *'
| `-ParmVarDecl 0x5608c14044c8 <col:70> col:73 'int'
|-FunctionDecl 0x5608c14048a0 <line:24:1, col:48> col:17 locfile_retain 'struct locfile *(struct locfile *)'
| `-ParmVarDecl 0x5608c1404798 <col:32, col:47> col:48 'struct locfile *'
|-FunctionDecl 0x5608c1404b10 <line:25:1, col:43> col:5 locfile_get_line 'int (struct locfile *, int)'
| |-ParmVarDecl 0x5608c1404970 <col:22, col:37> col:38 'struct locfile *'
| `-ParmVarDecl 0x5608c14049f0 <col:40> col:43 'int'
|-FunctionDecl 0x5608c1404cd8 <line:26:1, col:35> col:6 used locfile_free 'void (struct locfile *)'
| `-ParmVarDecl 0x5608c1404be8 <col:19, col:34> col:35 'struct locfile *'
|-FunctionDecl 0x5608c1404fe0 <line:27:1, col:66> col:6 locfile_locate 'void (struct locfile *, location, const char *, ...)'
| |-ParmVarDecl 0x5608c1404da8 <col:21, col:36> col:37 'struct locfile *'
| |-ParmVarDecl 0x5608c1404e20 <col:39> col:47 'location':'location'
| `-ParmVarDecl 0x5608c1404ea0 <col:49, col:60> col:61 'const char *'
|-RecordDecl 0x5608c1405098 <./src/compile.h:8:1, col:8> col:8 struct inst
|-TypedefDecl 0x5608c1405190 <line:9:1, col:21> col:21 referenced inst 'struct inst':'struct inst'
| `-ElaboratedType 0x5608c1405140 'struct inst' sugar
|   `-RecordType 0x5608c1405120 'struct inst'
|     `-Record 0x5608c1405098 'inst'
|-RecordDecl 0x5608c14051e8 <line:12:9, line:15:1> line:12:16 struct block definition
| |-FieldDecl 0x5608c1405318 <line:13:3, col:9> col:9 first 'inst *'
| `-FieldDecl 0x5608c1405378 <line:14:3, col:9> col:9 last 'inst *'
|-TypedefDecl 0x5608c1405428 <line:12:1, line:15:3> col:3 referenced block 'struct block':'struct block'
| `-ElaboratedType 0x5608c14053d0 'struct block' sugar
|   `-RecordType 0x5608c1405270 'struct block'
|     `-Record 0x5608c14051e8 'block'
|-FunctionDecl 0x5608c14056f8 <line:17:1, col:52> col:7 gen_location 'block (location, struct locfile *, block)'
| |-ParmVarDecl 0x5608c14054d0 <col:20> col:28 'location':'location'
| |-ParmVarDecl 0x5608c1405560 <col:30, col:44> col:45 'struct locfile *'
| `-ParmVarDecl 0x5608c14055d8 <col:47> col:52 'block':'struct block'
|-FunctionDecl 0x5608c1405828 <line:19:1, col:16> col:7 used gen_noop 'block ()'
|-FunctionDecl 0x5608c14059d0 <line:20:1, col:26> col:5 block_is_noop 'int (block)'
| `-ParmVarDecl 0x5608c14058d8 <col:19, col:25> col:25 b 'block':'struct block'
|-FunctionDecl 0x5608c1405b78 <line:21:1, col:30> col:7 used gen_op_simple 'block (opcode)'
| `-ParmVarDecl 0x5608c1405a88 <col:21, col:28> col:28 op 'opcode':'opcode'
|-FunctionDecl 0x5608c1405d28 <line:22:1, col:28> col:7 used gen_const 'block (jv)'
| `-ParmVarDecl 0x5608c1405c30 <col:17, col:20> col:20 constant 'jv':'jv'
|-FunctionDecl 0x5608c1405fb8 <line:23:1, col:53> col:7 gen_const_global 'block (jv, const char *)'
| |-ParmVarDecl 0x5608c1405de0 <col:24, col:27> col:27 constant 'jv':'jv'
| `-ParmVarDecl 0x5608c1405ea0 <col:37, col:49> col:49 name 'const char *'
|-FunctionDecl 0x5608c1406110 <line:24:1, col:27> col:5 block_is_const 'int (block)'
| `-ParmVarDecl 0x5608c1406078 <col:20, col:26> col:26 b 'block':'struct block'
|-FunctionDecl 0x5608c1406260 <line:25:1, col:31> col:5 block_is_const_inf 'int (block)'
| `-ParmVarDecl 0x5608c14061c8 <col:24, col:30> col:30 b 'block':'struct block'
|-FunctionDecl 0x5608c1406408 <line:26:1, col:33> col:9 block_const_kind 'jv_kind (block)'
| `-ParmVarDecl 0x5608c1406318 <col:26, col:32> col:32 b 'block':'struct block'
|-FunctionDecl 0x5608c14065b8 <line:27:1, col:23> col:4 block_const 'jv (block)'
| `-ParmVarDecl 0x5608c14064c0 <col:16, col:22> col:22 b 'block':'struct block'
|-FunctionDecl 0x5608c14067f8 <line:28:1, col:44> col:7 gen_op_target 'block (opcode, block)'
| |-ParmVarDecl 0x5608c1406670 <col:21, col:28> col:28 op 'opcode':'opcode'
| `-ParmVarDecl 0x5608c14066e8 <col:32, col:38> col:38 target 'block':'struct block'
|-FunctionDecl 0x5608c1406a48 <line:29:1, col:49> col:7 gen_op_unbound 'block (opcode, const char *)'
| |-ParmVarDecl 0x5608c14068b8 <col:22, col:29> col:29 op 'opcode':'opcode'
| `-ParmVarDecl 0x5608c1406938 <col:33, col:45> col:45 name 'const char *'
|-FunctionDecl 0x5608c1406c18 <line:30:1, col:43> col:7 used gen_op_bound 'block (opcode, block)'
| |-ParmVarDecl 0x5608c1406b08 <col:20, col:27> col:27 op 'opcode':'opcode'
| `-ParmVarDecl 0x5608c1406b80 <col:31, col:37> col:37 binder 'block':'struct block'
|-FunctionDecl 0x5608c1406df0 <line:31:1, col:51> col:7 used gen_op_var_fresh 'block (opcode, const char *)'
| |-ParmVarDecl 0x5608c1406cd8 <col:24, col:31> col:31 op 'opcode':'opcode'
| `-ParmVarDecl 0x5608c1406d58 <col:35, col:47> col:47 name 'const char *'
|-FunctionDecl 0x5608c1406f40 <line:32:1, col:37> col:7 gen_op_pushk_under 'block (jv)'
| `-ParmVarDecl 0x5608c1406eb0 <col:26, col:29> col:29 constant 'jv':'jv'
|-FunctionDecl 0x5608c14070e8 <line:34:1, col:32> col:7 gen_module 'block (block)'
| `-ParmVarDecl 0x5608c1406ff8 <col:18, col:24> col:24 metadata 'block':'struct block'
|-FunctionDecl 0x5608c1407230 <line:35:1, col:29> col:4 block_module_meta 'jv (block)'
| `-ParmVarDecl 0x5608c14071a0 <col:22, col:28> col:28 b 'block':'struct block'
|-FunctionDecl 0x5608c1407518 <line:36:1, col:63> col:7 gen_import 'block (const char *, const char *, int)'
| |-ParmVarDecl 0x5608c14072f0 <col:18, col:30> col:30 name 'const char *'
| |-ParmVarDecl 0x5608c1407370 <col:36, col:48> col:48 as 'const char *'
| `-ParmVarDecl 0x5608c14073f0 <col:52, col:56> col:56 is_data 'int'
|-FunctionDecl 0x5608c1407768 <line:37:1, col:51> col:7 gen_import_meta 'block (block, block)'
| |-ParmVarDecl 0x5608c14075e0 <col:23, col:29> col:29 import 'block':'struct block'
| `-ParmVarDecl 0x5608c1407658 <col:37, col:43> col:43 metadata 'block':'struct block'
|-FunctionDecl 0x5608c1407a48 <line:38:1, col:63> col:7 used gen_function 'block (const char *, block, block)'
| |-ParmVarDecl 0x5608c1407830 <col:20, col:32> col:32 name 'const char *'
| |-ParmVarDecl 0x5608c14078a8 <col:38, col:44> col:44 formals 'block':'struct block'
| `-ParmVarDecl 0x5608c1407920 <col:53, col:59> col:59 body 'block':'struct block'
|-FunctionDecl 0x5608c1407c08 <line:39:1, col:41> col:7 gen_param_regular 'block (const char *)'
| `-ParmVarDecl 0x5608c1407b18 <col:25, col:37> col:37 name 'const char *'
|-FunctionDecl 0x5608c1407d58 <line:40:1, col:33> col:7 used gen_param 'block (const char *)'
| `-ParmVarDecl 0x5608c1407cc8 <col:17, col:29> col:29 name 'const char *'
|-FunctionDecl 0x5608c1408ec0 <line:41:1, col:28> col:7 gen_lambda 'block (block)'
| `-ParmVarDecl 0x5608c1407e10 <col:18, col:24> col:24 body 'block':'struct block'
|-FunctionDecl 0x5608c1409108 <line:42:1, col:44> col:7 used gen_call 'block (const char *, block)'
| |-ParmVarDecl 0x5608c1408f80 <col:16, col:28> col:28 name 'const char *'
| `-ParmVarDecl 0x5608c1408ff8 <col:34, col:40> col:40 body 'block':'struct block'
|-FunctionDecl 0x5608c1409258 <line:43:1, col:25> col:7 gen_subexp 'block (block)'
| `-ParmVarDecl 0x5608c14091c8 <col:18, col:24> col:24 a 'block':'struct block'
|-FunctionDecl 0x5608c1409420 <line:44:1, col:32> col:7 gen_both 'block (block, block)'
| |-ParmVarDecl 0x5608c1409310 <col:16, col:22> col:22 a 'block':'struct block'
| `-ParmVarDecl 0x5608c1409388 <col:25, col:31> col:31 b 'block':'struct block'
|-FunctionDecl 0x5608c1409570 <line:45:1, col:34> col:7 gen_const_object 'block (block)'
| `-ParmVarDecl 0x5608c14094e0 <col:24, col:30> col:30 expr 'block':'struct block'
|-FunctionDecl 0x5608c14096b8 <line:46:1, col:29> col:7 gen_collect 'block (block)'
| `-ParmVarDecl 0x5608c1409628 <col:19, col:25> col:25 expr 'block':'struct block'
|-FunctionDecl 0x5608c1409a18 <line:47:1, col:69> col:7 gen_reduce 'block (block, block, block, block)'
| |-ParmVarDecl 0x5608c1409770 <col:18, col:24> col:24 source 'block':'struct block'
| |-ParmVarDecl 0x5608c14097e8 <col:32, col:38> col:38 matcher 'block':'struct block'
| |-ParmVarDecl 0x5608c1409860 <col:47, col:53> col:53 init 'block':'struct block'
| `-ParmVarDecl 0x5608c14098d8 <col:59, col:65> col:65 body 'block':'struct block'
|-FunctionDecl 0x5608c1409e18 <line:48:1, col:87> col:7 gen_foreach 'block (block, block, block, block, block)'
| |-ParmVarDecl 0x5608c1409ae8 <col:19, col:25> col:25 source 'block':'struct block'
| |-ParmVarDecl 0x5608c1409b60 <col:33, col:39> col:39 matcher 'block':'struct block'
| |-ParmVarDecl 0x5608c1409bd8 <col:48, col:54> col:54 init 'block':'struct block'
| |-ParmVarDecl 0x5608c1409c50 <col:60, col:66> col:66 update 'block':'struct block'
| `-ParmVarDecl 0x5608c1409cc8 <col:74, col:80> col:80 extract 'block':'struct block'
|-FunctionDecl 0x5608c140a000 <line:49:1, col:37> col:7 gen_definedor 'block (block, block)'
| |-ParmVarDecl 0x5608c1409ef0 <col:21, col:27> col:27 a 'block':'struct block'
| `-ParmVarDecl 0x5608c1409f68 <col:30, col:36> col:36 b 'block':'struct block'
|-FunctionDecl 0x5608c140a1d0 <line:50:1, col:49> col:7 used gen_condbranch 'block (block, block)'
| |-ParmVarDecl 0x5608c140a0c0 <col:22, col:28> col:28 iftrue 'block':'struct block'
| `-ParmVarDecl 0x5608c140a138 <col:36, col:42> col:42 iffalse 'block':'struct block'
|-FunctionDecl 0x5608c140a3a0 <line:51:1, col:31> col:7 gen_and 'block (block, block)'
| |-ParmVarDecl 0x5608c140a290 <col:15, col:21> col:21 a 'block':'struct block'
| `-ParmVarDecl 0x5608c140a308 <col:24, col:30> col:30 b 'block':'struct block'
|-FunctionDecl 0x5608c140a570 <line:52:1, col:30> col:7 gen_or 'block (block, block)'
| |-ParmVarDecl 0x5608c140a460 <col:14, col:20> col:20 a 'block':'struct block'
| `-ParmVarDecl 0x5608c140a4d8 <col:23, col:29> col:29 b 'block':'struct block'
|-FunctionDecl 0x5608c140a740 <line:53:1, col:36> col:7 gen_dictpair 'block (block, block)'
| |-ParmVarDecl 0x5608c140a630 <col:20, col:26> col:26 k 'block':'struct block'
| `-ParmVarDecl 0x5608c140a6a8 <col:29, col:35> col:35 v 'block':'struct block'
|-FunctionDecl 0x5608c140aa18 <line:55:1, col:62> col:7 gen_var_binding 'block (block, const char *, block)'
| |-ParmVarDecl 0x5608c140a800 <col:23, col:29> col:29 var 'block':'struct block'
| |-ParmVarDecl 0x5608c140a880 <col:34, col:46> col:46 name 'const char *'
| `-ParmVarDecl 0x5608c140a8f8 <col:52, col:58> col:58 body 'block':'struct block'
|-FunctionDecl 0x5608c140abf0 <line:56:1, col:47> col:7 gen_array_matcher 'block (block, block)'
| |-ParmVarDecl 0x5608c140aae0 <col:25, col:31> col:31 left 'block':'struct block'
| `-ParmVarDecl 0x5608c140ab58 <col:37, col:43> col:43 curr 'block':'struct block'
|-FunctionDecl 0x5608c140adc0 <line:57:1, col:48> col:7 gen_object_matcher 'block (block, block)'
| |-ParmVarDecl 0x5608c140acb0 <col:26, col:32> col:32 name 'block':'struct block'
| `-ParmVarDecl 0x5608c140ad28 <col:38, col:44> col:44 curr 'block':'struct block'
|-FunctionDecl 0x5608c140b0e8 <line:58:1, col:59> col:7 gen_destructure 'block (block, block, block)'
| |-ParmVarDecl 0x5608c140aed0 <col:23, col:29> col:29 var 'block':'struct block'
| |-ParmVarDecl 0x5608c140af48 <col:34, col:40> col:40 matcher 'block':'struct block'
| `-ParmVarDecl 0x5608c140afc0 <col:49, col:55> col:55 body 'block':'struct block'
|-FunctionDecl 0x5608c140b240 <line:59:1, col:40> col:7 gen_destructure_alt 'block (block)'
| `-ParmVarDecl 0x5608c140b1b0 <col:27, col:33> col:33 matcher 'block':'struct block'
|-FunctionDecl 0x5608c140b488 <line:61:1, col:55> col:7 gen_cond 'block (block, block, block)'
| |-ParmVarDecl 0x5608c140b2f8 <col:16, col:22> col:22 cond 'block':'struct block'
| |-ParmVarDecl 0x5608c140b370 <col:28, col:34> col:34 iftrue 'block':'struct block'
| `-ParmVarDecl 0x5608c140b3e8 <col:42, col:48> col:48 iffalse 'block':'struct block'
|-FunctionDecl 0x5608c140b5e0 <line:62:1, col:36> col:7 gen_try_handler 'block (block)'
| `-ParmVarDecl 0x5608c140b550 <col:23, col:29> col:29 handler 'block':'struct block'
|-FunctionDecl 0x5608c140b7a8 <line:63:1, col:39> col:7 gen_try 'block (block, block)'
| |-ParmVarDecl 0x5608c140b698 <col:15, col:21> col:21 exp 'block':'struct block'
| `-ParmVarDecl 0x5608c140b710 <col:26, col:32> col:32 handler 'block':'struct block'
|-FunctionDecl 0x5608c140b980 <line:64:1, col:45> col:7 gen_label 'block (const char *, block)'
| |-ParmVarDecl 0x5608c140b870 <col:17, col:29> col:29 label 'const char *'
| `-ParmVarDecl 0x5608c140b8e8 <col:36, col:42> col:42 exp 'block':'struct block'
|-FunctionDecl 0x5608c140bcc8 <line:66:1, col:78> col:7 used gen_cbinding 'block (const struct cfunction *, int, block)'
| |-ParmVarDecl 0x5608c140bab0 <col:20, col:44> col:44 functions 'const struct cfunction *'
| |-ParmVarDecl 0x5608c140bb30 <col:55, col:59> col:59 nfunctions 'int'
| `-ParmVarDecl 0x5608c140bba8 <col:71, col:77> col:77 b 'block':'struct block'
|-FunctionDecl 0x5608c140bf78 <line:68:1, col:37> col:6 block_append 'void (block *, block)'
| |-ParmVarDecl 0x5608c140bde8 <col:19, col:26> col:26 b 'block *'
| `-ParmVarDecl 0x5608c140be60 <col:29, col:35> col:35 b2 'block':'struct block'
|-FunctionDecl 0x5608c140c148 <line:69:1, col:34> col:7 used block_join 'block (block, block)'
| |-ParmVarDecl 0x5608c140c038 <col:18, col:24> col:24 a 'block':'struct block'
| `-ParmVarDecl 0x5608c140c0b0 <col:27, col:33> col:33 b 'block':'struct block'
|-FunctionDecl 0x5608c140c3a0 <line:70:1, col:60> col:5 block_has_only_binders_and_imports 'int (block, int)'
| |-ParmVarDecl 0x5608c140c208 <col:40> col:45 'block':'struct block'
| `-ParmVarDecl 0x5608c140c288 <col:47, col:51> col:51 bindflags 'int'
|-FunctionDecl 0x5608c140c580 <line:71:1, col:48> col:5 block_has_only_binders 'int (block, int)'
| |-ParmVarDecl 0x5608c140c460 <col:28> col:33 'block':'struct block'
| `-ParmVarDecl 0x5608c140c4e0 <col:35, col:39> col:39 bindflags 'int'
|-FunctionDecl 0x5608c140c6d8 <line:72:1, col:25> col:5 block_has_main 'int (block)'
| `-ParmVarDecl 0x5608c140c640 <col:20> col:25 'block':'struct block'
|-FunctionDecl 0x5608c140c828 <line:73:1, col:29> col:5 block_is_funcdef 'int (block)'
| `-ParmVarDecl 0x5608c140c790 <col:22, col:28> col:28 b 'block':'struct block'
|-FunctionDecl 0x5608c140c978 <line:74:1, col:28> col:5 block_is_single 'int (block)'
| `-ParmVarDecl 0x5608c140c8e0 <col:21, col:27> col:27 b 'block':'struct block'
|-FunctionDecl 0x5608c140cce8 <line:75:1, col:86> col:7 block_bind_library 'block (block, block, int, const char *)'
| |-ParmVarDecl 0x5608c140ca30 <col:26, col:32> col:32 binder 'block':'struct block'
| |-ParmVarDecl 0x5608c140caa8 <col:40, col:46> col:46 body 'block':'struct block'
| |-ParmVarDecl 0x5608c140cb28 <col:52, col:56> col:56 bindflags 'int'
| `-ParmVarDecl 0x5608c140cba8 <col:67, col:79> col:79 libname 'const char *'
|-FunctionDecl 0x5608c140d818 <line:76:1, col:68> col:7 used block_bind_referenced 'block (block, block, int)'
| |-ParmVarDecl 0x5608c140cdb8 <col:29, col:35> col:35 binder 'block':'struct block'
| |-ParmVarDecl 0x5608c140ce30 <col:43, col:49> col:49 body 'block':'struct block'
| `-ParmVarDecl 0x5608c140d6f0 <col:55, col:59> col:59 bindflags 'int'
|-FunctionDecl 0x5608c140da78 <line:77:1, col:50> col:7 block_bind_self 'block (block, int)'
| |-ParmVarDecl 0x5608c140d8e0 <col:23, col:29> col:29 binder 'block':'struct block'
| `-ParmVarDecl 0x5608c140d960 <col:37, col:41> col:41 bindflags 'int'
|-FunctionDecl 0x5608c140dbc8 <line:78:1, col:41> col:7 block_drop_unreferenced 'block (block)'
| `-ParmVarDecl 0x5608c140db38 <col:31, col:37> col:37 body 'block':'struct block'
|-FunctionDecl 0x5608c140dd78 <line:80:1, col:34> col:4 block_take_imports 'jv (block *)'
| `-ParmVarDecl 0x5608c140dc80 <col:23, col:30> col:30 body 'block *'
|-FunctionDecl 0x5608c140dfc8 <line:81:1, col:53> col:4 used block_list_funcs 'jv (block, int)'
| |-ParmVarDecl 0x5608c140de30 <col:21, col:27> col:27 body 'block':'struct block'
| `-ParmVarDecl 0x5608c140deb0 <col:33, col:37> col:37 omit_underscores 'int'
|-FunctionDecl 0x5608c140e370 <line:83:1, col:64> col:5 block_compile 'int (block, struct bytecode **, struct locfile *, jv)'
| |-ParmVarDecl 0x5608c140e088 <col:19> col:24 'block':'struct block'
| |-ParmVarDecl 0x5608c140e118 <col:26, col:42> col:43 'struct bytecode **'
| |-ParmVarDecl 0x5608c140e1a8 <col:45, col:59> col:60 'struct locfile *'
| `-ParmVarDecl 0x5608c140e220 <col:62> col:64 'jv':'jv'
|-FunctionDecl 0x5608c140e538 <line:85:1, col:22> col:6 block_free 'void (block)'
| `-ParmVarDecl 0x5608c140e440 <col:17> col:22 'block':'struct block'
|-FunctionDecl 0x5608c140e780 <./src/builtin.h:8:1, col:37> col:5 builtins_bind 'int (jq_state *, block *)'
| |-ParmVarDecl 0x5608c140e5f0 <col:19, col:28> col:29 'jq_state *'
| `-ParmVarDecl 0x5608c140e668 <col:31, col:36> col:37 'block *'
|-FunctionDecl 0x5608c140e9f0 <./src/jq_parser.h:6:1, col:51> col:5 jq_parse 'int (struct locfile *, block *)'
| |-ParmVarDecl 0x5608c140e858 <col:14, col:30> col:30 source 'struct locfile *'
| `-ParmVarDecl 0x5608c140e8d0 <col:38, col:45> col:45 answer 'block *'
|-FunctionDecl 0x5608c140ebe0 <line:7:1, col:62> col:5 used jq_parse_library 'int (struct locfile *, block *)'
| |-ParmVarDecl 0x5608c140eac8 <col:22, col:38> col:38 locations 'struct locfile *'
| `-ParmVarDecl 0x5608c140eb40 <col:49, col:56> col:56 answer 'block *'
|-FunctionDecl 0x5608c140eed0 <./src/linker.h:4:1, col:69> col:5 load_program 'int (jq_state *, struct locfile *, block *)'
| |-ParmVarDecl 0x5608c140eca0 <col:18, col:28> col:28 jq 'jq_state *'
| |-ParmVarDecl 0x5608c140ed30 <col:32, col:48> col:48 src 'struct locfile *'
| `-ParmVarDecl 0x5608c140eda8 <col:53, col:60> col:60 out_block 'block *'
|-FunctionDecl 0x5608c140f0a8 <line:5:1, col:45> col:4 used load_module_meta 'jv (jq_state *, jv)'
| |-ParmVarDecl 0x5608c140ef98 <col:21, col:31> col:31 jq 'jq_state *'
| `-ParmVarDecl 0x5608c140f010 <col:35, col:38> col:38 modname 'jv':'jv'
|-FunctionDecl 0x5608c140f360 <./src/jv_unicode.h:4:1, col:86> col:13 jvp_utf8_backtrack 'const char *(const char *, const char *, int *)'
| |-ParmVarDecl 0x5608c140f170 <col:32, col:44> col:44 start 'const char *'
| |-ParmVarDecl 0x5608c140f1f0 <col:51, col:63> col:63 min 'const char *'
| `-ParmVarDecl 0x5608c140f270 <col:68, col:73> col:73 missing_bytes 'int *'
|-FunctionDecl 0x5608c140f5d8 <line:5:1, col:74> col:13 used jvp_utf8_next 'const char *(const char *, const char *, int *)'
| |-ParmVarDecl 0x5608c140f430 <col:27, col:39> col:39 in 'const char *'
| |-ParmVarDecl 0x5608c140f4b0 <col:43, col:55> col:55 end 'const char *'
| `-ParmVarDecl 0x5608c140f530 <col:60, col:65> col:65 codepoint 'int *'
|-FunctionDecl 0x5608c1414120 <line:6:1, col:54> col:5 jvp_utf8_is_valid 'int (const char *, const char *)'
| |-ParmVarDecl 0x5608c1414000 <col:23, col:35> col:35 in 'const char *'
| `-ParmVarDecl 0x5608c1414080 <col:39, col:51> col:51 end 'const char *'
|-FunctionDecl 0x5608c14142b0 <line:8:1, col:42> col:5 used jvp_utf8_decode_length 'int (char)'
| `-ParmVarDecl 0x5608c14141e0 <col:28, col:33> col:33 startchar 'char'
|-FunctionDecl 0x5608c1414408 <line:10:1, col:41> col:5 jvp_utf8_encode_length 'int (int)'
| `-ParmVarDecl 0x5608c1414370 <col:28, col:32> col:32 codepoint 'int'
|-FunctionDecl 0x5608c1414620 <line:11:1, col:45> col:5 jvp_utf8_encode 'int (int, char *)'
| |-ParmVarDecl 0x5608c14144c8 <col:21, col:25> col:25 codepoint 'int'
| `-ParmVarDecl 0x5608c1414548 <col:36, col:42> col:42 out 'char *'
|-VarDecl 0x5608c14146e0 <./src/jv_alloc.h:8:1, col:22> col:22 used jv_mem_uninitialised 'volatile char' extern
|-FunctionDecl 0x5608c1414870 <line:11:1, line:16:1> line:11:13 jv_mem_invalidate 'void (void *, size_t)' static
| |-ParmVarDecl 0x5608c1414760 <col:31, col:37> col:37 used mem 'void *'
| |-ParmVarDecl 0x5608c14147d8 <col:42, col:49> col:49 used n 'size_t':'unsigned long'
| `-CompoundStmt 0x5608c1414ba0 <col:52, line:16:1>
|   |-DeclStmt 0x5608c14149f0 <line:13:3, col:16>
|   | `-VarDecl 0x5608c1414938 <col:3, col:13> col:9 used m 'char *' cinit
|   |   `-ImplicitCastExpr 0x5608c14149d8 <col:13> 'char *' <BitCast>
|   |     `-ImplicitCastExpr 0x5608c14149c0 <col:13> 'void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14149a0 <col:13> 'void *' lvalue ParmVar 0x5608c1414760 'mem' 'void *'
|   `-WhileStmt 0x5608c1414b80 <line:14:3, col:46>
|     |-UnaryOperator 0x5608c1414a28 <col:10, col:11> 'size_t':'unsigned long' postfix '--'
|     | `-DeclRefExpr 0x5608c1414a08 <col:10> 'size_t':'unsigned long' lvalue ParmVar 0x5608c14147d8 'n' 'size_t':'unsigned long'
|     `-CompoundAssignOperator 0x5608c1414b50 <col:15, col:46> 'char' '^=' ComputeLHSTy='int' ComputeResultTy='int'
|       |-UnaryOperator 0x5608c1414a78 <col:15, col:17> 'char' lvalue prefix '*' cannot overflow
|       | `-UnaryOperator 0x5608c1414a60 <col:16, col:17> 'char *' postfix '++'
|       |   `-DeclRefExpr 0x5608c1414a40 <col:16> 'char *' lvalue Var 0x5608c1414938 'm' 'char *'
|       `-BinaryOperator 0x5608c1414b30 <col:23, col:46> 'int' '^'
|         |-ImplicitCastExpr 0x5608c1414ae8 <col:23> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5608c1414ad0 <col:23> 'char' <LValueToRValue>
|         |   `-DeclRefExpr 0x5608c1414a90 <col:23> 'volatile char' lvalue Var 0x5608c14146e0 'jv_mem_uninitialised' 'volatile char'
|         `-ImplicitCastExpr 0x5608c1414b18 <col:46> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x5608c1414b00 <col:46> 'char' <LValueToRValue>
|             `-DeclRefExpr 0x5608c1414ab0 <col:46> 'volatile char' lvalue Var 0x5608c14146e0 'jv_mem_uninitialised' 'volatile char'
|-FunctionDecl 0x5608c1414c68 <line:18:1, col:26> col:7 jv_mem_alloc 'void *(size_t)'
| `-ParmVarDecl 0x5608c1414bd0 <col:20> col:26 'size_t':'unsigned long'
|-FunctionDecl 0x5608c1414db8 <line:19:1, col:36> col:7 jv_mem_alloc_unguarded 'void *(size_t)'
| `-ParmVarDecl 0x5608c1414d20 <col:30> col:36 'size_t':'unsigned long'
|-FunctionDecl 0x5608c1414f88 <line:20:1, col:35> col:7 used jv_mem_calloc 'void *(size_t, size_t)'
| |-ParmVarDecl 0x5608c1414e70 <col:21> col:27 'size_t':'unsigned long'
| `-ParmVarDecl 0x5608c1414ee8 <col:29> col:35 'size_t':'unsigned long'
|-FunctionDecl 0x5608c1415160 <line:21:1, col:45> col:7 jv_mem_calloc_unguarded 'void *(size_t, size_t)'
| |-ParmVarDecl 0x5608c1415048 <col:31> col:37 'size_t':'unsigned long'
| `-ParmVarDecl 0x5608c14150c0 <col:39> col:45 'size_t':'unsigned long'
|-FunctionDecl 0x5608c14152c0 <line:22:1, col:33> col:7 jv_mem_strdup 'char *(const char *)'
| `-ParmVarDecl 0x5608c1415228 <col:21, col:32> col:33 'const char *'
|-FunctionDecl 0x5608c1415418 <line:23:1, col:43> col:7 jv_mem_strdup_unguarded 'char *(const char *)'
| `-ParmVarDecl 0x5608c1415380 <col:31, col:42> col:43 'const char *'
|-FunctionDecl 0x5608c1415568 <line:24:1, col:23> col:6 jv_mem_free 'void (void *)'
| `-ParmVarDecl 0x5608c14154d8 <col:18, col:22> col:23 'void *'
|-FunctionDecl 0x5608c1415740 <line:25:1, col:71> col:43 jv_mem_realloc 'void *(void *, size_t)'
| |-ParmVarDecl 0x5608c1415628 <col:58, col:62> col:63 'void *'
| |-ParmVarDecl 0x5608c14156a0 <col:65> col:71 'size_t':'unsigned long'
| `-WarnUnusedResultAttr 0x5608c14157f0 <col:16> warn_unused_result ""
|-FunctionDecl 0x5608c1415978 <src/builtin.c:50:1, line:58:1> line:50:11 used type_error 'jv (jv, const char *)' static
| |-ParmVarDecl 0x5608c1415860 <col:22, col:25> col:25 used bad 'jv':'jv'
| |-ParmVarDecl 0x5608c14158e0 <col:30, col:42> col:42 used msg 'const char *'
| `-CompoundStmt 0x5608c1418bc0 <col:47, line:58:1>
|   |-DeclStmt 0x5608c1415af0 <line:51:3, col:18>
|   | `-VarDecl 0x5608c1415a88 <col:3, col:17> col:8 used errbuf 'char [15]'
|   |-DeclStmt 0x5608c1418a68 <line:52:3, line:55:51>
|   | `-VarDecl 0x5608c1415b18 <line:52:3, line:55:50> line:52:6 used err 'jv':'jv' nrvo cinit
|   |   `-CallExpr 0x5608c1418a40 <col:12, line:55:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1418a28 <line:52:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1415b80 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c14189a0 <col:32, line:55:49> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1418988 <line:52:32> 'jv (*)(const char *, ...)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1415ba0 <col:32> 'jv (const char *, ...)' Function 0x5608c13df640 'jv_string_fmt' 'jv (const char *, ...)'
|   |       |-ImplicitCastExpr 0x5608c14189f8 <col:46> 'const char *' <NoOp>
|   |       | `-ImplicitCastExpr 0x5608c14189e0 <col:46> 'char *' <ArrayToPointerDecay>
|   |       |   `-StringLiteral 0x5608c1415bf8 <col:46> 'char [11]' lvalue "%s (%s) %s"
|   |       |-CallExpr 0x5608c1415d50 <line:53:46, col:75> 'const char *'
|   |       | |-ImplicitCastExpr 0x5608c1415d38 <col:46> 'const char *(*)(jv_kind)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1415c20 <col:46> 'const char *(jv_kind)' Function 0x5608c13d16b0 'jv_kind_name' 'const char *(jv_kind)'
|   |       | `-CallExpr 0x5608c1415c98 <col:59, col:74> 'jv_kind':'jv_kind'
|   |       |   |-ImplicitCastExpr 0x5608c1415c80 <col:59> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x5608c1415c40 <col:59> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |       |   `-ImplicitCastExpr 0x5608c1415cc0 <col:71> 'jv':'jv' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5608c1415c60 <col:71> 'jv':'jv' lvalue ParmVar 0x5608c1415860 'bad' 'jv':'jv'
|   |       |-CallExpr 0x5608c1415f80 <line:54:46, col:103> 'char *'
|   |       | |-ImplicitCastExpr 0x5608c1415f68 <col:46> 'char *(*)(jv, char *, size_t)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1415d78 <col:46> 'char *(jv, char *, size_t)' Function 0x5608c13e8250 'jv_dump_string_trunc' 'char *(jv, char *, size_t)'
|   |       | |-CallExpr 0x5608c1415e50 <col:67, col:78> 'jv':'jv'
|   |       | | |-ImplicitCastExpr 0x5608c1415e38 <col:67> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x5608c1415d98 <col:67> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |       | | `-ImplicitCastExpr 0x5608c1415e78 <col:75> 'jv':'jv' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5608c1415db8 <col:75> 'jv':'jv' lvalue ParmVar 0x5608c1415860 'bad' 'jv':'jv'
|   |       | |-ImplicitCastExpr 0x5608c1415fb8 <col:81> 'char *' <ArrayToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1415e90 <col:81> 'char [15]' lvalue Var 0x5608c1415a88 'errbuf' 'char [15]'
|   |       | `-UnaryExprOrTypeTraitExpr 0x5608c1415ef0 <col:89, col:102> 'unsigned long' sizeof
|   |       |   `-ParenExpr 0x5608c1415ed0 <col:95, col:102> 'char [15]' lvalue
|   |       |     `-DeclRefExpr 0x5608c1415eb0 <col:96> 'char [15]' lvalue Var 0x5608c1415a88 'errbuf' 'char [15]' non_odr_use_unevaluated
|   |       `-ImplicitCastExpr 0x5608c1418a10 <line:55:46> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c1415fd0 <col:46> 'const char *' lvalue ParmVar 0x5608c14158e0 'msg' 'const char *'
|   |-CallExpr 0x5608c1418b30 <line:56:3, col:14> 'void'
|   | |-ImplicitCastExpr 0x5608c1418b18 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1418a80 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1418b58 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1418aa0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1415860 'bad' 'jv':'jv'
|   `-ReturnStmt 0x5608c1418ba8 <line:57:3, col:10>
|     `-ImplicitCastExpr 0x5608c1418b90 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1418b70 <col:10> 'jv':'jv' lvalue Var 0x5608c1415b18 'err' 'jv':'jv'
|-FunctionDecl 0x5608c1418e18 <line:60:1, line:71:1> line:60:11 used type_error2 'jv (jv, jv, const char *)' static
| |-ParmVarDecl 0x5608c1418c00 <col:23, col:26> col:26 used bad1 'jv':'jv'
| |-ParmVarDecl 0x5608c1418c78 <col:32, col:35> col:35 used bad2 'jv':'jv'
| |-ParmVarDecl 0x5608c1418cf8 <col:41, col:53> col:53 used msg 'const char *'
| `-CompoundStmt 0x5608c1419990 <col:58, line:71:1>
|   |-DeclStmt 0x5608c1419078 <line:61:3, col:31>
|   | |-VarDecl 0x5608c1418f30 <col:3, col:18> col:8 used errbuf1 'char [15]'
|   | `-VarDecl 0x5608c1418ff8 <col:3, col:30> col:20 used errbuf2 'char [15]'
|   |-DeclStmt 0x5608c14197f8 <line:62:3, line:67:51>
|   | `-VarDecl 0x5608c14190a0 <line:62:3, line:67:50> line:62:6 used err 'jv':'jv' nrvo cinit
|   |   `-CallExpr 0x5608c14197d0 <col:12, line:67:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14197b8 <line:62:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1419108 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c1419720 <col:32, line:67:49> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1419708 <line:62:32> 'jv (*)(const char *, ...)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1419128 <col:32> 'jv (const char *, ...)' Function 0x5608c13df640 'jv_string_fmt' 'jv (const char *, ...)'
|   |       |-ImplicitCastExpr 0x5608c1419788 <col:46> 'const char *' <NoOp>
|   |       | `-ImplicitCastExpr 0x5608c1419770 <col:46> 'char *' <ArrayToPointerDecay>
|   |       |   `-StringLiteral 0x5608c1419188 <col:46> 'char [23]' lvalue "%s (%s) and %s (%s) %s"
|   |       |-CallExpr 0x5608c1419288 <line:63:46, col:76> 'const char *'
|   |       | |-ImplicitCastExpr 0x5608c1419270 <col:46> 'const char *(*)(jv_kind)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c14191b8 <col:46> 'const char *(jv_kind)' Function 0x5608c13d16b0 'jv_kind_name' 'const char *(jv_kind)'
|   |       | `-CallExpr 0x5608c1419230 <col:59, col:75> 'jv_kind':'jv_kind'
|   |       |   |-ImplicitCastExpr 0x5608c1419218 <col:59> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x5608c14191d8 <col:59> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |       |   `-ImplicitCastExpr 0x5608c1419258 <col:71> 'jv':'jv' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5608c14191f8 <col:71> 'jv':'jv' lvalue ParmVar 0x5608c1418c00 'bad1' 'jv':'jv'
|   |       |-CallExpr 0x5608c1419400 <line:64:46, col:106> 'char *'
|   |       | |-ImplicitCastExpr 0x5608c14193e8 <col:46> 'char *(*)(jv, char *, size_t)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c14192b0 <col:46> 'char *(jv, char *, size_t)' Function 0x5608c13e8250 'jv_dump_string_trunc' 'char *(jv, char *, size_t)'
|   |       | |-CallExpr 0x5608c1419328 <col:67, col:79> 'jv':'jv'
|   |       | | |-ImplicitCastExpr 0x5608c1419310 <col:67> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x5608c14192d0 <col:67> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |       | | `-ImplicitCastExpr 0x5608c1419350 <col:75> 'jv':'jv' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5608c14192f0 <col:75> 'jv':'jv' lvalue ParmVar 0x5608c1418c00 'bad1' 'jv':'jv'
|   |       | |-ImplicitCastExpr 0x5608c1419438 <col:82> 'char *' <ArrayToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1419368 <col:82> 'char [15]' lvalue Var 0x5608c1418f30 'errbuf1' 'char [15]'
|   |       | `-UnaryExprOrTypeTraitExpr 0x5608c14193c8 <col:91, col:105> 'unsigned long' sizeof
|   |       |   `-ParenExpr 0x5608c14193a8 <col:97, col:105> 'char [15]' lvalue
|   |       |     `-DeclRefExpr 0x5608c1419388 <col:98> 'char [15]' lvalue Var 0x5608c1418f30 'errbuf1' 'char [15]' non_odr_use_unevaluated
|   |       |-CallExpr 0x5608c1419520 <line:65:46, col:76> 'const char *'
|   |       | |-ImplicitCastExpr 0x5608c1419508 <col:46> 'const char *(*)(jv_kind)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1419450 <col:46> 'const char *(jv_kind)' Function 0x5608c13d16b0 'jv_kind_name' 'const char *(jv_kind)'
|   |       | `-CallExpr 0x5608c14194c8 <col:59, col:75> 'jv_kind':'jv_kind'
|   |       |   |-ImplicitCastExpr 0x5608c14194b0 <col:59> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x5608c1419470 <col:59> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |       |   `-ImplicitCastExpr 0x5608c14194f0 <col:71> 'jv':'jv' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5608c1419490 <col:71> 'jv':'jv' lvalue ParmVar 0x5608c1418c78 'bad2' 'jv':'jv'
|   |       |-CallExpr 0x5608c1419698 <line:66:46, col:106> 'char *'
|   |       | |-ImplicitCastExpr 0x5608c1419680 <col:46> 'char *(*)(jv, char *, size_t)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1419548 <col:46> 'char *(jv, char *, size_t)' Function 0x5608c13e8250 'jv_dump_string_trunc' 'char *(jv, char *, size_t)'
|   |       | |-CallExpr 0x5608c14195c0 <col:67, col:79> 'jv':'jv'
|   |       | | |-ImplicitCastExpr 0x5608c14195a8 <col:67> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |       | | | `-DeclRefExpr 0x5608c1419568 <col:67> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |       | | `-ImplicitCastExpr 0x5608c14195e8 <col:75> 'jv':'jv' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5608c1419588 <col:75> 'jv':'jv' lvalue ParmVar 0x5608c1418c78 'bad2' 'jv':'jv'
|   |       | |-ImplicitCastExpr 0x5608c14196d0 <col:82> 'char *' <ArrayToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1419600 <col:82> 'char [15]' lvalue Var 0x5608c1418ff8 'errbuf2' 'char [15]'
|   |       | `-UnaryExprOrTypeTraitExpr 0x5608c1419660 <col:91, col:105> 'unsigned long' sizeof
|   |       |   `-ParenExpr 0x5608c1419640 <col:97, col:105> 'char [15]' lvalue
|   |       |     `-DeclRefExpr 0x5608c1419620 <col:98> 'char [15]' lvalue Var 0x5608c1418ff8 'errbuf2' 'char [15]' non_odr_use_unevaluated
|   |       `-ImplicitCastExpr 0x5608c14197a0 <line:67:46> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c14196e8 <col:46> 'const char *' lvalue ParmVar 0x5608c1418cf8 'msg' 'const char *'
|   |-CallExpr 0x5608c1419868 <line:68:3, col:15> 'void'
|   | |-ImplicitCastExpr 0x5608c1419850 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1419810 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1419890 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1419830 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1418c00 'bad1' 'jv':'jv'
|   |-CallExpr 0x5608c1419900 <line:69:3, col:15> 'void'
|   | |-ImplicitCastExpr 0x5608c14198e8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14198a8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1419928 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14198c8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1418c78 'bad2' 'jv':'jv'
|   `-ReturnStmt 0x5608c1419978 <line:70:3, col:10>
|     `-ImplicitCastExpr 0x5608c1419960 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1419940 <col:10> 'jv':'jv' lvalue Var 0x5608c14190a0 'err' 'jv':'jv'
|-FunctionDecl 0x5608c1419b18 <line:73:1, line:76:1> line:73:18 used ret_error 'jv (jv, jv)' static inline
| |-ParmVarDecl 0x5608c1419a08 <col:28, col:31> col:31 used bad 'jv':'jv'
| |-ParmVarDecl 0x5608c1419a80 <col:36, col:39> col:39 used msg 'jv':'jv'
| `-CompoundStmt 0x5608c1419d08 <col:44, line:76:1>
|   |-CallExpr 0x5608c1419c20 <line:74:3, col:14> 'void'
|   | |-ImplicitCastExpr 0x5608c1419c08 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1419bc8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1419c48 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1419be8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1419a08 'bad' 'jv':'jv'
|   `-ReturnStmt 0x5608c1419cf8 <line:75:3, col:33>
|     `-CallExpr 0x5608c1419cb8 <col:10, col:33> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1419ca0 <col:10> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1419c60 <col:10> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|       `-ImplicitCastExpr 0x5608c1419ce0 <col:30> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c1419c80 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c1419a80 'msg' 'jv':'jv'
|-FunctionDecl 0x5608c1419ec8 <line:78:1, line:82:1> line:78:18 used ret_error2 'jv (jv, jv, jv)' static inline
| |-ParmVarDecl 0x5608c1419d38 <col:29, col:32> col:32 used bad1 'jv':'jv'
| |-ParmVarDecl 0x5608c1419db0 <col:38, col:41> col:41 used bad2 'jv':'jv'
| |-ParmVarDecl 0x5608c1419e28 <col:47, col:50> col:50 used msg 'jv':'jv'
| `-CompoundStmt 0x5608c141a158 <col:55, line:82:1>
|   |-CallExpr 0x5608c1419fd8 <line:79:3, col:15> 'void'
|   | |-ImplicitCastExpr 0x5608c1419fc0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1419f80 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c141a000 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1419fa0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1419d38 'bad1' 'jv':'jv'
|   |-CallExpr 0x5608c141a070 <line:80:3, col:15> 'void'
|   | |-ImplicitCastExpr 0x5608c141a058 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c141a018 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c141a098 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c141a038 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1419db0 'bad2' 'jv':'jv'
|   `-ReturnStmt 0x5608c141a148 <line:81:3, col:33>
|     `-CallExpr 0x5608c141a108 <col:10, col:33> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c141a0f0 <col:10> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c141a0b0 <col:10> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|       `-ImplicitCastExpr 0x5608c141a130 <col:30> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c141a0d0 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c1419e28 'msg' 'jv':'jv'
|-FunctionDecl 0x5608c141a438 <line:84:1, line:107:1> line:84:11 used f_plus 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c141a190 <col:18, col:28> col:28 jq 'jq_state *'
| |-ParmVarDecl 0x5608c141a208 <col:32, col:35> col:35 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c141a280 <col:42, col:45> col:45 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c141a2f8 <col:48, col:51> col:51 used b 'jv':'jv'
| `-CompoundStmt 0x5608c141bd60 <col:54, line:107:1>
|   |-CallExpr 0x5608c141a550 <line:85:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c141a538 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c141a4f8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c141a578 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c141a518 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c141a208 'input' 'jv':'jv'
|   `-IfStmt 0x5608c141bd30 <line:86:3, line:106:3> has_else
|     |-BinaryOperator 0x5608c141a678 <line:86:7, col:25> 'int' '=='
|     | |-ImplicitCastExpr 0x5608c141a648 <col:7, col:20> 'unsigned int' <IntegralCast>
|     | | `-CallExpr 0x5608c141a5e8 <col:7, col:20> 'jv_kind':'jv_kind'
|     | |   |-ImplicitCastExpr 0x5608c141a5d0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x5608c141a590 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | |   `-ImplicitCastExpr 0x5608c141a610 <col:19> 'jv':'jv' <LValueToRValue>
|     | |     `-DeclRefExpr 0x5608c141a5b0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|     | `-ImplicitCastExpr 0x5608c141a660 <col:25> 'unsigned int' <IntegralCast>
|     |   `-DeclRefExpr 0x5608c141a628 <col:25> 'int' EnumConstant 0x5608c13d0a40 'JV_KIND_NULL' 'int'
|     |-CompoundStmt 0x5608c141a778 <col:39, line:89:3>
|     | |-CallExpr 0x5608c141a6f0 <line:87:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c141a6d8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c141a698 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c141a718 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c141a6b8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|     | `-ReturnStmt 0x5608c141a768 <line:88:5, col:12>
|     |   `-ImplicitCastExpr 0x5608c141a750 <col:12> 'jv':'jv' <LValueToRValue>
|     |     `-DeclRefExpr 0x5608c141a730 <col:12> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|     `-IfStmt 0x5608c141bd00 <line:89:10, line:106:3> has_else
|       |-BinaryOperator 0x5608c141a880 <line:89:14, col:32> 'int' '=='
|       | |-ImplicitCastExpr 0x5608c141a850 <col:14, col:27> 'unsigned int' <IntegralCast>
|       | | `-CallExpr 0x5608c141a7f0 <col:14, col:27> 'jv_kind':'jv_kind'
|       | |   |-ImplicitCastExpr 0x5608c141a7d8 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|       | |   | `-DeclRefExpr 0x5608c141a798 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|       | |   `-ImplicitCastExpr 0x5608c141a818 <col:26> 'jv':'jv' <LValueToRValue>
|       | |     `-DeclRefExpr 0x5608c141a7b8 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|       | `-ImplicitCastExpr 0x5608c141a868 <col:32> 'unsigned int' <IntegralCast>
|       |   `-DeclRefExpr 0x5608c141a830 <col:32> 'int' EnumConstant 0x5608c13d0a40 'JV_KIND_NULL' 'int'
|       |-CompoundStmt 0x5608c141a9a0 <col:46, line:92:3>
|       | |-CallExpr 0x5608c141a8f8 <line:90:5, col:14> 'void'
|       | | |-ImplicitCastExpr 0x5608c141a8e0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5608c141a8a0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|       | | `-ImplicitCastExpr 0x5608c141a940 <col:13> 'jv':'jv' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5608c141a8c0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|       | `-ReturnStmt 0x5608c141a990 <line:91:5, col:12>
|       |   `-ImplicitCastExpr 0x5608c141a978 <col:12> 'jv':'jv' <LValueToRValue>
|       |     `-DeclRefExpr 0x5608c141a958 <col:12> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|       `-IfStmt 0x5608c141bcd0 <line:92:10, line:106:3> has_else
|         |-BinaryOperator 0x5608c141abd0 <line:92:14, col:68> 'int' '&&'
|         | |-BinaryOperator 0x5608c141aaa8 <col:14, col:32> 'int' '=='
|         | | |-ImplicitCastExpr 0x5608c141aa78 <col:14, col:27> 'unsigned int' <IntegralCast>
|         | | | `-CallExpr 0x5608c141aa18 <col:14, col:27> 'jv_kind':'jv_kind'
|         | | |   |-ImplicitCastExpr 0x5608c141aa00 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|         | | |   | `-DeclRefExpr 0x5608c141a9c0 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|         | | |   `-ImplicitCastExpr 0x5608c141aa40 <col:26> 'jv':'jv' <LValueToRValue>
|         | | |     `-DeclRefExpr 0x5608c141a9e0 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|         | | `-ImplicitCastExpr 0x5608c141aa90 <col:32> 'unsigned int' <IntegralCast>
|         | |   `-DeclRefExpr 0x5608c141aa58 <col:32> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|         | `-BinaryOperator 0x5608c141abb0 <col:50, col:68> 'int' '=='
|         |   |-ImplicitCastExpr 0x5608c141ab80 <col:50, col:63> 'unsigned int' <IntegralCast>
|         |   | `-CallExpr 0x5608c141ab20 <col:50, col:63> 'jv_kind':'jv_kind'
|         |   |   |-ImplicitCastExpr 0x5608c141ab08 <col:50> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|         |   |   | `-DeclRefExpr 0x5608c141aac8 <col:50> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|         |   |   `-ImplicitCastExpr 0x5608c141ab48 <col:62> 'jv':'jv' <LValueToRValue>
|         |   |     `-DeclRefExpr 0x5608c141aae8 <col:62> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|         |   `-ImplicitCastExpr 0x5608c141ab98 <col:68> 'unsigned int' <IntegralCast>
|         |     `-DeclRefExpr 0x5608c141ab60 <col:68> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|         |-CompoundStmt 0x5608c141b070 <col:84, line:98:3>
|         | |-DeclStmt 0x5608c141aed8 <line:93:5, line:94:41>
|         | | `-VarDecl 0x5608c141ac00 <line:93:5, line:94:40> line:93:8 used r 'jv':'jv' nrvo cinit
|         | |   `-CallExpr 0x5608c141aeb0 <col:12, line:94:40> 'jv':'jv'
|         | |     |-ImplicitCastExpr 0x5608c141ae98 <line:93:12> 'jv (*)(double)' <FunctionToPointerDecay>
|         | |     | `-DeclRefExpr 0x5608c141ac68 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         | |     `-BinaryOperator 0x5608c141ae18 <col:22, line:94:39> 'double' '+'
|         | |       |-CallExpr 0x5608c141ad40 <line:93:22, col:39> 'double'
|         | |       | |-ImplicitCastExpr 0x5608c141ad28 <col:22> 'double (*)(jv)' <FunctionToPointerDecay>
|         | |       | | `-DeclRefExpr 0x5608c141ac88 <col:22> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|         | |       | `-ImplicitCastExpr 0x5608c141ad68 <col:38> 'jv':'jv' <LValueToRValue>
|         | |       |   `-DeclRefExpr 0x5608c141aca8 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|         | |       `-CallExpr 0x5608c141add8 <line:94:22, col:39> 'double'
|         | |         |-ImplicitCastExpr 0x5608c141adc0 <col:22> 'double (*)(jv)' <FunctionToPointerDecay>
|         | |         | `-DeclRefExpr 0x5608c141ad80 <col:22> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|         | |         `-ImplicitCastExpr 0x5608c141ae00 <col:38> 'jv':'jv' <LValueToRValue>
|         | |           `-DeclRefExpr 0x5608c141ada0 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|         | |-CallExpr 0x5608c141af48 <line:95:5, col:14> 'void'
|         | | |-ImplicitCastExpr 0x5608c141af30 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x5608c141aef0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|         | | `-ImplicitCastExpr 0x5608c141af70 <col:13> 'jv':'jv' <LValueToRValue>
|         | |   `-DeclRefExpr 0x5608c141af10 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|         | |-CallExpr 0x5608c141afe0 <line:96:5, col:14> 'void'
|         | | |-ImplicitCastExpr 0x5608c141afc8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x5608c141af88 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|         | | `-ImplicitCastExpr 0x5608c141b008 <col:13> 'jv':'jv' <LValueToRValue>
|         | |   `-DeclRefExpr 0x5608c141afa8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|         | `-ReturnStmt 0x5608c141b058 <line:97:5, col:12>
|         |   `-ImplicitCastExpr 0x5608c141b040 <col:12> 'jv':'jv' <LValueToRValue>
|         |     `-DeclRefExpr 0x5608c141b020 <col:12> 'jv':'jv' lvalue Var 0x5608c141ac00 'r' 'jv':'jv'
|         `-IfStmt 0x5608c141bca0 <line:98:10, line:106:3> has_else
|           |-BinaryOperator 0x5608c141b2b0 <line:98:14, col:68> 'int' '&&'
|           | |-BinaryOperator 0x5608c141b188 <col:14, col:32> 'int' '=='
|           | | |-ImplicitCastExpr 0x5608c141b158 <col:14, col:27> 'unsigned int' <IntegralCast>
|           | | | `-CallExpr 0x5608c141b0f8 <col:14, col:27> 'jv_kind':'jv_kind'
|           | | |   |-ImplicitCastExpr 0x5608c141b0e0 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|           | | |   | `-DeclRefExpr 0x5608c141b0a0 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|           | | |   `-ImplicitCastExpr 0x5608c141b120 <col:26> 'jv':'jv' <LValueToRValue>
|           | | |     `-DeclRefExpr 0x5608c141b0c0 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|           | | `-ImplicitCastExpr 0x5608c141b170 <col:32> 'unsigned int' <IntegralCast>
|           | |   `-DeclRefExpr 0x5608c141b138 <col:32> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|           | `-BinaryOperator 0x5608c141b290 <col:50, col:68> 'int' '=='
|           |   |-ImplicitCastExpr 0x5608c141b260 <col:50, col:63> 'unsigned int' <IntegralCast>
|           |   | `-CallExpr 0x5608c141b200 <col:50, col:63> 'jv_kind':'jv_kind'
|           |   |   |-ImplicitCastExpr 0x5608c141b1e8 <col:50> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|           |   |   | `-DeclRefExpr 0x5608c141b1a8 <col:50> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|           |   |   `-ImplicitCastExpr 0x5608c141b228 <col:62> 'jv':'jv' <LValueToRValue>
|           |   |     `-DeclRefExpr 0x5608c141b1c8 <col:62> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|           |   `-ImplicitCastExpr 0x5608c141b278 <col:68> 'unsigned int' <IntegralCast>
|           |     `-DeclRefExpr 0x5608c141b240 <col:68> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|           |-CompoundStmt 0x5608c141b410 <col:84, line:100:3>
|           | `-ReturnStmt 0x5608c141b400 <line:99:5, col:33>
|           |   `-CallExpr 0x5608c141b3a0 <col:12, col:33> 'jv':'jv'
|           |     |-ImplicitCastExpr 0x5608c141b388 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|           |     | `-DeclRefExpr 0x5608c141b2d0 <col:12> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|           |     |-ImplicitCastExpr 0x5608c141b3d0 <col:29> 'jv':'jv' <LValueToRValue>
|           |     | `-DeclRefExpr 0x5608c141b2f0 <col:29> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|           |     `-ImplicitCastExpr 0x5608c141b3e8 <col:32> 'jv':'jv' <LValueToRValue>
|           |       `-DeclRefExpr 0x5608c141b310 <col:32> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|           `-IfStmt 0x5608c141bc70 <line:100:10, line:106:3> has_else
|             |-BinaryOperator 0x5608c141b638 <line:100:14, col:67> 'int' '&&'
|             | |-BinaryOperator 0x5608c141b510 <col:14, col:32> 'int' '=='
|             | | |-ImplicitCastExpr 0x5608c141b4e0 <col:14, col:27> 'unsigned int' <IntegralCast>
|             | | | `-CallExpr 0x5608c141b480 <col:14, col:27> 'jv_kind':'jv_kind'
|             | | |   |-ImplicitCastExpr 0x5608c141b468 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|             | | |   | `-DeclRefExpr 0x5608c141b428 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|             | | |   `-ImplicitCastExpr 0x5608c141b4a8 <col:26> 'jv':'jv' <LValueToRValue>
|             | | |     `-DeclRefExpr 0x5608c141b448 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|             | | `-ImplicitCastExpr 0x5608c141b4f8 <col:32> 'unsigned int' <IntegralCast>
|             | |   `-DeclRefExpr 0x5608c141b4c0 <col:32> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|             | `-BinaryOperator 0x5608c141b618 <col:49, col:67> 'int' '=='
|             |   |-ImplicitCastExpr 0x5608c141b5e8 <col:49, col:62> 'unsigned int' <IntegralCast>
|             |   | `-CallExpr 0x5608c141b588 <col:49, col:62> 'jv_kind':'jv_kind'
|             |   |   |-ImplicitCastExpr 0x5608c141b570 <col:49> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|             |   |   | `-DeclRefExpr 0x5608c141b530 <col:49> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|             |   |   `-ImplicitCastExpr 0x5608c141b5b0 <col:61> 'jv':'jv' <LValueToRValue>
|             |   |     `-DeclRefExpr 0x5608c141b550 <col:61> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|             |   `-ImplicitCastExpr 0x5608c141b600 <col:67> 'unsigned int' <IntegralCast>
|             |     `-DeclRefExpr 0x5608c141b5c8 <col:67> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|             |-CompoundStmt 0x5608c141b740 <col:82, line:102:3>
|             | `-ReturnStmt 0x5608c141b730 <line:101:5, col:32>
|             |   `-CallExpr 0x5608c141b6d0 <col:12, col:32> 'jv':'jv'
|             |     |-ImplicitCastExpr 0x5608c141b6b8 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|             |     | `-DeclRefExpr 0x5608c141b658 <col:12> 'jv (jv, jv)' Function 0x5608c13ddb68 'jv_array_concat' 'jv (jv, jv)'
|             |     |-ImplicitCastExpr 0x5608c141b700 <col:28> 'jv':'jv' <LValueToRValue>
|             |     | `-DeclRefExpr 0x5608c141b678 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|             |     `-ImplicitCastExpr 0x5608c141b718 <col:31> 'jv':'jv' <LValueToRValue>
|             |       `-DeclRefExpr 0x5608c141b698 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|             `-IfStmt 0x5608c141bc40 <line:102:10, line:106:3> has_else
|               |-BinaryOperator 0x5608c141b968 <line:102:14, col:68> 'int' '&&'
|               | |-BinaryOperator 0x5608c141b840 <col:14, col:32> 'int' '=='
|               | | |-ImplicitCastExpr 0x5608c141b810 <col:14, col:27> 'unsigned int' <IntegralCast>
|               | | | `-CallExpr 0x5608c141b7b0 <col:14, col:27> 'jv_kind':'jv_kind'
|               | | |   |-ImplicitCastExpr 0x5608c141b798 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|               | | |   | `-DeclRefExpr 0x5608c141b758 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|               | | |   `-ImplicitCastExpr 0x5608c141b7d8 <col:26> 'jv':'jv' <LValueToRValue>
|               | | |     `-DeclRefExpr 0x5608c141b778 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|               | | `-ImplicitCastExpr 0x5608c141b828 <col:32> 'unsigned int' <IntegralCast>
|               | |   `-DeclRefExpr 0x5608c141b7f0 <col:32> 'int' EnumConstant 0x5608c13d0c20 'JV_KIND_OBJECT' 'int'
|               | `-BinaryOperator 0x5608c141b948 <col:50, col:68> 'int' '=='
|               |   |-ImplicitCastExpr 0x5608c141b918 <col:50, col:63> 'unsigned int' <IntegralCast>
|               |   | `-CallExpr 0x5608c141b8b8 <col:50, col:63> 'jv_kind':'jv_kind'
|               |   |   |-ImplicitCastExpr 0x5608c141b8a0 <col:50> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|               |   |   | `-DeclRefExpr 0x5608c141b860 <col:50> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|               |   |   `-ImplicitCastExpr 0x5608c141b8e0 <col:62> 'jv':'jv' <LValueToRValue>
|               |   |     `-DeclRefExpr 0x5608c141b880 <col:62> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|               |   `-ImplicitCastExpr 0x5608c141b930 <col:68> 'unsigned int' <IntegralCast>
|               |     `-DeclRefExpr 0x5608c141b8f8 <col:68> 'int' EnumConstant 0x5608c13d0c20 'JV_KIND_OBJECT' 'int'
|               |-CompoundStmt 0x5608c141ba70 <col:84, line:104:3>
|               | `-ReturnStmt 0x5608c141ba60 <line:103:5, col:32>
|               |   `-CallExpr 0x5608c141ba00 <col:12, col:32> 'jv':'jv'
|               |     |-ImplicitCastExpr 0x5608c141b9e8 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|               |     | `-DeclRefExpr 0x5608c141b988 <col:12> 'jv (jv, jv)' Function 0x5608c13e5230 'jv_object_merge' 'jv (jv, jv)'
|               |     |-ImplicitCastExpr 0x5608c141ba30 <col:28> 'jv':'jv' <LValueToRValue>
|               |     | `-DeclRefExpr 0x5608c141b9a8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|               |     `-ImplicitCastExpr 0x5608c141ba48 <col:31> 'jv':'jv' <LValueToRValue>
|               |       `-DeclRefExpr 0x5608c141b9c8 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|               `-CompoundStmt 0x5608c141bc28 <line:104:10, line:106:3>
|                 `-ReturnStmt 0x5608c141bc18 <line:105:5, col:47>
|                   `-CallExpr 0x5608c141bb80 <col:12, col:47> 'jv':'jv'
|                     |-ImplicitCastExpr 0x5608c141bb68 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|                     | `-DeclRefExpr 0x5608c141ba88 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|                     |-ImplicitCastExpr 0x5608c141bbb8 <col:24> 'jv':'jv' <LValueToRValue>
|                     | `-DeclRefExpr 0x5608c141baa8 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c141a280 'a' 'jv':'jv'
|                     |-ImplicitCastExpr 0x5608c141bbd0 <col:27> 'jv':'jv' <LValueToRValue>
|                     | `-DeclRefExpr 0x5608c141bac8 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c141a2f8 'b' 'jv':'jv'
|                     `-ImplicitCastExpr 0x5608c141bc00 <col:30> 'const char *' <NoOp>
|                       `-ImplicitCastExpr 0x5608c141bbe8 <col:30> 'char *' <ArrayToPointerDecay>
|                         `-StringLiteral 0x5608c141bae8 <col:30> 'char [16]' lvalue "cannot be added"
|-FunctionDecl 0x5608c141bea0 <line:139:23, line:146:15> <scratch space>:139:1 used f_acos 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c141bd90 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c141be08 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c141c4e8 <col:46, line:146:15>
|   |-IfStmt 0x5608c141c1d0 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c141c038 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c141c008 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c141bfa8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c141bf90 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c141bf50 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c141bfd0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c141bf70 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c141be08 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c141c020 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c141bfe8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c141c1b8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c141c1a8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c141c130 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c141c118 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c141c058 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c141c160 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c141c078 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c141be08 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c141c190 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c141c178 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c141c098 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c141c3e8 <line:144:3, col:51>
|   | `-VarDecl 0x5608c141c200 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c141c3c0 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c141c3a8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c141c268 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c141c380 <./src/libm.h:2:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c141c368 <./src/libm.h:2:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c141c288 <col:9> 'double (double)' Function 0x5608c1227490 'acos' 'double (double)'
|   |       `-CallExpr 0x5608c141c300 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c141c2e8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c141c2a8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c141c328 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c141c2c8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c141be08 'input' 'jv':'jv'
|   |-CallExpr 0x5608c141c458 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c141c440 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c141c400 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c141c480 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c141c420 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c141be08 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c141c4d0 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c141c4b8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c141c498 <col:10> 'jv':'jv' lvalue Var 0x5608c141c200 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c141c638 <line:139:23, line:146:15> <scratch space>:140:1 used f_acosh 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c141c528 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c141c5a0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1420a90 <col:46, line:146:15>
|   |-IfStmt 0x5608c141c910 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c141c7d0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c141c7a0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c141c740 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c141c728 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c141c6e8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c141c768 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c141c708 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c141c5a0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c141c7b8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c141c780 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c141c8f8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c141c8e8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c141c870 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c141c858 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c141c7f0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c141c8a0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c141c810 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c141c5a0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c141c8d0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c141c8b8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c141c830 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1420990 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14207d0 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1420968 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1420950 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1420838 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1420928 <./src/libm.h:7:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1420910 <./src/libm.h:7:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1420858 <col:9> 'double (double)' Function 0x5608c11aa610 'acosh' 'double (double)'
|   |       `-CallExpr 0x5608c14208d0 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c14208b8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1420878 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14208f8 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1420898 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c141c5a0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1420a00 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14209e8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14209a8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1420a28 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14209c8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c141c5a0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1420a78 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1420a60 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1420a40 <col:10> 'jv':'jv' lvalue Var 0x5608c14207d0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1420be0 <line:139:23, line:146:15> <scratch space>:141:1 used f_asin 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1420ad0 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1420b48 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14211a8 <col:46, line:146:15>
|   |-IfStmt 0x5608c1420eb8 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1420d78 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1420d48 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1420ce8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1420cd0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1420c90 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1420d10 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1420cb0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1420b48 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1420d60 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1420d28 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1420ea0 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1420e90 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1420e18 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1420e00 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1420d98 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1420e48 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1420db8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1420b48 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1420e78 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1420e60 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1420dd8 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14210a8 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1420ee8 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1421080 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1421068 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1420f50 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1421040 <./src/libm.h:12:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1421028 <./src/libm.h:12:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1420f70 <col:9> 'double (double)' Function 0x5608c12279a8 'asin' 'double (double)'
|   |       `-CallExpr 0x5608c1420fe8 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1420fd0 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1420f90 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1421010 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1420fb0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1420b48 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1421118 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1421100 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14210c0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1421140 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14210e0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1420b48 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1421190 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1421178 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1421158 <col:10> 'jv':'jv' lvalue Var 0x5608c1420ee8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14212f8 <line:139:23, line:146:15> <scratch space>:142:1 used f_asinh 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14211e8 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1421260 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14218c0 <col:46, line:146:15>
|   |-IfStmt 0x5608c14215d0 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1421490 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1421460 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1421400 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14213e8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14213a8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1421428 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14213c8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1421260 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1421478 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1421440 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14215b8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c14215a8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1421530 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1421518 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14214b0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1421560 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14214d0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1421260 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1421590 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1421578 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14214f0 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14217c0 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1421600 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1421798 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1421780 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1421668 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1421758 <./src/libm.h:17:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1421740 <./src/libm.h:17:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1421688 <col:9> 'double (double)' Function 0x5608c11aab28 'asinh' 'double (double)'
|   |       `-CallExpr 0x5608c1421700 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c14216e8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14216a8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1421728 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14216c8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1421260 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1421830 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1421818 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14217d8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1421858 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14217f8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1421260 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14218a8 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1421890 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1421870 <col:10> 'jv':'jv' lvalue Var 0x5608c1421600 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1421a10 <line:139:23, line:146:15> <scratch space>:143:1 used f_atan 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1421900 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1421978 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1421fd8 <col:46, line:146:15>
|   |-IfStmt 0x5608c1421ce8 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1421ba8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1421b78 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1421b18 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1421b00 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1421ac0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1421b40 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1421ae0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1421978 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1421b90 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1421b58 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1421cd0 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1421cc0 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1421c48 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1421c30 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1421bc8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1421c78 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1421be8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1421978 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1421ca8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1421c90 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1421c08 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1421ed8 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1421d18 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1421eb0 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1421e98 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1421d80 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1421e70 <./src/libm.h:22:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1421e58 <./src/libm.h:22:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1421da0 <col:9> 'double (double)' Function 0x5608c11a6408 'atan' 'double (double)'
|   |       `-CallExpr 0x5608c1421e18 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1421e00 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1421dc0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1421e40 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1421de0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1421978 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1421f48 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1421f30 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1421ef0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1421f70 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1421f10 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1421978 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1421fc0 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1421fa8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1421f88 <col:10> 'jv':'jv' lvalue Var 0x5608c1421d18 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1422228 <line:150:24, line:164:15> <scratch space>:144:1 used f_atan2 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1422018 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1422090 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1422108 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1422180 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1424018 <col:58, line:164:15>
|   |-CallExpr 0x5608c1422340 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1422328 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14222e8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1422368 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1422308 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1422090 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1422648 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1422468 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1422438 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14223d8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14223c0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1422380 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1422400 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14223a0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1422108 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1422450 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1422418 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1422628 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c14224e0 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14224c8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1422488 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1422508 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14224a8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1422180 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1422618 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c14225a0 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1422588 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1422520 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14225d0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1422540 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1422108 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1422600 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14225e8 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1422560 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1423bc8 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1422750 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1422720 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14226c0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14226a8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1422668 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14226e8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1422688 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1422180 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1422738 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1422700 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1423ba8 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c1423a60 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14227b0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1422770 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1423a88 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1422790 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1422108 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1423b98 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1423b20 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1423b08 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1423aa0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1423b50 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1423ac0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1422180 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1423b80 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1423b68 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1423ae0 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1423e80 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1423bf8 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1423e58 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1423e40 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1423c60 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1423e10 <./src/libm.h:27:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1423df8 <./src/libm.h:27:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1423c80 <col:10> 'double (double, double)' Function 0x5608c11a6a50 'atan2' 'double (double, double)'
|   |       |-CallExpr 0x5608c1423cf8 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1423ce0 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1423ca0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1423d20 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1423cc0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1422108 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c1423d90 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c1423d78 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1423d38 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1423db8 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1423d58 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1422180 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1423ef0 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1423ed8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1423e98 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1423f18 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1423eb8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1422108 'a' 'jv':'jv'
|   |-CallExpr 0x5608c1423f88 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1423f70 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1423f30 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1423fb0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1423f50 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1422180 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1424000 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1423fe8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1423fc8 <col:10> 'jv':'jv' lvalue Var 0x5608c1423bf8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1424180 <line:139:23, line:146:15> <scratch space>:145:1 used f_atanh 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1424070 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14240e8 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1424748 <col:46, line:146:15>
|   |-IfStmt 0x5608c1424458 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1424318 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c14242e8 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1424288 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1424270 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1424230 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14242b0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1424250 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14240e8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1424300 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14242c8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1424440 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1424430 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c14243b8 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14243a0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1424338 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14243e8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1424358 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14240e8 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1424418 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1424400 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1424378 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1424648 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1424488 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1424620 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1424608 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14244f0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c14245e0 <./src/libm.h:32:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c14245c8 <./src/libm.h:32:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1424510 <col:9> 'double (double)' Function 0x5608c11ab040 'atanh' 'double (double)'
|   |       `-CallExpr 0x5608c1424588 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1424570 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1424530 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14245b0 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1424550 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c14240e8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c14246b8 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14246a0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1424660 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14246e0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1424680 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14240e8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1424730 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1424718 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14246f8 <col:10> 'jv':'jv' lvalue Var 0x5608c1424488 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1424898 <line:139:23, line:146:15> <scratch space>:146:1 used f_cbrt 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1424788 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1424800 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1424e60 <col:46, line:146:15>
|   |-IfStmt 0x5608c1424b70 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1424a30 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1424a00 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14249a0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1424988 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1424948 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14249c8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1424968 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1424800 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1424a18 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14249e0 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1424b58 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1424b48 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1424ad0 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1424ab8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1424a50 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1424b00 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1424a70 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1424800 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1424b30 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1424b18 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1424a90 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1424d60 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1424ba0 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1424d38 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1424d20 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1424c08 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1424cf8 <./src/libm.h:37:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1424ce0 <./src/libm.h:37:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1424c28 <col:9> 'double (double)' Function 0x5608c1244488 'cbrt' 'double (double)'
|   |       `-CallExpr 0x5608c1424ca0 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1424c88 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1424c48 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1424cc8 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1424c68 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1424800 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1424dd0 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1424db8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1424d78 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1424df8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1424d98 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1424800 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1424e48 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1424e30 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1424e10 <col:10> 'jv':'jv' lvalue Var 0x5608c1424ba0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1424fb0 <line:139:23, line:146:15> <scratch space>:147:1 used f_cos 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1424ea0 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1424f18 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1425578 <col:46, line:146:15>
|   |-IfStmt 0x5608c1425288 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1425148 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1425118 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14250b8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14250a0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1425060 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14250e0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1425080 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1424f18 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1425130 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14250f8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1425270 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1425260 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c14251e8 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14251d0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1425168 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1425218 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1425188 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1424f18 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1425248 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1425230 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14251a8 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1425478 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14252b8 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1425450 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1425438 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1425320 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1425410 <./src/libm.h:42:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c14253f8 <./src/libm.h:42:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1425340 <col:9> 'double (double)' Function 0x5608c11a7000 'cos' 'double (double)'
|   |       `-CallExpr 0x5608c14253b8 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c14253a0 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1425360 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14253e0 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1425380 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1424f18 'input' 'jv':'jv'
|   |-CallExpr 0x5608c14254e8 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14254d0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1425490 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1425510 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14254b0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1424f18 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1425560 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1425548 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1425528 <col:10> 'jv':'jv' lvalue Var 0x5608c14252b8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14256c8 <line:139:23, line:146:15> <scratch space>:148:1 used f_cosh 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14255b8 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1425630 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1425ca8 <col:46, line:146:15>
|   |-IfStmt 0x5608c14259a0 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1425860 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1425830 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14257d0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14257b8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1425778 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14257f8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1425798 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1425630 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1425848 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1425810 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1425988 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1425978 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1425900 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14258e8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1425880 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1425930 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14258a0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1425630 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1425960 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1425948 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14258c0 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1425ba8 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14259d0 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1425b80 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1425b68 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1425a38 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1425b40 <./src/libm.h:47:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1425b28 <./src/libm.h:47:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1425a70 <col:9> 'double (double)' Function 0x5608c11a8550 'cosh' 'double (double)'
|   |       `-CallExpr 0x5608c1425ae8 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1425ad0 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1425a90 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1425b10 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1425ab0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1425630 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1425c18 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1425c00 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1425bc0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1425c40 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1425be0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1425630 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1425c90 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1425c78 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1425c58 <col:10> 'jv':'jv' lvalue Var 0x5608c14259d0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1425df8 <line:139:23, line:146:15> <scratch space>:149:1 used f_exp 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1425ce8 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1425d60 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14263c0 <col:46, line:146:15>
|   |-IfStmt 0x5608c14260d0 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1425f90 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1425f60 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1425f00 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1425ee8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1425ea8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1425f28 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1425ec8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1425d60 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1425f78 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1425f40 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14260b8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c14260a8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1426030 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1426018 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1425fb0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1426060 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1425fd0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1425d60 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1426090 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1426078 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1425ff0 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14262c0 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1426100 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1426298 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1426280 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1426168 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1426258 <./src/libm.h:52:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1426240 <./src/libm.h:52:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1426188 <col:9> 'double (double)' Function 0x5608c11ab598 'exp' 'double (double)'
|   |       `-CallExpr 0x5608c1426200 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c14261e8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14261a8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1426228 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14261c8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1425d60 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1426330 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1426318 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14262d8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1426358 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14262f8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1425d60 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14263a8 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1426390 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1426370 <col:10> 'jv':'jv' lvalue Var 0x5608c1426100 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1426510 <line:139:23, line:146:15> <scratch space>:150:1 used f_exp2 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1426400 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1426478 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1426ad8 <col:46, line:146:15>
|   |-IfStmt 0x5608c14267e8 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c14266a8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1426678 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1426618 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1426600 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14265c0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1426640 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14265e0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1426478 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1426690 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1426658 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14267d0 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c14267c0 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1426748 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1426730 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14266c8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1426778 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14266e8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1426478 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14267a8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1426790 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1426708 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14269d8 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1426818 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14269b0 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1426998 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1426880 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1426970 <./src/libm.h:57:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1426958 <./src/libm.h:57:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14268a0 <col:9> 'double (double)' Function 0x5608c11b0940 'exp2' 'double (double)'
|   |       `-CallExpr 0x5608c1426918 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1426900 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14268c0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1426940 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14268e0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1426478 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1426a48 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1426a30 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14269f0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1426a70 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1426a10 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1426478 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1426ac0 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1426aa8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1426a88 <col:10> 'jv':'jv' lvalue Var 0x5608c1426818 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1426c28 <line:139:23, line:146:15> <scratch space>:151:1 used f_floor 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1426b18 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1426b90 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14271f0 <col:46, line:146:15>
|   |-IfStmt 0x5608c1426f00 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1426dc0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1426d90 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1426d30 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1426d18 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1426cd8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1426d58 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1426cf8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1426b90 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1426da8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1426d70 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1426ee8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1426ed8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1426e60 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1426e48 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1426de0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1426e90 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1426e00 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1426b90 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1426ec0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1426ea8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1426e20 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14270f0 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1426f30 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14270c8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14270b0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1426f98 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1427088 <./src/libm.h:62:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1427070 <./src/libm.h:62:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1426fb8 <col:9> 'double (double)' Function 0x5608c122c5c0 'floor' 'double (double)'
|   |       `-CallExpr 0x5608c1427030 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1427018 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1426fd8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1427058 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1426ff8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1426b90 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1427160 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1427148 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1427108 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1427188 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1427128 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1426b90 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14271d8 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c14271c0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14271a0 <col:10> 'jv':'jv' lvalue Var 0x5608c1426f30 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1427440 <line:150:24, line:164:15> <scratch space>:152:1 used f_hypot 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1427230 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14272a8 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1427320 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1427398 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1428fa0 <col:58, line:164:15>
|   |-CallExpr 0x5608c1427558 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1427540 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1427500 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1427580 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1427520 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14272a8 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1427860 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1427680 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1427650 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14275f0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14275d8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1427598 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1427618 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14275b8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1427320 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1427668 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1427630 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1427840 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c14276f8 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14276e0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14276a0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1427720 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14276c0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1427398 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1427830 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c14277b8 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14277a0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1427738 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14277e8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1427758 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1427320 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1427818 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1427800 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1427778 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1428b78 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1427968 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1427938 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14278d8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14278c0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1427880 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1427900 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14278a0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1427398 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1427950 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1427918 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1428b58 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c14279e0 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14279c8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1427988 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1427a08 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14279a8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1427320 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1428b48 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1428ad0 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1428ab8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1427a20 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1428b00 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1427a40 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1427398 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1428b30 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1428b18 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1428a90 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1428e08 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1428ba8 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1428de0 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1428dc8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1428c10 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1428d98 <./src/libm.h:67:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1428d80 <./src/libm.h:67:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1428c30 <col:10> 'double (double, double)' Function 0x5608c1243eb0 'hypot' 'double (double, double)'
|   |       |-CallExpr 0x5608c1428ca8 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1428c90 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1428c50 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1428cd0 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1428c70 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1427320 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c1428d40 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c1428d28 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1428ce8 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1428d68 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1428d08 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1427398 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1428e78 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1428e60 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1428e20 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1428ea0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1428e40 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1427320 'a' 'jv':'jv'
|   |-CallExpr 0x5608c1428f10 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1428ef8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1428eb8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1428f38 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1428ed8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1427398 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1428f88 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1428f70 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1428f50 <col:10> 'jv':'jv' lvalue Var 0x5608c1428ba8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1429108 <line:139:23, line:146:15> <scratch space>:153:1 used f_j0 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1428ff8 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1429070 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14296d0 <col:46, line:146:15>
|   |-IfStmt 0x5608c14293e0 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c14292a0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1429270 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1429210 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14291f8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14291b8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1429238 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14291d8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1429070 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1429288 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1429250 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14293c8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c14293b8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1429340 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1429328 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14292c0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1429370 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14292e0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1429070 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14293a0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1429388 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1429300 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14295d0 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1429410 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14295a8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1429590 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1429478 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1429568 <./src/libm.h:72:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1429550 <./src/libm.h:72:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1429498 <col:9> 'double (double)' Function 0x5608c1231300 'j0' 'double (double)'
|   |       `-CallExpr 0x5608c1429510 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c14294f8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14294b8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1429538 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14294d8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1429070 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1429640 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1429628 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14295e8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1429668 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1429608 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1429070 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14296b8 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c14296a0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1429680 <col:10> 'jv':'jv' lvalue Var 0x5608c1429410 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1429820 <line:139:23, line:146:15> <scratch space>:154:1 used f_j1 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1429710 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1429788 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1429de8 <col:46, line:146:15>
|   |-IfStmt 0x5608c1429af8 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c14299b8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1429988 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1429928 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1429910 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14298d0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1429950 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14298f0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1429788 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14299a0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1429968 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1429ae0 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1429ad0 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1429a58 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1429a40 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14299d8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1429a88 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14299f8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1429788 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1429ab8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1429aa0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1429a18 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1429ce8 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1429b28 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1429cc0 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1429ca8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1429b90 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1429c80 <./src/libm.h:77:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1429c68 <./src/libm.h:77:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1429bb0 <col:9> 'double (double)' Function 0x5608c1231660 'j1' 'double (double)'
|   |       `-CallExpr 0x5608c1429c28 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1429c10 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1429bd0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1429c50 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1429bf0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1429788 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1429d58 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1429d40 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1429d00 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1429d80 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1429d20 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1429788 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1429dd0 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1429db8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1429d98 <col:10> 'jv':'jv' lvalue Var 0x5608c1429b28 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1429f38 <line:139:23, line:146:15> <scratch space>:155:1 used f_log 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1429e28 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1429ea0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142a500 <col:46, line:146:15>
|   |-IfStmt 0x5608c142a210 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142a0d0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142a0a0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142a040 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142a028 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1429fe8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142a068 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142a008 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1429ea0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142a0b8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142a080 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142a1f8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142a1e8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142a170 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142a158 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142a0f0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142a1a0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142a110 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1429ea0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142a1d0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142a1b8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142a130 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142a400 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142a240 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142a3d8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142a3c0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142a2a8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142a398 <./src/libm.h:82:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142a380 <./src/libm.h:82:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142a2c8 <col:9> 'double (double)' Function 0x5608c11acb70 'log' 'double (double)'
|   |       `-CallExpr 0x5608c142a340 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142a328 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142a2e8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142a368 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142a308 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1429ea0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142a470 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142a458 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142a418 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142a498 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142a438 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1429ea0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142a4e8 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142a4d0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142a4b0 <col:10> 'jv':'jv' lvalue Var 0x5608c142a240 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142a650 <line:139:23, line:146:15> <scratch space>:156:1 used f_log10 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142a540 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142a5b8 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142ac38 <col:46, line:146:15>
|   |-IfStmt 0x5608c142a928 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142a7e8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142a7b8 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142a758 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142a740 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142a700 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142a780 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142a720 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142a5b8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142a7d0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142a798 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142a910 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142a900 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142a888 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142a870 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142a808 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142a8b8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142a828 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142a5b8 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142a8e8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142a8d0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142a848 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142ab38 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142a958 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142ab10 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142aaf8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142a9c0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142aad0 <./src/libm.h:87:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142aab8 <./src/libm.h:87:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142a9e0 <col:9> 'double (double)' Function 0x5608c11ad088 'log10' 'double (double)'
|   |       `-CallExpr 0x5608c142aa58 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142aa40 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142aa00 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142aaa0 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142aa20 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142a5b8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142aba8 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142ab90 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142ab50 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142abd0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142ab70 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142a5b8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142ac20 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142ac08 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142abe8 <col:10> 'jv':'jv' lvalue Var 0x5608c142a958 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142ad88 <line:139:23, line:146:15> <scratch space>:157:1 used f_log2 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142ac78 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142acf0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142b350 <col:46, line:146:15>
|   |-IfStmt 0x5608c142b060 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142af20 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142aef0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142ae90 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142ae78 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142ae38 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142aeb8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142ae58 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142acf0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142af08 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142aed0 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142b048 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142b038 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142afc0 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142afa8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142af40 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142aff0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142af60 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142acf0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142b020 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142b008 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142af80 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142b250 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142b090 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142b228 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142b210 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142b0f8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142b1e8 <./src/libm.h:92:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142b1d0 <./src/libm.h:92:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142b118 <col:9> 'double (double)' Function 0x5608c11b0ec8 'log2' 'double (double)'
|   |       `-CallExpr 0x5608c142b190 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142b178 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142b138 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142b1b8 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142b158 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142acf0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142b2c0 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142b2a8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142b268 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142b2e8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142b288 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142acf0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142b338 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142b320 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142b300 <col:10> 'jv':'jv' lvalue Var 0x5608c142b090 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142b5a0 <line:150:24, line:164:15> <scratch space>:158:1 used f_pow 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c142b390 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142b408 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c142b480 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c142b4f8 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c142c0d0 <col:58, line:164:15>
|   |-CallExpr 0x5608c142b6b8 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142b6a0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142b660 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142b6e0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142b680 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142b408 'input' 'jv':'jv'
|   |-IfStmt 0x5608c142b9c0 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c142b7e0 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142b7b0 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142b750 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142b738 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142b6f8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142b778 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142b718 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142b480 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142b7c8 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142b790 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142b9a0 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c142b858 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c142b840 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c142b800 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c142b880 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c142b820 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c142b4f8 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c142b990 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c142b918 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142b900 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142b898 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142b948 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142b8b8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142b480 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142b978 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142b960 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142b8d8 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c142bca8 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c142bac8 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142ba98 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142ba38 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142ba20 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142b9e0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142ba60 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142ba00 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142b4f8 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142bab0 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142ba78 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142bc88 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c142bb40 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c142bb28 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c142bae8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c142bb68 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c142bb08 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c142b480 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c142bc78 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c142bc00 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142bbe8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142bb80 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142bc30 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142bba0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142b4f8 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142bc60 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142bc48 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142bbc0 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142bf38 <line:161:3, col:67>
|   | `-VarDecl 0x5608c142bcd8 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142bf10 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142bef8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142bd40 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142bec8 <./src/libm.h:97:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c142beb0 <./src/libm.h:97:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142bd60 <col:10> 'double (double, double)' Function 0x5608c11b14d8 'pow' 'double (double, double)'
|   |       |-CallExpr 0x5608c142bdd8 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c142bdc0 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c142bd80 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c142be00 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c142bda0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142b480 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c142be70 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c142be58 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142be18 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142be98 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142be38 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c142b4f8 'b' 'jv':'jv'
|   |-CallExpr 0x5608c142bfa8 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c142bf90 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142bf50 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142bfd0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142bf70 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142b480 'a' 'jv':'jv'
|   |-CallExpr 0x5608c142c040 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c142c028 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142bfe8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142c068 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142c008 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142b4f8 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c142c0b8 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c142c0a0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142c080 <col:10> 'jv':'jv' lvalue Var 0x5608c142bcd8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142c338 <line:150:24, line:164:15> <scratch space>:159:1 used f_remainder 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c142c128 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142c1a0 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c142c218 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c142c290 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c142cea8 <col:58, line:164:15>
|   |-CallExpr 0x5608c142c450 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142c438 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142c3f8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142c478 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142c418 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142c1a0 'input' 'jv':'jv'
|   |-IfStmt 0x5608c142c758 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c142c578 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142c548 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142c4e8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142c4d0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142c490 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142c510 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142c4b0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142c218 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142c560 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142c528 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142c738 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c142c5f0 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c142c5d8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c142c598 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c142c618 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c142c5b8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c142c290 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c142c728 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c142c6b0 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142c698 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142c630 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142c6e0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142c650 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142c218 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142c710 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142c6f8 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142c670 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c142ca40 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c142c860 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142c830 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142c7d0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142c7b8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142c778 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142c7f8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142c798 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142c290 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142c848 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142c810 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142ca20 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c142c8d8 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c142c8c0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c142c880 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c142c900 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c142c8a0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c142c218 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c142ca10 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c142c998 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142c980 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142c918 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142c9c8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142c938 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142c290 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142c9f8 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142c9e0 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142c958 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142cd10 <line:161:3, col:67>
|   | `-VarDecl 0x5608c142cab0 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142cce8 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142ccd0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142cb18 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142cca0 <./src/libm.h:102:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c142cc88 <./src/libm.h:102:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142cb38 <col:10> 'double (double, double)' Function 0x5608c12393c0 'remainder' 'double (double, double)'
|   |       |-CallExpr 0x5608c142cbb0 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c142cb98 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c142cb58 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c142cbd8 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c142cb78 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142c218 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c142cc48 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c142cc30 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142cbf0 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142cc70 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142cc10 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c142c290 'b' 'jv':'jv'
|   |-CallExpr 0x5608c142cd80 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c142cd68 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142cd28 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142cda8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142cd48 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142c218 'a' 'jv':'jv'
|   |-CallExpr 0x5608c142ce18 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c142ce00 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142cdc0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142ce40 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142cde0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142c290 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c142ce90 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c142ce78 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142ce58 <col:10> 'jv':'jv' lvalue Var 0x5608c142cab0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142d010 <line:139:23, line:146:15> <scratch space>:160:1 used f_sin 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142cf00 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142cf78 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142d5d8 <col:46, line:146:15>
|   |-IfStmt 0x5608c142d2e8 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142d1a8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142d178 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142d118 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142d100 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142d0c0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142d140 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142d0e0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142cf78 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142d190 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142d158 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142d2d0 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142d2c0 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142d248 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142d230 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142d1c8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142d278 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142d1e8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142cf78 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142d2a8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142d290 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142d208 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142d4d8 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142d318 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142d4b0 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142d498 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142d380 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142d470 <./src/libm.h:107:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142d458 <./src/libm.h:107:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142d3a0 <col:9> 'double (double)' Function 0x5608c11a7b20 'sin' 'double (double)'
|   |       `-CallExpr 0x5608c142d418 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142d400 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142d3c0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142d440 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142d3e0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142cf78 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142d548 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142d530 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142d4f0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142d570 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142d510 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142cf78 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142d5c0 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142d5a8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142d588 <col:10> 'jv':'jv' lvalue Var 0x5608c142d318 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142d728 <line:139:23, line:146:15> <scratch space>:161:1 used f_sinh 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142d618 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142d690 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142dcf0 <col:46, line:146:15>
|   |-IfStmt 0x5608c142da00 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142d8c0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142d890 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142d830 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142d818 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142d7d8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142d858 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142d7f8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142d690 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142d8a8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142d870 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142d9e8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142d9d8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142d960 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142d948 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142d8e0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142d990 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142d900 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142d690 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142d9c0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142d9a8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142d920 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142dbf0 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142da30 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142dbc8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142dbb0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142da98 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142db88 <./src/libm.h:112:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142db70 <./src/libm.h:112:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142dab8 <col:9> 'double (double)' Function 0x5608c11a8a88 'sinh' 'double (double)'
|   |       `-CallExpr 0x5608c142db30 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142db18 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142dad8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142db58 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142daf8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142d690 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142dc60 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142dc48 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142dc08 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142dc88 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142dc28 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142d690 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142dcd8 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142dcc0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142dca0 <col:10> 'jv':'jv' lvalue Var 0x5608c142da30 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142de40 <line:139:23, line:146:15> <scratch space>:162:1 used f_sqrt 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142dd30 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142dda8 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142e408 <col:46, line:146:15>
|   |-IfStmt 0x5608c142e118 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142dfd8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142dfa8 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142df48 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142df30 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142def0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142df70 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142df10 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142dda8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142dfc0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142df88 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142e100 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142e0f0 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142e078 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142e060 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142dff8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142e0a8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142e018 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142dda8 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142e0d8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142e0c0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142e038 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142e308 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142e148 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142e2e0 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142e2c8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142e1b0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142e2a0 <./src/libm.h:117:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142e288 <./src/libm.h:117:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142e1d0 <col:9> 'double (double)' Function 0x5608c11b1a88 'sqrt' 'double (double)'
|   |       `-CallExpr 0x5608c142e248 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142e230 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142e1f0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142e270 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142e210 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142dda8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142e378 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142e360 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142e320 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142e3a0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142e340 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142dda8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142e3f0 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142e3d8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142e3b8 <col:10> 'jv':'jv' lvalue Var 0x5608c142e148 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142e558 <line:139:23, line:146:15> <scratch space>:163:1 used f_tan 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142e448 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142e4c0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142eb50 <col:46, line:146:15>
|   |-IfStmt 0x5608c142e830 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142e6f0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142e6c0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142e660 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142e648 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142e608 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142e688 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142e628 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142e4c0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142e6d8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142e6a0 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142e818 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142e808 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142e790 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142e778 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142e710 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142e7c0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142e730 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142e4c0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142e7f0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142e7d8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142e750 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142ea20 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142e860 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142e9f8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142e9e0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142e8c8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142e9b8 <./src/libm.h:122:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142e9a0 <./src/libm.h:122:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142e8e8 <col:9> 'double (double)' Function 0x5608c11a8038 'tan' 'double (double)'
|   |       `-CallExpr 0x5608c142e960 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142e948 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142e908 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142e988 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142e928 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142e4c0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142eac0 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142ea78 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142ea38 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142eae8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142ea58 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142e4c0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142eb38 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142eb20 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142eb00 <col:10> 'jv':'jv' lvalue Var 0x5608c142e860 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142eca0 <line:139:23, line:146:15> <scratch space>:164:1 used f_tanh 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142eb90 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142ec08 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142f268 <col:46, line:146:15>
|   |-IfStmt 0x5608c142ef78 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142ee38 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142ee08 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142eda8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142ed90 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142ed50 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142edd0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142ed70 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142ec08 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142ee20 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142ede8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142ef60 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142ef50 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142eed8 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142eec0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142ee58 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142ef08 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142ee78 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142ec08 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142ef38 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142ef20 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142ee98 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142f168 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142efa8 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142f140 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142f128 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142f010 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142f100 <./src/libm.h:127:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142f0e8 <./src/libm.h:127:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142f030 <col:9> 'double (double)' Function 0x5608c11a8fa0 'tanh' 'double (double)'
|   |       `-CallExpr 0x5608c142f0a8 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142f090 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142f050 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142f0d0 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142f070 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142ec08 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142f1d8 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142f1c0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142f180 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142f200 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142f1a0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142ec08 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142f250 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142f238 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142f218 <col:10> 'jv':'jv' lvalue Var 0x5608c142efa8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142f3b8 <line:139:23, line:146:15> <scratch space>:165:1 used f_tgamma 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142f2a8 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142f320 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c142f980 <col:46, line:146:15>
|   |-IfStmt 0x5608c142f690 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142f550 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142f520 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142f4c0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142f4a8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142f468 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142f4e8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142f488 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142f320 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142f538 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142f500 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142f678 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142f668 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142f5f0 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142f5d8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142f570 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142f620 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142f590 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142f320 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142f650 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142f638 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142f5b0 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142f880 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142f6c0 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142f858 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142f840 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142f728 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142f818 <./src/libm.h:132:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142f800 <./src/libm.h:132:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142f748 <col:9> 'double (double)' Function 0x5608c1233b48 'tgamma' 'double (double)'
|   |       `-CallExpr 0x5608c142f7c0 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142f7a8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142f768 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142f7e8 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142f788 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142f320 'input' 'jv':'jv'
|   |-CallExpr 0x5608c142f8f0 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142f8d8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142f898 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c142f918 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142f8b8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142f320 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c142f968 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c142f950 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c142f930 <col:10> 'jv':'jv' lvalue Var 0x5608c142f6c0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c142fad0 <line:139:23, line:146:15> <scratch space>:166:1 used f_y0 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c142f9c0 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c142fa38 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1430098 <col:46, line:146:15>
|   |-IfStmt 0x5608c142fda8 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c142fc68 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c142fc38 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c142fbd8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c142fbc0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c142fb80 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c142fc00 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c142fba0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c142fa38 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c142fc50 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c142fc18 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c142fd90 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c142fd80 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c142fd08 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c142fcf0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142fc88 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c142fd38 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c142fca8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c142fa38 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c142fd68 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c142fd50 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c142fcc8 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c142ff98 <line:144:3, col:51>
|   | `-VarDecl 0x5608c142fdd8 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c142ff70 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c142ff58 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c142fe40 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c142ff30 <./src/libm.h:137:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c142ff18 <./src/libm.h:137:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c142fe60 <col:9> 'double (double)' Function 0x5608c1231e78 'y0' 'double (double)'
|   |       `-CallExpr 0x5608c142fed8 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c142fec0 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c142fe80 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c142ff00 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c142fea0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c142fa38 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1430008 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c142fff0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c142ffb0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1430030 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c142ffd0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c142fa38 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1430080 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1430068 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1430048 <col:10> 'jv':'jv' lvalue Var 0x5608c142fdd8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14301e8 <line:139:23, line:146:15> <scratch space>:167:1 used f_y1 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14300d8 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1430150 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14307b0 <col:46, line:146:15>
|   |-IfStmt 0x5608c14304c0 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1430380 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1430350 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14302f0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14302d8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1430298 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1430318 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14302b8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1430150 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1430368 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1430330 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14304a8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1430498 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1430420 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1430408 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14303a0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1430450 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14303c0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1430150 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1430480 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1430468 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14303e0 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14306b0 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14304f0 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1430688 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1430670 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1430558 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1430648 <./src/libm.h:142:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1430630 <./src/libm.h:142:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1430578 <col:9> 'double (double)' Function 0x5608c12321d8 'y1' 'double (double)'
|   |       `-CallExpr 0x5608c14305f0 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c14305d8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1430598 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1430618 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14305b8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1430150 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1430720 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1430708 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14306c8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1430748 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14306e8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1430150 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1430798 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1430780 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1430760 <col:10> 'jv':'jv' lvalue Var 0x5608c14304f0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1430a00 <line:150:24, line:164:15> <scratch space>:168:1 used f_jn 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c14307f0 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1430868 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c14308e0 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1430958 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1431580 <col:58, line:164:15>
|   |-CallExpr 0x5608c1430b28 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1430b10 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1430ad0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1430b50 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1430af0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1430868 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1430e30 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1430c50 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1430c20 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1430bc0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1430ba8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1430b68 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1430be8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1430b88 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14308e0 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1430c38 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1430c00 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1430e10 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1430cc8 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1430cb0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1430c70 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1430cf0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1430c90 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1430958 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1430e00 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c1430d88 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1430d70 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1430d08 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1430db8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1430d28 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14308e0 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1430de8 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1430dd0 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1430d48 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1431118 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1430f38 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1430f08 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1430ea8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1430e90 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1430e50 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1430ed0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1430e70 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1430958 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1430f20 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1430ee8 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14310f8 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c1430fb0 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1430f98 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1430f58 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1430fd8 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1430f78 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14308e0 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c14310e8 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1431070 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1431058 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1430ff0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14310a0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1431010 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1430958 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14310d0 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14310b8 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1431030 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14313e8 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1431148 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14313c0 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14313a8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14311b0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1431360 <./src/libm.h:147:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1431348 <./src/libm.h:147:10> 'double (*)(int, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14311d0 <col:10> 'double (int, double)' Function 0x5608c1231a80 'jn' 'double (int, double)'
|   |       |-ImplicitCastExpr 0x5608c1431390 <src/builtin.c:161:27, col:44> 'int' <FloatingToIntegral>
|   |       | `-CallExpr 0x5608c1431248 <col:27, col:44> 'double'
|   |       |   |-ImplicitCastExpr 0x5608c1431230 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x5608c14311f0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       |   `-ImplicitCastExpr 0x5608c1431270 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5608c1431210 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c14308e0 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c14312e0 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c14312c8 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1431288 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1431308 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14312a8 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1430958 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1431458 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1431440 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1431400 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1431480 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1431420 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14308e0 'a' 'jv':'jv'
|   |-CallExpr 0x5608c14314f0 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14314d8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1431498 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1431518 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14314b8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1430958 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1431568 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1431550 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1431530 <col:10> 'jv':'jv' lvalue Var 0x5608c1431148 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14317e8 <line:150:24, line:164:15> <scratch space>:169:1 used f_yn 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c14315d8 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1431650 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c14316c8 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1431740 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1432330 <col:58, line:164:15>
|   |-CallExpr 0x5608c1431900 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14318e8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14318a8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1431928 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14318c8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1431650 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1431c08 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1431a28 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c14319f8 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1431998 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1431980 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1431940 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14319c0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1431960 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14316c8 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1431a10 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14319d8 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1431be8 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1431aa0 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1431a88 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1431a48 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1431ac8 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1431a68 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1431740 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1431bd8 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c1431b60 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1431b48 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1431ae0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1431b90 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1431b00 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14316c8 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1431bc0 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1431ba8 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1431b20 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1431ef0 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1431d10 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1431ce0 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1431c80 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1431c68 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1431c28 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1431ca8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1431c48 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1431740 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1431cf8 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1431cc0 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1431ed0 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c1431d88 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1431d70 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1431d30 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1431db0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1431d50 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14316c8 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1431ec0 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1431e48 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1431e30 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1431dc8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1431e78 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1431de8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1431740 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1431ea8 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1431e90 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1431e08 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1432198 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1431f20 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1432170 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1432158 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1431f88 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1432110 <./src/libm.h:150:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c14320f8 <./src/libm.h:150:10> 'double (*)(int, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1431fa8 <col:10> 'double (int, double)' Function 0x5608c12325f8 'yn' 'double (int, double)'
|   |       |-ImplicitCastExpr 0x5608c1432140 <src/builtin.c:161:27, col:44> 'int' <FloatingToIntegral>
|   |       | `-CallExpr 0x5608c1432020 <col:27, col:44> 'double'
|   |       |   |-ImplicitCastExpr 0x5608c1432008 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x5608c1431fc8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       |   `-ImplicitCastExpr 0x5608c1432048 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5608c1431fe8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c14316c8 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c14320b8 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c14320a0 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1432060 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14320e0 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1432080 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1431740 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1432208 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14321f0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14321b0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1432230 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14321d0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14316c8 'a' 'jv':'jv'
|   |-CallExpr 0x5608c14322a0 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1432288 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1432248 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14322c8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1432268 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1431740 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1432318 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1432300 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14322e0 <col:10> 'jv':'jv' lvalue Var 0x5608c1431f20 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1432498 <line:139:23, line:146:15> <scratch space>:170:1 used f_ceil 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1432388 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1432400 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1432a60 <col:46, line:146:15>
|   |-IfStmt 0x5608c1432770 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1432630 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1432600 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14325a0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1432588 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1432548 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14325c8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1432568 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1432400 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1432618 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14325e0 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1432758 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1432748 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c14326d0 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14326b8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1432650 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1432700 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1432670 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1432400 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1432730 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1432718 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1432690 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1432960 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14327a0 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1432938 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1432920 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1432808 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c14328f8 <./src/libm.h:153:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c14328e0 <./src/libm.h:153:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1432828 <col:9> 'double (double)' Function 0x5608c12449f0 'ceil' 'double (double)'
|   |       `-CallExpr 0x5608c14328a0 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1432888 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1432848 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14328c8 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1432868 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1432400 'input' 'jv':'jv'
|   |-CallExpr 0x5608c14329d0 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14329b8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1432978 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14329f8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1432998 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1432400 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1432a48 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1432a30 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1432a10 <col:10> 'jv':'jv' lvalue Var 0x5608c14327a0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1432cf0 <line:150:24, line:164:15> <scratch space>:171:1 used f_copysign 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1432ae0 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1432b58 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1432bd0 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1432c48 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1433820 <col:58, line:164:15>
|   |-CallExpr 0x5608c1432e08 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1432df0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1432db0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1432e30 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1432dd0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1432b58 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1433110 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1432f30 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1432f00 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1432ea0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1432e88 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1432e48 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1432ec8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1432e68 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1432bd0 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1432f18 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1432ee0 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14330f0 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1432fa8 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1432f90 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1432f50 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1432fd0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1432f70 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1432c48 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c14330e0 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c1433068 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1433050 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1432fe8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1433098 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1433008 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1432bd0 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14330c8 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14330b0 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1433028 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c14333f8 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1433218 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c14331e8 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1433188 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1433170 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1433130 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14331b0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1433150 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1432c48 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1433200 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14331c8 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14333d8 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c1433290 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1433278 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1433238 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c14332b8 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1433258 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1432bd0 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c14333c8 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1433350 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1433338 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14332d0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1433380 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14332f0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1432c48 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14333b0 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1433398 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1433310 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1433688 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1433428 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1433660 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1433648 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1433490 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1433618 <./src/libm.h:158:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1433600 <./src/libm.h:158:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14334b0 <col:10> 'double (double, double)' Function 0x5608c1230720 'copysign' 'double (double, double)'
|   |       |-CallExpr 0x5608c1433528 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1433510 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c14334d0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1433550 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c14334f0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1432bd0 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c14335c0 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c14335a8 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1433568 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14335e8 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1433588 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1432c48 'b' 'jv':'jv'
|   |-CallExpr 0x5608c14336f8 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14336e0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14336a0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1433720 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14336c0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1432bd0 'a' 'jv':'jv'
|   |-CallExpr 0x5608c1433790 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1433778 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1433738 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14337b8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1433758 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1432c48 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1433808 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c14337f0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14337d0 <col:10> 'jv':'jv' lvalue Var 0x5608c1433428 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1433a88 <line:150:24, line:164:15> <scratch space>:172:1 used f_drem 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1433878 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14338f0 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1433968 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14339e0 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c14345b8 <col:58, line:164:15>
|   |-CallExpr 0x5608c1433ba0 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1433b88 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1433b48 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1433bc8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1433b68 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14338f0 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1433ea8 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1433cc8 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1433c98 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1433c38 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1433c20 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1433be0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1433c60 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1433c00 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1433968 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1433cb0 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1433c78 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1433e88 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1433d40 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1433d28 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1433ce8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1433d68 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1433d08 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14339e0 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1433e78 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c1433e00 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1433de8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1433d80 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1433e30 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1433da0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1433968 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1433e60 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1433e48 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1433dc0 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1434190 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1433fb0 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1433f80 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1433f20 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1433f08 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1433ec8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1433f48 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1433ee8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14339e0 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1433f98 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1433f60 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1434170 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c1434028 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1434010 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1433fd0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1434050 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1433ff0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1433968 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1434160 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c14340e8 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14340d0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1434068 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1434118 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1434088 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14339e0 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1434148 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1434130 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14340a8 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1434420 <line:161:3, col:67>
|   | `-VarDecl 0x5608c14341c0 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14343f8 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14343e0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1434228 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c14343b0 <./src/libm.h:163:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1434398 <./src/libm.h:163:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1434248 <col:10> 'double (double, double)' Function 0x5608c122fce8 'drem' 'double (double, double)'
|   |       |-CallExpr 0x5608c14342c0 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c14342a8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1434268 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c14342e8 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1434288 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1433968 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c1434358 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c1434340 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1434300 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1434380 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1434320 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c14339e0 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1434490 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1434478 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1434438 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14344b8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1434458 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1433968 'a' 'jv':'jv'
|   |-CallExpr 0x5608c1434528 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1434510 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14344d0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1434550 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14344f0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14339e0 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c14345a0 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1434588 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1434568 <col:10> 'jv':'jv' lvalue Var 0x5608c14341c0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1434720 <line:139:23, line:146:15> <scratch space>:173:1 used f_erf 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1434610 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1434688 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1434d08 <col:46, line:146:15>
|   |-IfStmt 0x5608c14349f8 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c14348b8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1434888 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1434828 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1434810 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14347d0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1434850 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14347f0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1434688 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14348a0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1434868 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14349e0 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c14349d0 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1434958 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1434940 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14348d8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1434988 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14348f8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1434688 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14349b8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14349a0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1434918 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1434c08 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1434a28 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1434be0 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1434bc8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1434a90 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1434ba0 <./src/libm.h:168:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1434b88 <./src/libm.h:168:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1434ab0 <col:9> 'double (double)' Function 0x5608c1232b80 'erf' 'double (double)'
|   |       `-CallExpr 0x5608c1434b48 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1434b30 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1434af0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1434b70 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1434b10 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1434688 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1434c78 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1434c60 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1434c20 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1434ca0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1434c40 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1434688 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1434cf0 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1434cd8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1434cb8 <col:10> 'jv':'jv' lvalue Var 0x5608c1434a28 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1434e58 <line:139:23, line:146:15> <scratch space>:174:1 used f_erfc 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1434d48 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1434dc0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1435420 <col:46, line:146:15>
|   |-IfStmt 0x5608c1435130 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1434ff0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1434fc0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1434f60 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1434f48 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1434f08 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1434f88 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1434f28 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1434dc0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1434fd8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1434fa0 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1435118 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1435108 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1435090 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1435078 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1435010 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14350c0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1435030 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1434dc0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14350f0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14350d8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1435050 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1435320 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1435160 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14352f8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14352e0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14351c8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c14352b8 <./src/libm.h:173:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c14352a0 <./src/libm.h:173:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14351e8 <col:9> 'double (double)' Function 0x5608c1233098 'erfc' 'double (double)'
|   |       `-CallExpr 0x5608c1435260 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1435248 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1435208 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1435288 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1435228 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1434dc0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1435390 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1435378 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1435338 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14353b8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1435358 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1434dc0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1435408 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c14353f0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14353d0 <col:10> 'jv':'jv' lvalue Var 0x5608c1435160 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1435570 <line:139:23, line:146:15> <scratch space>:175:1 used f_exp10 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1435460 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14354d8 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1435b38 <col:46, line:146:15>
|   |-IfStmt 0x5608c1435848 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1435708 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c14356d8 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1435678 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1435660 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1435620 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14356a0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1435640 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14354d8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14356f0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14356b8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1435830 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1435820 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c14357a8 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1435790 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1435728 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14357d8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1435748 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14354d8 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1435808 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14357f0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1435768 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1435a38 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1435878 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1435a10 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14359f8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14358e0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c14359d0 <./src/libm.h:178:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c14359b8 <./src/libm.h:178:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1435900 <col:9> 'double (double)' Function 0x5608c11adbd8 'exp10' 'double (double)'
|   |       `-CallExpr 0x5608c1435978 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1435960 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1435920 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14359a0 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1435940 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c14354d8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1435aa8 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1435a90 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1435a50 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1435ad0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1435a70 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14354d8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1435b20 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1435b08 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1435ae8 <col:10> 'jv':'jv' lvalue Var 0x5608c1435878 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1435c88 <line:139:23, line:146:15> <scratch space>:176:1 used f_expm1 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1435b78 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1435bf0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1436250 <col:46, line:146:15>
|   |-IfStmt 0x5608c1435f60 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1435e20 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1435df0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1435d90 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1435d78 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1435d38 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1435db8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1435d58 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1435bf0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1435e08 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1435dd0 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1435f48 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1435f38 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1435ec0 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1435ea8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1435e40 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1435ef0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1435e60 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1435bf0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1435f20 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1435f08 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1435e80 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1436150 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1435f90 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1436128 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1436110 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1435ff8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c14360e8 <./src/libm.h:183:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c14360d0 <./src/libm.h:183:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1436018 <col:9> 'double (double)' Function 0x5608c11ae280 'expm1' 'double (double)'
|   |       `-CallExpr 0x5608c1436090 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1436078 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1436038 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14360b8 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1436058 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1435bf0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c14361c0 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14361a8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1436168 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14361e8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1436188 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1435bf0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1436238 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1436220 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1436200 <col:10> 'jv':'jv' lvalue Var 0x5608c1435f90 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14363a0 <line:139:23, line:146:15> <scratch space>:177:1 used f_fabs 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1436290 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1436308 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1436968 <col:46, line:146:15>
|   |-IfStmt 0x5608c1436678 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1436538 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1436508 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14364a8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1436490 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1436450 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14364d0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1436470 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1436308 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1436520 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14364e8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1436660 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1436650 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c14365d8 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14365c0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1436558 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1436608 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1436578 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1436308 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1436638 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1436620 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1436598 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1436868 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14366a8 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1436840 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1436828 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1436710 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1436800 <./src/libm.h:188:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c14367e8 <./src/libm.h:188:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1436730 <col:9> 'double (double)' Function 0x5608c122c030 'fabs' 'double (double)'
|   |       `-CallExpr 0x5608c14367a8 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1436790 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1436750 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14367d0 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1436770 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1436308 'input' 'jv':'jv'
|   |-CallExpr 0x5608c14368d8 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14368c0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1436880 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1436900 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14368a0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1436308 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1436950 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1436938 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1436918 <col:10> 'jv':'jv' lvalue Var 0x5608c14366a8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1436c20 <line:150:24, line:164:15> <scratch space>:178:1 used f_fdim 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c14369a8 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1436a20 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1436b00 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1436b78 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1437750 <col:58, line:164:15>
|   |-CallExpr 0x5608c1436d38 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1436d20 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1436ce0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1436d60 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1436d00 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1436a20 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1437040 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1436e60 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1436e30 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1436dd0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1436db8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1436d78 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1436df8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1436d98 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1436b00 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1436e48 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1436e10 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1437020 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1436ed8 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1436ec0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1436e80 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1436f00 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1436ea0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1436b78 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1437010 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c1436f98 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1436f80 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1436f18 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1436fc8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1436f38 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1436b00 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1436ff8 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1436fe0 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1436f58 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1437328 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1437148 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1437118 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14370b8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14370a0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1437060 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14370e0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1437080 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1436b78 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1437130 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14370f8 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1437308 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c14371c0 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14371a8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1437168 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c14371e8 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1437188 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1436b00 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c14372f8 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1437280 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1437268 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1437200 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14372b0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1437220 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1436b78 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14372e0 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14372c8 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1437240 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14375b8 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1437358 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1437590 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1437578 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14373c0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1437548 <./src/libm.h:193:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1437530 <./src/libm.h:193:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14373e0 <col:10> 'double (double, double)' Function 0x5608c123ed30 'fdim' 'double (double, double)'
|   |       |-CallExpr 0x5608c1437458 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1437440 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1437400 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1437480 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1437420 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1436b00 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c14374f0 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c14374d8 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1437498 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1437518 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14374b8 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1436b78 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1437628 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1437610 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14375d0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1437650 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14375f0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1436b00 'a' 'jv':'jv'
|   |-CallExpr 0x5608c14376c0 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14376a8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1437668 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14376e8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1437688 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1436b78 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1437738 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1437720 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1437700 <col:10> 'jv':'jv' lvalue Var 0x5608c1437358 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1437ad8 <line:168:25, line:190:15> <scratch space>:179:1 used f_fma 'jv (jq_state *, jv, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c14377a8 <src/builtin.c:169:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1437820 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1437898 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1437910 <col:52, col:55> col:55 used b 'jv':'jv'
| |-ParmVarDecl 0x5608c1437988 <col:58, col:61> col:61 used c 'jv':'jv'
| `-CompoundStmt 0x5608c143bde0 <col:64, line:190:15>
|   |-CallExpr 0x5608c1437bf8 <line:170:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1437be0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1437ba0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1437c20 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1437bc0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1437820 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1437fa0 <line:171:3, line:175:3>
|   | |-BinaryOperator 0x5608c1437d20 <line:171:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1437cf0 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1437c90 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1437c78 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1437c38 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1437cb8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1437c58 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1437898 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1437d08 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1437cd0 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1437f78 <col:41, line:175:3>
|   |   |-CallExpr 0x5608c1437d98 <line:172:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1437d80 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1437d40 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1437dc0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1437d60 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1437910 'b' 'jv':'jv'
|   |   |-CallExpr 0x5608c1437e30 <line:173:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1437e18 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1437dd8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1437e58 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1437df8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1437988 'c' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1437f68 <line:174:5, col:43>
|   |     `-CallExpr 0x5608c1437ef0 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1437ed8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1437e70 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1437f20 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1437e90 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1437898 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1437f50 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1437f38 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1437eb0 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1438328 <line:176:3, line:180:3>
|   | |-BinaryOperator 0x5608c14380a8 <line:176:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1438078 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1438018 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1438000 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1437fc0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1438040 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1437fe0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1437910 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1438090 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1438058 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1438300 <col:41, line:180:3>
|   |   |-CallExpr 0x5608c1438120 <line:177:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1438108 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14380c8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1438148 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14380e8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1437898 'a' 'jv':'jv'
|   |   |-CallExpr 0x5608c14381b8 <line:178:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14381a0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1438160 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c14381e0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1438180 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1437988 'c' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c14382f0 <line:179:5, col:43>
|   |     `-CallExpr 0x5608c1438278 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1438260 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14381f8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14382a8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1438218 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1437910 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14382d8 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14382c0 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1438238 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c14386b0 <line:181:3, line:185:3>
|   | |-BinaryOperator 0x5608c1438430 <line:181:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1438400 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14383a0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1438388 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1438348 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14383c8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1438368 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1437988 'c' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1438418 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14383e0 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1438688 <col:41, line:185:3>
|   |   |-CallExpr 0x5608c14384a8 <line:182:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1438490 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1438450 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c14384d0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1438470 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1437898 'a' 'jv':'jv'
|   |   |-CallExpr 0x5608c1438540 <line:183:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1438528 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14384e8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1438568 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1438508 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1437910 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1438678 <line:184:5, col:43>
|   |     `-CallExpr 0x5608c1438600 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14385e8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1438580 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1438630 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14385a0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1437988 'c' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1438660 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1438648 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14385c0 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1438a08 <line:186:3, col:87>
|   | `-VarDecl 0x5608c14386e0 <col:3, col:86> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14389e0 <col:12, col:86> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14389c8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1438748 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1438990 <./src/libm.h:198:11, src/builtin.c:186:85> 'double'
|   |       |-ImplicitCastExpr 0x5608c1438978 <./src/libm.h:198:11> 'double (*)(double, double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1438768 <col:11> 'double (double, double, double)' Function 0x5608c12407c8 'fma' 'double (double, double, double)'
|   |       |-CallExpr 0x5608c14387e0 <src/builtin.c:186:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c14387c8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1438788 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1438808 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c14387a8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1437898 'a' 'jv':'jv'
|   |       |-CallExpr 0x5608c1438878 <col:47, col:64> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1438860 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1438820 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c14388a0 <col:63> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1438840 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1437910 'b' 'jv':'jv'
|   |       `-CallExpr 0x5608c1438910 <col:67, col:84> 'double'
|   |         |-ImplicitCastExpr 0x5608c14388f8 <col:67> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14388b8 <col:67> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1438938 <col:83> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14388d8 <col:83> 'jv':'jv' lvalue ParmVar 0x5608c1437988 'c' 'jv':'jv'
|   |-CallExpr 0x5608c1438a78 <line:187:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1438a60 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1438a20 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1438aa0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1438a40 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1437898 'a' 'jv':'jv'
|   |-CallExpr 0x5608c143bcb8 <line:188:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c143bca0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1438ab8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143bce0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1438ad8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1437910 'b' 'jv':'jv'
|   |-CallExpr 0x5608c143bd50 <line:189:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c143bd38 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143bcf8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143bd78 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143bd18 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1437988 'c' 'jv':'jv'
|   `-ReturnStmt 0x5608c143bdc8 <line:190:3, col:10>
|     `-ImplicitCastExpr 0x5608c143bdb0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c143bd90 <col:10> 'jv':'jv' lvalue Var 0x5608c14386e0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c143c058 <line:150:24, line:164:15> <scratch space>:180:1 used f_fmax 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c143be48 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c143bec0 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c143bf38 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c143bfb0 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c143cb88 <col:58, line:164:15>
|   |-CallExpr 0x5608c143c170 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c143c158 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143c118 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143c198 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143c138 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143bec0 'input' 'jv':'jv'
|   |-IfStmt 0x5608c143c478 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c143c298 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143c268 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143c208 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143c1f0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143c1b0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143c230 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143c1d0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143bf38 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143c280 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143c248 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143c458 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c143c310 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c143c2f8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c143c2b8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c143c338 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c143c2d8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c143bfb0 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c143c448 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c143c3d0 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143c3b8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143c350 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143c400 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143c370 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143bf38 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143c430 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143c418 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143c390 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c143c760 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c143c580 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143c550 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143c4f0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143c4d8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143c498 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143c518 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143c4b8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143bfb0 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143c568 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143c530 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143c740 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c143c5f8 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c143c5e0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c143c5a0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c143c620 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c143c5c0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c143bf38 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c143c730 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c143c6b8 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143c6a0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143c638 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143c6e8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143c658 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143bfb0 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143c718 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143c700 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143c678 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c143c9f0 <line:161:3, col:67>
|   | `-VarDecl 0x5608c143c790 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c143c9c8 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c143c9b0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c143c7f8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c143c980 <./src/libm.h:203:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c143c968 <./src/libm.h:203:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143c818 <col:10> 'double (double, double)' Function 0x5608c123f658 'fmax' 'double (double, double)'
|   |       |-CallExpr 0x5608c143c890 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c143c878 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c143c838 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c143c8b8 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c143c858 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c143bf38 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c143c928 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c143c910 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c143c8d0 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c143c950 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c143c8f0 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c143bfb0 'b' 'jv':'jv'
|   |-CallExpr 0x5608c143ca60 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c143ca48 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143ca08 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143ca88 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143ca28 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143bf38 'a' 'jv':'jv'
|   |-CallExpr 0x5608c143caf8 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c143cae0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143caa0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143cb20 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143cac0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143bfb0 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c143cb70 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c143cb58 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c143cb38 <col:10> 'jv':'jv' lvalue Var 0x5608c143c790 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c143cdf0 <line:150:24, line:164:15> <scratch space>:181:1 used f_fmin 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c143cbe0 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c143cc58 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c143ccd0 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c143cd48 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c143d920 <col:58, line:164:15>
|   |-CallExpr 0x5608c143cf08 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c143cef0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143ceb0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143cf30 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143ced0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143cc58 'input' 'jv':'jv'
|   |-IfStmt 0x5608c143d210 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c143d030 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143d000 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143cfa0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143cf88 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143cf48 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143cfc8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143cf68 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143ccd0 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143d018 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143cfe0 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143d1f0 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c143d0a8 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c143d090 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c143d050 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c143d0d0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c143d070 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c143cd48 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c143d1e0 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c143d168 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143d150 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143d0e8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143d198 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143d108 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143ccd0 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143d1c8 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143d1b0 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143d128 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c143d4f8 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c143d318 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143d2e8 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143d288 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143d270 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143d230 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143d2b0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143d250 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143cd48 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143d300 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143d2c8 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143d4d8 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c143d390 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c143d378 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c143d338 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c143d3b8 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c143d358 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c143ccd0 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c143d4c8 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c143d450 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143d438 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143d3d0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143d480 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143d3f0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143cd48 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143d4b0 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143d498 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143d410 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c143d788 <line:161:3, col:67>
|   | `-VarDecl 0x5608c143d528 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c143d760 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c143d748 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c143d590 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c143d718 <./src/libm.h:208:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c143d700 <./src/libm.h:208:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143d5b0 <col:10> 'double (double, double)' Function 0x5608c123fd78 'fmin' 'double (double, double)'
|   |       |-CallExpr 0x5608c143d628 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c143d610 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c143d5d0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c143d650 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c143d5f0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c143ccd0 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c143d6c0 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c143d6a8 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c143d668 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c143d6e8 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c143d688 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c143cd48 'b' 'jv':'jv'
|   |-CallExpr 0x5608c143d7f8 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c143d7e0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143d7a0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143d820 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143d7c0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143ccd0 'a' 'jv':'jv'
|   |-CallExpr 0x5608c143d890 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c143d878 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143d838 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143d8b8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143d858 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143cd48 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c143d908 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c143d8f0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c143d8d0 <col:10> 'jv':'jv' lvalue Var 0x5608c143d528 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c143db88 <line:150:24, line:164:15> <scratch space>:182:1 used f_fmod 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c143d978 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c143d9f0 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c143da68 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c143dae0 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c143e6c8 <col:58, line:164:15>
|   |-CallExpr 0x5608c143dcb0 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c143dc88 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143dc48 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143dcd8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143dc68 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143d9f0 'input' 'jv':'jv'
|   |-IfStmt 0x5608c143dfb8 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c143ddd8 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143dda8 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143dd48 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143dd30 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143dcf0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143dd70 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143dd10 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143da68 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143ddc0 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143dd88 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143df98 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c143de50 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c143de38 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c143ddf8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c143de78 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c143de18 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c143dae0 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c143df88 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c143df10 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143def8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143de90 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143df40 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143deb0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143da68 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143df70 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143df58 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143ded0 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c143e2a0 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c143e0c0 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143e090 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143e030 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143e018 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143dfd8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143e058 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143dff8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143dae0 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143e0a8 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143e070 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143e280 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c143e138 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c143e120 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c143e0e0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c143e160 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c143e100 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c143da68 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c143e270 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c143e1f8 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143e1e0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143e178 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143e228 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143e198 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143dae0 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143e258 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143e240 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143e1b8 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c143e530 <line:161:3, col:67>
|   | `-VarDecl 0x5608c143e2d0 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c143e508 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c143e4f0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c143e338 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c143e4c0 <./src/libm.h:213:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c143e4a8 <./src/libm.h:213:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143e358 <col:10> 'double (double, double)' Function 0x5608c122f2b0 'fmod' 'double (double, double)'
|   |       |-CallExpr 0x5608c143e3d0 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c143e3b8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c143e378 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c143e3f8 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c143e398 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c143da68 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c143e468 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c143e450 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c143e410 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c143e490 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c143e430 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c143dae0 'b' 'jv':'jv'
|   |-CallExpr 0x5608c143e5a0 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c143e588 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143e548 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143e5c8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143e568 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143da68 'a' 'jv':'jv'
|   |-CallExpr 0x5608c143e638 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c143e620 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143e5e0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143e660 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143e600 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143dae0 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c143e6b0 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c143e698 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c143e678 <col:10> 'jv':'jv' lvalue Var 0x5608c143e2d0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c143e830 <line:139:23, line:146:15> <scratch space>:183:1 used f_gamma 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c143e720 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c143e798 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c143edf8 <col:46, line:146:15>
|   |-IfStmt 0x5608c143eb08 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c143e9c8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143e998 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143e938 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143e920 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143e8e0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143e960 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143e900 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143e798 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143e9b0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143e978 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143eaf0 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c143eae0 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c143ea68 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143ea50 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143e9e8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143ea98 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143ea08 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143e798 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143eac8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143eab0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143ea28 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c143ecf8 <line:144:3, col:51>
|   | `-VarDecl 0x5608c143eb38 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c143ecd0 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c143ecb8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c143eba0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c143ec90 <./src/libm.h:218:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c143ec78 <./src/libm.h:218:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143ebc0 <col:9> 'double (double)' Function 0x5608c1233ed0 'gamma' 'double (double)'
|   |       `-CallExpr 0x5608c143ec38 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c143ec20 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c143ebe0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c143ec60 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c143ec00 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c143e798 'input' 'jv':'jv'
|   |-CallExpr 0x5608c143ed68 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c143ed50 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143ed10 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143ed90 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143ed30 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143e798 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c143ede0 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c143edc8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c143eda8 <col:10> 'jv':'jv' lvalue Var 0x5608c143eb38 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c143ef48 <line:139:23, line:146:15> <scratch space>:184:1 used f_lgamma 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c143ee38 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c143eeb0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c143f510 <col:46, line:146:15>
|   |-IfStmt 0x5608c143f220 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c143f0e0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143f0b0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143f050 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143f038 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143eff8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143f078 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143f018 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143eeb0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143f0c8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143f090 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143f208 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c143f1f8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c143f180 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143f168 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143f100 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143f1b0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143f120 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143eeb0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143f1e0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143f1c8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143f140 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c143f410 <line:144:3, col:51>
|   | `-VarDecl 0x5608c143f250 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c143f3e8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c143f3d0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c143f2b8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c143f3a8 <./src/libm.h:223:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c143f390 <./src/libm.h:223:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143f2d8 <col:9> 'double (double)' Function 0x5608c1233630 'lgamma' 'double (double)'
|   |       `-CallExpr 0x5608c143f350 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c143f338 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c143f2f8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c143f378 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c143f318 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c143eeb0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c143f480 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c143f468 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143f428 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143f4a8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143f448 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143eeb0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c143f4f8 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c143f4e0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c143f4c0 <col:10> 'jv':'jv' lvalue Var 0x5608c143f250 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c143f660 <line:139:23, line:146:15> <scratch space>:185:1 used f_log1p 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c143f550 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c143f5c8 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c143fc28 <col:46, line:146:15>
|   |-IfStmt 0x5608c143f938 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c143f7f8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143f7c8 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143f768 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143f750 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143f710 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143f790 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143f730 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143f5c8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143f7e0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143f7a8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c143f920 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c143f910 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c143f898 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143f880 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143f818 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c143f8c8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143f838 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143f5c8 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c143f8f8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c143f8e0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143f858 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c143fb28 <line:144:3, col:51>
|   | `-VarDecl 0x5608c143f968 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c143fb00 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c143fae8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c143f9d0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c143fac0 <./src/libm.h:228:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c143faa8 <./src/libm.h:228:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143f9f0 <col:9> 'double (double)' Function 0x5608c11aff10 'log1p' 'double (double)'
|   |       `-CallExpr 0x5608c143fa68 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c143fa50 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c143fa10 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c143fa90 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c143fa30 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c143f5c8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c143fb98 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c143fb80 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c143fb40 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c143fbc0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c143fb60 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143f5c8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c143fc10 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c143fbf8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c143fbd8 <col:10> 'jv':'jv' lvalue Var 0x5608c143f968 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c143fdd0 <line:139:23, line:146:15> <scratch space>:186:1 used f_logb 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c143fcc0 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c143fd38 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1440398 <col:46, line:146:15>
|   |-IfStmt 0x5608c14400a8 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c143ff68 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c143ff38 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c143fed8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c143fec0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c143fe80 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c143ff00 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c143fea0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c143fd38 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c143ff50 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c143ff18 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1440090 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1440080 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1440008 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c143fff0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c143ff88 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1440038 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c143ffa8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c143fd38 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1440068 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1440050 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c143ffc8 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1440298 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14400d8 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1440270 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1440258 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1440140 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1440230 <./src/libm.h:233:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1440218 <./src/libm.h:233:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1440160 <col:9> 'double (double)' Function 0x5608c11b0428 'logb' 'double (double)'
|   |       `-CallExpr 0x5608c14401d8 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c14401c0 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1440180 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1440200 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14401a0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c143fd38 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1440308 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14402f0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14402b0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1440330 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14402d0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c143fd38 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1440380 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1440368 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1440348 <col:10> 'jv':'jv' lvalue Var 0x5608c14400d8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14404e8 <line:139:23, line:146:15> <scratch space>:187:1 used f_nearbyint 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14403d8 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1440450 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1440ab0 <col:46, line:146:15>
|   |-IfStmt 0x5608c14407c0 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1440680 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1440650 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14405f0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14405d8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1440598 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1440618 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14405b8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1440450 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1440668 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1440630 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14407a8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1440798 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1440720 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1440708 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14406a0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1440750 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14406c0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1440450 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1440780 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1440768 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14406e0 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14409b0 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14407f0 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1440988 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1440970 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1440858 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1440948 <./src/libm.h:238:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1440930 <./src/libm.h:238:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1440878 <col:9> 'double (double)' Function 0x5608c123aff8 'nearbyint' 'double (double)'
|   |       `-CallExpr 0x5608c14408f0 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c14408d8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1440898 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1440918 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14408b8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1440450 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1440a20 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1440a08 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14409c8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1440a48 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14409e8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1440450 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1440a98 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1440a80 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1440a60 <col:10> 'jv':'jv' lvalue Var 0x5608c14407f0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1440d00 <line:150:24, line:164:15> <scratch space>:188:1 used f_nextafter 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1440af0 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1440b68 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1440be0 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1440c58 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1441830 <col:58, line:164:15>
|   |-CallExpr 0x5608c1440e18 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1440e00 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1440dc0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1440e40 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1440de0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1440b68 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1441120 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1440f40 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1440f10 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1440eb0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1440e98 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1440e58 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1440ed8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1440e78 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1440be0 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1440f28 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1440ef0 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1441100 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1440fb8 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1440fa0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1440f60 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1440fe0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1440f80 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1440c58 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c14410f0 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c1441078 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1441060 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1440ff8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14410a8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1441018 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1440be0 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14410d8 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14410c0 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1441038 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1441408 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1441228 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c14411f8 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1441198 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1441180 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1441140 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14411c0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1441160 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1440c58 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1441210 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14411d8 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14413e8 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c14412a0 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1441288 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1441248 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c14412c8 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1441268 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1440be0 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c14413d8 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1441360 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1441348 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14412e0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1441390 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1441300 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1440c58 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14413c0 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14413a8 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1441320 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1441698 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1441438 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1441670 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1441658 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14414a0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1441628 <./src/libm.h:243:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1441610 <./src/libm.h:243:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14414c0 <col:10> 'double (double, double)' Function 0x5608c1234ee8 'nextafter' 'double (double, double)'
|   |       |-CallExpr 0x5608c1441538 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1441520 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c14414e0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1441560 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1441500 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1440be0 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c14415d0 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c14415b8 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1441578 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14415f8 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1441598 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1440c58 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1441708 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14416f0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14416b0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1441730 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14416d0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1440be0 'a' 'jv':'jv'
|   |-CallExpr 0x5608c14417a0 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1441788 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1441748 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14417c8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1441768 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1440c58 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1441818 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1441800 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14417e0 <col:10> 'jv':'jv' lvalue Var 0x5608c1441438 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1441a98 <line:150:24, line:164:15> <scratch space>:189:1 used f_nexttoward 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1441888 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1441900 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1441978 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14419f0 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1442620 <col:58, line:164:15>
|   |-CallExpr 0x5608c1441bb0 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1441b98 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1441b58 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1441bd8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1441b78 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1441900 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1441ec8 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1441ce8 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1441ca8 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1441c48 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1441c30 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1441bf0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1441c70 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1441c10 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1441978 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1441cd0 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1441c88 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1441ea8 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1441d60 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1441d48 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1441d08 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1441d88 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1441d28 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14419f0 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1441e98 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c1441e20 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1441e08 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1441da0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1441e50 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1441dc0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1441978 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1441e80 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1441e68 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1441de0 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c14421b0 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1441fd0 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1441fa0 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1441f40 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1441f28 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1441ee8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1441f68 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1441f08 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14419f0 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1441fb8 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1441f80 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1442190 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c1442048 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1442030 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1441ff0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1442070 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1442010 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1441978 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1442180 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1442108 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14420f0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1442088 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1442138 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14420a8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14419f0 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1442168 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1442150 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14420c8 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1442488 <line:161:3, col:67>
|   | `-VarDecl 0x5608c14421e0 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1442460 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1442448 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1442248 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1442400 <./src/libm.h:248:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c14423e8 <./src/libm.h:248:10> 'double (*)(double, long double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1442268 <col:10> 'double (double, long double)' Function 0x5608c11d2fb0 'nexttoward' 'double (double, long double)'
|   |       |-CallExpr 0x5608c14422e0 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c14422c8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1442288 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1442308 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c14422a8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1441978 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1442430 <col:47, col:64> 'long double' <FloatingCast>
|   |         `-CallExpr 0x5608c1442378 <col:47, col:64> 'double'
|   |           |-ImplicitCastExpr 0x5608c1442360 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c1442320 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |           `-ImplicitCastExpr 0x5608c14423a0 <col:63> 'jv':'jv' <LValueToRValue>
|   |             `-DeclRefExpr 0x5608c1442340 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c14419f0 'b' 'jv':'jv'
|   |-CallExpr 0x5608c14424f8 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14424e0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14424a0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1442520 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14424c0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1441978 'a' 'jv':'jv'
|   |-CallExpr 0x5608c1442590 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1442578 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1442538 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14425b8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1442558 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14419f0 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1442608 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c14425f0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14425d0 <col:10> 'jv':'jv' lvalue Var 0x5608c14421e0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1442788 <line:139:23, line:146:15> <scratch space>:190:1 used f_rint 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1442678 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14426f0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1442d50 <col:46, line:146:15>
|   |-IfStmt 0x5608c1442a60 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1442920 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c14428f0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1442890 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1442878 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1442838 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14428b8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1442858 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14426f0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1442908 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14428d0 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1442a48 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1442a38 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c14429c0 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14429a8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1442940 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14429f0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1442960 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14426f0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1442a20 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1442a08 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1442980 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1442c50 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1442a90 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1442c28 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1442c10 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1442af8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1442be8 <./src/libm.h:258:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1442bd0 <./src/libm.h:258:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1442b18 <col:9> 'double (double)' Function 0x5608c12348b0 'rint' 'double (double)'
|   |       `-CallExpr 0x5608c1442b90 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1442b78 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1442b38 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1442bb8 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1442b58 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c14426f0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1442cc0 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1442ca8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1442c68 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1442ce8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1442c88 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14426f0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1442d38 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1442d20 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1442d00 <col:10> 'jv':'jv' lvalue Var 0x5608c1442a90 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1442ea0 <line:139:23, line:146:15> <scratch space>:191:1 used f_round 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1442d90 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1442e08 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1443468 <col:46, line:146:15>
|   |-IfStmt 0x5608c1443178 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c1443038 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1443008 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1442fa8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1442f90 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1442f50 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1442fd0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1442f70 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1442e08 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1443020 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1442fe8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1443160 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1443150 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c14430d8 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14430c0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1443058 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1443108 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1443078 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1442e08 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1443138 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1443120 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1443098 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1443368 <line:144:3, col:51>
|   | `-VarDecl 0x5608c14431a8 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1443340 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1443328 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1443210 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1443300 <./src/libm.h:263:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c14432e8 <./src/libm.h:263:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1443230 <col:9> 'double (double)' Function 0x5608c123b590 'round' 'double (double)'
|   |       `-CallExpr 0x5608c14432a8 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1443290 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1443250 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14432d0 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1443270 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1442e08 'input' 'jv':'jv'
|   |-CallExpr 0x5608c14433d8 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14433c0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1443380 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1443400 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14433a0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1442e08 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1443450 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1443438 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1443418 <col:10> 'jv':'jv' lvalue Var 0x5608c14431a8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14436b8 <line:150:24, line:164:15> <scratch space>:192:1 used f_scalb 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c14434a8 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1443520 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1443598 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1443610 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c14441e8 <col:58, line:164:15>
|   |-CallExpr 0x5608c14437d0 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14437b8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1443778 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14437f8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1443798 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1443520 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1443ad8 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c14438f8 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c14438c8 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1443868 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1443850 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1443810 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1443890 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1443830 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1443598 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14438e0 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14438a8 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1443ab8 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1443970 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1443958 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1443918 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1443998 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1443938 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1443610 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1443aa8 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c1443a30 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1443a18 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14439b0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1443a60 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14439d0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1443598 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1443a90 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1443a78 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14439f0 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1443dc0 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1443be0 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1443bb0 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1443b50 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1443b38 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1443af8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1443b78 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1443b18 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1443610 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1443bc8 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1443b90 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1443da0 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c1443c58 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1443c40 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1443c00 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1443c80 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1443c20 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1443598 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1443d90 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1443d18 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1443d00 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1443c98 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1443d48 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1443cb8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1443610 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1443d78 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1443d60 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1443cd8 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1444050 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1443df0 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1444028 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1444010 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1443e58 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1443fe0 <./src/libm.h:268:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1443fc8 <./src/libm.h:268:10> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1443e78 <col:10> 'double (double, double)' Function 0x5608c124c128 'scalb' 'double (double, double)'
|   |       |-CallExpr 0x5608c1443ef0 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1443ed8 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1443e98 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1443f18 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1443eb8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1443598 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c1443f88 <col:47, col:64> 'double'
|   |         |-ImplicitCastExpr 0x5608c1443f70 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1443f30 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1443fb0 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1443f50 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1443610 'b' 'jv':'jv'
|   |-CallExpr 0x5608c14440c0 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14440a8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1444068 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14440e8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1444088 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1443598 'a' 'jv':'jv'
|   |-CallExpr 0x5608c1444158 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1444140 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1444100 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1444180 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1444120 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1443610 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c14441d0 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c14441b8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1444198 <col:10> 'jv':'jv' lvalue Var 0x5608c1443df0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1444450 <line:150:24, line:164:15> <scratch space>:193:1 used f_scalbln 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1444240 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14442b8 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1444330 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14443a8 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1444fc0 <col:58, line:164:15>
|   |-CallExpr 0x5608c1444568 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1444550 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1444510 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1444590 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1444530 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14442b8 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1444870 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c1444690 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1444660 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1444600 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14445e8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14445a8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1444628 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14445c8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1444330 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1444678 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1444640 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1444850 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1444708 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14446f0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14446b0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1444730 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14446d0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14443a8 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1444840 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c14447c8 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14447b0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1444748 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14447f8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1444768 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1444330 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1444828 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1444810 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1444788 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1444b58 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1444978 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1444948 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14448e8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14448d0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1444890 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1444910 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14448b0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14443a8 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1444960 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1444928 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1444b38 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c14449f0 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14449d8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1444998 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1444a18 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14449b8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1444330 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1444b28 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c1444ab0 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1444a98 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1444a30 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1444ae0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1444a50 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14443a8 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1444b10 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1444af8 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1444a70 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1444e28 <line:161:3, col:67>
|   | `-VarDecl 0x5608c1444b88 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1444e00 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1444de8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1444bf0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1444da0 <./src/libm.h:273:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c1444d88 <./src/libm.h:273:10> 'double (*)(double, long)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1444c10 <col:10> 'double (double, long)' Function 0x5608c123aa20 'scalbln' 'double (double, long)'
|   |       |-CallExpr 0x5608c1444c88 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1444c70 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1444c30 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1444cb0 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1444c50 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1444330 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1444dd0 <col:47, col:64> 'long' <FloatingToIntegral>
|   |         `-CallExpr 0x5608c1444d20 <col:47, col:64> 'double'
|   |           |-ImplicitCastExpr 0x5608c1444d08 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c1444cc8 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |           `-ImplicitCastExpr 0x5608c1444d48 <col:63> 'jv':'jv' <LValueToRValue>
|   |             `-DeclRefExpr 0x5608c1444ce8 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c14443a8 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1444e98 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1444e80 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1444e40 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1444ec0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1444e60 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1444330 'a' 'jv':'jv'
|   |-CallExpr 0x5608c1444f30 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1444f18 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1444ed8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1444f58 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1444ef8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14443a8 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1444fa8 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1444f90 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1444f70 <col:10> 'jv':'jv' lvalue Var 0x5608c1444b88 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1445128 <line:139:23, line:146:15> <scratch space>:194:1 used f_significand 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1445018 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1445090 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14456f0 <col:46, line:146:15>
|   |-IfStmt 0x5608c1445400 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c14452c0 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1445290 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1445230 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1445218 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14451d8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1445258 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14451f8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1445090 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14452a8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1445270 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14453e8 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c14453d8 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1445360 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1445348 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14452e0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1445390 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1445300 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1445090 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14453c0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14453a8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1445320 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14455f0 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1445430 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14455c8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14455b0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1445498 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1445588 <./src/libm.h:278:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1445570 <./src/libm.h:278:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14454b8 <col:9> 'double (double)' Function 0x5608c12300e0 'significand' 'double (double)'
|   |       `-CallExpr 0x5608c1445530 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1445518 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14454d8 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1445558 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14454f8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1445090 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1445660 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1445648 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1445608 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1445688 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1445628 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1445090 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14456d8 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c14456c0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14456a0 <col:10> 'jv':'jv' lvalue Var 0x5608c1445430 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1445840 <line:139:23, line:146:15> <scratch space>:195:1 used f_trunc 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1445730 <src/builtin.c:140:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14457a8 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1445e20 <col:46, line:146:15>
|   |-IfStmt 0x5608c1445b18 <line:141:3, line:143:3>
|   | |-BinaryOperator 0x5608c14459d8 <line:141:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c14459a8 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1445948 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1445930 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14458f0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1445970 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1445910 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14457a8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14459c0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1445988 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1445b00 <col:45, line:143:3>
|   |   `-ReturnStmt 0x5608c1445af0 <line:142:5, col:47>
|   |     `-CallExpr 0x5608c1445a78 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1445a60 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14459f8 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1445aa8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1445a18 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14457a8 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1445ad8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1445ac0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1445a38 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1445d20 <line:144:3, col:51>
|   | `-VarDecl 0x5608c1445b48 <col:3, col:50> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1445cf8 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1445ce0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1445bb0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c1445ca0 <./src/libm.h:283:9, src/builtin.c:144:49> 'double'
|   |       |-ImplicitCastExpr 0x5608c1445c88 <./src/libm.h:283:9> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1445bd0 <col:9> 'double (double)' Function 0x5608c123bb20 'trunc' 'double (double)'
|   |       `-CallExpr 0x5608c1445c48 <src/builtin.c:144:27, col:48> 'double'
|   |         |-ImplicitCastExpr 0x5608c1445c30 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1445bf0 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c1445c70 <col:43> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1445c10 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c14457a8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1445d90 <line:145:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1445d78 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1445d38 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1445db8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1445d58 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14457a8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1445e08 <line:146:3, col:10>
|     `-ImplicitCastExpr 0x5608c1445df0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1445dd0 <col:10> 'jv':'jv' lvalue Var 0x5608c1445b48 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1446070 <line:150:24, line:164:15> <scratch space>:196:1 used f_ldexp 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1445e60 <src/builtin.c:151:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1445ed8 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1445f50 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1445fc8 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1446be0 <col:58, line:164:15>
|   |-CallExpr 0x5608c1446188 <line:152:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1446170 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1446130 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14461b0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1446150 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1445ed8 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1446490 <line:153:3, line:156:3>
|   | |-BinaryOperator 0x5608c14462b0 <line:153:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1446280 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1446220 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1446208 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14461c8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1446248 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14461e8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1445f50 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1446298 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1446260 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1446470 <col:41, line:156:3>
|   |   |-CallExpr 0x5608c1446328 <line:154:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1446310 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14462d0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1446350 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14462f0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1445fc8 'b' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1446460 <line:155:5, col:43>
|   |     `-CallExpr 0x5608c14463e8 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14463d0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1446368 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1446418 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1446388 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1445f50 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1446448 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1446430 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14463a8 <col:26> 'char [16]' lvalue "number required"
|   |-IfStmt 0x5608c1446778 <line:157:3, line:160:3>
|   | |-BinaryOperator 0x5608c1446598 <line:157:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1446568 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1446508 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14464f0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14464b0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1446530 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14464d0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1445fc8 'b' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1446580 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1446548 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1446758 <col:41, line:160:3>
|   |   |-CallExpr 0x5608c1446610 <line:158:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14465f8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14465b8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1446638 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14465d8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1445f50 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1446748 <line:159:5, col:43>
|   |     `-CallExpr 0x5608c14466d0 <col:12, col:43> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14466b8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1446650 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1446700 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1446670 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1445fc8 'b' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1446730 <col:26> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1446718 <col:26> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1446690 <col:26> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1446a48 <line:161:3, col:67>
|   | `-VarDecl 0x5608c14467a8 <col:3, col:66> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1446a20 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1446a08 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1446810 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-CallExpr 0x5608c14469c0 <./src/libm.h:288:10, src/builtin.c:161:65> 'double'
|   |       |-ImplicitCastExpr 0x5608c14469a8 <./src/libm.h:288:10> 'double (*)(double, int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1446830 <col:10> 'double (double, int)' Function 0x5608c11ac2c0 'ldexp' 'double (double, int)'
|   |       |-CallExpr 0x5608c14468a8 <src/builtin.c:161:27, col:44> 'double'
|   |       | |-ImplicitCastExpr 0x5608c1446890 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1446850 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |       | `-ImplicitCastExpr 0x5608c14468d0 <col:43> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1446870 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1445f50 'a' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14469f0 <col:47, col:64> 'int' <FloatingToIntegral>
|   |         `-CallExpr 0x5608c1446940 <col:47, col:64> 'double'
|   |           |-ImplicitCastExpr 0x5608c1446928 <col:47> 'double (*)(jv)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c14468e8 <col:47> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |           `-ImplicitCastExpr 0x5608c1446968 <col:63> 'jv':'jv' <LValueToRValue>
|   |             `-DeclRefExpr 0x5608c1446908 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c1445fc8 'b' 'jv':'jv'
|   |-CallExpr 0x5608c1446ab8 <line:162:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1446aa0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1446a60 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1446ae0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1446a80 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1445f50 'a' 'jv':'jv'
|   |-CallExpr 0x5608c1446b50 <line:163:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1446b38 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1446af8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1446b78 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1446b18 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1445fc8 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1446bc8 <line:164:3, col:10>
|     `-ImplicitCastExpr 0x5608c1446bb0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1446b90 <col:10> 'jv':'jv' lvalue Var 0x5608c14467a8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1446d48 <line:210:1, line:219:1> line:210:11 used f_frexp 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1446c38 <col:19, col:29> col:29 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1446cb0 <col:33, col:36> col:36 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1447758 <col:43, line:219:1>
|   |-IfStmt 0x5608c1447020 <line:211:3, line:213:3>
|   | |-BinaryOperator 0x5608c1446ee0 <line:211:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1446eb0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1446e50 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1446e38 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1446df8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1446e78 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1446e18 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1446cb0 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1446ec8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1446e90 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1447008 <col:45, line:213:3>
|   |   `-ReturnStmt 0x5608c1446ff8 <line:212:5, col:47>
|   |     `-CallExpr 0x5608c1446f80 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1446f68 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1446f00 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1446fb0 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1446f20 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1446cb0 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1446fe0 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1446fc8 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1446f40 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c14470c0 <line:214:3, col:10>
|   | `-VarDecl 0x5608c1447058 <col:3, col:7> col:7 used exp 'int'
|   |-DeclStmt 0x5608c14472c0 <line:215:3, col:49>
|   | `-VarDecl 0x5608c14470f0 <col:3, col:48> col:10 used d 'double' cinit
|   |   `-CallExpr 0x5608c1447290 <col:14, col:48> 'double'
|   |     |-ImplicitCastExpr 0x5608c1447278 <col:14> 'double (*)(double, int *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1447158 <col:14> 'double (double, int *)' Function 0x5608c11abbe0 'frexp' 'double (double, int *)'
|   |     |-CallExpr 0x5608c14471d0 <col:20, col:41> 'double'
|   |     | |-ImplicitCastExpr 0x5608c14471b8 <col:20> 'double (*)(jv)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c1447178 <col:20> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |     | `-ImplicitCastExpr 0x5608c14471f8 <col:36> 'jv':'jv' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c1447198 <col:36> 'jv':'jv' lvalue ParmVar 0x5608c1446cb0 'input' 'jv':'jv'
|   |     `-UnaryOperator 0x5608c1447230 <col:44, col:45> 'int *' prefix '&' cannot overflow
|   |       `-DeclRefExpr 0x5608c1447210 <col:45> 'int' lvalue Var 0x5608c1447058 'exp' 'int'
|   |-DeclStmt 0x5608c1447658 <line:216:3, col:50>
|   | `-VarDecl 0x5608c14472e8 <col:3, ./src/jv.h:88:62> src/builtin.c:216:6 used ret 'jv':'jv' cinit
|   |   `-ParenExpr 0x5608c1447638 <./src/jv.h:88:27, col:62> 'jv':'jv'
|   |     `-CallExpr 0x5608c1447608 <col:28, col:61> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14475f0 <col:28> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1447350 <col:28> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   |       |-ParenExpr 0x5608c1447520 <line:87:23, col:53> 'jv':'jv'
|   |       | `-CallExpr 0x5608c14474f0 <col:24, col:52> 'jv':'jv'
|   |       |   |-ImplicitCastExpr 0x5608c14474d8 <col:24> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x5608c1447370 <col:24> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   |       |   |-CallExpr 0x5608c1447420 <col:40, col:49> 'jv':'jv'
|   |       |   | `-ImplicitCastExpr 0x5608c1447408 <col:40> 'jv (*)(void)' <FunctionToPointerDecay>
|   |       |   |   `-DeclRefExpr 0x5608c1447390 <col:40> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|   |       |   `-CallExpr 0x5608c1447498 <src/builtin.c:216:21, col:32> 'jv':'jv'
|   |       |     |-ImplicitCastExpr 0x5608c1447480 <col:21> 'jv (*)(double)' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x5608c1447440 <col:21> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |       |     `-ImplicitCastExpr 0x5608c14474c0 <col:31> 'double' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x5608c1447460 <col:31> 'double' lvalue Var 0x5608c14470f0 'd' 'double'
|   |       `-CallExpr 0x5608c1447598 <col:35, col:48> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1447580 <col:35> 'jv (*)(double)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1447540 <col:35> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |         `-ImplicitCastExpr 0x5608c14475d8 <col:45> 'double' <IntegralToFloating>
|   |           `-ImplicitCastExpr 0x5608c14475c0 <col:45> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5608c1447560 <col:45> 'int' lvalue Var 0x5608c1447058 'exp' 'int'
|   |-CallExpr 0x5608c14476c8 <line:217:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14476b0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1447670 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14476f0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1447690 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1446cb0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1447740 <line:218:3, col:10>
|     `-ImplicitCastExpr 0x5608c1447728 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1447708 <col:10> 'jv':'jv' lvalue Var 0x5608c14472e8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14478b8 <line:222:1, line:230:1> line:222:11 used f_modf 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14477a8 <col:18, col:28> col:28 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1447820 <col:32, col:35> col:35 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1448160 <col:42, line:230:1>
|   |-IfStmt 0x5608c1447b90 <line:223:3, line:225:3>
|   | |-BinaryOperator 0x5608c1447a50 <line:223:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1447a20 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14479c0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14479a8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1447968 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14479e8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1447988 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1447820 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1447a38 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1447a00 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1447b78 <col:45, line:225:3>
|   |   `-ReturnStmt 0x5608c1447b68 <line:224:5, col:47>
|   |     `-CallExpr 0x5608c1447af0 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1447ad8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1447a70 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1447b20 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1447a90 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1447820 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1447b50 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1447b38 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1447ab0 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1447c30 <line:226:3, col:11>
|   | `-VarDecl 0x5608c1447bc8 <col:3, col:10> col:10 used i 'double'
|   |-DeclStmt 0x5608c1447f68 <line:227:3, col:65>
|   | `-VarDecl 0x5608c1447c58 <col:3, ./src/jv.h:87:53> src/builtin.c:227:6 used ret 'jv':'jv' cinit
|   |   `-ParenExpr 0x5608c1447f48 <./src/jv.h:87:23, col:53> 'jv':'jv'
|   |     `-CallExpr 0x5608c1447f18 <col:24, col:52> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1447f00 <col:24> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1447cc0 <col:24> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   |       |-CallExpr 0x5608c1447d18 <col:40, col:49> 'jv':'jv'
|   |       | `-ImplicitCastExpr 0x5608c1447d00 <col:40> 'jv (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x5608c1447ce0 <col:40> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|   |       `-CallExpr 0x5608c1447ed8 <src/builtin.c:227:21, col:63> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1447ec0 <col:21> 'jv (*)(double)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1447d38 <col:21> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |         `-CallExpr 0x5608c1447e90 <col:31, col:62> 'double'
|   |           |-ImplicitCastExpr 0x5608c1447e78 <col:31> 'double (*)(double, double *)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c1447d58 <col:31> 'double (double, double *)' Function 0x5608c11ad760 'modf' 'double (double, double *)'
|   |           |-CallExpr 0x5608c1447dd0 <col:36, col:57> 'double'
|   |           | |-ImplicitCastExpr 0x5608c1447db8 <col:36> 'double (*)(jv)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x5608c1447d78 <col:36> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |           | `-ImplicitCastExpr 0x5608c1447df8 <col:52> 'jv':'jv' <LValueToRValue>
|   |           |   `-DeclRefExpr 0x5608c1447d98 <col:52> 'jv':'jv' lvalue ParmVar 0x5608c1447820 'input' 'jv':'jv'
|   |           `-UnaryOperator 0x5608c1447e30 <col:60, col:61> 'double *' prefix '&' cannot overflow
|   |             `-DeclRefExpr 0x5608c1447e10 <col:61> 'double' lvalue Var 0x5608c1447bc8 'i' 'double'
|   |-CallExpr 0x5608c1447fd8 <line:228:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1447fc0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1447f80 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1448000 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1447fa0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1447820 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1448150 <line:229:3, col:43>
|     `-CallExpr 0x5608c1448108 <col:10, col:43> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14480f0 <col:10> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1448018 <col:10> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|       |-ImplicitCastExpr 0x5608c1448138 <col:26> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1448038 <col:26> 'jv':'jv' lvalue Var 0x5608c1447c58 'ret' 'jv':'jv'
|       `-CallExpr 0x5608c14480b0 <col:31, col:42> 'jv':'jv'
|         |-ImplicitCastExpr 0x5608c1448098 <col:31> 'jv (*)(double)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c1448058 <col:31> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         `-ImplicitCastExpr 0x5608c14480d8 <col:41> 'double' <LValueToRValue>
|           `-DeclRefExpr 0x5608c1448078 <col:41> 'double' lvalue Var 0x5608c1447bc8 'i' 'double'
|-FunctionDecl 0x5608c14482b8 <line:233:1, line:241:1> line:233:11 used f_lgamma_r 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14481a8 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1448220 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1448b48 <col:46, line:241:1>
|   |-IfStmt 0x5608c1448590 <line:234:3, line:236:3>
|   | |-BinaryOperator 0x5608c1448450 <line:234:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1448420 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14483c0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14483a8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1448368 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14483e8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1448388 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1448220 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1448438 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1448400 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1448578 <col:45, line:236:3>
|   |   `-ReturnStmt 0x5608c1448568 <line:235:5, col:47>
|   |     `-CallExpr 0x5608c14484f0 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14484d8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1448470 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1448520 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1448490 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1448220 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1448550 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1448538 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14484b0 <col:30> 'char [16]' lvalue "number required"
|   |-DeclStmt 0x5608c1448630 <line:237:3, col:11>
|   | `-VarDecl 0x5608c14485c8 <col:3, col:7> col:7 used sign 'int'
|   |-DeclStmt 0x5608c1448938 <line:238:3, col:72>
|   | `-VarDecl 0x5608c1448658 <col:3, ./src/jv.h:87:53> src/builtin.c:238:6 used ret 'jv':'jv' cinit
|   |   `-ParenExpr 0x5608c1448918 <./src/jv.h:87:23, col:53> 'jv':'jv'
|   |     `-CallExpr 0x5608c14488e8 <col:24, col:52> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14488d0 <col:24> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14486c0 <col:24> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   |       |-CallExpr 0x5608c1448718 <col:40, col:49> 'jv':'jv'
|   |       | `-ImplicitCastExpr 0x5608c1448700 <col:40> 'jv (*)(void)' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x5608c14486e0 <col:40> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|   |       `-CallExpr 0x5608c14488a8 <src/builtin.c:238:21, col:70> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1448890 <col:21> 'jv (*)(double)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1448738 <col:21> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |         `-CallExpr 0x5608c1448860 <col:31, col:69> 'double'
|   |           |-ImplicitCastExpr 0x5608c1448848 <col:31> 'double (*)(double, int *)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c1448758 <col:31> 'double (double, int *)' Function 0x5608c1234300 'lgamma_r' 'double (double, int *)'
|   |           |-CallExpr 0x5608c14487d0 <col:40, col:61> 'double'
|   |           | |-ImplicitCastExpr 0x5608c14487b8 <col:40> 'double (*)(jv)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x5608c1448778 <col:40> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |           | `-ImplicitCastExpr 0x5608c14487f8 <col:56> 'jv':'jv' <LValueToRValue>
|   |           |   `-DeclRefExpr 0x5608c1448798 <col:56> 'jv':'jv' lvalue ParmVar 0x5608c1448220 'input' 'jv':'jv'
|   |           `-UnaryOperator 0x5608c1448830 <col:64, col:65> 'int *' prefix '&' cannot overflow
|   |             `-DeclRefExpr 0x5608c1448810 <col:65> 'int' lvalue Var 0x5608c14485c8 'sign' 'int'
|   |-CallExpr 0x5608c14489a8 <line:239:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1448990 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1448950 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14489d0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1448970 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1448220 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1448b38 <line:240:3, col:46>
|     `-CallExpr 0x5608c1448af0 <col:10, col:46> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1448ad8 <col:10> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14489e8 <col:10> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|       |-ImplicitCastExpr 0x5608c1448b20 <col:26> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1448a08 <col:26> 'jv':'jv' lvalue Var 0x5608c1448658 'ret' 'jv':'jv'
|       `-CallExpr 0x5608c1448a80 <col:31, col:45> 'jv':'jv'
|         |-ImplicitCastExpr 0x5608c1448a68 <col:31> 'jv (*)(double)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c1448a28 <col:31> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         `-ImplicitCastExpr 0x5608c1448ac0 <col:41> 'double' <IntegralToFloating>
|           `-ImplicitCastExpr 0x5608c1448aa8 <col:41> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x5608c1448a48 <col:41> 'int' lvalue Var 0x5608c14485c8 'sign' 'int'
|-FunctionDecl 0x5608c1448ca0 <line:244:1, line:251:1> line:244:11 used f_negate 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1448b90 <col:20, col:30> col:30 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1448c08 <col:34, col:37> col:37 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1449268 <col:44, line:251:1>
|   |-IfStmt 0x5608c1448fc0 <line:245:3, line:247:3>
|   | |-BinaryOperator 0x5608c1448e38 <line:245:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1448e08 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1448da8 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1448d90 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1448d50 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1448dd0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1448d70 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1448c08 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1448e20 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1448de8 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1448fa8 <col:45, line:247:3>
|   |   `-ReturnStmt 0x5608c1448f98 <line:246:5, col:49>
|   |     `-CallExpr 0x5608c1448f20 <col:12, col:49> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1448f08 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1448e58 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1448f50 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1448e78 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1448c08 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1448f80 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1448f68 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1448ed8 <col:30> 'char [18]' lvalue "cannot be negated"
|   |-DeclStmt 0x5608c1449168 <line:248:3, col:46>
|   | `-VarDecl 0x5608c1448ff0 <col:3, col:45> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1449140 <col:12, col:45> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1449128 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1449058 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-UnaryOperator 0x5608c1449110 <col:22, col:44> 'double' prefix '-'
|   |       `-CallExpr 0x5608c14490d0 <col:23, col:44> 'double'
|   |         |-ImplicitCastExpr 0x5608c14490b8 <col:23> 'double (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1449078 <col:23> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |         `-ImplicitCastExpr 0x5608c14490f8 <col:39> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1449098 <col:39> 'jv':'jv' lvalue ParmVar 0x5608c1448c08 'input' 'jv':'jv'
|   |-CallExpr 0x5608c14491d8 <line:249:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14491c0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1449180 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1449200 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14491a0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1448c08 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1449250 <line:250:3, col:10>
|     `-ImplicitCastExpr 0x5608c1449238 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1449218 <col:10> 'jv':'jv' lvalue Var 0x5608c1448ff0 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c14494b8 <line:253:1, line:267:1> line:253:11 used f_startswith 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c14492a8 <col:24, col:34> col:34 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1449320 <col:38, col:41> col:41 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1449398 <col:44, col:47> col:47 used b 'jv':'jv'
| `-CompoundStmt 0x5608c144a518 <col:50, line:267:1>
|   |-IfStmt 0x5608c1449a58 <line:254:3, line:255:77>
|   | |-BinaryOperator 0x5608c1449780 <line:254:7, col:61> 'int' '||'
|   | | |-BinaryOperator 0x5608c1449658 <col:7, col:25> 'int' '!='
|   | | | |-ImplicitCastExpr 0x5608c1449628 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | | `-CallExpr 0x5608c14495c8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | | |   |-ImplicitCastExpr 0x5608c14495b0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | |   | `-DeclRefExpr 0x5608c1449570 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | |   `-ImplicitCastExpr 0x5608c14495f0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x5608c1449590 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1449320 'a' 'jv':'jv'
|   | | | `-ImplicitCastExpr 0x5608c1449640 <col:25> 'unsigned int' <IntegralCast>
|   | | |   `-DeclRefExpr 0x5608c1449608 <col:25> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | | `-BinaryOperator 0x5608c1449760 <col:43, col:61> 'int' '!='
|   | |   |-ImplicitCastExpr 0x5608c1449730 <col:43, col:56> 'unsigned int' <IntegralCast>
|   | |   | `-CallExpr 0x5608c14496d0 <col:43, col:56> 'jv_kind':'jv_kind'
|   | |   |   |-ImplicitCastExpr 0x5608c14496b8 <col:43> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x5608c1449678 <col:43> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | |   |   `-ImplicitCastExpr 0x5608c14496f8 <col:55> 'jv':'jv' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x5608c1449698 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c1449398 'b' 'jv':'jv'
|   | |   `-ImplicitCastExpr 0x5608c1449748 <col:61> 'unsigned int' <IntegralCast>
|   | |     `-DeclRefExpr 0x5608c1449710 <col:61> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-ReturnStmt 0x5608c1449a48 <line:255:5, col:77>
|   |   `-CallExpr 0x5608c14499e0 <col:12, col:77> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14499c8 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14497a0 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c1449a18 <col:23> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14497c0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1449320 'a' 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1449a30 <col:26> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14497e0 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1449398 'b' 'jv':'jv'
|   |     `-CallExpr 0x5608c1449910 <col:29, col:76> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14498f8 <col:29> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1449800 <col:29> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c1449950 <col:39> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1449938 <col:39> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1449858 <col:39> 'char [36]' lvalue "startswith() requires string inputs"
|   |-DeclStmt 0x5608c1449c48 <line:256:3, col:48>
|   | `-VarDecl 0x5608c1449a90 <col:3, col:47> col:7 used alen 'int' cinit
|   |   `-CallExpr 0x5608c1449c20 <col:14, col:47> 'int'
|   |     |-ImplicitCastExpr 0x5608c1449c08 <col:14> 'int (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1449af8 <col:14> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |     `-CallExpr 0x5608c1449b70 <col:37, col:46> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1449b58 <col:37> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1449b18 <col:37> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |       `-ImplicitCastExpr 0x5608c1449b98 <col:45> 'jv':'jv' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c1449b38 <col:45> 'jv':'jv' lvalue ParmVar 0x5608c1449320 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c1449de8 <line:257:3, col:48>
|   | `-VarDecl 0x5608c1449c78 <col:3, col:47> col:7 used blen 'int' cinit
|   |   `-CallExpr 0x5608c1449dc0 <col:14, col:47> 'int'
|   |     |-ImplicitCastExpr 0x5608c1449da8 <col:14> 'int (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1449cf0 <col:14> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |     `-CallExpr 0x5608c1449d68 <col:37, col:46> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1449d50 <col:37> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1449d10 <col:37> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |       `-ImplicitCastExpr 0x5608c1449d90 <col:45> 'jv':'jv' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c1449d30 <col:45> 'jv':'jv' lvalue ParmVar 0x5608c1449398 'b' 'jv':'jv'
|   |-DeclStmt 0x5608c1449e78 <line:258:3, col:9>
|   | `-VarDecl 0x5608c1449e10 <col:3, col:6> col:6 used ret 'jv':'jv'
|   |-IfStmt 0x5608c144a368 <line:260:3, line:263:20> has_else
|   | |-BinaryOperator 0x5608c144a218 <line:260:7, col:79> 'int' '&&'
|   | | |-BinaryOperator 0x5608c1449f00 <col:7, col:15> 'int' '<='
|   | | | |-ImplicitCastExpr 0x5608c1449ed0 <col:7> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5608c1449e90 <col:7> 'int' lvalue Var 0x5608c1449c78 'blen' 'int'
|   | | | `-ImplicitCastExpr 0x5608c1449ee8 <col:15> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5608c1449eb0 <col:15> 'int' lvalue Var 0x5608c1449a90 'alen' 'int'
|   | | `-BinaryOperator 0x5608c144a1f8 <col:23, col:79> 'int' '=='
|   | |   |-CallExpr 0x5608c144a140 <col:23, col:74> 'int'
|   | |   | |-ImplicitCastExpr 0x5608c144a128 <col:23> 'int (*)(const void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x5608c1449f20 <col:23> 'int (const void *, const void *, unsigned long)' Function 0x5608c13690f8 'memcmp' 'int (const void *, const void *, unsigned long)'
|   | |   | |-ImplicitCastExpr 0x5608c144a178 <col:30, col:47> 'const void *' <BitCast>
|   | |   | | `-CallExpr 0x5608c1449ff0 <col:30, col:47> 'const char *'
|   | |   | |   |-ImplicitCastExpr 0x5608c1449fd8 <col:30> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   | |   | |   | `-DeclRefExpr 0x5608c1449f40 <col:30> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   | |   | |   `-ImplicitCastExpr 0x5608c144a018 <col:46> 'jv':'jv' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x5608c1449f60 <col:46> 'jv':'jv' lvalue ParmVar 0x5608c1449320 'a' 'jv':'jv'
|   | |   | |-ImplicitCastExpr 0x5608c144a190 <col:50, col:67> 'const void *' <BitCast>
|   | |   | | `-CallExpr 0x5608c144a088 <col:50, col:67> 'const char *'
|   | |   | |   |-ImplicitCastExpr 0x5608c144a070 <col:50> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   | |   | |   | `-DeclRefExpr 0x5608c144a030 <col:50> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   | |   | |   `-ImplicitCastExpr 0x5608c144a0b0 <col:66> 'jv':'jv' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x5608c144a050 <col:66> 'jv':'jv' lvalue ParmVar 0x5608c1449398 'b' 'jv':'jv'
|   | |   | `-ImplicitCastExpr 0x5608c144a1c0 <col:70> 'unsigned long' <IntegralCast>
|   | |   |   `-ImplicitCastExpr 0x5608c144a1a8 <col:70> 'int' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x5608c144a0c8 <col:70> 'int' lvalue Var 0x5608c1449c78 'blen' 'int'
|   | |   `-IntegerLiteral 0x5608c144a1d8 <col:79> 'int' 0
|   | |-BinaryOperator 0x5608c144a2b0 <line:261:5, col:19> 'jv':'jv' '='
|   | | |-DeclRefExpr 0x5608c144a238 <col:5> 'jv':'jv' lvalue Var 0x5608c1449e10 'ret' 'jv':'jv'
|   | | `-CallExpr 0x5608c144a290 <col:11, col:19> 'jv':'jv'
|   | |   `-ImplicitCastExpr 0x5608c144a278 <col:11> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x5608c144a258 <col:11> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|   | `-BinaryOperator 0x5608c144a348 <line:263:5, col:20> 'jv':'jv' '='
|   |   |-DeclRefExpr 0x5608c144a2d0 <col:5> 'jv':'jv' lvalue Var 0x5608c1449e10 'ret' 'jv':'jv'
|   |   `-CallExpr 0x5608c144a328 <col:11, col:20> 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c144a310 <col:11> 'jv (*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5608c144a2f0 <col:11> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|   |-CallExpr 0x5608c144a3f0 <line:264:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c144a3d8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c144a398 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c144a418 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c144a3b8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1449320 'a' 'jv':'jv'
|   |-CallExpr 0x5608c144a488 <line:265:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c144a470 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c144a430 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c144a4b0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c144a450 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1449398 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c144a500 <line:266:3, col:10>
|     `-ImplicitCastExpr 0x5608c144a4e8 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c144a4c8 <col:10> 'jv':'jv' lvalue Var 0x5608c1449e10 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c144a708 <line:269:1, line:286:1> line:269:11 used f_endswith 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c144a578 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c144a5f0 <col:36, col:39> col:39 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c144a668 <col:42, col:45> col:45 used b 'jv':'jv'
| `-CompoundStmt 0x5608c144b858 <col:48, line:286:1>
|   |-IfStmt 0x5608c144abe8 <line:270:3, line:271:75>
|   | |-BinaryOperator 0x5608c144a9d0 <line:270:7, col:61> 'int' '||'
|   | | |-BinaryOperator 0x5608c144a8a8 <col:7, col:25> 'int' '!='
|   | | | |-ImplicitCastExpr 0x5608c144a878 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | | `-CallExpr 0x5608c144a818 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | | |   |-ImplicitCastExpr 0x5608c144a800 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | |   | `-DeclRefExpr 0x5608c144a7c0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | |   `-ImplicitCastExpr 0x5608c144a840 <col:19> 'jv':'jv' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x5608c144a7e0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c144a5f0 'a' 'jv':'jv'
|   | | | `-ImplicitCastExpr 0x5608c144a890 <col:25> 'unsigned int' <IntegralCast>
|   | | |   `-DeclRefExpr 0x5608c144a858 <col:25> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | | `-BinaryOperator 0x5608c144a9b0 <col:43, col:61> 'int' '!='
|   | |   |-ImplicitCastExpr 0x5608c144a980 <col:43, col:56> 'unsigned int' <IntegralCast>
|   | |   | `-CallExpr 0x5608c144a920 <col:43, col:56> 'jv_kind':'jv_kind'
|   | |   |   |-ImplicitCastExpr 0x5608c144a908 <col:43> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x5608c144a8c8 <col:43> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | |   |   `-ImplicitCastExpr 0x5608c144a948 <col:55> 'jv':'jv' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x5608c144a8e8 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c144a668 'b' 'jv':'jv'
|   | |   `-ImplicitCastExpr 0x5608c144a998 <col:61> 'unsigned int' <IntegralCast>
|   | |     `-DeclRefExpr 0x5608c144a960 <col:61> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-ReturnStmt 0x5608c144abd8 <line:271:5, col:75>
|   |   `-CallExpr 0x5608c144ab70 <col:12, col:75> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c144ab58 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c144a9f0 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c144aba8 <col:23> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c144aa10 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c144a5f0 'a' 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c144abc0 <col:26> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c144aa30 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c144a668 'b' 'jv':'jv'
|   |     `-CallExpr 0x5608c144ab00 <col:29, col:74> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c144aae8 <col:29> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c144aa50 <col:29> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c144ab40 <col:39> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c144ab28 <col:39> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c144aaa8 <col:39> 'char [34]' lvalue "endswith() requires string inputs"
|   |-DeclStmt 0x5608c144ad20 <line:272:3, col:40>
|   | `-VarDecl 0x5608c144ac20 <col:3, col:39> col:15 used astr 'const char *' cinit
|   |   `-CallExpr 0x5608c144ace0 <col:22, col:39> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c144acc8 <col:22> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c144ac88 <col:22> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c144ad08 <col:38> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c144aca8 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c144a5f0 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c144ae50 <line:273:3, col:40>
|   | `-VarDecl 0x5608c144ad50 <col:3, col:39> col:15 used bstr 'const char *' cinit
|   |   `-CallExpr 0x5608c144ae10 <col:22, col:39> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c144adf8 <col:22> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c144adb8 <col:22> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c144ae38 <col:38> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c144add8 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c144a668 'b' 'jv':'jv'
|   |-DeclStmt 0x5608c144aff0 <line:274:3, col:51>
|   | `-VarDecl 0x5608c144ae78 <col:3, col:50> col:10 used alen 'size_t':'unsigned long' cinit
|   |   `-ImplicitCastExpr 0x5608c144afd8 <col:17, col:50> 'size_t':'unsigned long' <IntegralCast>
|   |     `-CallExpr 0x5608c144afb0 <col:17, col:50> 'int'
|   |       |-ImplicitCastExpr 0x5608c144af98 <col:17> 'int (*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c144aee0 <col:17> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |       `-CallExpr 0x5608c144af58 <col:40, col:49> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c144af40 <col:40> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c144af00 <col:40> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |         `-ImplicitCastExpr 0x5608c144af80 <col:48> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c144af20 <col:48> 'jv':'jv' lvalue ParmVar 0x5608c144a5f0 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c144b190 <line:275:3, col:51>
|   | `-VarDecl 0x5608c144b018 <col:3, col:50> col:10 used blen 'size_t':'unsigned long' cinit
|   |   `-ImplicitCastExpr 0x5608c144b178 <col:17, col:50> 'size_t':'unsigned long' <IntegralCast>
|   |     `-CallExpr 0x5608c144b150 <col:17, col:50> 'int'
|   |       |-ImplicitCastExpr 0x5608c144b138 <col:17> 'int (*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c144b080 <col:17> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |       `-CallExpr 0x5608c144b0f8 <col:40, col:49> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c144b0e0 <col:40> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c144b0a0 <col:40> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |         `-ImplicitCastExpr 0x5608c144b120 <col:48> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c144b0c0 <col:48> 'jv':'jv' lvalue ParmVar 0x5608c144a668 'b' 'jv':'jv'
|   |-DeclStmt 0x5608c144b220 <line:276:3, col:9>
|   | `-VarDecl 0x5608c144b1b8 <col:3, col:6> col:6 used ret 'jv':'jv'
|   |-NullStmt 0x5608c144b238 <col:10>
|   |-IfStmt 0x5608c144b6a8 <line:278:3, line:282:19> has_else
|   | |-BinaryOperator 0x5608c144b558 <line:278:7, line:279:50> 'int' '||'
|   | | |-BinaryOperator 0x5608c144b2b0 <line:278:7, col:14> 'int' '<'
|   | | | |-ImplicitCastExpr 0x5608c144b280 <col:7> 'size_t':'unsigned long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5608c144b240 <col:7> 'size_t':'unsigned long' lvalue Var 0x5608c144ae78 'alen' 'size_t':'unsigned long'
|   | | | `-ImplicitCastExpr 0x5608c144b298 <col:14> 'size_t':'unsigned long' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5608c144b260 <col:14> 'size_t':'unsigned long' lvalue Var 0x5608c144b018 'blen' 'size_t':'unsigned long'
|   | | `-BinaryOperator 0x5608c144b538 <line:279:6, col:50> 'int' '!='
|   | |   |-CallExpr 0x5608c144b480 <col:6, col:45> 'int'
|   | |   | |-ImplicitCastExpr 0x5608c144b468 <col:6> 'int (*)(const void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x5608c144b2d0 <col:6> 'int (const void *, const void *, unsigned long)' Function 0x5608c13690f8 'memcmp' 'int (const void *, const void *, unsigned long)'
|   | |   | |-ImplicitCastExpr 0x5608c144b4b8 <col:13, col:32> 'const void *' <BitCast>
|   | |   | | `-BinaryOperator 0x5608c144b3d8 <col:13, col:32> 'const char *' '+'
|   | |   | |   |-ImplicitCastExpr 0x5608c144b3c0 <col:13> 'const char *' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x5608c144b2f0 <col:13> 'const char *' lvalue Var 0x5608c144ac20 'astr' 'const char *'
|   | |   | |   `-ParenExpr 0x5608c144b3a0 <col:20, col:32> 'unsigned long'
|   | |   | |     `-BinaryOperator 0x5608c144b380 <col:21, col:28> 'unsigned long' '-'
|   | |   | |       |-ImplicitCastExpr 0x5608c144b350 <col:21> 'size_t':'unsigned long' <LValueToRValue>
|   | |   | |       | `-DeclRefExpr 0x5608c144b310 <col:21> 'size_t':'unsigned long' lvalue Var 0x5608c144ae78 'alen' 'size_t':'unsigned long'
|   | |   | |       `-ImplicitCastExpr 0x5608c144b368 <col:28> 'size_t':'unsigned long' <LValueToRValue>
|   | |   | |         `-DeclRefExpr 0x5608c144b330 <col:28> 'size_t':'unsigned long' lvalue Var 0x5608c144b018 'blen' 'size_t':'unsigned long'
|   | |   | |-ImplicitCastExpr 0x5608c144b4e8 <col:35> 'const void *' <BitCast>
|   | |   | | `-ImplicitCastExpr 0x5608c144b4d0 <col:35> 'const char *' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x5608c144b3f8 <col:35> 'const char *' lvalue Var 0x5608c144ad50 'bstr' 'const char *'
|   | |   | `-ImplicitCastExpr 0x5608c144b500 <col:41> 'size_t':'unsigned long' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x5608c144b418 <col:41> 'size_t':'unsigned long' lvalue Var 0x5608c144b018 'blen' 'size_t':'unsigned long'
|   | |   `-IntegerLiteral 0x5608c144b518 <col:50> 'int' 0
|   | |-BinaryOperator 0x5608c144b5f0 <line:280:5, col:20> 'jv':'jv' '='
|   | | |-DeclRefExpr 0x5608c144b578 <col:5> 'jv':'jv' lvalue Var 0x5608c144b1b8 'ret' 'jv':'jv'
|   | | `-CallExpr 0x5608c144b5d0 <col:11, col:20> 'jv':'jv'
|   | |   `-ImplicitCastExpr 0x5608c144b5b8 <col:11> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |     `-DeclRefExpr 0x5608c144b598 <col:11> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|   | `-BinaryOperator 0x5608c144b688 <line:282:5, col:19> 'jv':'jv' '='
|   |   |-DeclRefExpr 0x5608c144b610 <col:5> 'jv':'jv' lvalue Var 0x5608c144b1b8 'ret' 'jv':'jv'
|   |   `-CallExpr 0x5608c144b668 <col:11, col:19> 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c144b650 <col:11> 'jv (*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5608c144b630 <col:11> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|   |-CallExpr 0x5608c144b730 <line:283:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c144b718 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c144b6d8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c144b758 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c144b6f8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c144a5f0 'a' 'jv':'jv'
|   |-CallExpr 0x5608c144b7c8 <line:284:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c144b7b0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c144b770 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c144b7f0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c144b790 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c144a668 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c144b840 <line:285:3, col:10>
|     `-ImplicitCastExpr 0x5608c144b828 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c144b808 <col:10> 'jv':'jv' lvalue Var 0x5608c144b1b8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c144ba60 <line:288:1, line:302:1> line:288:11 used f_ltrimstr 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c144b8d0 <col:22, col:32> col:32 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c144b948 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c144b9c0 <col:46, col:49> col:49 used left 'jv':'jv'
| `-CompoundStmt 0x5608c144c4f0 <col:55, line:302:1>
|   |-IfStmt 0x5608c144bf20 <line:289:3, line:292:3>
|   | |-BinaryOperator 0x5608c144be00 <line:289:7, col:71> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c144bdd0 <col:7, col:66> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c144bd88 <col:7, col:66> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c144bd70 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c144bb18 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-CallExpr 0x5608c144bd20 <col:19, col:65> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c144bd08 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c144bb38 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c14494b8 'f_startswith' 'jv (jq_state *, jv, jv)'
|   | | |     |-ImplicitCastExpr 0x5608c144bd58 <col:32> 'jq_state *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x5608c144bb58 <col:32> 'jq_state *' lvalue ParmVar 0x5608c144b8d0 'jq' 'jq_state *'
|   | | |     |-CallExpr 0x5608c144bbd0 <col:36, col:49> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c144bbb8 <col:36> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c144bb78 <col:36> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c144bbf8 <col:44> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c144bb98 <col:44> 'jv':'jv' lvalue ParmVar 0x5608c144b948 'input' 'jv':'jv'
|   | | |     `-CallExpr 0x5608c144bc68 <col:52, col:64> 'jv':'jv'
|   | | |       |-ImplicitCastExpr 0x5608c144bc50 <col:52> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x5608c144bc10 <col:52> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |       `-ImplicitCastExpr 0x5608c144bc90 <col:60> 'jv':'jv' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x5608c144bc30 <col:60> 'jv':'jv' lvalue ParmVar 0x5608c144b9c0 'left' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c144bde8 <col:71> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c144bdb0 <col:71> 'int' EnumConstant 0x5608c13d0ae0 'JV_KIND_TRUE' 'int'
|   | `-CompoundStmt 0x5608c144bf00 <col:85, line:292:3>
|   |   |-CallExpr 0x5608c144be78 <line:290:5, col:17> 'void'
|   |   | |-ImplicitCastExpr 0x5608c144be60 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c144be20 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c144bea0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c144be40 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144b9c0 'left' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c144bef0 <line:291:5, col:12>
|   |     `-ImplicitCastExpr 0x5608c144bed8 <col:12> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c144beb8 <col:12> 'jv':'jv' lvalue ParmVar 0x5608c144b948 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c144c058 <line:297:3, col:47>
|   | `-VarDecl 0x5608c144bf58 <col:3, col:46> col:7 used prefixlen 'int' cinit
|   |   `-CallExpr 0x5608c144c018 <col:19, col:46> 'int'
|   |     |-ImplicitCastExpr 0x5608c144c000 <col:19> 'int (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c144bfc0 <col:19> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |     `-ImplicitCastExpr 0x5608c144c040 <col:42> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c144bfe0 <col:42> 'jv':'jv' lvalue ParmVar 0x5608c144b9c0 'left' 'jv':'jv'
|   |-DeclStmt 0x5608c144c3f0 <line:298:3, line:299:79>
|   | `-VarDecl 0x5608c144c080 <line:298:3, line:299:78> line:298:6 used res 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c144c3c0 <col:12, line:299:78> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c144c3a8 <line:298:12> 'jv (*)(const char *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c144c0e8 <col:12> 'jv (const char *, int)' Function 0x5608c13de3c8 'jv_string_sized' 'jv (const char *, int)'
|   |     |-BinaryOperator 0x5608c144c1d8 <col:28, col:53> 'const char *' '+'
|   |     | |-CallExpr 0x5608c144c160 <col:28, col:49> 'const char *'
|   |     | | |-ImplicitCastExpr 0x5608c144c148 <col:28> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5608c144c108 <col:28> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     | | `-ImplicitCastExpr 0x5608c144c188 <col:44> 'jv':'jv' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5608c144c128 <col:44> 'jv':'jv' lvalue ParmVar 0x5608c144b948 'input' 'jv':'jv'
|   |     | `-ImplicitCastExpr 0x5608c144c1c0 <col:53> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c144c1a0 <col:53> 'int' lvalue Var 0x5608c144bf58 'prefixlen' 'int'
|   |     `-BinaryOperator 0x5608c144c328 <line:299:28, col:69> 'int' '-'
|   |       |-CallExpr 0x5608c144c2c8 <col:28, col:65> 'int'
|   |       | |-ImplicitCastExpr 0x5608c144c2b0 <col:28> 'int (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c144c1f8 <col:28> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |       | `-CallExpr 0x5608c144c270 <col:51, col:64> 'jv':'jv'
|   |       |   |-ImplicitCastExpr 0x5608c144c258 <col:51> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x5608c144c218 <col:51> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |       |   `-ImplicitCastExpr 0x5608c144c298 <col:59> 'jv':'jv' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x5608c144c238 <col:59> 'jv':'jv' lvalue ParmVar 0x5608c144b948 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c144c310 <col:69> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c144c2f0 <col:69> 'int' lvalue Var 0x5608c144bf58 'prefixlen' 'int'
|   |-CallExpr 0x5608c144c460 <line:300:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c144c448 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c144c408 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c144c488 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c144c428 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c144b948 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c144c4d8 <line:301:3, col:10>
|     `-ImplicitCastExpr 0x5608c144c4c0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c144c4a0 <col:10> 'jv':'jv' lvalue Var 0x5608c144c080 'res' 'jv':'jv'
|-FunctionDecl 0x5608c144c6c8 <line:304:1, line:313:1> line:304:11 used f_rtrimstr 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c144c538 <col:22, col:32> col:32 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c144c5b0 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c144c628 <col:46, col:49> col:49 used right 'jv':'jv'
| `-CompoundStmt 0x5608c144cf78 <col:56, line:313:1>
|   |-IfStmt 0x5608c144ce78 <line:305:3, line:310:3>
|   | |-BinaryOperator 0x5608c144ca08 <line:305:7, col:70> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c144c9d8 <col:7, col:65> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c144c990 <col:7, col:65> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c144c978 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c144c780 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-CallExpr 0x5608c144c928 <col:19, col:64> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c144c910 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c144c7a0 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c144a708 'f_endswith' 'jv (jq_state *, jv, jv)'
|   | | |     |-ImplicitCastExpr 0x5608c144c960 <col:30> 'jq_state *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x5608c144c7c0 <col:30> 'jq_state *' lvalue ParmVar 0x5608c144c538 'jq' 'jq_state *'
|   | | |     |-CallExpr 0x5608c144c838 <col:34, col:47> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c144c820 <col:34> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c144c7e0 <col:34> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c144c860 <col:42> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c144c800 <col:42> 'jv':'jv' lvalue ParmVar 0x5608c144c5b0 'input' 'jv':'jv'
|   | | |     `-CallExpr 0x5608c144c8d0 <col:50, col:63> 'jv':'jv'
|   | | |       |-ImplicitCastExpr 0x5608c144c8b8 <col:50> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x5608c144c878 <col:50> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |       `-ImplicitCastExpr 0x5608c144c8f8 <col:58> 'jv':'jv' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x5608c144c898 <col:58> 'jv':'jv' lvalue ParmVar 0x5608c144c628 'right' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c144c9f0 <col:70> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c144c9b8 <col:70> 'int' EnumConstant 0x5608c13d0ae0 'JV_KIND_TRUE' 'int'
|   | `-CompoundStmt 0x5608c144ce50 <col:84, line:310:3>
|   |   |-DeclStmt 0x5608c144cd50 <line:306:5, line:307:101>
|   |   | `-VarDecl 0x5608c144ca38 <line:306:5, line:307:100> line:306:8 used res 'jv':'jv' nrvo cinit
|   |   |   `-CallExpr 0x5608c144cd20 <col:14, line:307:100> 'jv':'jv'
|   |   |     |-ImplicitCastExpr 0x5608c144cd08 <line:306:14> 'jv (*)(const char *, int)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x5608c144caa0 <col:14> 'jv (const char *, int)' Function 0x5608c13de3c8 'jv_string_sized' 'jv (const char *, int)'
|   |   |     |-CallExpr 0x5608c144cb18 <col:30, col:51> 'const char *'
|   |   |     | |-ImplicitCastExpr 0x5608c144cb00 <col:30> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x5608c144cac0 <col:30> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |   |     | `-ImplicitCastExpr 0x5608c144cb40 <col:46> 'jv':'jv' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x5608c144cae0 <col:46> 'jv':'jv' lvalue ParmVar 0x5608c144c5b0 'input' 'jv':'jv'
|   |   |     `-BinaryOperator 0x5608c144cce8 <line:307:30, col:99> 'int' '-'
|   |   |       |-CallExpr 0x5608c144cc28 <col:30, col:67> 'int'
|   |   |       | |-ImplicitCastExpr 0x5608c144cc10 <col:30> 'int (*)(jv)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x5608c144cb58 <col:30> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |   |       | `-CallExpr 0x5608c144cbd0 <col:53, col:66> 'jv':'jv'
|   |   |       |   |-ImplicitCastExpr 0x5608c144cbb8 <col:53> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |   |       |   | `-DeclRefExpr 0x5608c144cb78 <col:53> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |   |       |   `-ImplicitCastExpr 0x5608c144cbf8 <col:61> 'jv':'jv' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x5608c144cb98 <col:61> 'jv':'jv' lvalue ParmVar 0x5608c144c5b0 'input' 'jv':'jv'
|   |   |       `-CallExpr 0x5608c144cca8 <col:71, col:99> 'int'
|   |   |         |-ImplicitCastExpr 0x5608c144cc90 <col:71> 'int (*)(jv)' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x5608c144cc50 <col:71> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |   |         `-ImplicitCastExpr 0x5608c144ccd0 <col:94> 'jv':'jv' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x5608c144cc70 <col:94> 'jv':'jv' lvalue ParmVar 0x5608c144c628 'right' 'jv':'jv'
|   |   |-CallExpr 0x5608c144cdc0 <line:308:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c144cda8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c144cd68 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c144cde8 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c144cd88 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144c5b0 'input' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c144ce38 <line:309:5, col:12>
|   |     `-ImplicitCastExpr 0x5608c144ce20 <col:12> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c144ce00 <col:12> 'jv':'jv' lvalue Var 0x5608c144ca38 'res' 'jv':'jv'
|   |-CallExpr 0x5608c144cef0 <line:311:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c144ced8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c144ce98 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c144cf18 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c144ceb8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c144c628 'right' 'jv':'jv'
|   `-ReturnStmt 0x5608c144cf68 <line:312:3, col:10>
|     `-ImplicitCastExpr 0x5608c144cf50 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c144cf30 <col:10> 'jv':'jv' lvalue ParmVar 0x5608c144c5b0 'input' 'jv':'jv'
|-FunctionDecl 0x5608c144d1c0 <line:315:1, line:342:1> line:315:11 used f_minus 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c144cfb0 <col:19, col:29> col:29 jq 'jq_state *'
| |-ParmVarDecl 0x5608c144d028 <col:33, col:36> col:36 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c144d0a0 <col:43, col:46> col:46 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c144d118 <col:49, col:52> col:52 used b 'jv':'jv'
| `-CompoundStmt 0x5608c144f510 <col:55, line:342:1>
|   |-CallExpr 0x5608c144d2d8 <line:316:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c144d2c0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c144d280 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c144d300 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c144d2a0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c144d028 'input' 'jv':'jv'
|   `-IfStmt 0x5608c144f4e0 <line:317:3, line:341:3> has_else
|     |-BinaryOperator 0x5608c144d528 <line:317:7, col:61> 'int' '&&'
|     | |-BinaryOperator 0x5608c144d400 <col:7, col:25> 'int' '=='
|     | | |-ImplicitCastExpr 0x5608c144d3d0 <col:7, col:20> 'unsigned int' <IntegralCast>
|     | | | `-CallExpr 0x5608c144d370 <col:7, col:20> 'jv_kind':'jv_kind'
|     | | |   |-ImplicitCastExpr 0x5608c144d358 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | | |   | `-DeclRefExpr 0x5608c144d318 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | | |   `-ImplicitCastExpr 0x5608c144d398 <col:19> 'jv':'jv' <LValueToRValue>
|     | | |     `-DeclRefExpr 0x5608c144d338 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c144d0a0 'a' 'jv':'jv'
|     | | `-ImplicitCastExpr 0x5608c144d3e8 <col:25> 'unsigned int' <IntegralCast>
|     | |   `-DeclRefExpr 0x5608c144d3b0 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|     | `-BinaryOperator 0x5608c144d508 <col:43, col:61> 'int' '=='
|     |   |-ImplicitCastExpr 0x5608c144d4d8 <col:43, col:56> 'unsigned int' <IntegralCast>
|     |   | `-CallExpr 0x5608c144d478 <col:43, col:56> 'jv_kind':'jv_kind'
|     |   |   |-ImplicitCastExpr 0x5608c144d460 <col:43> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5608c144d420 <col:43> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     |   |   `-ImplicitCastExpr 0x5608c144d4a0 <col:55> 'jv':'jv' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x5608c144d440 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c144d118 'b' 'jv':'jv'
|     |   `-ImplicitCastExpr 0x5608c144d4f0 <col:61> 'unsigned int' <IntegralCast>
|     |     `-DeclRefExpr 0x5608c144d4b8 <col:61> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|     |-CompoundStmt 0x5608c144d908 <col:77, line:322:3>
|     | |-DeclStmt 0x5608c144d770 <line:318:5, col:62>
|     | | `-VarDecl 0x5608c144d558 <col:5, col:61> col:8 used r 'jv':'jv' nrvo cinit
|     | |   `-CallExpr 0x5608c144d748 <col:12, col:61> 'jv':'jv'
|     | |     |-ImplicitCastExpr 0x5608c144d730 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x5608c144d5c0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|     | |     `-BinaryOperator 0x5608c144d710 <col:22, col:60> 'double' '-'
|     | |       |-CallExpr 0x5608c144d638 <col:22, col:39> 'double'
|     | |       | |-ImplicitCastExpr 0x5608c144d620 <col:22> 'double (*)(jv)' <FunctionToPointerDecay>
|     | |       | | `-DeclRefExpr 0x5608c144d5e0 <col:22> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | |       | `-ImplicitCastExpr 0x5608c144d660 <col:38> 'jv':'jv' <LValueToRValue>
|     | |       |   `-DeclRefExpr 0x5608c144d600 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c144d0a0 'a' 'jv':'jv'
|     | |       `-CallExpr 0x5608c144d6d0 <col:43, col:60> 'double'
|     | |         |-ImplicitCastExpr 0x5608c144d6b8 <col:43> 'double (*)(jv)' <FunctionToPointerDecay>
|     | |         | `-DeclRefExpr 0x5608c144d678 <col:43> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | |         `-ImplicitCastExpr 0x5608c144d6f8 <col:59> 'jv':'jv' <LValueToRValue>
|     | |           `-DeclRefExpr 0x5608c144d698 <col:59> 'jv':'jv' lvalue ParmVar 0x5608c144d118 'b' 'jv':'jv'
|     | |-CallExpr 0x5608c144d7e0 <line:319:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c144d7c8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c144d788 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c144d808 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c144d7a8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144d0a0 'a' 'jv':'jv'
|     | |-CallExpr 0x5608c144d878 <line:320:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c144d860 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c144d820 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c144d8a0 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c144d840 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144d118 'b' 'jv':'jv'
|     | `-ReturnStmt 0x5608c144d8f0 <line:321:5, col:12>
|     |   `-ImplicitCastExpr 0x5608c144d8d8 <col:12> 'jv':'jv' <LValueToRValue>
|     |     `-DeclRefExpr 0x5608c144d8b8 <col:12> 'jv':'jv' lvalue Var 0x5608c144d558 'r' 'jv':'jv'
|     `-IfStmt 0x5608c144f4b0 <line:322:10, line:341:3> has_else
|       |-BinaryOperator 0x5608c144db48 <line:322:14, col:67> 'int' '&&'
|       | |-BinaryOperator 0x5608c144da20 <col:14, col:32> 'int' '=='
|       | | |-ImplicitCastExpr 0x5608c144d9f0 <col:14, col:27> 'unsigned int' <IntegralCast>
|       | | | `-CallExpr 0x5608c144d990 <col:14, col:27> 'jv_kind':'jv_kind'
|       | | |   |-ImplicitCastExpr 0x5608c144d978 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|       | | |   | `-DeclRefExpr 0x5608c144d938 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|       | | |   `-ImplicitCastExpr 0x5608c144d9b8 <col:26> 'jv':'jv' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x5608c144d958 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c144d0a0 'a' 'jv':'jv'
|       | | `-ImplicitCastExpr 0x5608c144da08 <col:32> 'unsigned int' <IntegralCast>
|       | |   `-DeclRefExpr 0x5608c144d9d0 <col:32> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|       | `-BinaryOperator 0x5608c144db28 <col:49, col:67> 'int' '=='
|       |   |-ImplicitCastExpr 0x5608c144daf8 <col:49, col:62> 'unsigned int' <IntegralCast>
|       |   | `-CallExpr 0x5608c144da98 <col:49, col:62> 'jv_kind':'jv_kind'
|       |   |   |-ImplicitCastExpr 0x5608c144da80 <col:49> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x5608c144da40 <col:49> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|       |   |   `-ImplicitCastExpr 0x5608c144dac0 <col:61> 'jv':'jv' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x5608c144da60 <col:61> 'jv':'jv' lvalue ParmVar 0x5608c144d118 'b' 'jv':'jv'
|       |   `-ImplicitCastExpr 0x5608c144db10 <col:67> 'unsigned int' <IntegralCast>
|       |     `-DeclRefExpr 0x5608c144dad8 <col:67> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|       |-CompoundStmt 0x5608c144f2d0 <col:82, line:339:3>
|       | |-DeclStmt 0x5608c144dc38 <line:323:5, col:24>
|       | | `-VarDecl 0x5608c144db78 <col:5, col:23> col:8 used out 'jv':'jv' nrvo cinit
|       | |   `-CallExpr 0x5608c144dc18 <col:14, col:23> 'jv':'jv'
|       | |     `-ImplicitCastExpr 0x5608c144dc00 <col:14> 'jv (*)(void)' <FunctionToPointerDecay>
|       | |       `-DeclRefExpr 0x5608c144dbe0 <col:14> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|       | |-ForStmt 0x5608c144f118 <./src/jv.h:80:3, src/builtin.c:335:5>
|       | | |-DeclStmt 0x5608c144df38 <./src/jv.h:80:8, col:67>
|       | | | |-VarDecl 0x5608c144dc68 <col:8, col:49> col:12 used jv_len__ 'int' cinit
|       | | | | `-CallExpr 0x5608c144ddb0 <col:23, col:49> 'int'
|       | | | |   |-ImplicitCastExpr 0x5608c144dd98 <col:23> 'int (*)(jv)' <FunctionToPointerDecay>
|       | | | |   | `-DeclRefExpr 0x5608c144dcd0 <col:23> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|       | | | |   `-CallExpr 0x5608c144dd58 <col:39, col:48> 'jv':'jv'
|       | | | |     |-ImplicitCastExpr 0x5608c144dd40 <col:39> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | | | |     | `-DeclRefExpr 0x5608c144dd00 <col:39> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | | | |     `-ImplicitCastExpr 0x5608c144dd80 <src/builtin.c:324:22> 'jv':'jv' <LValueToRValue>
|       | | | |       `-DeclRefExpr 0x5608c144dd20 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c144d0a0 'a' 'jv':'jv'
|       | | | |-VarDecl 0x5608c144ddf0 <./src/jv.h:80:8, col:54> src/builtin.c:324:25 used i 'int' cinit
|       | | | | `-IntegerLiteral 0x5608c144de58 <./src/jv.h:80:54> 'int' 0
|       | | | `-VarDecl 0x5608c144de90 <col:8, col:66> col:57 used jv_j__ 'int' cinit
|       | | |   `-IntegerLiteral 0x5608c144def8 <col:66> 'int' 1
|       | | |-<<<NULL>>>
|       | | |-ImplicitCastExpr 0x5608c144df70 <line:81:8> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x5608c144df50 <col:8> 'int' lvalue Var 0x5608c144de90 'jv_j__' 'int'
|       | | |-BinaryOperator 0x5608c144dfc8 <col:16, col:25> 'int' '='
|       | | | |-DeclRefExpr 0x5608c144df88 <col:16> 'int' lvalue Var 0x5608c144de90 'jv_j__' 'int'
|       | | | `-IntegerLiteral 0x5608c144dfa8 <col:25> 'int' 0
|       | | `-ForStmt 0x5608c144f0e0 <line:82:5, src/builtin.c:335:5>
|       | |   |-DeclStmt 0x5608c144e060 <./src/jv.h:82:10, col:14>
|       | |   | `-VarDecl 0x5608c144dff8 <col:10, src/builtin.c:324:28> col:28 used x 'jv':'jv'
|       | |   |-<<<NULL>>>
|       | |   |-ConditionalOperator 0x5608c144e358 <col:25, ./src/jv.h:84:51> 'int'
|       | |   | |-BinaryOperator 0x5608c144e0e8 <src/builtin.c:324:25, ./src/jv.h:83:14> 'int' '<'
|       | |   | | |-ImplicitCastExpr 0x5608c144e0b8 <src/builtin.c:324:25> 'int' <LValueToRValue>
|       | |   | | | `-DeclRefExpr 0x5608c144e078 <col:25> 'int' lvalue Var 0x5608c144ddf0 'i' 'int'
|       | |   | | `-ImplicitCastExpr 0x5608c144e0d0 <./src/jv.h:83:14> 'int' <LValueToRValue>
|       | |   | |   `-DeclRefExpr 0x5608c144e098 <col:14> 'int' lvalue Var 0x5608c144dc68 'jv_len__' 'int'
|       | |   | |-ParenExpr 0x5608c144e318 <line:84:12, col:47> 'int'
|       | |   | | `-BinaryOperator 0x5608c144e2f8 <src/builtin.c:324:28, ./src/jv.h:84:46> 'int' ','
|       | |   | |   |-BinaryOperator 0x5608c144e2b8 <src/builtin.c:324:28, ./src/jv.h:84:43> 'jv':'jv' '='
|       | |   | |   | |-DeclRefExpr 0x5608c144e108 <src/builtin.c:324:28> 'jv':'jv' lvalue Var 0x5608c144dff8 'x' 'jv':'jv'
|       | |   | |   | `-CallExpr 0x5608c144e270 <./src/jv.h:84:17, col:43> 'jv':'jv'
|       | |   | |   |   |-ImplicitCastExpr 0x5608c144e258 <col:17> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|       | |   | |   |   | `-DeclRefExpr 0x5608c144e128 <col:17> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|       | |   | |   |   |-CallExpr 0x5608c144e1a0 <col:30, col:39> 'jv':'jv'
|       | |   | |   |   | |-ImplicitCastExpr 0x5608c144e188 <col:30> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | |   | |   |   | | `-DeclRefExpr 0x5608c144e148 <col:30> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | |   | |   |   | `-ImplicitCastExpr 0x5608c144e1c8 <src/builtin.c:324:22> 'jv':'jv' <LValueToRValue>
|       | |   | |   |   |   `-DeclRefExpr 0x5608c144e168 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c144d0a0 'a' 'jv':'jv'
|       | |   | |   |   `-ImplicitCastExpr 0x5608c144e2a0 <col:25> 'int' <LValueToRValue>
|       | |   | |   |     `-DeclRefExpr 0x5608c144e1e0 <col:25> 'int' lvalue Var 0x5608c144ddf0 'i' 'int'
|       | |   | |   `-IntegerLiteral 0x5608c144e2d8 <./src/jv.h:84:46> 'int' 1
|       | |   | `-IntegerLiteral 0x5608c144e338 <col:51> 'int' 0
|       | |   |-UnaryOperator 0x5608c144e3a8 <src/builtin.c:324:25, ./src/jv.h:85:11> 'int' postfix '++'
|       | |   | `-DeclRefExpr 0x5608c144e388 <src/builtin.c:324:25> 'int' lvalue Var 0x5608c144ddf0 'i' 'int'
|       | |   `-CompoundStmt 0x5608c144f0b0 <col:31, line:335:5>
|       | |     |-DeclStmt 0x5608c144e460 <line:325:7, col:22>
|       | |     | `-VarDecl 0x5608c144e3d8 <col:7, col:21> col:11 used include 'int' cinit
|       | |     |   `-IntegerLiteral 0x5608c144e440 <col:21> 'int' 1
|       | |     |-ForStmt 0x5608c144ee10 <./src/jv.h:80:3, src/builtin.c:331:7>
|       | |     | |-DeclStmt 0x5608c144e750 <./src/jv.h:80:8, col:67>
|       | |     | | |-VarDecl 0x5608c144e490 <col:8, col:49> col:12 used jv_len__ 'int' cinit
|       | |     | | | `-CallExpr 0x5608c144e5c8 <col:23, col:49> 'int'
|       | |     | | |   |-ImplicitCastExpr 0x5608c144e5b0 <col:23> 'int (*)(jv)' <FunctionToPointerDecay>
|       | |     | | |   | `-DeclRefExpr 0x5608c144e4f8 <col:23> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|       | |     | | |   `-CallExpr 0x5608c144e570 <col:39, col:48> 'jv':'jv'
|       | |     | | |     |-ImplicitCastExpr 0x5608c144e558 <col:39> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | |     | | |     | `-DeclRefExpr 0x5608c144e518 <col:39> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | |     | | |     `-ImplicitCastExpr 0x5608c144e598 <src/builtin.c:326:24> 'jv':'jv' <LValueToRValue>
|       | |     | | |       `-DeclRefExpr 0x5608c144e538 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c144d118 'b' 'jv':'jv'
|       | |     | | |-VarDecl 0x5608c144e608 <./src/jv.h:80:8, col:54> src/builtin.c:326:27 used j 'int' cinit
|       | |     | | | `-IntegerLiteral 0x5608c144e670 <./src/jv.h:80:54> 'int' 0
|       | |     | | `-VarDecl 0x5608c144e6a8 <col:8, col:66> col:57 used jv_j__ 'int' cinit
|       | |     | |   `-IntegerLiteral 0x5608c144e710 <col:66> 'int' 1
|       | |     | |-<<<NULL>>>
|       | |     | |-ImplicitCastExpr 0x5608c144e788 <line:81:8> 'int' <LValueToRValue>
|       | |     | | `-DeclRefExpr 0x5608c144e768 <col:8> 'int' lvalue Var 0x5608c144e6a8 'jv_j__' 'int'
|       | |     | |-BinaryOperator 0x5608c144e7e0 <col:16, col:25> 'int' '='
|       | |     | | |-DeclRefExpr 0x5608c144e7a0 <col:16> 'int' lvalue Var 0x5608c144e6a8 'jv_j__' 'int'
|       | |     | | `-IntegerLiteral 0x5608c144e7c0 <col:25> 'int' 0
|       | |     | `-ForStmt 0x5608c144edd8 <line:82:5, src/builtin.c:331:7>
|       | |     |   |-DeclStmt 0x5608c144e878 <./src/jv.h:82:10, col:14>
|       | |     |   | `-VarDecl 0x5608c144e810 <col:10, src/builtin.c:326:30> col:30 used y 'jv':'jv'
|       | |     |   |-<<<NULL>>>
|       | |     |   |-ConditionalOperator 0x5608c144eb18 <col:27, ./src/jv.h:84:51> 'int'
|       | |     |   | |-BinaryOperator 0x5608c144e900 <src/builtin.c:326:27, ./src/jv.h:83:14> 'int' '<'
|       | |     |   | | |-ImplicitCastExpr 0x5608c144e8d0 <src/builtin.c:326:27> 'int' <LValueToRValue>
|       | |     |   | | | `-DeclRefExpr 0x5608c144e890 <col:27> 'int' lvalue Var 0x5608c144e608 'j' 'int'
|       | |     |   | | `-ImplicitCastExpr 0x5608c144e8e8 <./src/jv.h:83:14> 'int' <LValueToRValue>
|       | |     |   | |   `-DeclRefExpr 0x5608c144e8b0 <col:14> 'int' lvalue Var 0x5608c144e490 'jv_len__' 'int'
|       | |     |   | |-ParenExpr 0x5608c144ead8 <line:84:12, col:47> 'int'
|       | |     |   | | `-BinaryOperator 0x5608c144eab8 <src/builtin.c:326:30, ./src/jv.h:84:46> 'int' ','
|       | |     |   | |   |-BinaryOperator 0x5608c144ea78 <src/builtin.c:326:30, ./src/jv.h:84:43> 'jv':'jv' '='
|       | |     |   | |   | |-DeclRefExpr 0x5608c144e920 <src/builtin.c:326:30> 'jv':'jv' lvalue Var 0x5608c144e810 'y' 'jv':'jv'
|       | |     |   | |   | `-CallExpr 0x5608c144ea30 <./src/jv.h:84:17, col:43> 'jv':'jv'
|       | |     |   | |   |   |-ImplicitCastExpr 0x5608c144ea18 <col:17> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|       | |     |   | |   |   | `-DeclRefExpr 0x5608c144e940 <col:17> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|       | |     |   | |   |   |-CallExpr 0x5608c144e9b8 <col:30, col:39> 'jv':'jv'
|       | |     |   | |   |   | |-ImplicitCastExpr 0x5608c144e9a0 <col:30> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | |     |   | |   |   | | `-DeclRefExpr 0x5608c144e960 <col:30> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | |     |   | |   |   | `-ImplicitCastExpr 0x5608c144e9e0 <src/builtin.c:326:24> 'jv':'jv' <LValueToRValue>
|       | |     |   | |   |   |   `-DeclRefExpr 0x5608c144e980 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c144d118 'b' 'jv':'jv'
|       | |     |   | |   |   `-ImplicitCastExpr 0x5608c144ea60 <col:27> 'int' <LValueToRValue>
|       | |     |   | |   |     `-DeclRefExpr 0x5608c144e9f8 <col:27> 'int' lvalue Var 0x5608c144e608 'j' 'int'
|       | |     |   | |   `-IntegerLiteral 0x5608c144ea98 <./src/jv.h:84:46> 'int' 1
|       | |     |   | `-IntegerLiteral 0x5608c144eaf8 <col:51> 'int' 0
|       | |     |   |-UnaryOperator 0x5608c144eb68 <src/builtin.c:326:27, ./src/jv.h:85:11> 'int' postfix '++'
|       | |     |   | `-DeclRefExpr 0x5608c144eb48 <src/builtin.c:326:27> 'int' lvalue Var 0x5608c144e608 'j' 'int'
|       | |     |   `-CompoundStmt 0x5608c144edc0 <col:33, line:331:7>
|       | |     |     `-IfStmt 0x5608c144eda0 <line:327:9, line:330:9>
|       | |     |       |-CallExpr 0x5608c144ecd0 <line:327:13, col:35> 'int'
|       | |     |       | |-ImplicitCastExpr 0x5608c144ecb8 <col:13> 'int (*)(jv, jv)' <FunctionToPointerDecay>
|       | |     |       | | `-DeclRefExpr 0x5608c144eb80 <col:13> 'int (jv, jv)' Function 0x5608c13d20e0 'jv_equal' 'int (jv, jv)'
|       | |     |       | |-CallExpr 0x5608c144ebf8 <col:22, col:31> 'jv':'jv'
|       | |     |       | | |-ImplicitCastExpr 0x5608c144ebe0 <col:22> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | |     |       | | | `-DeclRefExpr 0x5608c144eba0 <col:22> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | |     |       | | `-ImplicitCastExpr 0x5608c144ec20 <col:30> 'jv':'jv' <LValueToRValue>
|       | |     |       | |   `-DeclRefExpr 0x5608c144ebc0 <col:30> 'jv':'jv' lvalue Var 0x5608c144dff8 'x' 'jv':'jv'
|       | |     |       | `-ImplicitCastExpr 0x5608c144ed00 <col:34> 'jv':'jv' <LValueToRValue>
|       | |     |       |   `-DeclRefExpr 0x5608c144ec38 <col:34> 'jv':'jv' lvalue Var 0x5608c144e810 'y' 'jv':'jv'
|       | |     |       `-CompoundStmt 0x5608c144ed80 <col:38, line:330:9>
|       | |     |         |-BinaryOperator 0x5608c144ed58 <line:328:11, col:21> 'int' '='
|       | |     |         | |-DeclRefExpr 0x5608c144ed18 <col:11> 'int' lvalue Var 0x5608c144e3d8 'include' 'int'
|       | |     |         | `-IntegerLiteral 0x5608c144ed38 <col:21> 'int' 0
|       | |     |         `-BreakStmt 0x5608c144ed78 <line:329:11>
|       | |     |-IfStmt 0x5608c144eff8 <line:332:7, line:333:46>
|       | |     | |-ImplicitCastExpr 0x5608c144ee68 <line:332:11> 'int' <LValueToRValue>
|       | |     | | `-DeclRefExpr 0x5608c144ee48 <col:11> 'int' lvalue Var 0x5608c144e3d8 'include' 'int'
|       | |     | `-BinaryOperator 0x5608c144efd8 <line:333:9, col:46> 'jv':'jv' '='
|       | |     |   |-DeclRefExpr 0x5608c144ee80 <col:9> 'jv':'jv' lvalue Var 0x5608c144db78 'out' 'jv':'jv'
|       | |     |   `-CallExpr 0x5608c144ef90 <col:15, col:46> 'jv':'jv'
|       | |     |     |-ImplicitCastExpr 0x5608c144ef78 <col:15> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|       | |     |     | `-DeclRefExpr 0x5608c144eea0 <col:15> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|       | |     |     |-ImplicitCastExpr 0x5608c144efc0 <col:31> 'jv':'jv' <LValueToRValue>
|       | |     |     | `-DeclRefExpr 0x5608c144eec0 <col:31> 'jv':'jv' lvalue Var 0x5608c144db78 'out' 'jv':'jv'
|       | |     |     `-CallExpr 0x5608c144ef38 <col:36, col:45> 'jv':'jv'
|       | |     |       |-ImplicitCastExpr 0x5608c144ef20 <col:36> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | |     |       | `-DeclRefExpr 0x5608c144eee0 <col:36> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | |     |       `-ImplicitCastExpr 0x5608c144ef60 <col:44> 'jv':'jv' <LValueToRValue>
|       | |     |         `-DeclRefExpr 0x5608c144ef00 <col:44> 'jv':'jv' lvalue Var 0x5608c144dff8 'x' 'jv':'jv'
|       | |     `-CallExpr 0x5608c144f070 <line:334:7, col:16> 'void'
|       | |       |-ImplicitCastExpr 0x5608c144f058 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|       | |       | `-DeclRefExpr 0x5608c144f018 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|       | |       `-ImplicitCastExpr 0x5608c144f098 <col:15> 'jv':'jv' <LValueToRValue>
|       | |         `-DeclRefExpr 0x5608c144f038 <col:15> 'jv':'jv' lvalue Var 0x5608c144dff8 'x' 'jv':'jv'
|       | |-CallExpr 0x5608c144f1a8 <line:336:5, col:14> 'void'
|       | | |-ImplicitCastExpr 0x5608c144f190 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5608c144f150 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|       | | `-ImplicitCastExpr 0x5608c144f1d0 <col:13> 'jv':'jv' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5608c144f170 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144d0a0 'a' 'jv':'jv'
|       | |-CallExpr 0x5608c144f240 <line:337:5, col:14> 'void'
|       | | |-ImplicitCastExpr 0x5608c144f228 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5608c144f1e8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|       | | `-ImplicitCastExpr 0x5608c144f268 <col:13> 'jv':'jv' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5608c144f208 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144d118 'b' 'jv':'jv'
|       | `-ReturnStmt 0x5608c144f2b8 <line:338:5, col:12>
|       |   `-ImplicitCastExpr 0x5608c144f2a0 <col:12> 'jv':'jv' <LValueToRValue>
|       |     `-DeclRefExpr 0x5608c144f280 <col:12> 'jv':'jv' lvalue Var 0x5608c144db78 'out' 'jv':'jv'
|       `-CompoundStmt 0x5608c144f498 <line:339:10, line:341:3>
|         `-ReturnStmt 0x5608c144f488 <line:340:5, col:52>
|           `-CallExpr 0x5608c144f3f0 <col:12, col:52> 'jv':'jv'
|             |-ImplicitCastExpr 0x5608c144f3d8 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5608c144f308 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|             |-ImplicitCastExpr 0x5608c144f428 <col:24> 'jv':'jv' <LValueToRValue>
|             | `-DeclRefExpr 0x5608c144f328 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c144d0a0 'a' 'jv':'jv'
|             |-ImplicitCastExpr 0x5608c144f440 <col:27> 'jv':'jv' <LValueToRValue>
|             | `-DeclRefExpr 0x5608c144f348 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c144d118 'b' 'jv':'jv'
|             `-ImplicitCastExpr 0x5608c144f470 <col:30> 'const char *' <NoOp>
|               `-ImplicitCastExpr 0x5608c144f458 <col:30> 'char *' <ArrayToPointerDecay>
|                 `-StringLiteral 0x5608c144f3a8 <col:30> 'char [21]' lvalue "cannot be subtracted"
|-FunctionDecl 0x5608c144f7e0 <line:344:1, line:378:1> line:344:11 used f_multiply 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c144f5d0 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c144f648 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c144f6c0 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c144f738 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1451748 <col:58, line:378:1>
|   |-DeclStmt 0x5608c144f9b0 <line:345:3, col:30>
|   | `-VarDecl 0x5608c144f8b0 <col:3, col:29> col:11 used ak 'jv_kind':'jv_kind' cinit
|   |   `-CallExpr 0x5608c144f970 <col:16, col:29> 'jv_kind':'jv_kind'
|   |     |-ImplicitCastExpr 0x5608c144f958 <col:16> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c144f918 <col:16> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     `-ImplicitCastExpr 0x5608c144f998 <col:28> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c144f938 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c144f6c0 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c144fad8 <line:346:3, col:30>
|   | `-VarDecl 0x5608c144f9d8 <col:3, col:29> col:11 used bk 'jv_kind':'jv_kind' cinit
|   |   `-CallExpr 0x5608c144fa98 <col:16, col:29> 'jv_kind':'jv_kind'
|   |     |-ImplicitCastExpr 0x5608c144fa80 <col:16> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c144fa40 <col:16> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     `-ImplicitCastExpr 0x5608c144fac0 <col:28> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c144fa60 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c144f738 'b' 'jv':'jv'
|   |-CallExpr 0x5608c144fb48 <line:347:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c144fb30 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c144faf0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c144fb70 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c144fb10 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c144f648 'input' 'jv':'jv'
|   `-IfStmt 0x5608c1451718 <line:348:3, line:377:3> has_else
|     |-BinaryOperator 0x5608c144fcd8 <line:348:7, col:37> 'int' '&&'
|     | |-BinaryOperator 0x5608c144fc10 <col:7, col:13> 'int' '=='
|     | | |-ImplicitCastExpr 0x5608c144fbe0 <col:7> 'unsigned int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x5608c144fbc8 <col:7> 'jv_kind':'jv_kind' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5608c144fb88 <col:7> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f8b0 'ak' 'jv_kind':'jv_kind'
|     | | `-ImplicitCastExpr 0x5608c144fbf8 <col:13> 'unsigned int' <IntegralCast>
|     | |   `-DeclRefExpr 0x5608c144fba8 <col:13> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|     | `-BinaryOperator 0x5608c144fcb8 <col:31, col:37> 'int' '=='
|     |   |-ImplicitCastExpr 0x5608c144fc88 <col:31> 'unsigned int' <IntegralCast>
|     |   | `-ImplicitCastExpr 0x5608c144fc70 <col:31> 'jv_kind':'jv_kind' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x5608c144fc30 <col:31> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f9d8 'bk' 'jv_kind':'jv_kind'
|     |   `-ImplicitCastExpr 0x5608c144fca0 <col:37> 'unsigned int' <IntegralCast>
|     |     `-DeclRefExpr 0x5608c144fc50 <col:37> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|     |-CompoundStmt 0x5608c14500b8 <col:53, line:353:3>
|     | |-DeclStmt 0x5608c144ff20 <line:349:5, col:62>
|     | | `-VarDecl 0x5608c144fd08 <col:5, col:61> col:8 used r 'jv':'jv' nrvo cinit
|     | |   `-CallExpr 0x5608c144fef8 <col:12, col:61> 'jv':'jv'
|     | |     |-ImplicitCastExpr 0x5608c144fee0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x5608c144fd70 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|     | |     `-BinaryOperator 0x5608c144fec0 <col:22, col:60> 'double' '*'
|     | |       |-CallExpr 0x5608c144fde8 <col:22, col:39> 'double'
|     | |       | |-ImplicitCastExpr 0x5608c144fdd0 <col:22> 'double (*)(jv)' <FunctionToPointerDecay>
|     | |       | | `-DeclRefExpr 0x5608c144fd90 <col:22> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | |       | `-ImplicitCastExpr 0x5608c144fe10 <col:38> 'jv':'jv' <LValueToRValue>
|     | |       |   `-DeclRefExpr 0x5608c144fdb0 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c144f6c0 'a' 'jv':'jv'
|     | |       `-CallExpr 0x5608c144fe80 <col:43, col:60> 'double'
|     | |         |-ImplicitCastExpr 0x5608c144fe68 <col:43> 'double (*)(jv)' <FunctionToPointerDecay>
|     | |         | `-DeclRefExpr 0x5608c144fe28 <col:43> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | |         `-ImplicitCastExpr 0x5608c144fea8 <col:59> 'jv':'jv' <LValueToRValue>
|     | |           `-DeclRefExpr 0x5608c144fe48 <col:59> 'jv':'jv' lvalue ParmVar 0x5608c144f738 'b' 'jv':'jv'
|     | |-CallExpr 0x5608c144ff90 <line:350:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c144ff78 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c144ff38 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c144ffb8 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c144ff58 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144f6c0 'a' 'jv':'jv'
|     | |-CallExpr 0x5608c1450028 <line:351:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c1450010 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c144ffd0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c1450050 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c144fff0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144f738 'b' 'jv':'jv'
|     | `-ReturnStmt 0x5608c14500a0 <line:352:5, col:12>
|     |   `-ImplicitCastExpr 0x5608c1450088 <col:12> 'jv':'jv' <LValueToRValue>
|     |     `-DeclRefExpr 0x5608c1450068 <col:12> 'jv':'jv' lvalue Var 0x5608c144fd08 'r' 'jv':'jv'
|     `-IfStmt 0x5608c14516e8 <line:353:10, line:377:3> has_else
|       |-BinaryOperator 0x5608c1450408 <line:353:14, line:354:59> 'int' '||'
|       | |-ParenExpr 0x5608c1450258 <line:353:14, col:59> 'int'
|       | | `-BinaryOperator 0x5608c1450238 <col:15, col:45> 'int' '&&'
|       | |   |-BinaryOperator 0x5608c1450170 <col:15, col:21> 'int' '=='
|       | |   | |-ImplicitCastExpr 0x5608c1450140 <col:15> 'unsigned int' <IntegralCast>
|       | |   | | `-ImplicitCastExpr 0x5608c1450128 <col:15> 'jv_kind':'jv_kind' <LValueToRValue>
|       | |   | |   `-DeclRefExpr 0x5608c14500e8 <col:15> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f8b0 'ak' 'jv_kind':'jv_kind'
|       | |   | `-ImplicitCastExpr 0x5608c1450158 <col:21> 'unsigned int' <IntegralCast>
|       | |   |   `-DeclRefExpr 0x5608c1450108 <col:21> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|       | |   `-BinaryOperator 0x5608c1450218 <col:39, col:45> 'int' '=='
|       | |     |-ImplicitCastExpr 0x5608c14501e8 <col:39> 'unsigned int' <IntegralCast>
|       | |     | `-ImplicitCastExpr 0x5608c14501d0 <col:39> 'jv_kind':'jv_kind' <LValueToRValue>
|       | |     |   `-DeclRefExpr 0x5608c1450190 <col:39> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f9d8 'bk' 'jv_kind':'jv_kind'
|       | |     `-ImplicitCastExpr 0x5608c1450200 <col:45> 'unsigned int' <IntegralCast>
|       | |       `-DeclRefExpr 0x5608c14501b0 <col:45> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|       | `-ParenExpr 0x5608c14503e8 <line:354:14, col:59> 'int'
|       |   `-BinaryOperator 0x5608c14503c8 <col:15, col:45> 'int' '&&'
|       |     |-BinaryOperator 0x5608c1450300 <col:15, col:21> 'int' '=='
|       |     | |-ImplicitCastExpr 0x5608c14502d0 <col:15> 'unsigned int' <IntegralCast>
|       |     | | `-ImplicitCastExpr 0x5608c14502b8 <col:15> 'jv_kind':'jv_kind' <LValueToRValue>
|       |     | |   `-DeclRefExpr 0x5608c1450278 <col:15> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f8b0 'ak' 'jv_kind':'jv_kind'
|       |     | `-ImplicitCastExpr 0x5608c14502e8 <col:21> 'unsigned int' <IntegralCast>
|       |     |   `-DeclRefExpr 0x5608c1450298 <col:21> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|       |     `-BinaryOperator 0x5608c14503a8 <col:39, col:45> 'int' '=='
|       |       |-ImplicitCastExpr 0x5608c1450378 <col:39> 'unsigned int' <IntegralCast>
|       |       | `-ImplicitCastExpr 0x5608c1450360 <col:39> 'jv_kind':'jv_kind' <LValueToRValue>
|       |       |   `-DeclRefExpr 0x5608c1450320 <col:39> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f9d8 'bk' 'jv_kind':'jv_kind'
|       |       `-ImplicitCastExpr 0x5608c1450390 <col:45> 'unsigned int' <IntegralCast>
|       |         `-DeclRefExpr 0x5608c1450340 <col:45> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|       |-CompoundStmt 0x5608c1451288 <col:62, line:373:3>
|       | |-DeclStmt 0x5608c14504d8 <line:355:5, col:15>
|       | | `-VarDecl 0x5608c1450438 <col:5, col:14> col:8 used str 'jv':'jv' cinit
|       | |   `-ImplicitCastExpr 0x5608c14504c0 <col:14> 'jv':'jv' <LValueToRValue>
|       | |     `-DeclRefExpr 0x5608c14504a0 <col:14> 'jv':'jv' lvalue ParmVar 0x5608c144f6c0 'a' 'jv':'jv'
|       | |-DeclStmt 0x5608c14505a0 <line:356:5, col:15>
|       | | `-VarDecl 0x5608c1450500 <col:5, col:14> col:8 used num 'jv':'jv' cinit
|       | |   `-ImplicitCastExpr 0x5608c1450588 <col:14> 'jv':'jv' <LValueToRValue>
|       | |     `-DeclRefExpr 0x5608c1450568 <col:14> 'jv':'jv' lvalue ParmVar 0x5608c144f738 'b' 'jv':'jv'
|       | |-IfStmt 0x5608c1450770 <line:357:5, line:360:5>
|       | | |-BinaryOperator 0x5608c1450640 <line:357:9, col:15> 'int' '=='
|       | | | |-ImplicitCastExpr 0x5608c1450610 <col:9> 'unsigned int' <IntegralCast>
|       | | | | `-ImplicitCastExpr 0x5608c14505f8 <col:9> 'jv_kind':'jv_kind' <LValueToRValue>
|       | | | |   `-DeclRefExpr 0x5608c14505b8 <col:9> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f8b0 'ak' 'jv_kind':'jv_kind'
|       | | | `-ImplicitCastExpr 0x5608c1450628 <col:15> 'unsigned int' <IntegralCast>
|       | | |   `-DeclRefExpr 0x5608c14505d8 <col:15> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|       | | `-CompoundStmt 0x5608c1450750 <col:31, line:360:5>
|       | |   |-BinaryOperator 0x5608c14506b8 <line:358:7, col:13> 'jv':'jv' '='
|       | |   | |-DeclRefExpr 0x5608c1450660 <col:7> 'jv':'jv' lvalue Var 0x5608c1450438 'str' 'jv':'jv'
|       | |   | `-ImplicitCastExpr 0x5608c14506a0 <col:13> 'jv':'jv' <LValueToRValue>
|       | |   |   `-DeclRefExpr 0x5608c1450680 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144f738 'b' 'jv':'jv'
|       | |   `-BinaryOperator 0x5608c1450730 <line:359:7, col:13> 'jv':'jv' '='
|       | |     |-DeclRefExpr 0x5608c14506d8 <col:7> 'jv':'jv' lvalue Var 0x5608c1450500 'num' 'jv':'jv'
|       | |     `-ImplicitCastExpr 0x5608c1450718 <col:13> 'jv':'jv' <LValueToRValue>
|       | |       `-DeclRefExpr 0x5608c14506f8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c144f6c0 'a' 'jv':'jv'
|       | |-DeclStmt 0x5608c1450860 <line:361:5, col:23>
|       | | `-VarDecl 0x5608c14507a0 <col:5, col:22> col:8 used res 'jv':'jv' nrvo cinit
|       | |   `-CallExpr 0x5608c1450840 <col:14, col:22> 'jv':'jv'
|       | |     `-ImplicitCastExpr 0x5608c1450828 <col:14> 'jv (*)(void)' <FunctionToPointerDecay>
|       | |       `-DeclRefExpr 0x5608c1450808 <col:14> 'jv (void)' Function 0x5608c13db090 'jv_null' 'jv (void)'
|       | |-DeclStmt 0x5608c14509a8 <line:362:5, col:33>
|       | | `-VarDecl 0x5608c1450890 <col:5, col:32> col:9 used n 'int' cinit
|       | |   `-ImplicitCastExpr 0x5608c1450990 <col:13, col:32> 'int' <FloatingToIntegral>
|       | |     `-CallExpr 0x5608c1450950 <col:13, col:32> 'double'
|       | |       |-ImplicitCastExpr 0x5608c1450938 <col:13> 'double (*)(jv)' <FunctionToPointerDecay>
|       | |       | `-DeclRefExpr 0x5608c14508f8 <col:13> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|       | |       `-ImplicitCastExpr 0x5608c1450978 <col:29> 'jv':'jv' <LValueToRValue>
|       | |         `-DeclRefExpr 0x5608c1450918 <col:29> 'jv':'jv' lvalue Var 0x5608c1450500 'num' 'jv':'jv'
|       | |-IfStmt 0x5608c14510e8 <line:363:5, line:369:5>
|       | | |-BinaryOperator 0x5608c1450a18 <line:363:9, col:13> 'int' '>'
|       | | | |-ImplicitCastExpr 0x5608c1450a00 <col:9> 'int' <LValueToRValue>
|       | | | | `-DeclRefExpr 0x5608c14509c0 <col:9> 'int' lvalue Var 0x5608c1450890 'n' 'int'
|       | | | `-IntegerLiteral 0x5608c14509e0 <col:13> 'int' 0
|       | | `-CompoundStmt 0x5608c14510c0 <col:16, line:369:5>
|       | |   |-DeclStmt 0x5608c1450bc0 <line:364:7, col:57>
|       | |   | `-VarDecl 0x5608c1450a48 <col:7, col:56> col:14 used alen 'size_t':'unsigned long' cinit
|       | |   |   `-ImplicitCastExpr 0x5608c1450ba8 <col:21, col:56> 'size_t':'unsigned long' <IntegralCast>
|       | |   |     `-CallExpr 0x5608c1450b80 <col:21, col:56> 'int'
|       | |   |       |-ImplicitCastExpr 0x5608c1450b68 <col:21> 'int (*)(jv)' <FunctionToPointerDecay>
|       | |   |       | `-DeclRefExpr 0x5608c1450ab0 <col:21> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|       | |   |       `-CallExpr 0x5608c1450b28 <col:44, col:55> 'jv':'jv'
|       | |   |         |-ImplicitCastExpr 0x5608c1450b10 <col:44> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | |   |         | `-DeclRefExpr 0x5608c1450ad0 <col:44> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | |   |         `-ImplicitCastExpr 0x5608c1450b50 <col:52> 'jv':'jv' <LValueToRValue>
|       | |   |           `-DeclRefExpr 0x5608c1450af0 <col:52> 'jv':'jv' lvalue Var 0x5608c1450438 'str' 'jv':'jv'
|       | |   |-BinaryOperator 0x5608c1450d70 <line:365:7, col:37> 'jv':'jv' '='
|       | |   | |-DeclRefExpr 0x5608c1450bd8 <col:7> 'jv':'jv' lvalue Var 0x5608c14507a0 'res' 'jv':'jv'
|       | |   | `-CallExpr 0x5608c1450d30 <col:13, col:37> 'jv':'jv'
|       | |   |   |-ImplicitCastExpr 0x5608c1450d18 <col:13> 'jv (*)(int)' <FunctionToPointerDecay>
|       | |   |   | `-DeclRefExpr 0x5608c1450bf8 <col:13> 'jv (int)' Function 0x5608c13de520 'jv_string_empty' 'jv (int)'
|       | |   |   `-ImplicitCastExpr 0x5608c1450d58 <col:29, col:36> 'int' <IntegralCast>
|       | |   |     `-BinaryOperator 0x5608c1450ca0 <col:29, col:36> 'unsigned long' '*'
|       | |   |       |-ImplicitCastExpr 0x5608c1450c58 <col:29> 'size_t':'unsigned long' <LValueToRValue>
|       | |   |       | `-DeclRefExpr 0x5608c1450c18 <col:29> 'size_t':'unsigned long' lvalue Var 0x5608c1450a48 'alen' 'size_t':'unsigned long'
|       | |   |       `-ImplicitCastExpr 0x5608c1450c88 <col:36> 'unsigned long' <IntegralCast>
|       | |   |         `-ImplicitCastExpr 0x5608c1450c70 <col:36> 'int' <LValueToRValue>
|       | |   |           `-DeclRefExpr 0x5608c1450c38 <col:36> 'int' lvalue Var 0x5608c1450890 'n' 'int'
|       | |   `-ForStmt 0x5608c1451088 <line:366:7, line:368:7>
|       | |     |-<<<NULL>>>
|       | |     |-<<<NULL>>>
|       | |     |-BinaryOperator 0x5608c1450de8 <line:366:14, col:18> 'int' '>'
|       | |     | |-ImplicitCastExpr 0x5608c1450dd0 <col:14> 'int' <LValueToRValue>
|       | |     | | `-DeclRefExpr 0x5608c1450d90 <col:14> 'int' lvalue Var 0x5608c1450890 'n' 'int'
|       | |     | `-IntegerLiteral 0x5608c1450db0 <col:18> 'int' 0
|       | |     |-UnaryOperator 0x5608c1450e28 <col:21, col:22> 'int' postfix '--'
|       | |     | `-DeclRefExpr 0x5608c1450e08 <col:21> 'int' lvalue Var 0x5608c1450890 'n' 'int'
|       | |     `-CompoundStmt 0x5608c1451070 <col:26, line:368:7>
|       | |       `-BinaryOperator 0x5608c1451050 <line:367:9, col:67> 'jv':'jv' '='
|       | |         |-DeclRefExpr 0x5608c1450e40 <col:9> 'jv':'jv' lvalue Var 0x5608c14507a0 'res' 'jv':'jv'
|       | |         `-CallExpr 0x5608c1450fd0 <col:15, col:67> 'jv':'jv'
|       | |           |-ImplicitCastExpr 0x5608c1450fb8 <col:15> 'jv (*)(jv, const char *, int)' <FunctionToPointerDecay>
|       | |           | `-DeclRefExpr 0x5608c1450e60 <col:15> 'jv (jv, const char *, int)' Function 0x5608c13e3ec8 'jv_string_append_buf' 'jv (jv, const char *, int)'
|       | |           |-ImplicitCastExpr 0x5608c1451008 <col:36> 'jv':'jv' <LValueToRValue>
|       | |           | `-DeclRefExpr 0x5608c1450e80 <col:36> 'jv':'jv' lvalue Var 0x5608c14507a0 'res' 'jv':'jv'
|       | |           |-CallExpr 0x5608c1450ef8 <col:41, col:60> 'const char *'
|       | |           | |-ImplicitCastExpr 0x5608c1450ee0 <col:41> 'const char *(*)(jv)' <FunctionToPointerDecay>
|       | |           | | `-DeclRefExpr 0x5608c1450ea0 <col:41> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|       | |           | `-ImplicitCastExpr 0x5608c1450f20 <col:57> 'jv':'jv' <LValueToRValue>
|       | |           |   `-DeclRefExpr 0x5608c1450ec0 <col:57> 'jv':'jv' lvalue Var 0x5608c1450438 'str' 'jv':'jv'
|       | |           `-ImplicitCastExpr 0x5608c1451038 <col:63> 'int' <IntegralCast>
|       | |             `-ImplicitCastExpr 0x5608c1451020 <col:63> 'size_t':'unsigned long' <LValueToRValue>
|       | |               `-DeclRefExpr 0x5608c1450f38 <col:63> 'size_t':'unsigned long' lvalue Var 0x5608c1450a48 'alen' 'size_t':'unsigned long'
|       | |-CallExpr 0x5608c1451160 <line:370:5, col:16> 'void'
|       | | |-ImplicitCastExpr 0x5608c1451148 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5608c1451108 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|       | | `-ImplicitCastExpr 0x5608c1451188 <col:13> 'jv':'jv' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5608c1451128 <col:13> 'jv':'jv' lvalue Var 0x5608c1450438 'str' 'jv':'jv'
|       | |-CallExpr 0x5608c14511f8 <line:371:5, col:16> 'void'
|       | | |-ImplicitCastExpr 0x5608c14511e0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5608c14511a0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|       | | `-ImplicitCastExpr 0x5608c1451220 <col:13> 'jv':'jv' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5608c14511c0 <col:13> 'jv':'jv' lvalue Var 0x5608c1450500 'num' 'jv':'jv'
|       | `-ReturnStmt 0x5608c1451270 <line:372:5, col:12>
|       |   `-ImplicitCastExpr 0x5608c1451258 <col:12> 'jv':'jv' <LValueToRValue>
|       |     `-DeclRefExpr 0x5608c1451238 <col:12> 'jv':'jv' lvalue Var 0x5608c14507a0 'res' 'jv':'jv'
|       `-IfStmt 0x5608c14516b8 <line:373:10, line:377:3> has_else
|         |-BinaryOperator 0x5608c1451430 <line:373:14, col:44> 'int' '&&'
|         | |-BinaryOperator 0x5608c1451368 <col:14, col:20> 'int' '=='
|         | | |-ImplicitCastExpr 0x5608c1451338 <col:14> 'unsigned int' <IntegralCast>
|         | | | `-ImplicitCastExpr 0x5608c1451320 <col:14> 'jv_kind':'jv_kind' <LValueToRValue>
|         | | |   `-DeclRefExpr 0x5608c14512e0 <col:14> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f8b0 'ak' 'jv_kind':'jv_kind'
|         | | `-ImplicitCastExpr 0x5608c1451350 <col:20> 'unsigned int' <IntegralCast>
|         | |   `-DeclRefExpr 0x5608c1451300 <col:20> 'int' EnumConstant 0x5608c13d0c20 'JV_KIND_OBJECT' 'int'
|         | `-BinaryOperator 0x5608c1451410 <col:38, col:44> 'int' '=='
|         |   |-ImplicitCastExpr 0x5608c14513e0 <col:38> 'unsigned int' <IntegralCast>
|         |   | `-ImplicitCastExpr 0x5608c14513c8 <col:38> 'jv_kind':'jv_kind' <LValueToRValue>
|         |   |   `-DeclRefExpr 0x5608c1451388 <col:38> 'jv_kind':'jv_kind' lvalue Var 0x5608c144f9d8 'bk' 'jv_kind':'jv_kind'
|         |   `-ImplicitCastExpr 0x5608c14513f8 <col:44> 'unsigned int' <IntegralCast>
|         |     `-DeclRefExpr 0x5608c14513a8 <col:44> 'int' EnumConstant 0x5608c13d0c20 'JV_KIND_OBJECT' 'int'
|         |-CompoundStmt 0x5608c1451538 <col:60, line:375:3>
|         | `-ReturnStmt 0x5608c1451528 <line:374:5, col:42>
|         |   `-CallExpr 0x5608c14514c8 <col:12, col:42> 'jv':'jv'
|         |     |-ImplicitCastExpr 0x5608c14514b0 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         |     | `-DeclRefExpr 0x5608c1451450 <col:12> 'jv (jv, jv)' Function 0x5608c13e5400 'jv_object_merge_recursive' 'jv (jv, jv)'
|         |     |-ImplicitCastExpr 0x5608c14514f8 <col:38> 'jv':'jv' <LValueToRValue>
|         |     | `-DeclRefExpr 0x5608c1451470 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c144f6c0 'a' 'jv':'jv'
|         |     `-ImplicitCastExpr 0x5608c1451510 <col:41> 'jv':'jv' <LValueToRValue>
|         |       `-DeclRefExpr 0x5608c1451490 <col:41> 'jv':'jv' lvalue ParmVar 0x5608c144f738 'b' 'jv':'jv'
|         `-CompoundStmt 0x5608c14516a0 <line:375:10, line:377:3>
|           `-ReturnStmt 0x5608c1451690 <line:376:5, col:52>
|             `-CallExpr 0x5608c14515f8 <col:12, col:52> 'jv':'jv'
|               |-ImplicitCastExpr 0x5608c14515e0 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5608c1451550 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|               |-ImplicitCastExpr 0x5608c1451630 <col:24> 'jv':'jv' <LValueToRValue>
|               | `-DeclRefExpr 0x5608c1451570 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c144f6c0 'a' 'jv':'jv'
|               |-ImplicitCastExpr 0x5608c1451648 <col:27> 'jv':'jv' <LValueToRValue>
|               | `-DeclRefExpr 0x5608c1451590 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c144f738 'b' 'jv':'jv'
|               `-ImplicitCastExpr 0x5608c1451678 <col:30> 'const char *' <NoOp>
|                 `-ImplicitCastExpr 0x5608c1451660 <col:30> 'char *' <ArrayToPointerDecay>
|                   `-StringLiteral 0x5608c14515b0 <col:30> 'char [21]' lvalue "cannot be multiplied"
|-FunctionDecl 0x5608c1451998 <line:380:1, line:394:1> line:380:11 used f_divide 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1451788 <col:20, col:30> col:30 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1451800 <col:34, col:37> col:37 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1451878 <col:44, col:47> col:47 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14518f0 <col:50, col:53> col:53 used b 'jv':'jv'
| `-CompoundStmt 0x5608c14528c0 <col:56, line:394:1>
|   |-CallExpr 0x5608c1451ab0 <line:381:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1451a98 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1451a58 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1451ad8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1451a78 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1451800 'input' 'jv':'jv'
|   `-IfStmt 0x5608c1452890 <line:382:3, line:393:3> has_else
|     |-BinaryOperator 0x5608c1451d10 <line:382:7, col:61> 'int' '&&'
|     | |-BinaryOperator 0x5608c1451bd8 <col:7, col:25> 'int' '=='
|     | | |-ImplicitCastExpr 0x5608c1451ba8 <col:7, col:20> 'unsigned int' <IntegralCast>
|     | | | `-CallExpr 0x5608c1451b48 <col:7, col:20> 'jv_kind':'jv_kind'
|     | | |   |-ImplicitCastExpr 0x5608c1451b30 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | | |   | `-DeclRefExpr 0x5608c1451af0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | | |   `-ImplicitCastExpr 0x5608c1451b70 <col:19> 'jv':'jv' <LValueToRValue>
|     | | |     `-DeclRefExpr 0x5608c1451b10 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1451878 'a' 'jv':'jv'
|     | | `-ImplicitCastExpr 0x5608c1451bc0 <col:25> 'unsigned int' <IntegralCast>
|     | |   `-DeclRefExpr 0x5608c1451b88 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|     | `-BinaryOperator 0x5608c1451ce0 <col:43, col:61> 'int' '=='
|     |   |-ImplicitCastExpr 0x5608c1451cb0 <col:43, col:56> 'unsigned int' <IntegralCast>
|     |   | `-CallExpr 0x5608c1451c50 <col:43, col:56> 'jv_kind':'jv_kind'
|     |   |   |-ImplicitCastExpr 0x5608c1451c38 <col:43> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5608c1451bf8 <col:43> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     |   |   `-ImplicitCastExpr 0x5608c1451c78 <col:55> 'jv':'jv' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x5608c1451c18 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c14518f0 'b' 'jv':'jv'
|     |   `-ImplicitCastExpr 0x5608c1451cc8 <col:61> 'unsigned int' <IntegralCast>
|     |     `-DeclRefExpr 0x5608c1451c90 <col:61> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|     |-CompoundStmt 0x5608c1452390 <col:77, line:389:3>
|     | |-IfStmt 0x5608c1451fb0 <line:383:5, line:384:79>
|     | | |-BinaryOperator 0x5608c1451de8 <line:383:9, col:31> 'int' '=='
|     | | | |-CallExpr 0x5608c1451d88 <col:9, col:26> 'double'
|     | | | | |-ImplicitCastExpr 0x5608c1451d70 <col:9> 'double (*)(jv)' <FunctionToPointerDecay>
|     | | | | | `-DeclRefExpr 0x5608c1451d30 <col:9> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | | | | `-ImplicitCastExpr 0x5608c1451db0 <col:25> 'jv':'jv' <LValueToRValue>
|     | | | |   `-DeclRefExpr 0x5608c1451d50 <col:25> 'jv':'jv' lvalue ParmVar 0x5608c14518f0 'b' 'jv':'jv'
|     | | | `-FloatingLiteral 0x5608c1451dc8 <col:31> 'double' 0.000000e+00
|     | | `-ReturnStmt 0x5608c1451fa0 <line:384:7, col:79>
|     | |   `-CallExpr 0x5608c1451f08 <col:14, col:79> 'jv':'jv'
|     | |     |-ImplicitCastExpr 0x5608c1451ef0 <col:14> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x5608c1451e08 <col:14> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|     | |     |-ImplicitCastExpr 0x5608c1451f40 <col:26> 'jv':'jv' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x5608c1451e28 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1451878 'a' 'jv':'jv'
|     | |     |-ImplicitCastExpr 0x5608c1451f58 <col:29> 'jv':'jv' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x5608c1451e48 <col:29> 'jv':'jv' lvalue ParmVar 0x5608c14518f0 'b' 'jv':'jv'
|     | |     `-ImplicitCastExpr 0x5608c1451f88 <col:32> 'const char *' <NoOp>
|     | |       `-ImplicitCastExpr 0x5608c1451f70 <col:32> 'char *' <ArrayToPointerDecay>
|     | |         `-StringLiteral 0x5608c1451ea8 <col:32> 'char [46]' lvalue "cannot be divided because the divisor is zero"
|     | |-DeclStmt 0x5608c14521f8 <line:385:5, col:62>
|     | | `-VarDecl 0x5608c1451fe0 <col:5, col:61> col:8 used r 'jv':'jv' cinit
|     | |   `-CallExpr 0x5608c14521d0 <col:12, col:61> 'jv':'jv'
|     | |     |-ImplicitCastExpr 0x5608c14521b8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x5608c1452048 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|     | |     `-BinaryOperator 0x5608c1452198 <col:22, col:60> 'double' '/'
|     | |       |-CallExpr 0x5608c14520c0 <col:22, col:39> 'double'
|     | |       | |-ImplicitCastExpr 0x5608c14520a8 <col:22> 'double (*)(jv)' <FunctionToPointerDecay>
|     | |       | | `-DeclRefExpr 0x5608c1452068 <col:22> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | |       | `-ImplicitCastExpr 0x5608c14520e8 <col:38> 'jv':'jv' <LValueToRValue>
|     | |       |   `-DeclRefExpr 0x5608c1452088 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c1451878 'a' 'jv':'jv'
|     | |       `-CallExpr 0x5608c1452158 <col:43, col:60> 'double'
|     | |         |-ImplicitCastExpr 0x5608c1452140 <col:43> 'double (*)(jv)' <FunctionToPointerDecay>
|     | |         | `-DeclRefExpr 0x5608c1452100 <col:43> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | |         `-ImplicitCastExpr 0x5608c1452180 <col:59> 'jv':'jv' <LValueToRValue>
|     | |           `-DeclRefExpr 0x5608c1452120 <col:59> 'jv':'jv' lvalue ParmVar 0x5608c14518f0 'b' 'jv':'jv'
|     | |-CallExpr 0x5608c1452268 <line:386:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c1452250 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c1452210 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c1452290 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c1452230 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1451878 'a' 'jv':'jv'
|     | |-CallExpr 0x5608c1452300 <line:387:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c14522e8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c14522a8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c1452328 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c14522c8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14518f0 'b' 'jv':'jv'
|     | `-ReturnStmt 0x5608c1452378 <line:388:5, col:12>
|     |   `-ImplicitCastExpr 0x5608c1452360 <col:12> 'jv':'jv' <LValueToRValue>
|     |     `-DeclRefExpr 0x5608c1452340 <col:12> 'jv':'jv' lvalue Var 0x5608c1451fe0 'r' 'jv':'jv'
|     `-IfStmt 0x5608c1452860 <line:389:10, line:393:3> has_else
|       |-BinaryOperator 0x5608c14525d8 <line:389:14, col:68> 'int' '&&'
|       | |-BinaryOperator 0x5608c14524b0 <col:14, col:32> 'int' '=='
|       | | |-ImplicitCastExpr 0x5608c1452480 <col:14, col:27> 'unsigned int' <IntegralCast>
|       | | | `-CallExpr 0x5608c1452420 <col:14, col:27> 'jv_kind':'jv_kind'
|       | | |   |-ImplicitCastExpr 0x5608c1452408 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|       | | |   | `-DeclRefExpr 0x5608c14523c8 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|       | | |   `-ImplicitCastExpr 0x5608c1452448 <col:26> 'jv':'jv' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x5608c14523e8 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1451878 'a' 'jv':'jv'
|       | | `-ImplicitCastExpr 0x5608c1452498 <col:32> 'unsigned int' <IntegralCast>
|       | |   `-DeclRefExpr 0x5608c1452460 <col:32> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|       | `-BinaryOperator 0x5608c14525b8 <col:50, col:68> 'int' '=='
|       |   |-ImplicitCastExpr 0x5608c1452588 <col:50, col:63> 'unsigned int' <IntegralCast>
|       |   | `-CallExpr 0x5608c1452528 <col:50, col:63> 'jv_kind':'jv_kind'
|       |   |   |-ImplicitCastExpr 0x5608c1452510 <col:50> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|       |   |   | `-DeclRefExpr 0x5608c14524d0 <col:50> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|       |   |   `-ImplicitCastExpr 0x5608c1452550 <col:62> 'jv':'jv' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x5608c14524f0 <col:62> 'jv':'jv' lvalue ParmVar 0x5608c14518f0 'b' 'jv':'jv'
|       |   `-ImplicitCastExpr 0x5608c14525a0 <col:68> 'unsigned int' <IntegralCast>
|       |     `-DeclRefExpr 0x5608c1452568 <col:68> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|       |-CompoundStmt 0x5608c14526e0 <col:84, line:391:3>
|       | `-ReturnStmt 0x5608c14526d0 <line:390:5, col:32>
|       |   `-CallExpr 0x5608c1452670 <col:12, col:32> 'jv':'jv'
|       |     |-ImplicitCastExpr 0x5608c1452658 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5608c14525f8 <col:12> 'jv (jv, jv)' Function 0x5608c13e42f8 'jv_string_split' 'jv (jv, jv)'
|       |     |-ImplicitCastExpr 0x5608c14526a0 <col:28> 'jv':'jv' <LValueToRValue>
|       |     | `-DeclRefExpr 0x5608c1452618 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1451878 'a' 'jv':'jv'
|       |     `-ImplicitCastExpr 0x5608c14526b8 <col:31> 'jv':'jv' <LValueToRValue>
|       |       `-DeclRefExpr 0x5608c1452638 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c14518f0 'b' 'jv':'jv'
|       `-CompoundStmt 0x5608c1452848 <line:391:10, line:393:3>
|         `-ReturnStmt 0x5608c1452838 <line:392:5, col:49>
|           `-CallExpr 0x5608c14527a0 <col:12, col:49> 'jv':'jv'
|             |-ImplicitCastExpr 0x5608c1452788 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5608c14526f8 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|             |-ImplicitCastExpr 0x5608c14527d8 <col:24> 'jv':'jv' <LValueToRValue>
|             | `-DeclRefExpr 0x5608c1452718 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c1451878 'a' 'jv':'jv'
|             |-ImplicitCastExpr 0x5608c14527f0 <col:27> 'jv':'jv' <LValueToRValue>
|             | `-DeclRefExpr 0x5608c1452738 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c14518f0 'b' 'jv':'jv'
|             `-ImplicitCastExpr 0x5608c1452820 <col:30> 'const char *' <NoOp>
|               `-ImplicitCastExpr 0x5608c1452808 <col:30> 'char *' <ArrayToPointerDecay>
|                 `-StringLiteral 0x5608c1452758 <col:30> 'char [18]' lvalue "cannot be divided"
|-FunctionDecl 0x5608c1452b00 <line:396:1, line:408:1> line:396:11 used f_mod 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c14528f0 <col:17, col:27> col:27 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1452968 <col:31, col:34> col:34 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c14529e0 <col:41, col:44> col:44 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1452a58 <col:47, col:50> col:50 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1453808 <col:53, line:408:1>
|   |-CallExpr 0x5608c1452c18 <line:397:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1452c00 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1452bc0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1452c40 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1452be0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1452968 'input' 'jv':'jv'
|   `-IfStmt 0x5608c14537d8 <line:398:3, line:407:3> has_else
|     |-BinaryOperator 0x5608c1452e68 <line:398:7, col:61> 'int' '&&'
|     | |-BinaryOperator 0x5608c1452d40 <col:7, col:25> 'int' '=='
|     | | |-ImplicitCastExpr 0x5608c1452d10 <col:7, col:20> 'unsigned int' <IntegralCast>
|     | | | `-CallExpr 0x5608c1452cb0 <col:7, col:20> 'jv_kind':'jv_kind'
|     | | |   |-ImplicitCastExpr 0x5608c1452c98 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | | |   | `-DeclRefExpr 0x5608c1452c58 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | | |   `-ImplicitCastExpr 0x5608c1452cd8 <col:19> 'jv':'jv' <LValueToRValue>
|     | | |     `-DeclRefExpr 0x5608c1452c78 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14529e0 'a' 'jv':'jv'
|     | | `-ImplicitCastExpr 0x5608c1452d28 <col:25> 'unsigned int' <IntegralCast>
|     | |   `-DeclRefExpr 0x5608c1452cf0 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|     | `-BinaryOperator 0x5608c1452e48 <col:43, col:61> 'int' '=='
|     |   |-ImplicitCastExpr 0x5608c1452e18 <col:43, col:56> 'unsigned int' <IntegralCast>
|     |   | `-CallExpr 0x5608c1452db8 <col:43, col:56> 'jv_kind':'jv_kind'
|     |   |   |-ImplicitCastExpr 0x5608c1452da0 <col:43> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5608c1452d60 <col:43> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     |   |   `-ImplicitCastExpr 0x5608c1452de0 <col:55> 'jv':'jv' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x5608c1452d80 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c1452a58 'b' 'jv':'jv'
|     |   `-ImplicitCastExpr 0x5608c1452e30 <col:61> 'unsigned int' <IntegralCast>
|     |     `-DeclRefExpr 0x5608c1452df8 <col:61> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|     |-CompoundStmt 0x5608c14535f8 <col:77, line:405:3>
|     | |-IfStmt 0x5608c1453190 <line:399:5, line:400:91>
|     | | |-BinaryOperator 0x5608c1452fb8 <line:399:9, col:41> 'int' '=='
|     | | | |-CStyleCastExpr 0x5608c1452f58 <col:9, col:36> 'intmax_t':'long' <FloatingToIntegral>
|     | | | | `-CallExpr 0x5608c1452f08 <col:19, col:36> 'double'
|     | | | |   |-ImplicitCastExpr 0x5608c1452ef0 <col:19> 'double (*)(jv)' <FunctionToPointerDecay>
|     | | | |   | `-DeclRefExpr 0x5608c1452eb0 <col:19> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | | | |   `-ImplicitCastExpr 0x5608c1452f30 <col:35> 'jv':'jv' <LValueToRValue>
|     | | | |     `-DeclRefExpr 0x5608c1452ed0 <col:35> 'jv':'jv' lvalue ParmVar 0x5608c1452a58 'b' 'jv':'jv'
|     | | | `-ImplicitCastExpr 0x5608c1452fa0 <col:41> 'long' <IntegralCast>
|     | | |   `-IntegerLiteral 0x5608c1452f80 <col:41> 'int' 0
|     | | `-ReturnStmt 0x5608c1453180 <line:400:7, col:91>
|     | |   `-CallExpr 0x5608c14530e8 <col:14, col:91> 'jv':'jv'
|     | |     |-ImplicitCastExpr 0x5608c14530d0 <col:14> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x5608c1452fd8 <col:14> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|     | |     |-ImplicitCastExpr 0x5608c1453120 <col:26> 'jv':'jv' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x5608c1452ff8 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14529e0 'a' 'jv':'jv'
|     | |     |-ImplicitCastExpr 0x5608c1453138 <col:29> 'jv':'jv' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x5608c1453018 <col:29> 'jv':'jv' lvalue ParmVar 0x5608c1452a58 'b' 'jv':'jv'
|     | |     `-ImplicitCastExpr 0x5608c1453168 <col:32> 'const char *' <NoOp>
|     | |       `-ImplicitCastExpr 0x5608c1453150 <col:32> 'char *' <ArrayToPointerDecay>
|     | |         `-StringLiteral 0x5608c1453078 <col:32> 'char [58]' lvalue "cannot be divided (remainder) because the divisor is zero"
|     | |-DeclStmt 0x5608c1453460 <line:401:5, col:82>
|     | | `-VarDecl 0x5608c14531c0 <col:5, col:81> col:8 used r 'jv':'jv' cinit
|     | |   `-CallExpr 0x5608c1453420 <col:12, col:81> 'jv':'jv'
|     | |     |-ImplicitCastExpr 0x5608c1453408 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x5608c1453228 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|     | |     `-ImplicitCastExpr 0x5608c1453448 <col:22, col:80> 'double' <IntegralToFloating>
|     | |       `-BinaryOperator 0x5608c14533e8 <col:22, col:80> 'long' '%'
|     | |         |-CStyleCastExpr 0x5608c14532f0 <col:22, col:49> 'intmax_t':'long' <FloatingToIntegral>
|     | |         | `-CallExpr 0x5608c14532a0 <col:32, col:49> 'double'
|     | |         |   |-ImplicitCastExpr 0x5608c1453288 <col:32> 'double (*)(jv)' <FunctionToPointerDecay>
|     | |         |   | `-DeclRefExpr 0x5608c1453248 <col:32> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | |         |   `-ImplicitCastExpr 0x5608c14532c8 <col:48> 'jv':'jv' <LValueToRValue>
|     | |         |     `-DeclRefExpr 0x5608c1453268 <col:48> 'jv':'jv' lvalue ParmVar 0x5608c14529e0 'a' 'jv':'jv'
|     | |         `-CStyleCastExpr 0x5608c14533c0 <col:53, col:80> 'intmax_t':'long' <FloatingToIntegral>
|     | |           `-CallExpr 0x5608c1453370 <col:63, col:80> 'double'
|     | |             |-ImplicitCastExpr 0x5608c1453358 <col:63> 'double (*)(jv)' <FunctionToPointerDecay>
|     | |             | `-DeclRefExpr 0x5608c1453318 <col:63> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|     | |             `-ImplicitCastExpr 0x5608c1453398 <col:79> 'jv':'jv' <LValueToRValue>
|     | |               `-DeclRefExpr 0x5608c1453338 <col:79> 'jv':'jv' lvalue ParmVar 0x5608c1452a58 'b' 'jv':'jv'
|     | |-CallExpr 0x5608c14534d0 <line:402:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c14534b8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c1453478 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c14534f8 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c1453498 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14529e0 'a' 'jv':'jv'
|     | |-CallExpr 0x5608c1453568 <line:403:5, col:14> 'void'
|     | | |-ImplicitCastExpr 0x5608c1453550 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c1453510 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c1453590 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c1453530 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1452a58 'b' 'jv':'jv'
|     | `-ReturnStmt 0x5608c14535e0 <line:404:5, col:12>
|     |   `-ImplicitCastExpr 0x5608c14535c8 <col:12> 'jv':'jv' <LValueToRValue>
|     |     `-DeclRefExpr 0x5608c14535a8 <col:12> 'jv':'jv' lvalue Var 0x5608c14531c0 'r' 'jv':'jv'
|     `-CompoundStmt 0x5608c14537c0 <line:405:10, line:407:3>
|       `-ReturnStmt 0x5608c14537b0 <line:406:5, col:61>
|         `-CallExpr 0x5608c1453718 <col:12, col:61> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c1453700 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c1453630 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|           |-ImplicitCastExpr 0x5608c1453750 <col:24> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c1453650 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c14529e0 'a' 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c1453768 <col:27> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c1453670 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1452a58 'b' 'jv':'jv'
|           `-ImplicitCastExpr 0x5608c1453798 <col:30> 'const char *' <NoOp>
|             `-ImplicitCastExpr 0x5608c1453780 <col:30> 'char *' <ArrayToPointerDecay>
|               `-StringLiteral 0x5608c14536c8 <col:30> 'char [30]' lvalue "cannot be divided (remainder)"
|-FunctionDecl 0x5608c1453a48 <line:410:1, line:413:1> line:410:11 used f_equal 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1453838 <col:19, col:29> col:29 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14538b0 <col:33, col:36> col:36 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1453928 <col:43, col:46> col:46 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14539a0 <col:49, col:52> col:52 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1453ce8 <col:55, line:413:1>
|   |-CallExpr 0x5608c1453b60 <line:411:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1453b48 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1453b08 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1453b88 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1453b28 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14538b0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1453cd8 <line:412:3, col:32>
|     `-CallExpr 0x5608c1453cb0 <col:10, col:32> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1453c98 <col:10> 'jv (*)(int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1453ba0 <col:10> 'jv (int)' Function 0x5608c13db4a8 'jv_bool' 'jv (int)'
|       `-CallExpr 0x5608c1453c38 <col:18, col:31> 'int'
|         |-ImplicitCastExpr 0x5608c1453c20 <col:18> 'int (*)(jv, jv)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c1453bc0 <col:18> 'int (jv, jv)' Function 0x5608c13d20e0 'jv_equal' 'int (jv, jv)'
|         |-ImplicitCastExpr 0x5608c1453c68 <col:27> 'jv':'jv' <LValueToRValue>
|         | `-DeclRefExpr 0x5608c1453be0 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1453928 'a' 'jv':'jv'
|         `-ImplicitCastExpr 0x5608c1453c80 <col:30> 'jv':'jv' <LValueToRValue>
|           `-DeclRefExpr 0x5608c1453c00 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c14539a0 'b' 'jv':'jv'
|-FunctionDecl 0x5608c1453f28 <line:415:1, line:418:1> line:415:11 used f_notequal 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1453d18 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1453d90 <col:36, col:39> col:39 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1453e08 <col:46, col:49> col:49 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1453e80 <col:52, col:55> col:55 used b 'jv':'jv'
| `-CompoundStmt 0x5608c14541e0 <col:58, line:418:1>
|   |-CallExpr 0x5608c1454040 <line:416:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1454028 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1453fe8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1454068 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1454008 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1453d90 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14541d0 <line:417:3, col:33>
|     `-CallExpr 0x5608c14541a8 <col:10, col:33> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1454190 <col:10> 'jv (*)(int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1454080 <col:10> 'jv (int)' Function 0x5608c13db4a8 'jv_bool' 'jv (int)'
|       `-UnaryOperator 0x5608c1454178 <col:18, col:32> 'int' prefix '!' cannot overflow
|         `-CallExpr 0x5608c1454118 <col:19, col:32> 'int'
|           |-ImplicitCastExpr 0x5608c1454100 <col:19> 'int (*)(jv, jv)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c14540a0 <col:19> 'int (jv, jv)' Function 0x5608c13d20e0 'jv_equal' 'int (jv, jv)'
|           |-ImplicitCastExpr 0x5608c1454148 <col:28> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c14540c0 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1453e08 'a' 'jv':'jv'
|           `-ImplicitCastExpr 0x5608c1454160 <col:31> 'jv':'jv' <LValueToRValue>
|             `-DeclRefExpr 0x5608c14540e0 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c1453e80 'b' 'jv':'jv'
|-EnumDecl 0x5608c1454200 <line:420:1, line:425:1> line:420:6 cmp_op
| |-EnumConstantDecl 0x5608c14542c0 <line:421:3> col:3 referenced CMP_OP_LESS 'int'
| |-EnumConstantDecl 0x5608c1454310 <line:422:3> col:3 referenced CMP_OP_GREATER 'int'
| |-EnumConstantDecl 0x5608c1454360 <line:423:3> col:3 referenced CMP_OP_LESSEQ 'int'
| `-EnumConstantDecl 0x5608c14543b0 <line:424:3> col:3 referenced CMP_OP_GREATEREQ 'int'
|-FunctionDecl 0x5608c1454708 <line:427:1, line:434:1> line:427:11 used order_cmp 'jv (jv, jv, jv, enum cmp_op)' static
| |-ParmVarDecl 0x5608c1454410 <col:21, col:24> col:24 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1454488 <col:31, col:34> col:34 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1454500 <col:37, col:40> col:40 used b 'jv':'jv'
| |-ParmVarDecl 0x5608c14545c0 <col:43, col:55> col:55 used op 'enum cmp_op':'enum cmp_op'
| `-CompoundStmt 0x5608c1455020 <col:59, line:434:1>
|   |-CallExpr 0x5608c1454820 <line:428:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1454808 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14547c8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1454848 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14547e8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1454410 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c14549b8 <line:429:3, col:23>
|   | `-VarDecl 0x5608c1454878 <col:3, col:22> col:7 used r 'int' cinit
|   |   `-CallExpr 0x5608c1454958 <col:11, col:22> 'int'
|   |     |-ImplicitCastExpr 0x5608c1454940 <col:11> 'int (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14548e0 <col:11> 'int (jv, jv)' Function 0x5608c13f60d8 'jv_cmp' 'int (jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c1454988 <col:18> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c1454900 <col:18> 'jv':'jv' lvalue ParmVar 0x5608c1454488 'a' 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c14549a0 <col:21> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1454920 <col:21> 'jv':'jv' lvalue ParmVar 0x5608c1454500 'b' 'jv':'jv'
|   `-ReturnStmt 0x5608c1455010 <line:430:3, line:433:49>
|     `-CallExpr 0x5608c1454fe8 <line:430:10, line:433:49> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1454fd0 <line:430:10> 'jv (*)(int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14549d0 <col:10> 'jv (int)' Function 0x5608c13db4a8 'jv_bool' 'jv (int)'
|       `-BinaryOperator 0x5608c1454fb0 <col:18, line:433:48> 'int' '||'
|         |-BinaryOperator 0x5608c1454e30 <line:430:18, line:432:51> 'int' '||'
|         | |-BinaryOperator 0x5608c1454cb0 <line:430:18, line:431:48> 'int' '||'
|         | | |-ParenExpr 0x5608c1454b30 <line:430:18, col:45> 'int'
|         | | | `-BinaryOperator 0x5608c1454b10 <col:19, col:44> 'int' '&&'
|         | | |   |-BinaryOperator 0x5608c1454a78 <col:19, col:25> 'int' '=='
|         | | |   | |-ImplicitCastExpr 0x5608c1454a48 <col:19> 'unsigned int' <IntegralCast>
|         | | |   | | `-ImplicitCastExpr 0x5608c1454a30 <col:19> 'enum cmp_op':'enum cmp_op' <LValueToRValue>
|         | | |   | |   `-DeclRefExpr 0x5608c14549f0 <col:19> 'enum cmp_op':'enum cmp_op' lvalue ParmVar 0x5608c14545c0 'op' 'enum cmp_op':'enum cmp_op'
|         | | |   | `-ImplicitCastExpr 0x5608c1454a60 <col:25> 'unsigned int' <IntegralCast>
|         | | |   |   `-DeclRefExpr 0x5608c1454a10 <col:25> 'int' EnumConstant 0x5608c14542c0 'CMP_OP_LESS' 'int'
|         | | |   `-BinaryOperator 0x5608c1454af0 <col:40, col:44> 'int' '<'
|         | | |     |-ImplicitCastExpr 0x5608c1454ad8 <col:40> 'int' <LValueToRValue>
|         | | |     | `-DeclRefExpr 0x5608c1454a98 <col:40> 'int' lvalue Var 0x5608c1454878 'r' 'int'
|         | | |     `-IntegerLiteral 0x5608c1454ab8 <col:44> 'int' 0
|         | | `-ParenExpr 0x5608c1454c90 <line:431:18, col:48> 'int'
|         | |   `-BinaryOperator 0x5608c1454c70 <col:19, col:47> 'int' '&&'
|         | |     |-BinaryOperator 0x5608c1454bd8 <col:19, col:25> 'int' '=='
|         | |     | |-ImplicitCastExpr 0x5608c1454ba8 <col:19> 'unsigned int' <IntegralCast>
|         | |     | | `-ImplicitCastExpr 0x5608c1454b90 <col:19> 'enum cmp_op':'enum cmp_op' <LValueToRValue>
|         | |     | |   `-DeclRefExpr 0x5608c1454b50 <col:19> 'enum cmp_op':'enum cmp_op' lvalue ParmVar 0x5608c14545c0 'op' 'enum cmp_op':'enum cmp_op'
|         | |     | `-ImplicitCastExpr 0x5608c1454bc0 <col:25> 'unsigned int' <IntegralCast>
|         | |     |   `-DeclRefExpr 0x5608c1454b70 <col:25> 'int' EnumConstant 0x5608c1454360 'CMP_OP_LESSEQ' 'int'
|         | |     `-BinaryOperator 0x5608c1454c50 <col:42, col:47> 'int' '<='
|         | |       |-ImplicitCastExpr 0x5608c1454c38 <col:42> 'int' <LValueToRValue>
|         | |       | `-DeclRefExpr 0x5608c1454bf8 <col:42> 'int' lvalue Var 0x5608c1454878 'r' 'int'
|         | |       `-IntegerLiteral 0x5608c1454c18 <col:47> 'int' 0
|         | `-ParenExpr 0x5608c1454e10 <line:432:18, col:51> 'int'
|         |   `-BinaryOperator 0x5608c1454df0 <col:19, col:50> 'int' '&&'
|         |     |-BinaryOperator 0x5608c1454d58 <col:19, col:25> 'int' '=='
|         |     | |-ImplicitCastExpr 0x5608c1454d28 <col:19> 'unsigned int' <IntegralCast>
|         |     | | `-ImplicitCastExpr 0x5608c1454d10 <col:19> 'enum cmp_op':'enum cmp_op' <LValueToRValue>
|         |     | |   `-DeclRefExpr 0x5608c1454cd0 <col:19> 'enum cmp_op':'enum cmp_op' lvalue ParmVar 0x5608c14545c0 'op' 'enum cmp_op':'enum cmp_op'
|         |     | `-ImplicitCastExpr 0x5608c1454d40 <col:25> 'unsigned int' <IntegralCast>
|         |     |   `-DeclRefExpr 0x5608c1454cf0 <col:25> 'int' EnumConstant 0x5608c14543b0 'CMP_OP_GREATEREQ' 'int'
|         |     `-BinaryOperator 0x5608c1454dd0 <col:45, col:50> 'int' '>='
|         |       |-ImplicitCastExpr 0x5608c1454db8 <col:45> 'int' <LValueToRValue>
|         |       | `-DeclRefExpr 0x5608c1454d78 <col:45> 'int' lvalue Var 0x5608c1454878 'r' 'int'
|         |       `-IntegerLiteral 0x5608c1454d98 <col:50> 'int' 0
|         `-ParenExpr 0x5608c1454f90 <line:433:18, col:48> 'int'
|           `-BinaryOperator 0x5608c1454f70 <col:19, col:47> 'int' '&&'
|             |-BinaryOperator 0x5608c1454ed8 <col:19, col:25> 'int' '=='
|             | |-ImplicitCastExpr 0x5608c1454ea8 <col:19> 'unsigned int' <IntegralCast>
|             | | `-ImplicitCastExpr 0x5608c1454e90 <col:19> 'enum cmp_op':'enum cmp_op' <LValueToRValue>
|             | |   `-DeclRefExpr 0x5608c1454e50 <col:19> 'enum cmp_op':'enum cmp_op' lvalue ParmVar 0x5608c14545c0 'op' 'enum cmp_op':'enum cmp_op'
|             | `-ImplicitCastExpr 0x5608c1454ec0 <col:25> 'unsigned int' <IntegralCast>
|             |   `-DeclRefExpr 0x5608c1454e70 <col:25> 'int' EnumConstant 0x5608c1454310 'CMP_OP_GREATER' 'int'
|             `-BinaryOperator 0x5608c1454f50 <col:43, col:47> 'int' '>'
|               |-ImplicitCastExpr 0x5608c1454f38 <col:43> 'int' <LValueToRValue>
|               | `-DeclRefExpr 0x5608c1454ef8 <col:43> 'int' lvalue Var 0x5608c1454878 'r' 'int'
|               `-IntegerLiteral 0x5608c1454f18 <col:47> 'int' 0
|-FunctionDecl 0x5608c1455268 <line:436:1, line:438:1> line:436:11 used f_less 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1455058 <col:18, col:28> col:28 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14550d0 <col:32, col:35> col:35 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1455148 <col:42, col:45> col:45 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14551c0 <col:48, col:51> col:51 used b 'jv':'jv'
| `-CompoundStmt 0x5608c14554f0 <col:54, line:438:1>
|   `-ReturnStmt 0x5608c14554e0 <line:437:3, col:44>
|     `-CallExpr 0x5608c1455440 <col:10, col:44> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1455428 <col:10> 'jv (*)(jv, jv, jv, enum cmp_op)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1455328 <col:10> 'jv (jv, jv, jv, enum cmp_op)' Function 0x5608c1454708 'order_cmp' 'jv (jv, jv, jv, enum cmp_op)'
|       |-ImplicitCastExpr 0x5608c1455480 <col:20> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455348 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c14550d0 'input' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1455498 <col:27> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455368 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1455148 'a' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14554b0 <col:30> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455388 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c14551c0 'b' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c14554c8 <col:33> 'enum cmp_op':'enum cmp_op' <IntegralCast>
|         `-DeclRefExpr 0x5608c14553a8 <col:33> 'int' EnumConstant 0x5608c14542c0 'CMP_OP_LESS' 'int'
|-FunctionDecl 0x5608c1455728 <line:440:1, line:442:1> line:440:11 used f_greater 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1455518 <col:21, col:31> col:31 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1455590 <col:35, col:38> col:38 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1455608 <col:45, col:48> col:48 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1455680 <col:51, col:54> col:54 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1455950 <col:57, line:442:1>
|   `-ReturnStmt 0x5608c1455940 <line:441:3, col:47>
|     `-CallExpr 0x5608c14558a0 <col:10, col:47> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1455888 <col:10> 'jv (*)(jv, jv, jv, enum cmp_op)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14557e8 <col:10> 'jv (jv, jv, jv, enum cmp_op)' Function 0x5608c1454708 'order_cmp' 'jv (jv, jv, jv, enum cmp_op)'
|       |-ImplicitCastExpr 0x5608c14558e0 <col:20> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455808 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c1455590 'input' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14558f8 <col:27> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455828 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1455608 'a' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1455910 <col:30> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455848 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c1455680 'b' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c1455928 <col:33> 'enum cmp_op':'enum cmp_op' <IntegralCast>
|         `-DeclRefExpr 0x5608c1455868 <col:33> 'int' EnumConstant 0x5608c1454310 'CMP_OP_GREATER' 'int'
|-FunctionDecl 0x5608c1455b88 <line:444:1, line:446:1> line:444:11 used f_lesseq 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1455978 <col:20, col:30> col:30 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14559f0 <col:34, col:37> col:37 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1455a68 <col:44, col:47> col:47 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1455ae0 <col:50, col:53> col:53 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1455dd0 <col:56, line:446:1>
|   `-ReturnStmt 0x5608c1455dc0 <line:445:3, col:46>
|     `-CallExpr 0x5608c1455d20 <col:10, col:46> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1455ce8 <col:10> 'jv (*)(jv, jv, jv, enum cmp_op)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1455c48 <col:10> 'jv (jv, jv, jv, enum cmp_op)' Function 0x5608c1454708 'order_cmp' 'jv (jv, jv, jv, enum cmp_op)'
|       |-ImplicitCastExpr 0x5608c1455d60 <col:20> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455c68 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c14559f0 'input' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1455d78 <col:27> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455c88 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1455a68 'a' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1455d90 <col:30> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1455ca8 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c1455ae0 'b' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c1455da8 <col:33> 'enum cmp_op':'enum cmp_op' <IntegralCast>
|         `-DeclRefExpr 0x5608c1455cc8 <col:33> 'int' EnumConstant 0x5608c1454360 'CMP_OP_LESSEQ' 'int'
|-FunctionDecl 0x5608c1456008 <line:448:1, line:450:1> line:448:11 used f_greatereq 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1455df8 <col:23, col:33> col:33 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1455e70 <col:37, col:40> col:40 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1455ee8 <col:47, col:50> col:50 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1455f60 <col:53, col:56> col:56 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1456230 <col:59, line:450:1>
|   `-ReturnStmt 0x5608c1456220 <line:449:3, col:49>
|     `-CallExpr 0x5608c1456180 <col:10, col:49> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1456168 <col:10> 'jv (*)(jv, jv, jv, enum cmp_op)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14560c8 <col:10> 'jv (jv, jv, jv, enum cmp_op)' Function 0x5608c1454708 'order_cmp' 'jv (jv, jv, jv, enum cmp_op)'
|       |-ImplicitCastExpr 0x5608c14561c0 <col:20> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c14560e8 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c1455e70 'input' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14561d8 <col:27> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1456108 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1455ee8 'a' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14561f0 <col:30> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1456128 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c1455f60 'b' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c1456208 <col:33> 'enum cmp_op':'enum cmp_op' <IntegralCast>
|         `-DeclRefExpr 0x5608c1456148 <col:33> 'int' EnumConstant 0x5608c14543b0 'CMP_OP_GREATEREQ' 'int'
|-FunctionDecl 0x5608c14563e8 <line:452:1, line:458:1> line:452:11 used f_contains 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c1456258 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14562d0 <col:36, col:39> col:39 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1456348 <col:42, col:45> col:45 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1456960 <col:48, line:458:1>
|   `-IfStmt 0x5608c1456930 <line:453:3, line:457:3> has_else
|     |-BinaryOperator 0x5608c1456600 <line:453:7, col:38> 'int' '=='
|     | |-ImplicitCastExpr 0x5608c14565d0 <col:7, col:20> 'unsigned int' <IntegralCast>
|     | | `-CallExpr 0x5608c14564f8 <col:7, col:20> 'jv_kind':'jv_kind'
|     | |   |-ImplicitCastExpr 0x5608c14564e0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x5608c14564a0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | |   `-ImplicitCastExpr 0x5608c1456520 <col:19> 'jv':'jv' <LValueToRValue>
|     | |     `-DeclRefExpr 0x5608c14564c0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14562d0 'a' 'jv':'jv'
|     | `-ImplicitCastExpr 0x5608c14565e8 <col:25, col:38> 'unsigned int' <IntegralCast>
|     |   `-CallExpr 0x5608c1456590 <col:25, col:38> 'jv_kind':'jv_kind'
|     |     |-ImplicitCastExpr 0x5608c1456578 <col:25> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c1456538 <col:25> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     |     `-ImplicitCastExpr 0x5608c14565b8 <col:37> 'jv':'jv' <LValueToRValue>
|     |       `-DeclRefExpr 0x5608c1456558 <col:37> 'jv':'jv' lvalue ParmVar 0x5608c1456348 'b' 'jv':'jv'
|     |-CompoundStmt 0x5608c1456768 <col:41, line:455:3>
|     | `-ReturnStmt 0x5608c1456758 <line:454:5, col:37>
|     |   `-CallExpr 0x5608c1456730 <col:12, col:37> 'jv':'jv'
|     |     |-ImplicitCastExpr 0x5608c1456718 <col:12> 'jv (*)(int)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c1456620 <col:12> 'jv (int)' Function 0x5608c13db4a8 'jv_bool' 'jv (int)'
|     |     `-CallExpr 0x5608c14566b8 <col:20, col:36> 'int'
|     |       |-ImplicitCastExpr 0x5608c14566a0 <col:20> 'int (*)(jv, jv)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x5608c1456640 <col:20> 'int (jv, jv)' Function 0x5608c13da9d0 'jv_contains' 'int (jv, jv)'
|     |       |-ImplicitCastExpr 0x5608c14566e8 <col:32> 'jv':'jv' <LValueToRValue>
|     |       | `-DeclRefExpr 0x5608c1456660 <col:32> 'jv':'jv' lvalue ParmVar 0x5608c14562d0 'a' 'jv':'jv'
|     |       `-ImplicitCastExpr 0x5608c1456700 <col:35> 'jv':'jv' <LValueToRValue>
|     |         `-DeclRefExpr 0x5608c1456680 <col:35> 'jv':'jv' lvalue ParmVar 0x5608c1456348 'b' 'jv':'jv'
|     `-CompoundStmt 0x5608c1456918 <line:455:10, line:457:3>
|       `-ReturnStmt 0x5608c1456908 <line:456:5, col:69>
|         `-CallExpr 0x5608c1456870 <col:12, col:69> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c1456858 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c1456780 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|           |-ImplicitCastExpr 0x5608c14568a8 <col:24> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c14567a0 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c14562d0 'a' 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c14568c0 <col:27> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c14567c0 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1456348 'b' 'jv':'jv'
|           `-ImplicitCastExpr 0x5608c14568f0 <col:30> 'const char *' <NoOp>
|             `-ImplicitCastExpr 0x5608c14568d8 <col:30> 'char *' <ArrayToPointerDecay>
|               `-StringLiteral 0x5608c1456818 <col:30> 'char [38]' lvalue "cannot have their containment checked"
|-FunctionDecl 0x5608c1456a98 <line:460:1, line:462:1> line:460:11 used f_dump 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1456988 <col:18, col:28> col:28 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1456a00 <col:32, col:35> col:35 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1456c18 <col:42, line:462:1>
|   `-ReturnStmt 0x5608c1456c08 <line:461:3, col:33>
|     `-CallExpr 0x5608c1456bc0 <col:10, col:33> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1456ba8 <col:10> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1456b48 <col:10> 'jv (jv, int)' Function 0x5608c13e7f68 'jv_dump_string' 'jv (jv, int)'
|       |-ImplicitCastExpr 0x5608c1456bf0 <col:25> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1456b68 <col:25> 'jv':'jv' lvalue ParmVar 0x5608c1456a00 'input' 'jv':'jv'
|       `-IntegerLiteral 0x5608c1456b88 <col:32> 'int' 0
|-FunctionDecl 0x5608c1456d50 <line:464:1, line:471:1> line:464:11 used f_json_parse 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1456c40 <col:24, col:34> col:34 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1456cb8 <col:38, col:41> col:41 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14573f0 <col:48, line:471:1>
|   |-IfStmt 0x5608c1457060 <line:465:3, line:466:58>
|   | |-BinaryOperator 0x5608c1456ee8 <line:465:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1456eb8 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1456e58 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1456e40 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1456e00 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1456e80 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1456e20 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1456cb8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1456ed0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1456e98 <col:29> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-ReturnStmt 0x5608c1457050 <line:466:5, col:58>
|   |   `-CallExpr 0x5608c1456fd8 <col:12, col:58> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1456fc0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1456f08 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |     |-ImplicitCastExpr 0x5608c1457008 <col:23> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c1456f28 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1456cb8 'input' 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c1457038 <col:30> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x5608c1457020 <col:30> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x5608c1456f88 <col:30> 'char [27]' lvalue "only strings can be parsed"
|   |-DeclStmt 0x5608c14572f0 <line:467:3, line:468:66>
|   | `-VarDecl 0x5608c1457090 <line:467:3, line:468:65> line:467:6 used res 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14572c0 <col:12, line:468:65> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14572a8 <line:467:12> 'jv (*)(const char *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14570f8 <col:12> 'jv (const char *, int)' Function 0x5608c13e8800 'jv_parse_sized' 'jv (const char *, int)'
|   |     |-CallExpr 0x5608c1457170 <col:27, col:48> 'const char *'
|   |     | |-ImplicitCastExpr 0x5608c1457158 <col:27> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c1457118 <col:27> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     | `-ImplicitCastExpr 0x5608c1457198 <col:43> 'jv':'jv' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c1457138 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1456cb8 'input' 'jv':'jv'
|   |     `-CallExpr 0x5608c1457280 <line:468:27, col:64> 'int'
|   |       |-ImplicitCastExpr 0x5608c1457268 <col:27> 'int (*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14571b0 <col:27> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |       `-CallExpr 0x5608c1457228 <col:50, col:63> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1457210 <col:50> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14571d0 <col:50> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |         `-ImplicitCastExpr 0x5608c1457250 <col:58> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c14571f0 <col:58> 'jv':'jv' lvalue ParmVar 0x5608c1456cb8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1457360 <line:469:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1457348 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1457308 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1457388 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1457328 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1456cb8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14573d8 <line:470:3, col:10>
|     `-ImplicitCastExpr 0x5608c14573c0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14573a0 <col:10> 'jv':'jv' lvalue Var 0x5608c1457090 'res' 'jv':'jv'
|-FunctionDecl 0x5608c1457540 <line:473:1, line:485:1> line:473:11 used f_tonumber 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1457430 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14574a8 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1457ea0 <col:46, line:485:1>
|   |-IfStmt 0x5608c1457758 <line:474:3, line:476:3>
|   | |-BinaryOperator 0x5608c14576d8 <line:474:7, col:29> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c14576a8 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1457648 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1457630 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14575f0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1457670 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1457610 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14574a8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14576c0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1457688 <col:29> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1457740 <col:45, line:476:3>
|   |   `-ReturnStmt 0x5608c1457730 <line:475:5, col:12>
|   |     `-ImplicitCastExpr 0x5608c1457718 <col:12> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14576f8 <col:12> 'jv':'jv' lvalue ParmVar 0x5608c14574a8 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1457d28 <line:477:3, line:483:3>
|   | |-BinaryOperator 0x5608c1457860 <line:477:7, col:29> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c1457830 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14577d0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14577b8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1457778 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14577f8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1457798 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14574a8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1457848 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1457810 <col:29> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-CompoundStmt 0x5608c1457d08 <col:45, line:483:3>
|   |   |-DeclStmt 0x5608c14579f0 <line:478:5, col:49>
|   |   | `-VarDecl 0x5608c1457890 <col:5, col:48> col:8 used parsed 'jv':'jv' nrvo cinit
|   |   |   `-CallExpr 0x5608c14579c8 <col:17, col:48> 'jv':'jv'
|   |   |     |-ImplicitCastExpr 0x5608c14579b0 <col:17> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x5608c14578f8 <col:17> 'jv (const char *)' Function 0x5608c13e8628 'jv_parse' 'jv (const char *)'
|   |   |     `-CallExpr 0x5608c1457970 <col:26, col:47> 'const char *'
|   |   |       |-ImplicitCastExpr 0x5608c1457958 <col:26> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5608c1457918 <col:26> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |   |       `-ImplicitCastExpr 0x5608c1457998 <col:42> 'jv':'jv' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x5608c1457938 <col:42> 'jv':'jv' lvalue ParmVar 0x5608c14574a8 'input' 'jv':'jv'
|   |   `-IfStmt 0x5608c1457ce8 <line:479:5, line:482:5>
|   |     |-BinaryOperator 0x5608c1457bc0 <line:479:9, col:56> 'int' '||'
|   |     | |-UnaryOperator 0x5608c1457aa0 <col:9, col:28> 'int' prefix '!' cannot overflow
|   |     | | `-CallExpr 0x5608c1457a60 <col:10, col:28> 'int'
|   |     | |   |-ImplicitCastExpr 0x5608c1457a48 <col:10> 'int (*)(jv)' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x5608c1457a08 <col:10> 'int (jv)' Function 0x5608c13d1860 'jv_is_valid' 'int (jv)'
|   |     | |   `-ImplicitCastExpr 0x5608c1457a88 <col:22> 'jv':'jv' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5608c1457a28 <col:22> 'jv':'jv' lvalue Var 0x5608c1457890 'parsed' 'jv':'jv'
|   |     | `-BinaryOperator 0x5608c1457ba0 <col:33, col:56> 'int' '=='
|   |     |   |-ImplicitCastExpr 0x5608c1457b70 <col:33, col:51> 'unsigned int' <IntegralCast>
|   |     |   | `-CallExpr 0x5608c1457b10 <col:33, col:51> 'jv_kind':'jv_kind'
|   |     |   |   |-ImplicitCastExpr 0x5608c1457af8 <col:33> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     |   |   | `-DeclRefExpr 0x5608c1457ab8 <col:33> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     |   |   `-ImplicitCastExpr 0x5608c1457b38 <col:45> 'jv':'jv' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x5608c1457ad8 <col:45> 'jv':'jv' lvalue Var 0x5608c1457890 'parsed' 'jv':'jv'
|   |     |   `-ImplicitCastExpr 0x5608c1457b88 <col:56> 'unsigned int' <IntegralCast>
|   |     |     `-DeclRefExpr 0x5608c1457b50 <col:56> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   |     `-CompoundStmt 0x5608c1457cc8 <col:72, line:482:5>
|   |       |-CallExpr 0x5608c1457c38 <line:480:7, col:20> 'void'
|   |       | |-ImplicitCastExpr 0x5608c1457c20 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x5608c1457be0 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |       | `-ImplicitCastExpr 0x5608c1457c60 <col:15> 'jv':'jv' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x5608c1457c00 <col:15> 'jv':'jv' lvalue ParmVar 0x5608c14574a8 'input' 'jv':'jv'
|   |       `-ReturnStmt 0x5608c1457cb0 <line:481:7, col:14>
|   |         `-ImplicitCastExpr 0x5608c1457c98 <col:14> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1457c78 <col:14> 'jv':'jv' lvalue Var 0x5608c1457890 'parsed' 'jv':'jv'
|   `-ReturnStmt 0x5608c1457e90 <line:484:3, col:58>
|     `-CallExpr 0x5608c1457e18 <col:10, col:58> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1457e00 <col:10> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1457d48 <col:10> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|       |-ImplicitCastExpr 0x5608c1457e48 <col:21> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1457d68 <col:21> 'jv':'jv' lvalue ParmVar 0x5608c14574a8 'input' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c1457e78 <col:28> 'const char *' <NoOp>
|         `-ImplicitCastExpr 0x5608c1457e60 <col:28> 'char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x5608c1457dc8 <col:28> 'char [29]' lvalue "cannot be parsed as a number"
|-FunctionDecl 0x5608c1457fe8 <line:487:1, line:504:1> line:487:11 used f_length 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1457ed8 <col:20, col:30> col:30 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1457f50 <col:34, col:37> col:37 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1459008 <col:44, line:504:1>
|   `-IfStmt 0x5608c1458fd8 <line:488:3, line:503:3> has_else
|     |-BinaryOperator 0x5608c1458180 <line:488:7, col:29> 'int' '=='
|     | |-ImplicitCastExpr 0x5608c1458150 <col:7, col:24> 'unsigned int' <IntegralCast>
|     | | `-CallExpr 0x5608c14580f0 <col:7, col:24> 'jv_kind':'jv_kind'
|     | |   |-ImplicitCastExpr 0x5608c14580d8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x5608c1458098 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | |   `-ImplicitCastExpr 0x5608c1458118 <col:19> 'jv':'jv' <LValueToRValue>
|     | |     `-DeclRefExpr 0x5608c14580b8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|     | `-ImplicitCastExpr 0x5608c1458168 <col:29> 'unsigned int' <IntegralCast>
|     |   `-DeclRefExpr 0x5608c1458130 <col:29> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|     |-CompoundStmt 0x5608c14582c0 <col:44, line:490:3>
|     | `-ReturnStmt 0x5608c14582b0 <line:489:5, col:44>
|     |   `-CallExpr 0x5608c1458270 <col:12, col:44> 'jv':'jv'
|     |     |-ImplicitCastExpr 0x5608c1458258 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c14581a0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|     |     `-ImplicitCastExpr 0x5608c1458298 <col:22, col:43> 'double' <IntegralToFloating>
|     |       `-CallExpr 0x5608c1458218 <col:22, col:43> 'int'
|     |         |-ImplicitCastExpr 0x5608c1458200 <col:22> 'int (*)(jv)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5608c14581c0 <col:22> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|     |         `-ImplicitCastExpr 0x5608c1458240 <col:38> 'jv':'jv' <LValueToRValue>
|     |           `-DeclRefExpr 0x5608c14581e0 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|     `-IfStmt 0x5608c1458fa8 <line:490:10, line:503:3> has_else
|       |-BinaryOperator 0x5608c14583c0 <line:490:14, col:36> 'int' '=='
|       | |-ImplicitCastExpr 0x5608c1458390 <col:14, col:31> 'unsigned int' <IntegralCast>
|       | | `-CallExpr 0x5608c1458330 <col:14, col:31> 'jv_kind':'jv_kind'
|       | |   |-ImplicitCastExpr 0x5608c1458318 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|       | |   | `-DeclRefExpr 0x5608c14582d8 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|       | |   `-ImplicitCastExpr 0x5608c1458358 <col:26> 'jv':'jv' <LValueToRValue>
|       | |     `-DeclRefExpr 0x5608c14582f8 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|       | `-ImplicitCastExpr 0x5608c14583a8 <col:36> 'unsigned int' <IntegralCast>
|       |   `-DeclRefExpr 0x5608c1458370 <col:36> 'int' EnumConstant 0x5608c13d0c20 'JV_KIND_OBJECT' 'int'
|       |-CompoundStmt 0x5608c1458500 <col:52, line:492:3>
|       | `-ReturnStmt 0x5608c14584f0 <line:491:5, col:45>
|       |   `-CallExpr 0x5608c14584b0 <col:12, col:45> 'jv':'jv'
|       |     |-ImplicitCastExpr 0x5608c1458498 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5608c14583e0 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|       |     `-ImplicitCastExpr 0x5608c14584d8 <col:22, col:44> 'double' <IntegralToFloating>
|       |       `-CallExpr 0x5608c1458458 <col:22, col:44> 'int'
|       |         |-ImplicitCastExpr 0x5608c1458440 <col:22> 'int (*)(jv)' <FunctionToPointerDecay>
|       |         | `-DeclRefExpr 0x5608c1458400 <col:22> 'int (jv)' Function 0x5608c13e5068 'jv_object_length' 'int (jv)'
|       |         `-ImplicitCastExpr 0x5608c1458480 <col:39> 'jv':'jv' <LValueToRValue>
|       |           `-DeclRefExpr 0x5608c1458420 <col:39> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|       `-IfStmt 0x5608c1458f78 <line:492:10, line:503:3> has_else
|         |-BinaryOperator 0x5608c1458600 <line:492:14, col:36> 'int' '=='
|         | |-ImplicitCastExpr 0x5608c14585d0 <col:14, col:31> 'unsigned int' <IntegralCast>
|         | | `-CallExpr 0x5608c1458570 <col:14, col:31> 'jv_kind':'jv_kind'
|         | |   |-ImplicitCastExpr 0x5608c1458558 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|         | |   | `-DeclRefExpr 0x5608c1458518 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|         | |   `-ImplicitCastExpr 0x5608c1458598 <col:26> 'jv':'jv' <LValueToRValue>
|         | |     `-DeclRefExpr 0x5608c1458538 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|         | `-ImplicitCastExpr 0x5608c14585e8 <col:36> 'unsigned int' <IntegralCast>
|         |   `-DeclRefExpr 0x5608c14585b0 <col:36> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|         |-CompoundStmt 0x5608c1458740 <col:52, line:494:3>
|         | `-ReturnStmt 0x5608c1458730 <line:493:5, col:56>
|         |   `-CallExpr 0x5608c14586f0 <col:12, col:56> 'jv':'jv'
|         |     |-ImplicitCastExpr 0x5608c14586d8 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|         |     | `-DeclRefExpr 0x5608c1458620 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         |     `-ImplicitCastExpr 0x5608c1458718 <col:22, col:55> 'double' <IntegralToFloating>
|         |       `-CallExpr 0x5608c1458698 <col:22, col:55> 'int'
|         |         |-ImplicitCastExpr 0x5608c1458680 <col:22> 'int (*)(jv)' <FunctionToPointerDecay>
|         |         | `-DeclRefExpr 0x5608c1458640 <col:22> 'int (jv)' Function 0x5608c13de7c0 'jv_string_length_codepoints' 'int (jv)'
|         |         `-ImplicitCastExpr 0x5608c14586c0 <col:50> 'jv':'jv' <LValueToRValue>
|         |           `-DeclRefExpr 0x5608c1458660 <col:50> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|         `-IfStmt 0x5608c1458f48 <line:494:10, line:503:3> has_else
|           |-BinaryOperator 0x5608c1458840 <line:494:14, col:36> 'int' '=='
|           | |-ImplicitCastExpr 0x5608c1458810 <col:14, col:31> 'unsigned int' <IntegralCast>
|           | | `-CallExpr 0x5608c14587b0 <col:14, col:31> 'jv_kind':'jv_kind'
|           | |   |-ImplicitCastExpr 0x5608c1458798 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|           | |   | `-DeclRefExpr 0x5608c1458758 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|           | |   `-ImplicitCastExpr 0x5608c14587d8 <col:26> 'jv':'jv' <LValueToRValue>
|           | |     `-DeclRefExpr 0x5608c1458778 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|           | `-ImplicitCastExpr 0x5608c1458828 <col:36> 'unsigned int' <IntegralCast>
|           |   `-DeclRefExpr 0x5608c14587f0 <col:36> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|           |-CompoundStmt 0x5608c1458b30 <col:52, line:498:3>
|           | |-DeclStmt 0x5608c1458a30 <line:495:5, col:51>
|           | | `-VarDecl 0x5608c1458870 <col:5, col:50> col:8 used r 'jv':'jv' nrvo cinit
|           | |   `-CallExpr 0x5608c1458a08 <col:12, col:50> 'jv':'jv'
|           | |     |-ImplicitCastExpr 0x5608c14589f0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|           | |     | `-DeclRefExpr 0x5608c14588d8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|           | |     `-CallExpr 0x5608c14589c8 <col:22, col:49> 'double'
|           | |       |-ImplicitCastExpr 0x5608c14589b0 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|           | |       | `-DeclRefExpr 0x5608c14588f8 <col:22> 'double (double)' Function 0x5608c122c030 'fabs' 'double (double)'
|           | |       `-CallExpr 0x5608c1458970 <col:27, col:48> 'double'
|           | |         |-ImplicitCastExpr 0x5608c1458958 <col:27> 'double (*)(jv)' <FunctionToPointerDecay>
|           | |         | `-DeclRefExpr 0x5608c1458918 <col:27> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|           | |         `-ImplicitCastExpr 0x5608c1458998 <col:43> 'jv':'jv' <LValueToRValue>
|           | |           `-DeclRefExpr 0x5608c1458938 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|           | |-CallExpr 0x5608c1458aa0 <line:496:5, col:18> 'void'
|           | | |-ImplicitCastExpr 0x5608c1458a88 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|           | | | `-DeclRefExpr 0x5608c1458a48 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|           | | `-ImplicitCastExpr 0x5608c1458ac8 <col:13> 'jv':'jv' <LValueToRValue>
|           | |   `-DeclRefExpr 0x5608c1458a68 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|           | `-ReturnStmt 0x5608c1458b18 <line:497:5, col:12>
|           |   `-ImplicitCastExpr 0x5608c1458b00 <col:12> 'jv':'jv' <LValueToRValue>
|           |     `-DeclRefExpr 0x5608c1458ae0 <col:12> 'jv':'jv' lvalue Var 0x5608c1458870 'r' 'jv':'jv'
|           `-IfStmt 0x5608c1458f18 <line:498:10, line:503:3> has_else
|             |-BinaryOperator 0x5608c1458c40 <line:498:14, col:36> 'int' '=='
|             | |-ImplicitCastExpr 0x5608c1458c10 <col:14, col:31> 'unsigned int' <IntegralCast>
|             | | `-CallExpr 0x5608c1458bb0 <col:14, col:31> 'jv_kind':'jv_kind'
|             | |   |-ImplicitCastExpr 0x5608c1458b98 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|             | |   | `-DeclRefExpr 0x5608c1458b58 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|             | |   `-ImplicitCastExpr 0x5608c1458bd8 <col:26> 'jv':'jv' <LValueToRValue>
|             | |     `-DeclRefExpr 0x5608c1458b78 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|             | `-ImplicitCastExpr 0x5608c1458c28 <col:36> 'unsigned int' <IntegralCast>
|             |   `-DeclRefExpr 0x5608c1458bf0 <col:36> 'int' EnumConstant 0x5608c13d0a40 'JV_KIND_NULL' 'int'
|             |-CompoundStmt 0x5608c1458da0 <col:50, line:501:3>
|             | |-CallExpr 0x5608c1458cb8 <line:499:5, col:18> 'void'
|             | | |-ImplicitCastExpr 0x5608c1458ca0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|             | | | `-DeclRefExpr 0x5608c1458c60 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|             | | `-ImplicitCastExpr 0x5608c1458ce0 <col:13> 'jv':'jv' <LValueToRValue>
|             | |   `-DeclRefExpr 0x5608c1458c80 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|             | `-ReturnStmt 0x5608c1458d90 <line:500:5, col:23>
|             |   `-CallExpr 0x5608c1458d50 <col:12, col:23> 'jv':'jv'
|             |     |-ImplicitCastExpr 0x5608c1458d38 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|             |     | `-DeclRefExpr 0x5608c1458cf8 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|             |     `-ImplicitCastExpr 0x5608c1458d78 <col:22> 'double' <IntegralToFloating>
|             |       `-IntegerLiteral 0x5608c1458d18 <col:22> 'int' 0
|             `-CompoundStmt 0x5608c1458f00 <line:501:10, line:503:3>
|               `-ReturnStmt 0x5608c1458ef0 <line:502:5, col:45>
|                 `-CallExpr 0x5608c1458e78 <col:12, col:45> 'jv':'jv'
|                   |-ImplicitCastExpr 0x5608c1458e60 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5608c1458dc0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|                   |-ImplicitCastExpr 0x5608c1458ea8 <col:23> 'jv':'jv' <LValueToRValue>
|                   | `-DeclRefExpr 0x5608c1458de0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1457f50 'input' 'jv':'jv'
|                   `-ImplicitCastExpr 0x5608c1458ed8 <col:30> 'const char *' <NoOp>
|                     `-ImplicitCastExpr 0x5608c1458ec0 <col:30> 'char *' <ArrayToPointerDecay>
|                       `-StringLiteral 0x5608c1458e38 <col:30> 'char [14]' lvalue "has no length"
|-FunctionDecl 0x5608c1459140 <line:506:1, line:512:1> line:506:11 used f_tostring 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1459030 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14590a8 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1459470 <col:46, line:512:1>
|   `-IfStmt 0x5608c1459440 <line:507:3, line:511:3> has_else
|     |-BinaryOperator 0x5608c14592d8 <line:507:7, col:29> 'int' '=='
|     | |-ImplicitCastExpr 0x5608c14592a8 <col:7, col:24> 'unsigned int' <IntegralCast>
|     | | `-CallExpr 0x5608c1459248 <col:7, col:24> 'jv_kind':'jv_kind'
|     | |   |-ImplicitCastExpr 0x5608c1459230 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x5608c14591f0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | |   `-ImplicitCastExpr 0x5608c1459270 <col:19> 'jv':'jv' <LValueToRValue>
|     | |     `-DeclRefExpr 0x5608c1459210 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14590a8 'input' 'jv':'jv'
|     | `-ImplicitCastExpr 0x5608c14592c0 <col:29> 'unsigned int' <IntegralCast>
|     |   `-DeclRefExpr 0x5608c1459288 <col:29> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|     |-CompoundStmt 0x5608c1459340 <col:45, line:509:3>
|     | `-ReturnStmt 0x5608c1459330 <line:508:5, col:12>
|     |   `-ImplicitCastExpr 0x5608c1459318 <col:12> 'jv':'jv' <LValueToRValue>
|     |     `-DeclRefExpr 0x5608c14592f8 <col:12> 'jv':'jv' lvalue ParmVar 0x5608c14590a8 'input' 'jv':'jv'
|     `-CompoundStmt 0x5608c1459428 <line:509:10, line:511:3>
|       `-ReturnStmt 0x5608c1459418 <line:510:5, col:35>
|         `-CallExpr 0x5608c14593d0 <col:12, col:35> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c14593b8 <col:12> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c1459358 <col:12> 'jv (jv, int)' Function 0x5608c13e7f68 'jv_dump_string' 'jv (jv, int)'
|           |-ImplicitCastExpr 0x5608c1459400 <col:27> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c1459378 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c14590a8 'input' 'jv':'jv'
|           `-IntegerLiteral 0x5608c1459398 <col:34> 'int' 0
|-FunctionDecl 0x5608c14595a8 <line:514:1, line:518:1> line:514:11 used f_utf8bytelength 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1459498 <col:28, col:38> col:38 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1459510 <col:42, col:45> col:45 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14599c0 <col:52, line:518:1>
|   |-IfStmt 0x5608c1459880 <line:515:3, line:516:67>
|   | |-BinaryOperator 0x5608c1459740 <line:515:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1459710 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14596b0 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1459698 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1459658 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14596d8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1459678 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1459510 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1459728 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14596f0 <col:29> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-ReturnStmt 0x5608c1459870 <line:516:5, col:67>
|   |   `-CallExpr 0x5608c14597f8 <col:12, col:67> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14597e0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1459760 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |     |-ImplicitCastExpr 0x5608c1459828 <col:23> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c1459780 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1459510 'input' 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c1459858 <col:30> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x5608c1459840 <col:30> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x5608c14597a0 <col:30> 'char [36]' lvalue "only strings have UTF-8 byte length"
|   `-ReturnStmt 0x5608c14599b0 <line:517:3, col:49>
|     `-CallExpr 0x5608c1459970 <col:10, col:49> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1459958 <col:10> 'jv (*)(double)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14598a0 <col:10> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|       `-ImplicitCastExpr 0x5608c1459998 <col:20, col:48> 'double' <IntegralToFloating>
|         `-CallExpr 0x5608c1459918 <col:20, col:48> 'int'
|           |-ImplicitCastExpr 0x5608c1459900 <col:20> 'int (*)(jv)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c14598c0 <col:20> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|           `-ImplicitCastExpr 0x5608c1459940 <col:43> 'jv':'jv' <LValueToRValue>
|             `-DeclRefExpr 0x5608c14598e0 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1459510 'input' 'jv':'jv'
|-VarDecl 0x5608c1459b00 <line:522:1, col:73> col:28 used BASE64_ENCODE_TABLE 'const unsigned char [65]' static cinit
| `-StringLiteral 0x5608c1459ba8 <line:520:24, line:522:73> 'const unsigned char [65]' "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
|-VarDecl 0x5608c1459c20 <line:523:1, col:51> col:28 used BASE64_INVALID_ENTRY 'const unsigned char' static cinit
| `-ImplicitCastExpr 0x5608c1459ca8 <col:51> 'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x5608c1459c88 <col:51> 'int' 255
|-VarDecl 0x5608c1459dd0 <line:524:1, line:537:1> line:524:28 used BASE64_DECODE_TABLE 'const unsigned char [255]' static cinit
| `-InitListExpr 0x5608c145c660 <col:55, line:537:1> 'const unsigned char [255]'
|   |-ImplicitCastExpr 0x5608c145ce98 <line:525:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459e38 <col:3> 'int' 255
|   |-ImplicitCastExpr 0x5608c145ceb0 <col:9> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459e58 <col:9> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cec8 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459e78 <col:15> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cee0 <col:21> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459e98 <col:21> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cef8 <col:27> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459eb8 <col:27> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cf10 <col:33> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459ed8 <col:33> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cf28 <col:39> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459ef8 <col:39> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cf40 <col:45> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459f18 <col:45> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cf58 <col:51> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459f38 <col:51> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cf70 <col:57> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459f58 <col:57> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cf88 <col:63> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459f78 <col:63> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cfa0 <col:69> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459f98 <col:69> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cfb8 <col:75> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459fb8 <col:75> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cfd0 <col:81> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459fd8 <col:81> 'int' 255
|   |-ImplicitCastExpr 0x5608c145cfe8 <col:87> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c1459ff8 <col:87> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d000 <col:93> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a018 <col:93> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d018 <col:99> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a038 <col:99> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d030 <col:105> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a058 <col:105> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d048 <col:111> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a078 <col:111> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d060 <col:117> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a098 <col:117> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d078 <col:123> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a0b8 <col:123> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d090 <col:129> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a0d8 <col:129> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d0a8 <col:135> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a0f8 <col:135> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d0c0 <col:141> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a118 <col:141> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d0d8 <col:147> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a138 <col:147> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d0f0 <col:153> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a158 <col:153> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d108 <col:159> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a178 <col:159> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d120 <col:165> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a198 <col:165> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d138 <col:171> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a1b8 <col:171> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d150 <col:177> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a1d8 <col:177> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d168 <col:183> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a1f8 <col:183> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d180 <col:189> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a218 <col:189> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d198 <col:195> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a238 <col:195> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d1b0 <col:201> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a258 <col:201> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d1c8 <col:207> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a278 <col:207> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d1e0 <col:213> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a298 <col:213> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d1f8 <col:219> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a2b8 <col:219> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d210 <col:225> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a2d8 <col:225> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d228 <col:231> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a2f8 <col:231> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d240 <col:237> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a318 <col:237> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d258 <col:243> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a338 <col:243> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d270 <col:249> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a358 <col:249> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d288 <col:255> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a378 <col:255> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d2a0 <line:526:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a398 <col:3> 'int' 62
|   |-ImplicitCastExpr 0x5608c145d2b8 <line:527:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a3b8 <col:3> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d2d0 <col:9> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a3d8 <col:9> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d2e8 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a3f8 <col:15> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d300 <line:528:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a418 <col:3> 'int' 63
|   |-ImplicitCastExpr 0x5608c145d318 <line:529:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a438 <col:3> 'int' 52
|   |-ImplicitCastExpr 0x5608c145d330 <col:7> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a458 <col:7> 'int' 53
|   |-ImplicitCastExpr 0x5608c145d348 <col:11> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a478 <col:11> 'int' 54
|   |-ImplicitCastExpr 0x5608c145d360 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a498 <col:15> 'int' 55
|   |-ImplicitCastExpr 0x5608c145d378 <col:19> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a4b8 <col:19> 'int' 56
|   |-ImplicitCastExpr 0x5608c145d390 <col:23> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a4d8 <col:23> 'int' 57
|   |-ImplicitCastExpr 0x5608c145d3a8 <col:27> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a4f8 <col:27> 'int' 58
|   |-ImplicitCastExpr 0x5608c145d3c0 <col:31> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a518 <col:31> 'int' 59
|   |-ImplicitCastExpr 0x5608c145d3d8 <col:35> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a538 <col:35> 'int' 60
|   |-ImplicitCastExpr 0x5608c145d3f0 <col:39> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a558 <col:39> 'int' 61
|   |-ImplicitCastExpr 0x5608c145d408 <line:530:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a578 <col:3> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d420 <col:9> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a598 <col:9> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d438 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a5b8 <col:15> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d450 <line:531:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a5d8 <col:3> 'int' 99
|   |-ImplicitCastExpr 0x5608c145d468 <line:532:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a5f8 <col:3> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d480 <col:9> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a618 <col:9> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d498 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a638 <col:15> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d4b0 <line:533:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a658 <col:3> 'int' 0
|   |-ImplicitCastExpr 0x5608c145d4c8 <col:6> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a678 <col:6> 'int' 1
|   |-ImplicitCastExpr 0x5608c145d4e0 <col:9> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a698 <col:9> 'int' 2
|   |-ImplicitCastExpr 0x5608c145d4f8 <col:12> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a6b8 <col:12> 'int' 3
|   |-ImplicitCastExpr 0x5608c145d510 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a6d8 <col:15> 'int' 4
|   |-ImplicitCastExpr 0x5608c145d528 <col:18> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a6f8 <col:18> 'int' 5
|   |-ImplicitCastExpr 0x5608c145d540 <col:21> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a718 <col:21> 'int' 6
|   |-ImplicitCastExpr 0x5608c145d558 <col:24> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a738 <col:24> 'int' 7
|   |-ImplicitCastExpr 0x5608c145d570 <col:27> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a758 <col:27> 'int' 8
|   |-ImplicitCastExpr 0x5608c145d588 <col:30> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a778 <col:30> 'int' 9
|   |-ImplicitCastExpr 0x5608c145d5a0 <col:33> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a798 <col:33> 'int' 10
|   |-ImplicitCastExpr 0x5608c145d5b8 <col:37> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a7b8 <col:37> 'int' 11
|   |-ImplicitCastExpr 0x5608c145d5d0 <col:41> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a7d8 <col:41> 'int' 12
|   |-ImplicitCastExpr 0x5608c145d5e8 <col:45> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a7f8 <col:45> 'int' 13
|   |-ImplicitCastExpr 0x5608c145d600 <col:49> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a818 <col:49> 'int' 14
|   |-ImplicitCastExpr 0x5608c145d618 <col:53> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a838 <col:53> 'int' 15
|   |-ImplicitCastExpr 0x5608c145d630 <col:57> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a858 <col:57> 'int' 16
|   |-ImplicitCastExpr 0x5608c145d648 <col:61> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a878 <col:61> 'int' 17
|   |-ImplicitCastExpr 0x5608c145d660 <col:65> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a898 <col:65> 'int' 18
|   |-ImplicitCastExpr 0x5608c145d678 <col:69> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a8b8 <col:69> 'int' 19
|   |-ImplicitCastExpr 0x5608c145d690 <col:73> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a8d8 <col:73> 'int' 20
|   |-ImplicitCastExpr 0x5608c145d6a8 <col:77> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a8f8 <col:77> 'int' 21
|   |-ImplicitCastExpr 0x5608c145d6c0 <col:81> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a918 <col:81> 'int' 22
|   |-ImplicitCastExpr 0x5608c145d6d8 <col:85> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a938 <col:85> 'int' 23
|   |-ImplicitCastExpr 0x5608c145d6f0 <col:89> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a958 <col:89> 'int' 24
|   |-ImplicitCastExpr 0x5608c145d708 <col:93> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a978 <col:93> 'int' 25
|   |-ImplicitCastExpr 0x5608c145d720 <line:534:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a998 <col:3> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d738 <col:9> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a9b8 <col:9> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d750 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a9d8 <col:15> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d768 <col:21> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145a9f8 <col:21> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d780 <col:27> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aa18 <col:27> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d798 <col:33> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aa38 <col:33> 'int' 255
|   |-ImplicitCastExpr 0x5608c145d7b0 <line:535:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aa58 <col:3> 'int' 26
|   |-ImplicitCastExpr 0x5608c145d7c8 <col:7> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aa78 <col:7> 'int' 27
|   |-ImplicitCastExpr 0x5608c145d7e0 <col:11> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aa98 <col:11> 'int' 28
|   |-ImplicitCastExpr 0x5608c145d7f8 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aab8 <col:15> 'int' 29
|   |-ImplicitCastExpr 0x5608c145d810 <col:19> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aad8 <col:19> 'int' 30
|   |-ImplicitCastExpr 0x5608c145d828 <col:23> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aaf8 <col:23> 'int' 31
|   |-ImplicitCastExpr 0x5608c145d840 <col:27> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ab18 <col:27> 'int' 32
|   |-ImplicitCastExpr 0x5608c145d858 <col:31> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ab38 <col:31> 'int' 33
|   |-ImplicitCastExpr 0x5608c145d870 <col:35> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ab58 <col:35> 'int' 34
|   |-ImplicitCastExpr 0x5608c145d888 <col:39> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ab78 <col:39> 'int' 35
|   |-ImplicitCastExpr 0x5608c145d8a0 <col:43> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ab98 <col:43> 'int' 36
|   |-ImplicitCastExpr 0x5608c145d8b8 <col:47> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145abb8 <col:47> 'int' 37
|   |-ImplicitCastExpr 0x5608c145d8d0 <col:51> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145abd8 <col:51> 'int' 38
|   |-ImplicitCastExpr 0x5608c145d8e8 <col:55> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145abf8 <col:55> 'int' 39
|   |-ImplicitCastExpr 0x5608c145d900 <col:59> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ac18 <col:59> 'int' 40
|   |-ImplicitCastExpr 0x5608c145d918 <col:63> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ac38 <col:63> 'int' 41
|   |-ImplicitCastExpr 0x5608c145d930 <col:67> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ac58 <col:67> 'int' 42
|   |-ImplicitCastExpr 0x5608c145d948 <col:71> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ac78 <col:71> 'int' 43
|   |-ImplicitCastExpr 0x5608c145d960 <col:75> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ac98 <col:75> 'int' 44
|   |-ImplicitCastExpr 0x5608c145d978 <col:79> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145acb8 <col:79> 'int' 45
|   |-ImplicitCastExpr 0x5608c145d990 <col:83> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145acd8 <col:83> 'int' 46
|   |-ImplicitCastExpr 0x5608c145d9a8 <col:87> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145acf8 <col:87> 'int' 47
|   |-ImplicitCastExpr 0x5608c145d9c0 <col:91> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ad18 <col:91> 'int' 48
|   |-ImplicitCastExpr 0x5608c145d9d8 <col:95> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ad38 <col:95> 'int' 49
|   |-ImplicitCastExpr 0x5608c145d9f0 <col:99> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ad58 <col:99> 'int' 50
|   |-ImplicitCastExpr 0x5608c145da08 <col:103> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ad78 <col:103> 'int' 51
|   |-ImplicitCastExpr 0x5608c145da20 <line:536:3> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ad98 <col:3> 'int' 255
|   |-ImplicitCastExpr 0x5608c145da38 <col:9> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145adb8 <col:9> 'int' 255
|   |-ImplicitCastExpr 0x5608c145da50 <col:15> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145add8 <col:15> 'int' 255
|   |-ImplicitCastExpr 0x5608c145da68 <col:21> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145adf8 <col:21> 'int' 255
|   |-ImplicitCastExpr 0x5608c145da80 <col:27> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ae18 <col:27> 'int' 255
|   |-ImplicitCastExpr 0x5608c145da98 <col:33> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ae38 <col:33> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dab0 <col:39> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ae58 <col:39> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dac8 <col:45> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ae78 <col:45> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dae0 <col:51> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ae98 <col:51> 'int' 255
|   |-ImplicitCastExpr 0x5608c145daf8 <col:57> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aeb8 <col:57> 'int' 255
|   |-ImplicitCastExpr 0x5608c145db10 <col:63> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aed8 <col:63> 'int' 255
|   |-ImplicitCastExpr 0x5608c145db28 <col:69> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aef8 <col:69> 'int' 255
|   |-ImplicitCastExpr 0x5608c145db40 <col:75> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145af18 <col:75> 'int' 255
|   |-ImplicitCastExpr 0x5608c145db58 <col:81> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145af38 <col:81> 'int' 255
|   |-ImplicitCastExpr 0x5608c145db70 <col:87> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145af58 <col:87> 'int' 255
|   |-ImplicitCastExpr 0x5608c145db88 <col:93> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145af78 <col:93> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dba0 <col:99> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145af98 <col:99> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dbb8 <col:105> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145afb8 <col:105> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dbd0 <col:111> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145afd8 <col:111> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dbe8 <col:117> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145aff8 <col:117> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dc00 <col:123> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b018 <col:123> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dc18 <col:129> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b038 <col:129> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dc30 <col:135> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b058 <col:135> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dc48 <col:141> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b078 <col:141> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dc60 <col:147> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b098 <col:147> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dc78 <col:153> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b0b8 <col:153> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dc90 <col:159> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b0d8 <col:159> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dca8 <col:165> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b0f8 <col:165> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dcc0 <col:171> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b118 <col:171> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dcd8 <col:177> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b138 <col:177> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dcf0 <col:183> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b158 <col:183> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dd08 <col:189> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b178 <col:189> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dd40 <col:195> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b198 <col:195> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dd58 <col:201> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b1b8 <col:201> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dd70 <col:207> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b1d8 <col:207> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dd88 <col:213> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b1f8 <col:213> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dda0 <col:219> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b218 <col:219> 'int' 255
|   |-ImplicitCastExpr 0x5608c145ddb8 <col:225> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b238 <col:225> 'int' 255
|   |-ImplicitCastExpr 0x5608c145ddd0 <col:231> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b258 <col:231> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dde8 <col:237> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b278 <col:237> 'int' 255
|   |-ImplicitCastExpr 0x5608c145de00 <col:243> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b298 <col:243> 'int' 255
|   |-ImplicitCastExpr 0x5608c145de18 <col:249> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b2b8 <col:249> 'int' 255
|   |-ImplicitCastExpr 0x5608c145de30 <col:255> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b2d8 <col:255> 'int' 255
|   |-ImplicitCastExpr 0x5608c145de48 <col:261> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b2f8 <col:261> 'int' 255
|   |-ImplicitCastExpr 0x5608c145de60 <col:267> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b318 <col:267> 'int' 255
|   |-ImplicitCastExpr 0x5608c145de78 <col:273> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b338 <col:273> 'int' 255
|   |-ImplicitCastExpr 0x5608c145de90 <col:279> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b358 <col:279> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dea8 <col:285> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b378 <col:285> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dec0 <col:291> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b398 <col:291> 'int' 255
|   |-ImplicitCastExpr 0x5608c145ded8 <col:297> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b3b8 <col:297> 'int' 255
|   |-ImplicitCastExpr 0x5608c145def0 <col:303> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b3d8 <col:303> 'int' 255
|   |-ImplicitCastExpr 0x5608c145df08 <col:309> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b3f8 <col:309> 'int' 255
|   |-ImplicitCastExpr 0x5608c145df20 <col:315> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b418 <col:315> 'int' 255
|   |-ImplicitCastExpr 0x5608c145df38 <col:321> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b438 <col:321> 'int' 255
|   |-ImplicitCastExpr 0x5608c145df50 <col:327> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b458 <col:327> 'int' 255
|   |-ImplicitCastExpr 0x5608c145df68 <col:333> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b478 <col:333> 'int' 255
|   |-ImplicitCastExpr 0x5608c145df80 <col:339> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b498 <col:339> 'int' 255
|   |-ImplicitCastExpr 0x5608c145df98 <col:345> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b4b8 <col:345> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dfb0 <col:351> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b4d8 <col:351> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dfc8 <col:357> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b4f8 <col:357> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dfe0 <col:363> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b518 <col:363> 'int' 255
|   |-ImplicitCastExpr 0x5608c145dff8 <col:369> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b538 <col:369> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e010 <col:375> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b558 <col:375> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e028 <col:381> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b578 <col:381> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e040 <col:387> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b598 <col:387> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e058 <col:393> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b5b8 <col:393> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e070 <col:399> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b5d8 <col:399> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e088 <col:405> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b5f8 <col:405> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e0a0 <col:411> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b618 <col:411> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e0b8 <col:417> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b638 <col:417> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e0d0 <col:423> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b658 <col:423> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e0e8 <col:429> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b678 <col:429> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e100 <col:435> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b698 <col:435> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e118 <col:441> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b6b8 <col:441> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e130 <col:447> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b6d8 <col:447> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e148 <col:453> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b6f8 <col:453> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e160 <col:459> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b718 <col:459> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e178 <col:465> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b738 <col:465> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e190 <col:471> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b758 <col:471> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e1a8 <col:477> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b778 <col:477> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e1c0 <col:483> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b798 <col:483> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e1d8 <col:489> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b7b8 <col:489> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e1f0 <col:495> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b7d8 <col:495> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e208 <col:501> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b7f8 <col:501> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e220 <col:507> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b818 <col:507> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e238 <col:513> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b838 <col:513> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e250 <col:519> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b858 <col:519> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e268 <col:525> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b878 <col:525> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e280 <col:531> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b898 <col:531> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e298 <col:537> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b8b8 <col:537> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e2b0 <col:543> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b8d8 <col:543> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e2c8 <col:549> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b8f8 <col:549> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e2e0 <col:555> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b918 <col:555> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e2f8 <col:561> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b938 <col:561> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e310 <col:567> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b958 <col:567> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e328 <col:573> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b978 <col:573> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e340 <col:579> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b998 <col:579> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e358 <col:585> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b9b8 <col:585> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e370 <col:591> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b9d8 <col:591> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e388 <col:597> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145b9f8 <col:597> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e3a0 <col:603> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ba18 <col:603> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e3b8 <col:609> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ba38 <col:609> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e3d0 <col:615> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ba58 <col:615> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e3e8 <col:621> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ba78 <col:621> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e400 <col:627> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145ba98 <col:627> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e418 <col:633> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bab8 <col:633> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e430 <col:639> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bad8 <col:639> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e448 <col:645> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145baf8 <col:645> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e460 <col:651> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bb18 <col:651> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e478 <col:657> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bb38 <col:657> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e490 <col:663> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bb58 <col:663> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e4a8 <col:669> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bb78 <col:669> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e4c0 <col:675> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bb98 <col:675> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e4d8 <col:681> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bbb8 <col:681> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e4f0 <col:687> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bbd8 <col:687> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e508 <col:693> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bbf8 <col:693> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e520 <col:699> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bc18 <col:699> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e538 <col:705> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bc38 <col:705> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e550 <col:711> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bc58 <col:711> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e568 <col:717> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bc78 <col:717> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e580 <col:723> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bc98 <col:723> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e598 <col:729> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bcb8 <col:729> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e5b0 <col:735> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bcd8 <col:735> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e5c8 <col:741> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bcf8 <col:741> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e5e0 <col:747> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bd18 <col:747> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e5f8 <col:753> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bd38 <col:753> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e610 <col:759> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bd58 <col:759> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e628 <col:765> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bd78 <col:765> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e640 <col:771> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bd98 <col:771> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e658 <col:777> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bdb8 <col:777> 'int' 255
|   |-ImplicitCastExpr 0x5608c145e670 <col:783> 'unsigned char' <IntegralCast>
|   | `-IntegerLiteral 0x5608c145bdd8 <col:783> 'int' 255
|   `-ImplicitCastExpr 0x5608c145e688 <col:789> 'unsigned char' <IntegralCast>
|     `-IntegerLiteral 0x5608c145bdf8 <col:789> 'int' 255
|-FunctionDecl 0x5608c145e7c8 <line:540:1, line:568:1> line:540:11 used escape_string 'jv (jv, const char *)' static
| |-ParmVarDecl 0x5608c145e6b0 <col:25, col:28> col:28 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c145e730 <col:35, col:47> col:47 used escapings 'const char *'
| `-CompoundStmt 0x5608c1460510 <col:58, line:568:1>
|   |-ParenExpr 0x5608c145ef20 </usr/include/assert.h:105:3, line:110:7> 'void'
|   | `-BinaryOperator 0x5608c145ef00 <line:105:4, line:110:6> 'void' ','
|   |   |-CStyleCastExpr 0x5608c145ea60 <line:105:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x5608c145ea30 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x5608c145ea10 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x5608c145e9e0 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x5608c145e980 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x5608c145e960 <src/builtin.c:542:10, col:32> 'int' '=='
|   |   |       |   |-ImplicitCastExpr 0x5608c145e930 <col:10, col:27> 'unsigned int' <IntegralCast>
|   |   |       |   | `-CallExpr 0x5608c145e8d0 <col:10, col:27> 'jv_kind':'jv_kind'
|   |   |       |   |   |-ImplicitCastExpr 0x5608c145e8b8 <col:10> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |   |       |   |   | `-DeclRefExpr 0x5608c145e878 <col:10> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)' non_odr_use_unevaluated
|   |   |       |   |   `-ImplicitCastExpr 0x5608c145e8f8 <col:22> 'jv':'jv' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x5608c145e898 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c145e6b0 'input' 'jv':'jv' non_odr_use_unevaluated
|   |   |       |   `-ImplicitCastExpr 0x5608c145e948 <col:32> 'unsigned int' <IntegralCast>
|   |   |       |     `-DeclRefExpr 0x5608c145e910 <col:32> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int' non_odr_use_unevaluated
|   |   |       |-IntegerLiteral 0x5608c145e9a0 </usr/include/assert.h:105:28> 'int' 1
|   |   |       `-IntegerLiteral 0x5608c145e9c0 <col:32> 'int' 0
|   |   `-UnaryOperator 0x5608c145eee8 <col:36, line:110:6> 'void' prefix '__extension__' cannot overflow
|   |     `-StmtExpr 0x5608c145eec8 <line:105:50, line:110:6> 'void'
|   |       `-CompoundStmt 0x5608c145eeb0 <line:105:51, line:110:5>
|   |         `-IfStmt 0x5608c145ee80 <line:106:7, line:109:68> has_else
|   |           |-BinaryOperator 0x5608c145eb70 <src/builtin.c:542:10, col:32> 'int' '=='
|   |           | |-ImplicitCastExpr 0x5608c145eb40 <col:10, col:27> 'unsigned int' <IntegralCast>
|   |           | | `-CallExpr 0x5608c145eae0 <col:10, col:27> 'jv_kind':'jv_kind'
|   |           | |   |-ImplicitCastExpr 0x5608c145eac8 <col:10> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |           | |   | `-DeclRefExpr 0x5608c145ea88 <col:10> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |           | |   `-ImplicitCastExpr 0x5608c145eb08 <col:22> 'jv':'jv' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x5608c145eaa8 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c145e6b0 'input' 'jv':'jv'
|   |           | `-ImplicitCastExpr 0x5608c145eb58 <col:32> 'unsigned int' <IntegralCast>
|   |           |   `-DeclRefExpr 0x5608c145eb20 <col:32> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   |           |-NullStmt 0x5608c145eb90 </usr/include/assert.h:107:9>
|   |           `-CallExpr 0x5608c145edb0 <line:109:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x5608c145ed98 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x5608c145eb98 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x5608c11c5d98 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x5608c145ee08 <<scratch space>:197:1> 'const char *' <NoOp>
|   |             | `-ImplicitCastExpr 0x5608c145edf0 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x5608c145ebf8 <col:1> 'char [37]' lvalue "jv_get_kind(input) == JV_KIND_STRING"
|   |             |-ImplicitCastExpr 0x5608c145ee38 <line:198:1> 'const char *' <NoOp>
|   |             | `-ImplicitCastExpr 0x5608c145ee20 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x5608c145ec38 <col:1> 'char [14]' lvalue "src/builtin.c"
|   |             |-ImplicitCastExpr 0x5608c145ee50 <line:199:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x5608c145ec60 <col:1> 'int' 542
|   |             `-ImplicitCastExpr 0x5608c145ee68 </usr/include/assert.h:126:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x5608c145ed50 <col:30, col:44> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |                 `-PredefinedExpr 0x5608c145ed38 <col:44> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x5608c145ecf8 <col:44> 'const char [35]' lvalue "jv escape_string(jv, const char *)"
|   |-DeclStmt 0x5608c145f130 <src/builtin.c:543:3, col:32>
|   | `-VarDecl 0x5608c145efe0 <col:3, col:31> col:15 used lookup 'const char *[128]' cinit
|   |   `-InitListExpr 0x5608c145f0c0 <col:29, col:31> 'const char *[128]'
|   |     |-array_filler: ImplicitValueInitExpr 0x5608c145f120 <<invalid sloc>> 'const char *'
|   |     `-ImplicitCastExpr 0x5608c145f100 <col:30> 'const char *' <NullToPointer>
|   |       `-IntegerLiteral 0x5608c145f048 <col:30> 'int' 0
|   |-DeclStmt 0x5608c145f200 <line:544:3, col:28>
|   | `-VarDecl 0x5608c145f160 <col:3, col:19> col:15 used p 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5608c145f1e8 <col:19> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5608c145f1c8 <col:19> 'const char *' lvalue ParmVar 0x5608c145e730 'escapings' 'const char *'
|   |-BinaryOperator 0x5608c145f348 <line:545:3, col:15> 'const char *' '='
|   | |-ArraySubscriptExpr 0x5608c145f2a0 <col:3, col:11> 'const char *' lvalue
|   | | |-ImplicitCastExpr 0x5608c145f288 <col:3> 'const char **' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x5608c145f218 <col:3> 'const char *[128]' lvalue Var 0x5608c145efe0 'lookup' 'const char *[128]'
|   | | `-IntegerLiteral 0x5608c145f238 <col:10> 'int' 0
|   | `-ImplicitCastExpr 0x5608c145f330 <col:15> 'const char *' <NoOp>
|   |   `-ImplicitCastExpr 0x5608c145f318 <col:15> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x5608c145f2f8 <col:15> 'char [3]' lvalue "\\0"
|   |-WhileStmt 0x5608c145f738 <line:546:3, line:551:3>
|   | |-ImplicitCastExpr 0x5608c145f3b8 <line:546:10, col:11> 'char' <LValueToRValue>
|   | | `-UnaryOperator 0x5608c145f3a0 <col:10, col:11> 'const char' lvalue prefix '*' cannot overflow
|   | |   `-ImplicitCastExpr 0x5608c145f388 <col:11> 'const char *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c145f368 <col:11> 'const char *' lvalue Var 0x5608c145f160 'p' 'const char *'
|   | `-CompoundStmt 0x5608c145f708 <col:14, line:551:3>
|   |   |-BinaryOperator 0x5608c145f548 <line:547:5, col:25> 'const char *' '='
|   |   | |-ArraySubscriptExpr 0x5608c145f4b0 <col:5, col:19> 'const char *' lvalue
|   |   | | |-ImplicitCastExpr 0x5608c145f498 <col:5> 'const char **' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x5608c145f3d0 <col:5> 'const char *[128]' lvalue Var 0x5608c145efe0 'lookup' 'const char *[128]'
|   |   | | `-CStyleCastExpr 0x5608c145f470 <col:12, col:18> 'int' <IntegralCast>
|   |   | |   `-ImplicitCastExpr 0x5608c145f458 <col:17, col:18> 'char' <LValueToRValue> part_of_explicit_cast
|   |   | |     `-UnaryOperator 0x5608c145f428 <col:17, col:18> 'const char' lvalue prefix '*' cannot overflow
|   |   | |       `-ImplicitCastExpr 0x5608c145f410 <col:18> 'const char *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x5608c145f3f0 <col:18> 'const char *' lvalue Var 0x5608c145f160 'p' 'const char *'
|   |   | `-BinaryOperator 0x5608c145f528 <col:23, col:25> 'const char *' '+'
|   |   |   |-ImplicitCastExpr 0x5608c145f510 <col:23> 'const char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x5608c145f4d0 <col:23> 'const char *' lvalue Var 0x5608c145f160 'p' 'const char *'
|   |   |   `-IntegerLiteral 0x5608c145f4f0 <col:25> 'int' 1
|   |   |-UnaryOperator 0x5608c145f588 <line:548:5, col:6> 'const char *' postfix '++'
|   |   | `-DeclRefExpr 0x5608c145f568 <col:5> 'const char *' lvalue Var 0x5608c145f160 'p' 'const char *'
|   |   |-CompoundAssignOperator 0x5608c145f6a0 <line:549:5, col:18> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   |   | |-DeclRefExpr 0x5608c145f5a0 <col:5> 'const char *' lvalue Var 0x5608c145f160 'p' 'const char *'
|   |   | `-CallExpr 0x5608c145f660 <col:10, col:18> 'unsigned long'
|   |   |   |-ImplicitCastExpr 0x5608c145f648 <col:10> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5608c145f5c0 <col:10> 'unsigned long (const char *)' Function 0x5608c13745e0 'strlen' 'unsigned long (const char *)'
|   |   |   `-ImplicitCastExpr 0x5608c145f688 <col:17> 'const char *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5608c145f5e0 <col:17> 'const char *' lvalue Var 0x5608c145f160 'p' 'const char *'
|   |   `-UnaryOperator 0x5608c145f6f0 <line:550:5, col:6> 'const char *' postfix '++'
|   |     `-DeclRefExpr 0x5608c145f6d0 <col:5> 'const char *' lvalue Var 0x5608c145f160 'p' 'const char *'
|   |-DeclStmt 0x5608c145f878 <line:553:3, col:25>
|   | `-VarDecl 0x5608c145f768 <col:3, col:24> col:6 used ret 'jv':'jv' nrvo cinit
|   |   `-CallExpr 0x5608c145f820 <col:12, col:24> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c145f808 <col:12> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c145f7d0 <col:12> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |     `-ImplicitCastExpr 0x5608c145f860 <col:22> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x5608c145f848 <col:22> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x5608c145f7f0 <col:22> 'char [1]' lvalue ""
|   |-DeclStmt 0x5608c145f9a8 <line:554:3, col:41>
|   | `-VarDecl 0x5608c145f8a8 <col:3, col:40> col:15 used i 'const char *' cinit
|   |   `-CallExpr 0x5608c145f968 <col:19, col:40> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c145f950 <col:19> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c145f910 <col:19> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c145f990 <col:35> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c145f930 <col:35> 'jv':'jv' lvalue ParmVar 0x5608c145e6b0 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c145fb90 <line:555:3, col:63>
|   | `-VarDecl 0x5608c145f9d8 <col:3, col:62> col:15 used end 'const char *' cinit
|   |   `-BinaryOperator 0x5608c145fb70 <col:21, col:62> 'const char *' '+'
|   |     |-ImplicitCastExpr 0x5608c145fb58 <col:21> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c145fa40 <col:21> 'const char *' lvalue Var 0x5608c145f8a8 'i' 'const char *'
|   |     `-CallExpr 0x5608c145fb30 <col:25, col:62> 'int'
|   |       |-ImplicitCastExpr 0x5608c145fb18 <col:25> 'int (*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c145fa60 <col:25> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |       `-CallExpr 0x5608c145fad8 <col:48, col:61> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c145fac0 <col:48> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c145fa80 <col:48> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |         `-ImplicitCastExpr 0x5608c145fb00 <col:56> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c145faa0 <col:56> 'jv':'jv' lvalue ParmVar 0x5608c145e6b0 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c145fc28 <line:556:3, col:21>
|   | `-VarDecl 0x5608c145fbc0 <col:3, col:15> col:15 used cstart 'const char *'
|   |-DeclStmt 0x5608c145fce0 <line:557:3, col:12>
|   | `-VarDecl 0x5608c145fc58 <col:3, col:11> col:7 used c 'int' cinit
|   |   `-IntegerLiteral 0x5608c145fcc0 <col:11> 'int' 0
|   |-WhileStmt 0x5608c1460408 <line:558:3, line:564:3>
|   | |-ParenExpr 0x5608c145fee0 <line:558:10, col:51> 'const char *'
|   | | `-BinaryOperator 0x5608c145fec0 <col:11, col:50> 'const char *' '='
|   | |   |-DeclRefExpr 0x5608c145fcf8 <col:11> 'const char *' lvalue Var 0x5608c145f8a8 'i' 'const char *'
|   | |   `-CallExpr 0x5608c145fe70 <col:15, col:50> 'const char *'
|   | |     |-ImplicitCastExpr 0x5608c145fe58 <col:15> 'const char *(*)(const char *, const char *, int *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x5608c145fd18 <col:15> 'const char *(const char *, const char *, int *)' Function 0x5608c140f5d8 'jvp_utf8_next' 'const char *(const char *, const char *, int *)'
|   | |     |-ParenExpr 0x5608c145fdb0 <col:29, col:40> 'const char *'
|   | |     | `-BinaryOperator 0x5608c145fd90 <col:30, col:39> 'const char *' '='
|   | |     |   |-DeclRefExpr 0x5608c145fd38 <col:30> 'const char *' lvalue Var 0x5608c145fbc0 'cstart' 'const char *'
|   | |     |   `-ImplicitCastExpr 0x5608c145fd78 <col:39> 'const char *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x5608c145fd58 <col:39> 'const char *' lvalue Var 0x5608c145f8a8 'i' 'const char *'
|   | |     |-ImplicitCastExpr 0x5608c145fea8 <col:43> 'const char *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x5608c145fdd0 <col:43> 'const char *' lvalue Var 0x5608c145f9d8 'end' 'const char *'
|   | |     `-UnaryOperator 0x5608c145fe10 <col:48, col:49> 'int *' prefix '&' cannot overflow
|   | |       `-DeclRefExpr 0x5608c145fdf0 <col:49> 'int' lvalue Var 0x5608c145fc58 'c' 'int'
|   | `-CompoundStmt 0x5608c14603f0 <col:54, line:564:3>
|   |   `-IfStmt 0x5608c14603c0 <line:559:5, line:563:5> has_else
|   |     |-BinaryOperator 0x5608c1460020 <line:559:9, col:28> 'int' '&&'
|   |     | |-BinaryOperator 0x5608c145ff58 <col:9, col:13> 'int' '<'
|   |     | | |-ImplicitCastExpr 0x5608c145ff40 <col:9> 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x5608c145ff00 <col:9> 'int' lvalue Var 0x5608c145fc58 'c' 'int'
|   |     | | `-IntegerLiteral 0x5608c145ff20 <col:13> 'int' 128
|   |     | `-ImplicitCastExpr 0x5608c1460008 <col:20, col:28> 'const char *' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x5608c145ffe8 <col:20, col:28> 'const char *' lvalue
|   |     |     |-ImplicitCastExpr 0x5608c145ffb8 <col:20> 'const char **' <ArrayToPointerDecay>
|   |     |     | `-DeclRefExpr 0x5608c145ff78 <col:20> 'const char *[128]' lvalue Var 0x5608c145efe0 'lookup' 'const char *[128]'
|   |     |     `-ImplicitCastExpr 0x5608c145ffd0 <col:27> 'int' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5608c145ff98 <col:27> 'int' lvalue Var 0x5608c145fc58 'c' 'int'
|   |     |-CompoundStmt 0x5608c14601c8 <col:31, line:561:5>
|   |     | `-BinaryOperator 0x5608c14601a8 <line:560:7, col:48> 'jv':'jv' '='
|   |     |   |-DeclRefExpr 0x5608c1460040 <col:7> 'jv':'jv' lvalue Var 0x5608c145f768 'ret' 'jv':'jv'
|   |     |   `-CallExpr 0x5608c1460148 <col:13, col:48> 'jv':'jv'
|   |     |     |-ImplicitCastExpr 0x5608c1460130 <col:13> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |     |     | `-DeclRefExpr 0x5608c1460060 <col:13> 'jv (jv, const char *)' Function 0x5608c13e4128 'jv_string_append_str' 'jv (jv, const char *)'
|   |     |     |-ImplicitCastExpr 0x5608c1460178 <col:34> 'jv':'jv' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x5608c1460080 <col:34> 'jv':'jv' lvalue Var 0x5608c145f768 'ret' 'jv':'jv'
|   |     |     `-ImplicitCastExpr 0x5608c1460190 <col:39, col:47> 'const char *' <LValueToRValue>
|   |     |       `-ArraySubscriptExpr 0x5608c1460110 <col:39, col:47> 'const char *' lvalue
|   |     |         |-ImplicitCastExpr 0x5608c14600e0 <col:39> 'const char **' <ArrayToPointerDecay>
|   |     |         | `-DeclRefExpr 0x5608c14600a0 <col:39> 'const char *[128]' lvalue Var 0x5608c145efe0 'lookup' 'const char *[128]'
|   |     |         `-ImplicitCastExpr 0x5608c14600f8 <col:46> 'int' <LValueToRValue>
|   |     |           `-DeclRefExpr 0x5608c14600c0 <col:46> 'int' lvalue Var 0x5608c145fc58 'c' 'int'
|   |     `-CompoundStmt 0x5608c14603a8 <line:561:12, line:563:5>
|   |       `-BinaryOperator 0x5608c1460388 <line:562:7, col:57> 'jv':'jv' '='
|   |         |-DeclRefExpr 0x5608c14601e0 <col:7> 'jv':'jv' lvalue Var 0x5608c145f768 'ret' 'jv':'jv'
|   |         `-CallExpr 0x5608c1460308 <col:13, col:57> 'jv':'jv'
|   |           |-ImplicitCastExpr 0x5608c14602f0 <col:13> 'jv (*)(jv, const char *, int)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c1460200 <col:13> 'jv (jv, const char *, int)' Function 0x5608c13e3ec8 'jv_string_append_buf' 'jv (jv, const char *, int)'
|   |           |-ImplicitCastExpr 0x5608c1460340 <col:34> 'jv':'jv' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5608c1460220 <col:34> 'jv':'jv' lvalue Var 0x5608c145f768 'ret' 'jv':'jv'
|   |           |-ImplicitCastExpr 0x5608c1460358 <col:39> 'const char *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5608c1460240 <col:39> 'const char *' lvalue Var 0x5608c145fbc0 'cstart' 'const char *'
|   |           `-ImplicitCastExpr 0x5608c1460370 <col:47, col:51> 'int' <IntegralCast>
|   |             `-BinaryOperator 0x5608c14602d0 <col:47, col:51> 'long' '-'
|   |               |-ImplicitCastExpr 0x5608c14602a0 <col:47> 'const char *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x5608c1460260 <col:47> 'const char *' lvalue Var 0x5608c145f8a8 'i' 'const char *'
|   |               `-ImplicitCastExpr 0x5608c14602b8 <col:51> 'const char *' <LValueToRValue>
|   |                 `-DeclRefExpr 0x5608c1460280 <col:51> 'const char *' lvalue Var 0x5608c145fbc0 'cstart' 'const char *'
|   |-CallExpr 0x5608c1460480 <line:565:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1460468 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1460428 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14604a8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1460448 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c145e6b0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14604f8 <line:566:3, col:10>
|     `-ImplicitCastExpr 0x5608c14604e0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14604c0 <col:10> 'jv':'jv' lvalue Var 0x5608c145f768 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1460728 <line:570:1, line:758:1> line:570:11 used f_format 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c1460598 <col:20, col:30> col:30 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c1460610 <col:34, col:37> col:37 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1460688 <col:44, col:47> col:47 used fmt 'jv':'jv'
| `-CompoundStmt 0x5608c146c350 <col:52, line:758:1>
|   |-IfStmt 0x5608c1460ae8 <line:571:3, line:574:3>
|   | |-BinaryOperator 0x5608c14608c8 <line:571:7, col:27> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1460898 <col:7, col:22> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1460838 <col:7, col:22> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1460820 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14607e0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1460860 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1460800 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14608b0 <col:27> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1460878 <col:27> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-CompoundStmt 0x5608c1460ac8 <col:43, line:574:3>
|   |   |-CallExpr 0x5608c1460940 <line:572:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1460928 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14608e8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1460968 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1460908 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1460ab8 <line:573:5, col:51>
|   |     `-CallExpr 0x5608c1460a40 <col:12, col:51> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1460a28 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1460980 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1460a70 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14609a0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1460aa0 <col:28> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1460a88 <col:28> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14609f8 <col:28> 'char [22]' lvalue "is not a valid format"
|   |-DeclStmt 0x5608c1460c20 <line:575:3, col:43>
|   | `-VarDecl 0x5608c1460b20 <col:3, col:42> col:15 used fmt_s 'const char *' cinit
|   |   `-CallExpr 0x5608c1460be0 <col:23, col:42> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c1460bc8 <col:23> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1460b88 <col:23> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c1460c08 <col:39> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1460ba8 <col:39> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|   `-IfStmt 0x5608c146c320 <line:576:3, line:757:3> has_else
|     |-UnaryOperator 0x5608c1460dc8 <line:576:7, col:28> 'int' prefix '!' cannot overflow
|     | `-CallExpr 0x5608c1460d50 <col:8, col:28> 'int'
|     |   |-ImplicitCastExpr 0x5608c1460d38 <col:8> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x5608c1460c38 <col:8> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|     |   |-ImplicitCastExpr 0x5608c1460d80 <col:15> 'const char *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x5608c1460c58 <col:15> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|     |   `-ImplicitCastExpr 0x5608c1460db0 <col:22> 'const char *' <NoOp>
|     |     `-ImplicitCastExpr 0x5608c1460d98 <col:22> 'char *' <ArrayToPointerDecay>
|     |       `-StringLiteral 0x5608c1460cb8 <col:22> 'char [5]' lvalue "json"
|     |-CompoundStmt 0x5608c1460f48 <col:31, line:579:3>
|     | |-CallExpr 0x5608c1460e38 <line:577:5, col:16> 'void'
|     | | |-ImplicitCastExpr 0x5608c1460e20 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5608c1460de0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|     | | `-ImplicitCastExpr 0x5608c1460e60 <col:13> 'jv':'jv' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5608c1460e00 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|     | `-ReturnStmt 0x5608c1460f38 <line:578:5, col:35>
|     |   `-CallExpr 0x5608c1460ef0 <col:12, col:35> 'jv':'jv'
|     |     |-ImplicitCastExpr 0x5608c1460ed8 <col:12> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c1460e78 <col:12> 'jv (jv, int)' Function 0x5608c13e7f68 'jv_dump_string' 'jv (jv, int)'
|     |     |-ImplicitCastExpr 0x5608c1460f20 <col:27> 'jv':'jv' <LValueToRValue>
|     |     | `-DeclRefExpr 0x5608c1460e98 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|     |     `-IntegerLiteral 0x5608c1460eb8 <col:34> 'int' 0
|     `-IfStmt 0x5608c146c2f0 <line:579:10, line:757:3> has_else
|       |-UnaryOperator 0x5608c1461088 <line:579:14, col:35> 'int' prefix '!' cannot overflow
|       | `-CallExpr 0x5608c1461010 <col:15, col:35> 'int'
|       |   |-ImplicitCastExpr 0x5608c1460ff8 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5608c1460f68 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|       |   |-ImplicitCastExpr 0x5608c1461040 <col:22> 'const char *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5608c1460f88 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|       |   `-ImplicitCastExpr 0x5608c1461070 <col:29> 'const char *' <NoOp>
|       |     `-ImplicitCastExpr 0x5608c1461058 <col:29> 'char *' <ArrayToPointerDecay>
|       |       `-StringLiteral 0x5608c1460fa8 <col:29> 'char [5]' lvalue "text"
|       |-CompoundStmt 0x5608c1461280 <col:38, line:582:3>
|       | |-CallExpr 0x5608c14610f8 <line:580:5, col:16> 'void'
|       | | |-ImplicitCastExpr 0x5608c14610e0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5608c14610a0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|       | | `-ImplicitCastExpr 0x5608c1461120 <col:13> 'jv':'jv' <LValueToRValue>
|       | |   `-DeclRefExpr 0x5608c14610c0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|       | `-ReturnStmt 0x5608c1461270 <line:581:5, col:32>
|       |   `-CallExpr 0x5608c1461210 <col:12, col:32> 'jv':'jv'
|       |     |-ImplicitCastExpr 0x5608c14611f8 <col:12> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5608c1461138 <col:12> 'jv (jq_state *, jv)' Function 0x5608c1459140 'f_tostring' 'jv (jq_state *, jv)'
|       |     |-ImplicitCastExpr 0x5608c1461240 <col:23> 'jq_state *' <LValueToRValue>
|       |     | `-DeclRefExpr 0x5608c1461158 <col:23> 'jq_state *' lvalue ParmVar 0x5608c1460598 'jq' 'jq_state *'
|       |     `-ImplicitCastExpr 0x5608c1461258 <col:27> 'jv':'jv' <LValueToRValue>
|       |       `-DeclRefExpr 0x5608c1461178 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|       `-IfStmt 0x5608c146c2c0 <line:582:10, line:757:3> has_else
|         |-BinaryOperator 0x5608c1461510 <line:582:14, col:59> 'int' '||'
|         | |-UnaryOperator 0x5608c14613c0 <col:14, col:34> 'int' prefix '!' cannot overflow
|         | | `-CallExpr 0x5608c1461348 <col:15, col:34> 'int'
|         | |   |-ImplicitCastExpr 0x5608c1461330 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|         | |   | `-DeclRefExpr 0x5608c14612a0 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|         | |   |-ImplicitCastExpr 0x5608c1461378 <col:22> 'const char *' <LValueToRValue>
|         | |   | `-DeclRefExpr 0x5608c14612c0 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|         | |   `-ImplicitCastExpr 0x5608c14613a8 <col:29> 'const char *' <NoOp>
|         | |     `-ImplicitCastExpr 0x5608c1461390 <col:29> 'char *' <ArrayToPointerDecay>
|         | |       `-StringLiteral 0x5608c14612e0 <col:29> 'char [4]' lvalue "csv"
|         | `-UnaryOperator 0x5608c14614f8 <col:39, col:59> 'int' prefix '!' cannot overflow
|         |   `-CallExpr 0x5608c1461480 <col:40, col:59> 'int'
|         |     |-ImplicitCastExpr 0x5608c1461468 <col:40> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|         |     | `-DeclRefExpr 0x5608c14613d8 <col:40> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|         |     |-ImplicitCastExpr 0x5608c14614b0 <col:47> 'const char *' <LValueToRValue>
|         |     | `-DeclRefExpr 0x5608c14613f8 <col:47> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|         |     `-ImplicitCastExpr 0x5608c14614e0 <col:54> 'const char *' <NoOp>
|         |       `-ImplicitCastExpr 0x5608c14614c8 <col:54> 'char *' <ArrayToPointerDecay>
|         |         `-StringLiteral 0x5608c1461418 <col:54> 'char [4]' lvalue "tsv"
|         |-CompoundStmt 0x5608c1464318 <col:62, line:634:3>
|         | |-DeclStmt 0x5608c14616d0 <line:583:5, col:41>
|         | | |-VarDecl 0x5608c1461548 <col:5, col:17> col:17 used quotes 'const char *'
|         | | |-VarDecl 0x5608c14615c8 <col:5, col:26> col:26 used sep 'const char *'
|         | | `-VarDecl 0x5608c1461648 <col:5, col:32> col:32 used escapings 'const char *'
|         | |-DeclStmt 0x5608c1461768 <line:584:5, col:20>
|         | | `-VarDecl 0x5608c1461700 <col:5, col:17> col:17 used msg 'const char *'
|         | |-IfStmt 0x5608c1462490 <line:585:5, line:596:5> has_else
|         | | |-UnaryOperator 0x5608c14618a0 <line:585:9, col:29> 'int' prefix '!' cannot overflow
|         | | | `-CallExpr 0x5608c1461828 <col:10, col:29> 'int'
|         | | |   |-ImplicitCastExpr 0x5608c1461810 <col:10> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|         | | |   | `-DeclRefExpr 0x5608c1461780 <col:10> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|         | | |   |-ImplicitCastExpr 0x5608c1461858 <col:17> 'const char *' <LValueToRValue>
|         | | |   | `-DeclRefExpr 0x5608c14617a0 <col:17> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|         | | |   `-ImplicitCastExpr 0x5608c1461888 <col:24> 'const char *' <NoOp>
|         | | |     `-ImplicitCastExpr 0x5608c1461870 <col:24> 'char *' <ArrayToPointerDecay>
|         | | |       `-StringLiteral 0x5608c14617c0 <col:24> 'char [4]' lvalue "csv"
|         | | |-CompoundStmt 0x5608c1461b58 <col:32, line:590:5>
|         | | | |-BinaryOperator 0x5608c1461948 <line:586:7, col:13> 'const char *' '='
|         | | | | |-DeclRefExpr 0x5608c14618b8 <col:7> 'const char *' lvalue Var 0x5608c1461700 'msg' 'const char *'
|         | | | | `-ImplicitCastExpr 0x5608c1461930 <col:13> 'const char *' <NoOp>
|         | | | |   `-ImplicitCastExpr 0x5608c1461918 <col:13> 'char *' <ArrayToPointerDecay>
|         | | | |     `-StringLiteral 0x5608c14618d8 <col:13> 'char [36]' lvalue "cannot be csv-formatted, only array"
|         | | | |-BinaryOperator 0x5608c1461a18 <line:587:7, col:16> 'const char *' '='
|         | | | | |-DeclRefExpr 0x5608c1461968 <col:7> 'const char *' lvalue Var 0x5608c1461548 'quotes' 'const char *'
|         | | | | `-ImplicitCastExpr 0x5608c1461a00 <col:16> 'const char *' <NoOp>
|         | | | |   `-ImplicitCastExpr 0x5608c14619e8 <col:16> 'char *' <ArrayToPointerDecay>
|         | | | |     `-StringLiteral 0x5608c14619c8 <col:16> 'char [2]' lvalue "\""
|         | | | |-BinaryOperator 0x5608c1461aa8 <line:588:7, col:13> 'const char *' '='
|         | | | | |-DeclRefExpr 0x5608c1461a38 <col:7> 'const char *' lvalue Var 0x5608c14615c8 'sep' 'const char *'
|         | | | | `-ImplicitCastExpr 0x5608c1461a90 <col:13> 'const char *' <NoOp>
|         | | | |   `-ImplicitCastExpr 0x5608c1461a78 <col:13> 'char *' <ArrayToPointerDecay>
|         | | | |     `-StringLiteral 0x5608c1461a58 <col:13> 'char [2]' lvalue ","
|         | | | `-BinaryOperator 0x5608c1461b38 <line:589:7, col:19> 'const char *' '='
|         | | |   |-DeclRefExpr 0x5608c1461ac8 <col:7> 'const char *' lvalue Var 0x5608c1461648 'escapings' 'const char *'
|         | | |   `-ImplicitCastExpr 0x5608c1461b20 <col:19> 'const char *' <NoOp>
|         | | |     `-ImplicitCastExpr 0x5608c1461b08 <col:19> 'char *' <ArrayToPointerDecay>
|         | | |       `-StringLiteral 0x5608c1461ae8 <col:19> 'char [5]' lvalue "\"\"\"\000"
|         | | `-CompoundStmt 0x5608c1462458 <line:590:12, line:596:5>
|         | |   |-BinaryOperator 0x5608c1461c18 <line:591:7, col:13> 'const char *' '='
|         | |   | |-DeclRefExpr 0x5608c1461b88 <col:7> 'const char *' lvalue Var 0x5608c1461700 'msg' 'const char *'
|         | |   | `-ImplicitCastExpr 0x5608c1461c00 <col:13> 'const char *' <NoOp>
|         | |   |   `-ImplicitCastExpr 0x5608c1461be8 <col:13> 'char *' <ArrayToPointerDecay>
|         | |   |     `-StringLiteral 0x5608c1461ba8 <col:13> 'char [36]' lvalue "cannot be tsv-formatted, only array"
|         | |   |-ParenExpr 0x5608c1462288 </usr/include/assert.h:105:3, line:110:7> 'void'
|         | |   | `-BinaryOperator 0x5608c1462268 <line:105:4, line:110:6> 'void' ','
|         | |   |   |-CStyleCastExpr 0x5608c1461e60 <line:105:4, col:33> 'void' <ToVoid>
|         | |   |   | `-UnaryExprOrTypeTraitExpr 0x5608c1461e30 <col:11, col:33> 'unsigned long' sizeof
|         | |   |   |   `-ParenExpr 0x5608c1461e10 <col:18, col:33> 'int'
|         | |   |   |     `-ConditionalOperator 0x5608c1461de0 <col:19, col:32> 'int'
|         | |   |   |       |-ParenExpr 0x5608c1461d80 <col:19, col:24> 'int'
|         | |   |   |       | `-UnaryOperator 0x5608c1461d68 <src/builtin.c:592:14, col:34> 'int' prefix '!' cannot overflow
|         | |   |   |       |   `-CallExpr 0x5608c1461ce0 <col:15, col:34> 'int'
|         | |   |   |       |     |-ImplicitCastExpr 0x5608c1461cc8 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|         | |   |   |       |     | `-DeclRefExpr 0x5608c1461c38 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)' non_odr_use_unevaluated
|         | |   |   |       |     |-ImplicitCastExpr 0x5608c1461d10 <col:22> 'const char *' <LValueToRValue>
|         | |   |   |       |     | `-DeclRefExpr 0x5608c1461c58 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *' non_odr_use_unevaluated
|         | |   |   |       |     `-ImplicitCastExpr 0x5608c1461d50 <col:29> 'const char *' <NoOp>
|         | |   |   |       |       `-ImplicitCastExpr 0x5608c1461d28 <col:29> 'char *' <ArrayToPointerDecay>
|         | |   |   |       |         `-StringLiteral 0x5608c1461c78 <col:29> 'char [4]' lvalue "tsv"
|         | |   |   |       |-IntegerLiteral 0x5608c1461da0 </usr/include/assert.h:105:28> 'int' 1
|         | |   |   |       `-IntegerLiteral 0x5608c1461dc0 <col:32> 'int' 0
|         | |   |   `-UnaryOperator 0x5608c1462250 <col:36, line:110:6> 'void' prefix '__extension__' cannot overflow
|         | |   |     `-StmtExpr 0x5608c1462230 <line:105:50, line:110:6> 'void'
|         | |   |       `-CompoundStmt 0x5608c1462218 <line:105:51, line:110:5>
|         | |   |         `-IfStmt 0x5608c14621e8 <line:106:7, line:109:68> has_else
|         | |   |           |-UnaryOperator 0x5608c1461fa8 <src/builtin.c:592:14, col:34> 'int' prefix '!' cannot overflow
|         | |   |           | `-CallExpr 0x5608c1461f30 <col:15, col:34> 'int'
|         | |   |           |   |-ImplicitCastExpr 0x5608c1461f18 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|         | |   |           |   | `-DeclRefExpr 0x5608c1461e88 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|         | |   |           |   |-ImplicitCastExpr 0x5608c1461f60 <col:22> 'const char *' <LValueToRValue>
|         | |   |           |   | `-DeclRefExpr 0x5608c1461ea8 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|         | |   |           |   `-ImplicitCastExpr 0x5608c1461f90 <col:29> 'const char *' <NoOp>
|         | |   |           |     `-ImplicitCastExpr 0x5608c1461f78 <col:29> 'char *' <ArrayToPointerDecay>
|         | |   |           |       `-StringLiteral 0x5608c1461ec8 <col:29> 'char [4]' lvalue "tsv"
|         | |   |           |-NullStmt 0x5608c1461fc0 </usr/include/assert.h:107:9>
|         | |   |           `-CallExpr 0x5608c1462118 <line:109:9, col:68> 'void'
|         | |   |             |-ImplicitCastExpr 0x5608c1462100 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|         | |   |             | `-DeclRefExpr 0x5608c1461fc8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x5608c11c5d98 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|         | |   |             |-ImplicitCastExpr 0x5608c1462170 <<scratch space>:200:1> 'const char *' <NoOp>
|         | |   |             | `-ImplicitCastExpr 0x5608c1462158 <col:1> 'char *' <ArrayToPointerDecay>
|         | |   |             |   `-StringLiteral 0x5608c1461fe8 <col:1> 'char [22]' lvalue "!strcmp(fmt_s, \"tsv\")"
|         | |   |             |-ImplicitCastExpr 0x5608c14621a0 <line:201:1> 'const char *' <NoOp>
|         | |   |             | `-ImplicitCastExpr 0x5608c1462188 <col:1> 'char *' <ArrayToPointerDecay>
|         | |   |             |   `-StringLiteral 0x5608c1462018 <col:1> 'char [14]' lvalue "src/builtin.c"
|         | |   |             |-ImplicitCastExpr 0x5608c14621b8 <line:202:1> 'unsigned int' <IntegralCast>
|         | |   |             | `-IntegerLiteral 0x5608c1462040 <col:1> 'int' 592
|         | |   |             `-ImplicitCastExpr 0x5608c14621d0 </usr/include/assert.h:126:30, col:44> 'const char *' <ArrayToPointerDecay>
|         | |   |               `-UnaryOperator 0x5608c14620e8 <col:30, col:44> 'const char [32]' lvalue prefix '__extension__' cannot overflow
|         | |   |                 `-PredefinedExpr 0x5608c14620d0 <col:44> 'const char [32]' lvalue __PRETTY_FUNCTION__
|         | |   |                   `-StringLiteral 0x5608c1462098 <col:44> 'const char [32]' lvalue "jv f_format(jq_state *, jv, jv)"
|         | |   |-BinaryOperator 0x5608c1462310 <src/builtin.c:593:7, col:16> 'const char *' '='
|         | |   | |-DeclRefExpr 0x5608c14622a8 <col:7> 'const char *' lvalue Var 0x5608c1461548 'quotes' 'const char *'
|         | |   | `-ImplicitCastExpr 0x5608c14622f8 <col:16> 'const char *' <NoOp>
|         | |   |   `-ImplicitCastExpr 0x5608c14622e0 <col:16> 'char *' <ArrayToPointerDecay>
|         | |   |     `-StringLiteral 0x5608c14622c8 <col:16> 'char [1]' lvalue ""
|         | |   |-BinaryOperator 0x5608c14623a0 <line:594:7, col:13> 'const char *' '='
|         | |   | |-DeclRefExpr 0x5608c1462330 <col:7> 'const char *' lvalue Var 0x5608c14615c8 'sep' 'const char *'
|         | |   | `-ImplicitCastExpr 0x5608c1462388 <col:13> 'const char *' <NoOp>
|         | |   |   `-ImplicitCastExpr 0x5608c1462370 <col:13> 'char *' <ArrayToPointerDecay>
|         | |   |     `-StringLiteral 0x5608c1462350 <col:13> 'char [2]' lvalue "\t"
|         | |   `-BinaryOperator 0x5608c1462438 <line:595:7, col:19> 'const char *' '='
|         | |     |-DeclRefExpr 0x5608c14623c0 <col:7> 'const char *' lvalue Var 0x5608c1461648 'escapings' 'const char *'
|         | |     `-ImplicitCastExpr 0x5608c1462420 <col:19> 'const char *' <NoOp>
|         | |       `-ImplicitCastExpr 0x5608c1462408 <col:19> 'char *' <ArrayToPointerDecay>
|         | |         `-StringLiteral 0x5608c14623e0 <col:19> 'char [17]' lvalue "\t\\t\000\r\\r\000\n\\n\000\\\\\\\000"
|         | |-CallExpr 0x5608c1462518 <line:597:5, col:16> 'void'
|         | | |-ImplicitCastExpr 0x5608c1462500 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x5608c14624c0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|         | | `-ImplicitCastExpr 0x5608c1462540 <col:13> 'jv':'jv' <LValueToRValue>
|         | |   `-DeclRefExpr 0x5608c14624e0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|         | |-IfStmt 0x5608c1462748 <line:598:5, line:599:35>
|         | | |-BinaryOperator 0x5608c1462640 <line:598:9, col:31> 'int' '!='
|         | | | |-ImplicitCastExpr 0x5608c1462610 <col:9, col:26> 'unsigned int' <IntegralCast>
|         | | | | `-CallExpr 0x5608c14625b0 <col:9, col:26> 'jv_kind':'jv_kind'
|         | | | |   |-ImplicitCastExpr 0x5608c1462598 <col:9> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|         | | | |   | `-DeclRefExpr 0x5608c1462558 <col:9> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|         | | | |   `-ImplicitCastExpr 0x5608c14625d8 <col:21> 'jv':'jv' <LValueToRValue>
|         | | | |     `-DeclRefExpr 0x5608c1462578 <col:21> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|         | | | `-ImplicitCastExpr 0x5608c1462628 <col:31> 'unsigned int' <IntegralCast>
|         | | |   `-DeclRefExpr 0x5608c14625f0 <col:31> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|         | | `-ReturnStmt 0x5608c1462738 <line:599:7, col:35>
|         | |   `-CallExpr 0x5608c14626d8 <col:14, col:35> 'jv':'jv'
|         | |     |-ImplicitCastExpr 0x5608c14626c0 <col:14> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|         | |     | `-DeclRefExpr 0x5608c1462660 <col:14> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|         | |     |-ImplicitCastExpr 0x5608c1462708 <col:25> 'jv':'jv' <LValueToRValue>
|         | |     | `-DeclRefExpr 0x5608c1462680 <col:25> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|         | |     `-ImplicitCastExpr 0x5608c1462720 <col:32> 'const char *' <LValueToRValue>
|         | |       `-DeclRefExpr 0x5608c14626a0 <col:32> 'const char *' lvalue Var 0x5608c1461700 'msg' 'const char *'
|         | |-DeclStmt 0x5608c1462888 <line:600:5, col:28>
|         | | `-VarDecl 0x5608c1462778 <col:5, col:27> col:8 used line 'jv':'jv' cinit
|         | |   `-CallExpr 0x5608c1462830 <col:15, col:27> 'jv':'jv'
|         | |     |-ImplicitCastExpr 0x5608c1462818 <col:15> 'jv (*)(const char *)' <FunctionToPointerDecay>
|         | |     | `-DeclRefExpr 0x5608c14627e0 <col:15> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|         | |     `-ImplicitCastExpr 0x5608c1462870 <col:25> 'const char *' <NoOp>
|         | |       `-ImplicitCastExpr 0x5608c1462858 <col:25> 'char *' <ArrayToPointerDecay>
|         | |         `-StringLiteral 0x5608c1462800 <col:25> 'char [1]' lvalue ""
|         | |-ForStmt 0x5608c14641f8 <./src/jv.h:80:3, src/builtin.c:631:5>
|         | | |-DeclStmt 0x5608c1462b78 <./src/jv.h:80:8, col:67>
|         | | | |-VarDecl 0x5608c14628b8 <col:8, col:49> col:12 used jv_len__ 'int' cinit
|         | | | | `-CallExpr 0x5608c14629f0 <col:23, col:49> 'int'
|         | | | |   |-ImplicitCastExpr 0x5608c14629d8 <col:23> 'int (*)(jv)' <FunctionToPointerDecay>
|         | | | |   | `-DeclRefExpr 0x5608c1462920 <col:23> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|         | | | |   `-CallExpr 0x5608c1462998 <col:39, col:48> 'jv':'jv'
|         | | | |     |-ImplicitCastExpr 0x5608c1462980 <col:39> 'jv (*)(jv)' <FunctionToPointerDecay>
|         | | | |     | `-DeclRefExpr 0x5608c1462940 <col:39> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|         | | | |     `-ImplicitCastExpr 0x5608c14629c0 <src/builtin.c:601:22> 'jv':'jv' <LValueToRValue>
|         | | | |       `-DeclRefExpr 0x5608c1462960 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|         | | | |-VarDecl 0x5608c1462a30 <./src/jv.h:80:8, col:54> src/builtin.c:601:29 used i 'int' cinit
|         | | | | `-IntegerLiteral 0x5608c1462a98 <./src/jv.h:80:54> 'int' 0
|         | | | `-VarDecl 0x5608c1462ad0 <col:8, col:66> col:57 used jv_j__ 'int' cinit
|         | | |   `-IntegerLiteral 0x5608c1462b38 <col:66> 'int' 1
|         | | |-<<<NULL>>>
|         | | |-ImplicitCastExpr 0x5608c1462bb0 <line:81:8> 'int' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5608c1462b90 <col:8> 'int' lvalue Var 0x5608c1462ad0 'jv_j__' 'int'
|         | | |-BinaryOperator 0x5608c1462c08 <col:16, col:25> 'int' '='
|         | | | |-DeclRefExpr 0x5608c1462bc8 <col:16> 'int' lvalue Var 0x5608c1462ad0 'jv_j__' 'int'
|         | | | `-IntegerLiteral 0x5608c1462be8 <col:25> 'int' 0
|         | | `-ForStmt 0x5608c14641c0 <line:82:5, src/builtin.c:631:5>
|         | |   |-DeclStmt 0x5608c1462ca0 <./src/jv.h:82:10, col:14>
|         | |   | `-VarDecl 0x5608c1462c38 <col:10, src/builtin.c:601:32> col:32 used x 'jv':'jv'
|         | |   |-<<<NULL>>>
|         | |   |-ConditionalOperator 0x5608c1462f40 <col:29, ./src/jv.h:84:51> 'int'
|         | |   | |-BinaryOperator 0x5608c1462d28 <src/builtin.c:601:29, ./src/jv.h:83:14> 'int' '<'
|         | |   | | |-ImplicitCastExpr 0x5608c1462cf8 <src/builtin.c:601:29> 'int' <LValueToRValue>
|         | |   | | | `-DeclRefExpr 0x5608c1462cb8 <col:29> 'int' lvalue Var 0x5608c1462a30 'i' 'int'
|         | |   | | `-ImplicitCastExpr 0x5608c1462d10 <./src/jv.h:83:14> 'int' <LValueToRValue>
|         | |   | |   `-DeclRefExpr 0x5608c1462cd8 <col:14> 'int' lvalue Var 0x5608c14628b8 'jv_len__' 'int'
|         | |   | |-ParenExpr 0x5608c1462f00 <line:84:12, col:47> 'int'
|         | |   | | `-BinaryOperator 0x5608c1462ee0 <src/builtin.c:601:32, ./src/jv.h:84:46> 'int' ','
|         | |   | |   |-BinaryOperator 0x5608c1462ea0 <src/builtin.c:601:32, ./src/jv.h:84:43> 'jv':'jv' '='
|         | |   | |   | |-DeclRefExpr 0x5608c1462d48 <src/builtin.c:601:32> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |   | |   | `-CallExpr 0x5608c1462e58 <./src/jv.h:84:17, col:43> 'jv':'jv'
|         | |   | |   |   |-ImplicitCastExpr 0x5608c1462e40 <col:17> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|         | |   | |   |   | `-DeclRefExpr 0x5608c1462d68 <col:17> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|         | |   | |   |   |-CallExpr 0x5608c1462de0 <col:30, col:39> 'jv':'jv'
|         | |   | |   |   | |-ImplicitCastExpr 0x5608c1462dc8 <col:30> 'jv (*)(jv)' <FunctionToPointerDecay>
|         | |   | |   |   | | `-DeclRefExpr 0x5608c1462d88 <col:30> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|         | |   | |   |   | `-ImplicitCastExpr 0x5608c1462e08 <src/builtin.c:601:22> 'jv':'jv' <LValueToRValue>
|         | |   | |   |   |   `-DeclRefExpr 0x5608c1462da8 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|         | |   | |   |   `-ImplicitCastExpr 0x5608c1462e88 <col:29> 'int' <LValueToRValue>
|         | |   | |   |     `-DeclRefExpr 0x5608c1462e20 <col:29> 'int' lvalue Var 0x5608c1462a30 'i' 'int'
|         | |   | |   `-IntegerLiteral 0x5608c1462ec0 <./src/jv.h:84:46> 'int' 1
|         | |   | `-IntegerLiteral 0x5608c1462f20 <col:51> 'int' 0
|         | |   |-UnaryOperator 0x5608c1462f90 <src/builtin.c:601:29, ./src/jv.h:85:11> 'int' postfix '++'
|         | |   | `-DeclRefExpr 0x5608c1462f70 <src/builtin.c:601:29> 'int' lvalue Var 0x5608c1462a30 'i' 'int'
|         | |   `-CompoundStmt 0x5608c14641a0 <col:35, line:631:5>
|         | |     |-IfStmt 0x5608c14630f8 <line:602:7, col:51>
|         | |     | |-ImplicitCastExpr 0x5608c1462fc8 <col:11> 'int' <LValueToRValue>
|         | |     | | `-DeclRefExpr 0x5608c1462fa8 <col:11> 'int' lvalue Var 0x5608c1462a30 'i' 'int'
|         | |     | `-BinaryOperator 0x5608c14630d8 <col:14, col:51> 'jv':'jv' '='
|         | |     |   |-DeclRefExpr 0x5608c1462fe0 <col:14> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |     |   `-CallExpr 0x5608c1463078 <col:21, col:51> 'jv':'jv'
|         | |     |     |-ImplicitCastExpr 0x5608c1463060 <col:21> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|         | |     |     | `-DeclRefExpr 0x5608c1463000 <col:21> 'jv (jv, const char *)' Function 0x5608c13e4128 'jv_string_append_str' 'jv (jv, const char *)'
|         | |     |     |-ImplicitCastExpr 0x5608c14630a8 <col:42> 'jv':'jv' <LValueToRValue>
|         | |     |     | `-DeclRefExpr 0x5608c1463020 <col:42> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |     |     `-ImplicitCastExpr 0x5608c14630c0 <col:48> 'const char *' <LValueToRValue>
|         | |     |       `-DeclRefExpr 0x5608c1463040 <col:48> 'const char *' lvalue Var 0x5608c14615c8 'sep' 'const char *'
|         | |     `-SwitchStmt 0x5608c14631c8 <line:603:7, line:630:7>
|         | |       |-ImplicitCastExpr 0x5608c14631b0 <line:603:15, col:28> 'unsigned int' <IntegralCast>
|         | |       | `-CallExpr 0x5608c1463170 <col:15, col:28> 'jv_kind':'jv_kind'
|         | |       |   |-ImplicitCastExpr 0x5608c1463158 <col:15> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|         | |       |   | `-DeclRefExpr 0x5608c1463118 <col:15> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|         | |       |   `-ImplicitCastExpr 0x5608c1463198 <col:27> 'jv':'jv' <LValueToRValue>
|         | |       |     `-DeclRefExpr 0x5608c1463138 <col:27> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |       `-CompoundStmt 0x5608c1464140 <col:31, line:630:7>
|         | |         |-CaseStmt 0x5608c1463240 <line:604:7, line:606:18>
|         | |         | |-ImplicitCastExpr 0x5608c1463228 <line:604:12> 'unsigned int' <IntegralCast>
|         | |         | | `-ConstantExpr 0x5608c1463210 <col:12> 'int'
|         | |         | |   `-DeclRefExpr 0x5608c14631f0 <col:12> 'int' EnumConstant 0x5608c13d0a40 'JV_KIND_NULL' 'int'
|         | |         | `-CallExpr 0x5608c14632c0 <line:606:9, col:18> 'void'
|         | |         |   |-ImplicitCastExpr 0x5608c14632a8 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|         | |         |   | `-DeclRefExpr 0x5608c1463268 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|         | |         |   `-ImplicitCastExpr 0x5608c14632e8 <col:17> 'jv':'jv' <LValueToRValue>
|         | |         |     `-DeclRefExpr 0x5608c1463288 <col:17> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |         |-BreakStmt 0x5608c1463300 <line:607:9>
|         | |         |-CaseStmt 0x5608c1463358 <line:608:7, line:610:59>
|         | |         | |-ImplicitCastExpr 0x5608c1463340 <line:608:12> 'unsigned int' <IntegralCast>
|         | |         | | `-ConstantExpr 0x5608c1463328 <col:12> 'int'
|         | |         | |   `-DeclRefExpr 0x5608c1463308 <col:12> 'int' EnumConstant 0x5608c13d0ae0 'JV_KIND_TRUE' 'int'
|         | |         | `-CaseStmt 0x5608c14633d0 <line:609:7, line:610:59>
|         | |         |   |-ImplicitCastExpr 0x5608c14633b8 <line:609:12> 'unsigned int' <IntegralCast>
|         | |         |   | `-ConstantExpr 0x5608c14633a0 <col:12> 'int'
|         | |         |   |   `-DeclRefExpr 0x5608c1463380 <col:12> 'int' EnumConstant 0x5608c13d0a90 'JV_KIND_FALSE' 'int'
|         | |         |   `-BinaryOperator 0x5608c1463578 <line:610:9, col:59> 'jv':'jv' '='
|         | |         |     |-DeclRefExpr 0x5608c14633f8 <col:9> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |     `-CallExpr 0x5608c1463530 <col:16, col:59> 'jv':'jv'
|         | |         |       |-ImplicitCastExpr 0x5608c1463518 <col:16> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         | |         |       | `-DeclRefExpr 0x5608c1463418 <col:16> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|         | |         |       |-ImplicitCastExpr 0x5608c1463560 <col:33> 'jv':'jv' <LValueToRValue>
|         | |         |       | `-DeclRefExpr 0x5608c1463438 <col:33> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |       `-CallExpr 0x5608c14634d0 <col:39, col:58> 'jv':'jv'
|         | |         |         |-ImplicitCastExpr 0x5608c14634b8 <col:39> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|         | |         |         | `-DeclRefExpr 0x5608c1463458 <col:39> 'jv (jv, int)' Function 0x5608c13e7f68 'jv_dump_string' 'jv (jv, int)'
|         | |         |         |-ImplicitCastExpr 0x5608c1463500 <col:54> 'jv':'jv' <LValueToRValue>
|         | |         |         | `-DeclRefExpr 0x5608c1463478 <col:54> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |         |         `-IntegerLiteral 0x5608c1463498 <col:57> 'int' 0
|         | |         |-BreakStmt 0x5608c1463598 <line:611:9>
|         | |         |-CaseStmt 0x5608c14635f0 <line:612:7, line:618:9>
|         | |         | |-ImplicitCastExpr 0x5608c14635d8 <line:612:12> 'unsigned int' <IntegralCast>
|         | |         | | `-ConstantExpr 0x5608c14635c0 <col:12> 'int'
|         | |         | |   `-DeclRefExpr 0x5608c14635a0 <col:12> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|         | |         | `-IfStmt 0x5608c14639d0 <line:613:9, line:618:9> has_else
|         | |         |   |-BinaryOperator 0x5608c1463748 <line:613:13, col:52> 'int' '!='
|         | |         |   | |-CallExpr 0x5608c1463670 <col:13, col:30> 'double'
|         | |         |   | | |-ImplicitCastExpr 0x5608c1463658 <col:13> 'double (*)(jv)' <FunctionToPointerDecay>
|         | |         |   | | | `-DeclRefExpr 0x5608c1463618 <col:13> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|         | |         |   | | `-ImplicitCastExpr 0x5608c1463698 <col:29> 'jv':'jv' <LValueToRValue>
|         | |         |   | |   `-DeclRefExpr 0x5608c1463638 <col:29> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |         |   | `-CallExpr 0x5608c1463708 <col:35, col:52> 'double'
|         | |         |   |   |-ImplicitCastExpr 0x5608c14636f0 <col:35> 'double (*)(jv)' <FunctionToPointerDecay>
|         | |         |   |   | `-DeclRefExpr 0x5608c14636b0 <col:35> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|         | |         |   |   `-ImplicitCastExpr 0x5608c1463730 <col:51> 'jv':'jv' <LValueToRValue>
|         | |         |   |     `-DeclRefExpr 0x5608c14636d0 <col:51> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |         |   |-CompoundStmt 0x5608c1463800 <col:55, line:616:9>
|         | |         |   | `-CallExpr 0x5608c14637c0 <line:615:11, col:20> 'void'
|         | |         |   |   |-ImplicitCastExpr 0x5608c14637a8 <col:11> 'void (*)(jv)' <FunctionToPointerDecay>
|         | |         |   |   | `-DeclRefExpr 0x5608c1463768 <col:11> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|         | |         |   |   `-ImplicitCastExpr 0x5608c14637e8 <col:19> 'jv':'jv' <LValueToRValue>
|         | |         |   |     `-DeclRefExpr 0x5608c1463788 <col:19> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |         |   `-CompoundStmt 0x5608c14639b8 <line:616:16, line:618:9>
|         | |         |     `-BinaryOperator 0x5608c1463998 <line:617:11, col:61> 'jv':'jv' '='
|         | |         |       |-DeclRefExpr 0x5608c1463818 <col:11> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |       `-CallExpr 0x5608c1463950 <col:18, col:61> 'jv':'jv'
|         | |         |         |-ImplicitCastExpr 0x5608c1463938 <col:18> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         | |         |         | `-DeclRefExpr 0x5608c1463838 <col:18> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|         | |         |         |-ImplicitCastExpr 0x5608c1463980 <col:35> 'jv':'jv' <LValueToRValue>
|         | |         |         | `-DeclRefExpr 0x5608c1463858 <col:35> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |         `-CallExpr 0x5608c14638f0 <col:41, col:60> 'jv':'jv'
|         | |         |           |-ImplicitCastExpr 0x5608c14638d8 <col:41> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|         | |         |           | `-DeclRefExpr 0x5608c1463878 <col:41> 'jv (jv, int)' Function 0x5608c13e7f68 'jv_dump_string' 'jv (jv, int)'
|         | |         |           |-ImplicitCastExpr 0x5608c1463920 <col:56> 'jv':'jv' <LValueToRValue>
|         | |         |           | `-DeclRefExpr 0x5608c1463898 <col:56> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |         |           `-IntegerLiteral 0x5608c14638b8 <col:59> 'int' 0
|         | |         |-BreakStmt 0x5608c1463a00 <line:619:9>
|         | |         |-CaseStmt 0x5608c1463a58 <line:620:7, line:625:7>
|         | |         | |-ImplicitCastExpr 0x5608c1463a40 <line:620:12> 'unsigned int' <IntegralCast>
|         | |         | | `-ConstantExpr 0x5608c1463a28 <col:12> 'int'
|         | |         | |   `-DeclRefExpr 0x5608c1463a08 <col:12> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|         | |         | `-CompoundStmt 0x5608c1463e70 <col:28, line:625:7>
|         | |         |   |-BinaryOperator 0x5608c1463b78 <line:621:9, col:49> 'jv':'jv' '='
|         | |         |   | |-DeclRefExpr 0x5608c1463a80 <col:9> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |   | `-CallExpr 0x5608c1463b18 <col:16, col:49> 'jv':'jv'
|         | |         |   |   |-ImplicitCastExpr 0x5608c1463b00 <col:16> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|         | |         |   |   | `-DeclRefExpr 0x5608c1463aa0 <col:16> 'jv (jv, const char *)' Function 0x5608c13e4128 'jv_string_append_str' 'jv (jv, const char *)'
|         | |         |   |   |-ImplicitCastExpr 0x5608c1463b48 <col:37> 'jv':'jv' <LValueToRValue>
|         | |         |   |   | `-DeclRefExpr 0x5608c1463ac0 <col:37> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |   |   `-ImplicitCastExpr 0x5608c1463b60 <col:43> 'const char *' <LValueToRValue>
|         | |         |   |     `-DeclRefExpr 0x5608c1463ae0 <col:43> 'const char *' lvalue Var 0x5608c1461548 'quotes' 'const char *'
|         | |         |   |-BinaryOperator 0x5608c1463d30 <line:622:9, col:66> 'jv':'jv' '='
|         | |         |   | |-DeclRefExpr 0x5608c1463b98 <col:9> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |   | `-CallExpr 0x5608c1463ce8 <col:16, col:66> 'jv':'jv'
|         | |         |   |   |-ImplicitCastExpr 0x5608c1463cd0 <col:16> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         | |         |   |   | `-DeclRefExpr 0x5608c1463bb8 <col:16> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|         | |         |   |   |-ImplicitCastExpr 0x5608c1463d18 <col:33> 'jv':'jv' <LValueToRValue>
|         | |         |   |   | `-DeclRefExpr 0x5608c1463bd8 <col:33> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |   |   `-CallExpr 0x5608c1463c70 <col:39, col:65> 'jv':'jv'
|         | |         |   |     |-ImplicitCastExpr 0x5608c1463c58 <col:39> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|         | |         |   |     | `-DeclRefExpr 0x5608c1463bf8 <col:39> 'jv (jv, const char *)' Function 0x5608c145e7c8 'escape_string' 'jv (jv, const char *)'
|         | |         |   |     |-ImplicitCastExpr 0x5608c1463ca0 <col:53> 'jv':'jv' <LValueToRValue>
|         | |         |   |     | `-DeclRefExpr 0x5608c1463c18 <col:53> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |         |   |     `-ImplicitCastExpr 0x5608c1463cb8 <col:56> 'const char *' <LValueToRValue>
|         | |         |   |       `-DeclRefExpr 0x5608c1463c38 <col:56> 'const char *' lvalue Var 0x5608c1461648 'escapings' 'const char *'
|         | |         |   |-BinaryOperator 0x5608c1463e48 <line:623:9, col:49> 'jv':'jv' '='
|         | |         |   | |-DeclRefExpr 0x5608c1463d50 <col:9> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |   | `-CallExpr 0x5608c1463de8 <col:16, col:49> 'jv':'jv'
|         | |         |   |   |-ImplicitCastExpr 0x5608c1463dd0 <col:16> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|         | |         |   |   | `-DeclRefExpr 0x5608c1463d70 <col:16> 'jv (jv, const char *)' Function 0x5608c13e4128 'jv_string_append_str' 'jv (jv, const char *)'
|         | |         |   |   |-ImplicitCastExpr 0x5608c1463e18 <col:37> 'jv':'jv' <LValueToRValue>
|         | |         |   |   | `-DeclRefExpr 0x5608c1463d90 <col:37> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         |   |   `-ImplicitCastExpr 0x5608c1463e30 <col:43> 'const char *' <LValueToRValue>
|         | |         |   |     `-DeclRefExpr 0x5608c1463db0 <col:43> 'const char *' lvalue Var 0x5608c1461548 'quotes' 'const char *'
|         | |         |   `-BreakStmt 0x5608c1463e68 <line:624:9>
|         | |         |-DefaultStmt 0x5608c1463f38 <line:626:7, line:627:22>
|         | |         | `-CallExpr 0x5608c1463ef8 <col:9, col:22> 'void'
|         | |         |   |-ImplicitCastExpr 0x5608c1463ee0 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|         | |         |   | `-DeclRefExpr 0x5608c1463ea0 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|         | |         |   `-ImplicitCastExpr 0x5608c1463f20 <col:17> 'jv':'jv' <LValueToRValue>
|         | |         |     `-DeclRefExpr 0x5608c1463ec0 <col:17> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|         | |         |-CallExpr 0x5608c1463fb0 <line:628:9, col:21> 'void'
|         | |         | |-ImplicitCastExpr 0x5608c1463f98 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|         | |         | | `-DeclRefExpr 0x5608c1463f58 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|         | |         | `-ImplicitCastExpr 0x5608c1463fd8 <col:17> 'jv':'jv' <LValueToRValue>
|         | |         |   `-DeclRefExpr 0x5608c1463f78 <col:17> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         | |         `-ReturnStmt 0x5608c1464130 <line:629:9, col:57>
|         | |           `-CallExpr 0x5608c14640b8 <col:16, col:57> 'jv':'jv'
|         | |             |-ImplicitCastExpr 0x5608c14640a0 <col:16> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|         | |             | `-DeclRefExpr 0x5608c1463ff0 <col:16> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|         | |             |-ImplicitCastExpr 0x5608c14640e8 <col:27> 'jv':'jv' <LValueToRValue>
|         | |             | `-DeclRefExpr 0x5608c1464010 <col:27> 'jv':'jv' lvalue Var 0x5608c1462c38 'x' 'jv':'jv'
|         | |             `-ImplicitCastExpr 0x5608c1464118 <col:30> 'const char *' <NoOp>
|         | |               `-ImplicitCastExpr 0x5608c1464100 <col:30> 'char *' <ArrayToPointerDecay>
|         | |                 `-StringLiteral 0x5608c1464068 <col:30> 'char [26]' lvalue "is not valid in a csv row"
|         | |-CallExpr 0x5608c1464288 <line:632:5, col:18> 'void'
|         | | |-ImplicitCastExpr 0x5608c1464270 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x5608c1464230 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|         | | `-ImplicitCastExpr 0x5608c14642b0 <col:13> 'jv':'jv' <LValueToRValue>
|         | |   `-DeclRefExpr 0x5608c1464250 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|         | `-ReturnStmt 0x5608c1464300 <line:633:5, col:12>
|         |   `-ImplicitCastExpr 0x5608c14642e8 <col:12> 'jv':'jv' <LValueToRValue>
|         |     `-DeclRefExpr 0x5608c14642c8 <col:12> 'jv':'jv' lvalue Var 0x5608c1462778 'line' 'jv':'jv'
|         `-IfStmt 0x5608c146c290 <line:634:10, line:757:3> has_else
|           |-UnaryOperator 0x5608c1464490 <line:634:14, col:35> 'int' prefix '!' cannot overflow
|           | `-CallExpr 0x5608c1464418 <col:15, col:35> 'int'
|           |   |-ImplicitCastExpr 0x5608c1464400 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|           |   | `-DeclRefExpr 0x5608c1464370 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|           |   |-ImplicitCastExpr 0x5608c1464448 <col:22> 'const char *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x5608c1464390 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|           |   `-ImplicitCastExpr 0x5608c1464478 <col:29> 'const char *' <NoOp>
|           |     `-ImplicitCastExpr 0x5608c1464460 <col:29> 'char *' <ArrayToPointerDecay>
|           |       `-StringLiteral 0x5608c14643b0 <col:29> 'char [5]' lvalue "html"
|           |-CompoundStmt 0x5608c1464700 <col:38, line:637:3>
|           | |-CallExpr 0x5608c1464500 <line:635:5, col:16> 'void'
|           | | |-ImplicitCastExpr 0x5608c14644e8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|           | | | `-DeclRefExpr 0x5608c14644a8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|           | | `-ImplicitCastExpr 0x5608c1464528 <col:13> 'jv':'jv' <LValueToRValue>
|           | |   `-DeclRefExpr 0x5608c14644c8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|           | `-ReturnStmt 0x5608c14646f0 <line:636:5, col:92>
|           |   `-CallExpr 0x5608c1464690 <col:12, col:92> 'jv':'jv'
|           |     |-ImplicitCastExpr 0x5608c1464678 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|           |     | `-DeclRefExpr 0x5608c1464540 <col:12> 'jv (jv, const char *)' Function 0x5608c145e7c8 'escape_string' 'jv (jv, const char *)'
|           |     |-CallExpr 0x5608c14645d8 <col:26, col:46> 'jv':'jv'
|           |     | |-ImplicitCastExpr 0x5608c14645c0 <col:26> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay>
|           |     | | `-DeclRefExpr 0x5608c1464560 <col:26> 'jv (jq_state *, jv)' Function 0x5608c1459140 'f_tostring' 'jv (jq_state *, jv)'
|           |     | |-ImplicitCastExpr 0x5608c1464608 <col:37> 'jq_state *' <LValueToRValue>
|           |     | | `-DeclRefExpr 0x5608c1464580 <col:37> 'jq_state *' lvalue ParmVar 0x5608c1460598 'jq' 'jq_state *'
|           |     | `-ImplicitCastExpr 0x5608c1464620 <col:41> 'jv':'jv' <LValueToRValue>
|           |     |   `-DeclRefExpr 0x5608c14645a0 <col:41> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|           |     `-ImplicitCastExpr 0x5608c14646d8 <col:49> 'const char *' <NoOp>
|           |       `-ImplicitCastExpr 0x5608c14646c0 <col:49> 'char *' <ArrayToPointerDecay>
|           |         `-StringLiteral 0x5608c1464638 <col:49> 'char [36]' lvalue "&&amp;\000<&lt;\000>&gt;\000'&apos;\000\"&quot;\000"
|           `-IfStmt 0x5608c146c260 <line:637:10, line:757:3> has_else
|             |-UnaryOperator 0x5608c1464840 <line:637:14, col:34> 'int' prefix '!' cannot overflow
|             | `-CallExpr 0x5608c14647c8 <col:15, col:34> 'int'
|             |   |-ImplicitCastExpr 0x5608c14647b0 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|             |   | `-DeclRefExpr 0x5608c1464720 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|             |   |-ImplicitCastExpr 0x5608c14647f8 <col:22> 'const char *' <LValueToRValue>
|             |   | `-DeclRefExpr 0x5608c1464740 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|             |   `-ImplicitCastExpr 0x5608c1464828 <col:29> 'const char *' <NoOp>
|             |     `-ImplicitCastExpr 0x5608c1464810 <col:29> 'char *' <ArrayToPointerDecay>
|             |       `-StringLiteral 0x5608c1464760 <col:29> 'char [4]' lvalue "uri"
|             |-CompoundStmt 0x5608c1465be0 <col:37, line:658:3>
|             | |-CallExpr 0x5608c14648b0 <line:638:5, col:16> 'void'
|             | | |-ImplicitCastExpr 0x5608c1464898 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|             | | | `-DeclRefExpr 0x5608c1464858 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|             | | `-ImplicitCastExpr 0x5608c14648d8 <col:13> 'jv':'jv' <LValueToRValue>
|             | |   `-DeclRefExpr 0x5608c1464878 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|             | |-BinaryOperator 0x5608c14649e8 <line:639:5, col:33> 'jv':'jv' '='
|             | | |-DeclRefExpr 0x5608c14648f0 <col:5> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|             | | `-CallExpr 0x5608c1464988 <col:13, col:33> 'jv':'jv'
|             | |   |-ImplicitCastExpr 0x5608c1464970 <col:13> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay>
|             | |   | `-DeclRefExpr 0x5608c1464910 <col:13> 'jv (jq_state *, jv)' Function 0x5608c1459140 'f_tostring' 'jv (jq_state *, jv)'
|             | |   |-ImplicitCastExpr 0x5608c14649b8 <col:24> 'jq_state *' <LValueToRValue>
|             | |   | `-DeclRefExpr 0x5608c1464930 <col:24> 'jq_state *' lvalue ParmVar 0x5608c1460598 'jq' 'jq_state *'
|             | |   `-ImplicitCastExpr 0x5608c14649d0 <col:28> 'jv':'jv' <LValueToRValue>
|             | |     `-DeclRefExpr 0x5608c1464950 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|             | |-DeclStmt 0x5608c1464be8 <line:641:5, col:30>
|             | | `-VarDecl 0x5608c1464ab0 <col:5, col:29> col:9 used unreserved 'int [128]' cinit
|             | |   `-InitListExpr 0x5608c1464b90 <col:27, col:29> 'int [128]'
|             | |     |-array_filler: ImplicitValueInitExpr 0x5608c1464bd8 <<invalid sloc>> 'int'
|             | |     `-IntegerLiteral 0x5608c1464b18 <col:28> 'int' 0
|             | |-DeclStmt 0x5608c1464d50 <line:642:5, col:47>
|             | | `-VarDecl 0x5608c1464c18 <col:5, col:36> col:17 used p 'const char *' cinit
|             | |   `-ImplicitCastExpr 0x5608c1464d38 <line:520:24, line:642:36> 'const char *' <NoOp>
|             | |     `-ImplicitCastExpr 0x5608c1464d20 <line:520:24, line:642:36> 'char *' <ArrayToPointerDecay>
|             | |       `-StringLiteral 0x5608c1464cb8 <line:520:24, line:642:36> 'char [72]' lvalue "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.!~*'()"
|             | |-WhileStmt 0x5608c1464f10 <line:643:5, col:40>
|             | | |-ImplicitCastExpr 0x5608c1464db8 <col:12, col:13> 'char' <LValueToRValue>
|             | | | `-UnaryOperator 0x5608c1464da0 <col:12, col:13> 'const char' lvalue prefix '*' cannot overflow
|             | | |   `-ImplicitCastExpr 0x5608c1464d88 <col:13> 'const char *' <LValueToRValue>
|             | | |     `-DeclRefExpr 0x5608c1464d68 <col:13> 'const char *' lvalue Var 0x5608c1464c18 'p' 'const char *'
|             | | `-BinaryOperator 0x5608c1464ef0 <col:16, col:40> 'int' '='
|             | |   |-ArraySubscriptExpr 0x5608c1464eb0 <col:16, col:36> 'int' lvalue
|             | |   | |-ImplicitCastExpr 0x5608c1464e98 <col:16> 'int *' <ArrayToPointerDecay>
|             | |   | | `-DeclRefExpr 0x5608c1464dd0 <col:16> 'int [128]' lvalue Var 0x5608c1464ab0 'unreserved' 'int [128]'
|             | |   | `-CStyleCastExpr 0x5608c1464e70 <col:27, col:34> 'int' <IntegralCast>
|             | |   |   `-ImplicitCastExpr 0x5608c1464e58 <col:32, col:34> 'char' <LValueToRValue> part_of_explicit_cast
|             | |   |     `-UnaryOperator 0x5608c1464e28 <col:32, col:34> 'const char' lvalue prefix '*' cannot overflow
|             | |   |       `-UnaryOperator 0x5608c1464e10 <col:33, col:34> 'const char *' postfix '++'
|             | |   |         `-DeclRefExpr 0x5608c1464df0 <col:33> 'const char *' lvalue Var 0x5608c1464c18 'p' 'const char *'
|             | |   `-IntegerLiteral 0x5608c1464ed0 <col:40> 'int' 1
|             | |-DeclStmt 0x5608c1465050 <line:645:5, col:28>
|             | | `-VarDecl 0x5608c1464f40 <col:5, col:27> col:8 used line 'jv':'jv' nrvo cinit
|             | |   `-CallExpr 0x5608c1464ff8 <col:15, col:27> 'jv':'jv'
|             | |     |-ImplicitCastExpr 0x5608c1464fe0 <col:15> 'jv (*)(const char *)' <FunctionToPointerDecay>
|             | |     | `-DeclRefExpr 0x5608c1464fa8 <col:15> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|             | |     `-ImplicitCastExpr 0x5608c1465038 <col:25> 'const char *' <NoOp>
|             | |       `-ImplicitCastExpr 0x5608c1465020 <col:25> 'char *' <ArrayToPointerDecay>
|             | |         `-StringLiteral 0x5608c1464fc8 <col:25> 'char [1]' lvalue ""
|             | |-DeclStmt 0x5608c1465180 <line:646:5, col:43>
|             | | `-VarDecl 0x5608c1465080 <col:5, col:42> col:17 used s 'const char *' cinit
|             | |   `-CallExpr 0x5608c1465140 <col:21, col:42> 'const char *'
|             | |     |-ImplicitCastExpr 0x5608c1465128 <col:21> 'const char *(*)(jv)' <FunctionToPointerDecay>
|             | |     | `-DeclRefExpr 0x5608c14650e8 <col:21> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|             | |     `-ImplicitCastExpr 0x5608c1465168 <col:37> 'jv':'jv' <LValueToRValue>
|             | |       `-DeclRefExpr 0x5608c1465108 <col:37> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|             | |-ForStmt 0x5608c1465ac0 <line:647:5, line:655:5>
|             | | |-DeclStmt 0x5608c1465238 <line:647:10, col:17>
|             | | | `-VarDecl 0x5608c14651b0 <col:10, col:16> col:14 used i 'int' cinit
|             | | |   `-IntegerLiteral 0x5608c1465218 <col:16> 'int' 0
|             | | |-<<<NULL>>>
|             | | |-BinaryOperator 0x5608c1465380 <col:19, col:58> 'int' '<'
|             | | | |-ImplicitCastExpr 0x5608c1465368 <col:19> 'int' <LValueToRValue>
|             | | | | `-DeclRefExpr 0x5608c1465250 <col:19> 'int' lvalue Var 0x5608c14651b0 'i' 'int'
|             | | | `-CallExpr 0x5608c1465340 <col:21, col:58> 'int'
|             | | |   |-ImplicitCastExpr 0x5608c1465328 <col:21> 'int (*)(jv)' <FunctionToPointerDecay>
|             | | |   | `-DeclRefExpr 0x5608c1465270 <col:21> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|             | | |   `-CallExpr 0x5608c14652e8 <col:44, col:57> 'jv':'jv'
|             | | |     |-ImplicitCastExpr 0x5608c14652d0 <col:44> 'jv (*)(jv)' <FunctionToPointerDecay>
|             | | |     | `-DeclRefExpr 0x5608c1465290 <col:44> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|             | | |     `-ImplicitCastExpr 0x5608c1465310 <col:52> 'jv':'jv' <LValueToRValue>
|             | | |       `-DeclRefExpr 0x5608c14652b0 <col:52> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|             | | |-UnaryOperator 0x5608c14653c0 <col:61, col:62> 'int' postfix '++'
|             | | | `-DeclRefExpr 0x5608c14653a0 <col:61> 'int' lvalue Var 0x5608c14651b0 'i' 'int'
|             | | `-CompoundStmt 0x5608c1465a98 <col:66, line:655:5>
|             | |   |-DeclStmt 0x5608c1465540 <line:648:7, col:48>
|             | |   | `-VarDecl 0x5608c14653f0 <col:7, col:47> col:16 used ch 'unsigned int' cinit
|             | |   |   `-CStyleCastExpr 0x5608c1465518 <col:21, col:47> 'unsigned int' <IntegralCast>
|             | |   |     `-CStyleCastExpr 0x5608c14654d8 <col:31, col:47> 'unsigned char' <IntegralCast>
|             | |   |       `-ImplicitCastExpr 0x5608c14654c0 <col:46, col:47> 'char' <LValueToRValue> part_of_explicit_cast
|             | |   |         `-UnaryOperator 0x5608c1465490 <col:46, col:47> 'const char' lvalue prefix '*' cannot overflow
|             | |   |           `-ImplicitCastExpr 0x5608c1465478 <col:47> 'const char *' <LValueToRValue>
|             | |   |             `-DeclRefExpr 0x5608c1465458 <col:47> 'const char *' lvalue Var 0x5608c1465080 's' 'const char *'
|             | |   |-IfStmt 0x5608c1465a30 <line:649:7, line:653:7> has_else
|             | |   | |-BinaryOperator 0x5608c1465690 <line:649:11, col:36> 'int' '&&'
|             | |   | | |-BinaryOperator 0x5608c14655c8 <col:11, col:16> 'int' '<'
|             | |   | | | |-ImplicitCastExpr 0x5608c1465598 <col:11> 'unsigned int' <LValueToRValue>
|             | |   | | | | `-DeclRefExpr 0x5608c1465558 <col:11> 'unsigned int' lvalue Var 0x5608c14653f0 'ch' 'unsigned int'
|             | |   | | | `-ImplicitCastExpr 0x5608c14655b0 <col:16> 'unsigned int' <IntegralCast>
|             | |   | | |   `-IntegerLiteral 0x5608c1465578 <col:16> 'int' 128
|             | |   | | `-ImplicitCastExpr 0x5608c1465678 <col:23, col:36> 'int' <LValueToRValue>
|             | |   | |   `-ArraySubscriptExpr 0x5608c1465658 <col:23, col:36> 'int' lvalue
|             | |   | |     |-ImplicitCastExpr 0x5608c1465628 <col:23> 'int *' <ArrayToPointerDecay>
|             | |   | |     | `-DeclRefExpr 0x5608c14655e8 <col:23> 'int [128]' lvalue Var 0x5608c1464ab0 'unreserved' 'int [128]'
|             | |   | |     `-ImplicitCastExpr 0x5608c1465640 <col:34> 'unsigned int' <LValueToRValue>
|             | |   | |       `-DeclRefExpr 0x5608c1465608 <col:34> 'unsigned int' lvalue Var 0x5608c14653f0 'ch' 'unsigned int'
|             | |   | |-CompoundStmt 0x5608c14657f0 <col:39, line:651:7>
|             | |   | | `-BinaryOperator 0x5608c14657d0 <line:650:9, col:47> 'jv':'jv' '='
|             | |   | |   |-DeclRefExpr 0x5608c14656b0 <col:9> 'jv':'jv' lvalue Var 0x5608c1464f40 'line' 'jv':'jv'
|             | |   | |   `-CallExpr 0x5608c1465768 <col:16, col:47> 'jv':'jv'
|             | |   | |     |-ImplicitCastExpr 0x5608c1465750 <col:16> 'jv (*)(jv, const char *, int)' <FunctionToPointerDecay>
|             | |   | |     | `-DeclRefExpr 0x5608c14656d0 <col:16> 'jv (jv, const char *, int)' Function 0x5608c13e3ec8 'jv_string_append_buf' 'jv (jv, const char *, int)'
|             | |   | |     |-ImplicitCastExpr 0x5608c14657a0 <col:37> 'jv':'jv' <LValueToRValue>
|             | |   | |     | `-DeclRefExpr 0x5608c14656f0 <col:37> 'jv':'jv' lvalue Var 0x5608c1464f40 'line' 'jv':'jv'
|             | |   | |     |-ImplicitCastExpr 0x5608c14657b8 <col:43> 'const char *' <LValueToRValue>
|             | |   | |     | `-DeclRefExpr 0x5608c1465710 <col:43> 'const char *' lvalue Var 0x5608c1465080 's' 'const char *'
|             | |   | |     `-IntegerLiteral 0x5608c1465730 <col:46> 'int' 1
|             | |   | `-CompoundStmt 0x5608c1465a18 <line:651:14, line:653:7>
|             | |   |   `-BinaryOperator 0x5608c14659f8 <line:652:9, col:66> 'jv':'jv' '='
|             | |   |     |-DeclRefExpr 0x5608c1465808 <col:9> 'jv':'jv' lvalue Var 0x5608c1464f40 'line' 'jv':'jv'
|             | |   |     `-CallExpr 0x5608c14659b0 <col:16, col:66> 'jv':'jv'
|             | |   |       |-ImplicitCastExpr 0x5608c1465998 <col:16> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|             | |   |       | `-DeclRefExpr 0x5608c1465828 <col:16> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|             | |   |       |-ImplicitCastExpr 0x5608c14659e0 <col:33> 'jv':'jv' <LValueToRValue>
|             | |   |       | `-DeclRefExpr 0x5608c1465848 <col:33> 'jv':'jv' lvalue Var 0x5608c1464f40 'line' 'jv':'jv'
|             | |   |       `-CallExpr 0x5608c1465920 <col:39, col:65> 'jv':'jv'
|             | |   |         |-ImplicitCastExpr 0x5608c1465908 <col:39> 'jv (*)(const char *, ...)' <FunctionToPointerDecay>
|             | |   |         | `-DeclRefExpr 0x5608c1465868 <col:39> 'jv (const char *, ...)' Function 0x5608c13df640 'jv_string_fmt' 'jv (const char *, ...)'
|             | |   |         |-ImplicitCastExpr 0x5608c1465968 <col:53> 'const char *' <NoOp>
|             | |   |         | `-ImplicitCastExpr 0x5608c1465950 <col:53> 'char *' <ArrayToPointerDecay>
|             | |   |         |   `-StringLiteral 0x5608c14658c8 <col:53> 'char [7]' lvalue "%%%02X"
|             | |   |         `-ImplicitCastExpr 0x5608c1465980 <col:63> 'unsigned int' <LValueToRValue>
|             | |   |           `-DeclRefExpr 0x5608c14658e8 <col:63> 'unsigned int' lvalue Var 0x5608c14653f0 'ch' 'unsigned int'
|             | |   `-UnaryOperator 0x5608c1465a80 <line:654:7, col:8> 'const char *' postfix '++'
|             | |     `-DeclRefExpr 0x5608c1465a60 <col:7> 'const char *' lvalue Var 0x5608c1465080 's' 'const char *'
|             | |-CallExpr 0x5608c1465b50 <line:656:5, col:18> 'void'
|             | | |-ImplicitCastExpr 0x5608c1465b38 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|             | | | `-DeclRefExpr 0x5608c1465af8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|             | | `-ImplicitCastExpr 0x5608c1465b78 <col:13> 'jv':'jv' <LValueToRValue>
|             | |   `-DeclRefExpr 0x5608c1465b18 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|             | `-ReturnStmt 0x5608c1465bc8 <line:657:5, col:12>
|             |   `-ImplicitCastExpr 0x5608c1465bb0 <col:12> 'jv':'jv' <LValueToRValue>
|             |     `-DeclRefExpr 0x5608c1465b90 <col:12> 'jv':'jv' lvalue Var 0x5608c1464f40 'line' 'jv':'jv'
|             `-IfStmt 0x5608c146c230 <line:658:10, line:757:3> has_else
|               |-UnaryOperator 0x5608c1465d78 <line:658:14, col:33> 'int' prefix '!' cannot overflow
|               | `-CallExpr 0x5608c1465ce8 <col:15, col:33> 'int'
|               |   |-ImplicitCastExpr 0x5608c1465cd0 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|               |   | `-DeclRefExpr 0x5608c1465c40 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|               |   |-ImplicitCastExpr 0x5608c1465d18 <col:22> 'const char *' <LValueToRValue>
|               |   | `-DeclRefExpr 0x5608c1465c60 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|               |   `-ImplicitCastExpr 0x5608c1465d60 <col:29> 'const char *' <NoOp>
|               |     `-ImplicitCastExpr 0x5608c1465d30 <col:29> 'char *' <ArrayToPointerDecay>
|               |       `-StringLiteral 0x5608c1465c80 <col:29> 'char [3]' lvalue "sh"
|               |-CompoundStmt 0x5608c1467838 <col:36, line:688:3>
|               | |-CallExpr 0x5608c1465de8 <line:659:5, col:16> 'void'
|               | | |-ImplicitCastExpr 0x5608c1465dd0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|               | | | `-DeclRefExpr 0x5608c1465d90 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|               | | `-ImplicitCastExpr 0x5608c1465e10 <col:13> 'jv':'jv' <LValueToRValue>
|               | |   `-DeclRefExpr 0x5608c1465db0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|               | |-IfStmt 0x5608c14660f0 <line:660:5, line:661:48>
|               | | |-BinaryOperator 0x5608c1465f10 <line:660:9, col:31> 'int' '!='
|               | | | |-ImplicitCastExpr 0x5608c1465ee0 <col:9, col:26> 'unsigned int' <IntegralCast>
|               | | | | `-CallExpr 0x5608c1465e80 <col:9, col:26> 'jv_kind':'jv_kind'
|               | | | |   |-ImplicitCastExpr 0x5608c1465e68 <col:9> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|               | | | |   | `-DeclRefExpr 0x5608c1465e28 <col:9> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|               | | | |   `-ImplicitCastExpr 0x5608c1465ea8 <col:21> 'jv':'jv' <LValueToRValue>
|               | | | |     `-DeclRefExpr 0x5608c1465e48 <col:21> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|               | | | `-ImplicitCastExpr 0x5608c1465ef8 <col:31> 'unsigned int' <IntegralCast>
|               | | |   `-DeclRefExpr 0x5608c1465ec0 <col:31> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|               | | `-BinaryOperator 0x5608c14660d0 <line:661:7, col:48> 'jv':'jv' '='
|               | |   |-DeclRefExpr 0x5608c1465f30 <col:7> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|               | |   `-CallExpr 0x5608c1466080 <col:15, col:48> 'jv':'jv'
|               | |     |-ImplicitCastExpr 0x5608c1466068 <col:15> 'jv (*)(jv, int, jv)' <FunctionToPointerDecay>
|               | |     | `-DeclRefExpr 0x5608c1465f50 <col:15> 'jv (jv, int, jv)' Function 0x5608c13dc718 'jv_array_set' 'jv (jv, int, jv)'
|               | |     |-CallExpr 0x5608c1465fa8 <col:28, col:37> 'jv':'jv'
|               | |     | `-ImplicitCastExpr 0x5608c1465f90 <col:28> 'jv (*)(void)' <FunctionToPointerDecay>
|               | |     |   `-DeclRefExpr 0x5608c1465f70 <col:28> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|               | |     |-IntegerLiteral 0x5608c1465fc8 <col:40> 'int' 0
|               | |     `-ImplicitCastExpr 0x5608c14660b8 <col:43> 'jv':'jv' <LValueToRValue>
|               | |       `-DeclRefExpr 0x5608c1465fe8 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|               | |-DeclStmt 0x5608c1466230 <line:662:5, col:28>
|               | | `-VarDecl 0x5608c1466120 <col:5, col:27> col:8 used line 'jv':'jv' cinit
|               | |   `-CallExpr 0x5608c14661d8 <col:15, col:27> 'jv':'jv'
|               | |     |-ImplicitCastExpr 0x5608c14661c0 <col:15> 'jv (*)(const char *)' <FunctionToPointerDecay>
|               | |     | `-DeclRefExpr 0x5608c1466188 <col:15> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|               | |     `-ImplicitCastExpr 0x5608c1466218 <col:25> 'const char *' <NoOp>
|               | |       `-ImplicitCastExpr 0x5608c1466200 <col:25> 'char *' <ArrayToPointerDecay>
|               | |         `-StringLiteral 0x5608c14661a8 <col:25> 'char [1]' lvalue ""
|               | |-ForStmt 0x5608c1467718 <./src/jv.h:80:3, src/builtin.c:685:5>
|               | | |-DeclStmt 0x5608c1466520 <./src/jv.h:80:8, col:67>
|               | | | |-VarDecl 0x5608c1466260 <col:8, col:49> col:12 used jv_len__ 'int' cinit
|               | | | | `-CallExpr 0x5608c1466398 <col:23, col:49> 'int'
|               | | | |   |-ImplicitCastExpr 0x5608c1466380 <col:23> 'int (*)(jv)' <FunctionToPointerDecay>
|               | | | |   | `-DeclRefExpr 0x5608c14662c8 <col:23> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|               | | | |   `-CallExpr 0x5608c1466340 <col:39, col:48> 'jv':'jv'
|               | | | |     |-ImplicitCastExpr 0x5608c1466328 <col:39> 'jv (*)(jv)' <FunctionToPointerDecay>
|               | | | |     | `-DeclRefExpr 0x5608c14662e8 <col:39> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|               | | | |     `-ImplicitCastExpr 0x5608c1466368 <src/builtin.c:663:22> 'jv':'jv' <LValueToRValue>
|               | | | |       `-DeclRefExpr 0x5608c1466308 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|               | | | |-VarDecl 0x5608c14663d8 <./src/jv.h:80:8, col:54> src/builtin.c:663:29 used i 'int' cinit
|               | | | | `-IntegerLiteral 0x5608c1466440 <./src/jv.h:80:54> 'int' 0
|               | | | `-VarDecl 0x5608c1466478 <col:8, col:66> col:57 used jv_j__ 'int' cinit
|               | | |   `-IntegerLiteral 0x5608c14664e0 <col:66> 'int' 1
|               | | |-<<<NULL>>>
|               | | |-ImplicitCastExpr 0x5608c1466558 <line:81:8> 'int' <LValueToRValue>
|               | | | `-DeclRefExpr 0x5608c1466538 <col:8> 'int' lvalue Var 0x5608c1466478 'jv_j__' 'int'
|               | | |-BinaryOperator 0x5608c14665b0 <col:16, col:25> 'int' '='
|               | | | |-DeclRefExpr 0x5608c1466570 <col:16> 'int' lvalue Var 0x5608c1466478 'jv_j__' 'int'
|               | | | `-IntegerLiteral 0x5608c1466590 <col:25> 'int' 0
|               | | `-ForStmt 0x5608c14676e0 <line:82:5, src/builtin.c:685:5>
|               | |   |-DeclStmt 0x5608c1466648 <./src/jv.h:82:10, col:14>
|               | |   | `-VarDecl 0x5608c14665e0 <col:10, src/builtin.c:663:32> col:32 used x 'jv':'jv'
|               | |   |-<<<NULL>>>
|               | |   |-ConditionalOperator 0x5608c14668e8 <col:29, ./src/jv.h:84:51> 'int'
|               | |   | |-BinaryOperator 0x5608c14666d0 <src/builtin.c:663:29, ./src/jv.h:83:14> 'int' '<'
|               | |   | | |-ImplicitCastExpr 0x5608c14666a0 <src/builtin.c:663:29> 'int' <LValueToRValue>
|               | |   | | | `-DeclRefExpr 0x5608c1466660 <col:29> 'int' lvalue Var 0x5608c14663d8 'i' 'int'
|               | |   | | `-ImplicitCastExpr 0x5608c14666b8 <./src/jv.h:83:14> 'int' <LValueToRValue>
|               | |   | |   `-DeclRefExpr 0x5608c1466680 <col:14> 'int' lvalue Var 0x5608c1466260 'jv_len__' 'int'
|               | |   | |-ParenExpr 0x5608c14668a8 <line:84:12, col:47> 'int'
|               | |   | | `-BinaryOperator 0x5608c1466888 <src/builtin.c:663:32, ./src/jv.h:84:46> 'int' ','
|               | |   | |   |-BinaryOperator 0x5608c1466848 <src/builtin.c:663:32, ./src/jv.h:84:43> 'jv':'jv' '='
|               | |   | |   | |-DeclRefExpr 0x5608c14666f0 <src/builtin.c:663:32> 'jv':'jv' lvalue Var 0x5608c14665e0 'x' 'jv':'jv'
|               | |   | |   | `-CallExpr 0x5608c1466800 <./src/jv.h:84:17, col:43> 'jv':'jv'
|               | |   | |   |   |-ImplicitCastExpr 0x5608c14667e8 <col:17> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|               | |   | |   |   | `-DeclRefExpr 0x5608c1466710 <col:17> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|               | |   | |   |   |-CallExpr 0x5608c1466788 <col:30, col:39> 'jv':'jv'
|               | |   | |   |   | |-ImplicitCastExpr 0x5608c1466770 <col:30> 'jv (*)(jv)' <FunctionToPointerDecay>
|               | |   | |   |   | | `-DeclRefExpr 0x5608c1466730 <col:30> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|               | |   | |   |   | `-ImplicitCastExpr 0x5608c14667b0 <src/builtin.c:663:22> 'jv':'jv' <LValueToRValue>
|               | |   | |   |   |   `-DeclRefExpr 0x5608c1466750 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|               | |   | |   |   `-ImplicitCastExpr 0x5608c1466830 <col:29> 'int' <LValueToRValue>
|               | |   | |   |     `-DeclRefExpr 0x5608c14667c8 <col:29> 'int' lvalue Var 0x5608c14663d8 'i' 'int'
|               | |   | |   `-IntegerLiteral 0x5608c1466868 <./src/jv.h:84:46> 'int' 1
|               | |   | `-IntegerLiteral 0x5608c14668c8 <col:51> 'int' 0
|               | |   |-UnaryOperator 0x5608c1466938 <src/builtin.c:663:29, ./src/jv.h:85:11> 'int' postfix '++'
|               | |   | `-DeclRefExpr 0x5608c1466918 <src/builtin.c:663:29> 'int' lvalue Var 0x5608c14663d8 'i' 'int'
|               | |   `-CompoundStmt 0x5608c14676c0 <col:35, line:685:5>
|               | |     |-IfStmt 0x5608c1466ab8 <line:664:7, col:51>
|               | |     | |-ImplicitCastExpr 0x5608c1466970 <col:11> 'int' <LValueToRValue>
|               | |     | | `-DeclRefExpr 0x5608c1466950 <col:11> 'int' lvalue Var 0x5608c14663d8 'i' 'int'
|               | |     | `-BinaryOperator 0x5608c1466a98 <col:14, col:51> 'jv':'jv' '='
|               | |     |   |-DeclRefExpr 0x5608c1466988 <col:14> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |     |   `-CallExpr 0x5608c1466a20 <col:21, col:51> 'jv':'jv'
|               | |     |     |-ImplicitCastExpr 0x5608c1466a08 <col:21> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|               | |     |     | `-DeclRefExpr 0x5608c14669a8 <col:21> 'jv (jv, const char *)' Function 0x5608c13e4128 'jv_string_append_str' 'jv (jv, const char *)'
|               | |     |     |-ImplicitCastExpr 0x5608c1466a50 <col:42> 'jv':'jv' <LValueToRValue>
|               | |     |     | `-DeclRefExpr 0x5608c14669c8 <col:42> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |     |     `-ImplicitCastExpr 0x5608c1466a80 <col:48> 'const char *' <NoOp>
|               | |     |       `-ImplicitCastExpr 0x5608c1466a68 <col:48> 'char *' <ArrayToPointerDecay>
|               | |     |         `-StringLiteral 0x5608c14669e8 <col:48> 'char [2]' lvalue " "
|               | |     `-SwitchStmt 0x5608c1466b88 <line:665:7, line:684:7>
|               | |       |-ImplicitCastExpr 0x5608c1466b70 <line:665:15, col:28> 'unsigned int' <IntegralCast>
|               | |       | `-CallExpr 0x5608c1466b30 <col:15, col:28> 'jv_kind':'jv_kind'
|               | |       |   |-ImplicitCastExpr 0x5608c1466b18 <col:15> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|               | |       |   | `-DeclRefExpr 0x5608c1466ad8 <col:15> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|               | |       |   `-ImplicitCastExpr 0x5608c1466b58 <col:27> 'jv':'jv' <LValueToRValue>
|               | |       |     `-DeclRefExpr 0x5608c1466af8 <col:27> 'jv':'jv' lvalue Var 0x5608c14665e0 'x' 'jv':'jv'
|               | |       `-CompoundStmt 0x5608c1467680 <col:31, line:684:7>
|               | |         |-CaseStmt 0x5608c1466c00 <line:666:7, line:670:59>
|               | |         | |-ImplicitCastExpr 0x5608c1466be8 <line:666:12> 'unsigned int' <IntegralCast>
|               | |         | | `-ConstantExpr 0x5608c1466bd0 <col:12> 'int'
|               | |         | |   `-DeclRefExpr 0x5608c1466bb0 <col:12> 'int' EnumConstant 0x5608c13d0a40 'JV_KIND_NULL' 'int'
|               | |         | `-CaseStmt 0x5608c1466c78 <line:667:7, line:670:59>
|               | |         |   |-ImplicitCastExpr 0x5608c1466c60 <line:667:12> 'unsigned int' <IntegralCast>
|               | |         |   | `-ConstantExpr 0x5608c1466c48 <col:12> 'int'
|               | |         |   |   `-DeclRefExpr 0x5608c1466c28 <col:12> 'int' EnumConstant 0x5608c13d0ae0 'JV_KIND_TRUE' 'int'
|               | |         |   `-CaseStmt 0x5608c1466cf0 <line:668:7, line:670:59>
|               | |         |     |-ImplicitCastExpr 0x5608c1466cd8 <line:668:12> 'unsigned int' <IntegralCast>
|               | |         |     | `-ConstantExpr 0x5608c1466cc0 <col:12> 'int'
|               | |         |     |   `-DeclRefExpr 0x5608c1466ca0 <col:12> 'int' EnumConstant 0x5608c13d0a90 'JV_KIND_FALSE' 'int'
|               | |         |     `-CaseStmt 0x5608c1466d68 <line:669:7, line:670:59>
|               | |         |       |-ImplicitCastExpr 0x5608c1466d50 <line:669:12> 'unsigned int' <IntegralCast>
|               | |         |       | `-ConstantExpr 0x5608c1466d38 <col:12> 'int'
|               | |         |       |   `-DeclRefExpr 0x5608c1466d18 <col:12> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|               | |         |       `-BinaryOperator 0x5608c1466f10 <line:670:9, col:59> 'jv':'jv' '='
|               | |         |         |-DeclRefExpr 0x5608c1466d90 <col:9> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         |         `-CallExpr 0x5608c1466ec8 <col:16, col:59> 'jv':'jv'
|               | |         |           |-ImplicitCastExpr 0x5608c1466eb0 <col:16> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|               | |         |           | `-DeclRefExpr 0x5608c1466db0 <col:16> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|               | |         |           |-ImplicitCastExpr 0x5608c1466ef8 <col:33> 'jv':'jv' <LValueToRValue>
|               | |         |           | `-DeclRefExpr 0x5608c1466dd0 <col:33> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         |           `-CallExpr 0x5608c1466e68 <col:39, col:58> 'jv':'jv'
|               | |         |             |-ImplicitCastExpr 0x5608c1466e50 <col:39> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|               | |         |             | `-DeclRefExpr 0x5608c1466df0 <col:39> 'jv (jv, int)' Function 0x5608c13e7f68 'jv_dump_string' 'jv (jv, int)'
|               | |         |             |-ImplicitCastExpr 0x5608c1466e98 <col:54> 'jv':'jv' <LValueToRValue>
|               | |         |             | `-DeclRefExpr 0x5608c1466e10 <col:54> 'jv':'jv' lvalue Var 0x5608c14665e0 'x' 'jv':'jv'
|               | |         |             `-IntegerLiteral 0x5608c1466e30 <col:57> 'int' 0
|               | |         |-BreakStmt 0x5608c1466f30 <line:671:9>
|               | |         |-CaseStmt 0x5608c1466f88 <line:673:7, line:678:7>
|               | |         | |-ImplicitCastExpr 0x5608c1466f70 <line:673:12> 'unsigned int' <IntegralCast>
|               | |         | | `-ConstantExpr 0x5608c1466f58 <col:12> 'int'
|               | |         | |   `-DeclRefExpr 0x5608c1466f38 <col:12> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|               | |         | `-CompoundStmt 0x5608c14673e8 <col:28, line:678:7>
|               | |         |   |-BinaryOperator 0x5608c14670c0 <line:674:9, col:46> 'jv':'jv' '='
|               | |         |   | |-DeclRefExpr 0x5608c1466fb0 <col:9> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         |   | `-CallExpr 0x5608c1467048 <col:16, col:46> 'jv':'jv'
|               | |         |   |   |-ImplicitCastExpr 0x5608c1467030 <col:16> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|               | |         |   |   | `-DeclRefExpr 0x5608c1466fd0 <col:16> 'jv (jv, const char *)' Function 0x5608c13e4128 'jv_string_append_str' 'jv (jv, const char *)'
|               | |         |   |   |-ImplicitCastExpr 0x5608c1467078 <col:37> 'jv':'jv' <LValueToRValue>
|               | |         |   |   | `-DeclRefExpr 0x5608c1466ff0 <col:37> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         |   |   `-ImplicitCastExpr 0x5608c14670a8 <col:43> 'const char *' <NoOp>
|               | |         |   |     `-ImplicitCastExpr 0x5608c1467090 <col:43> 'char *' <ArrayToPointerDecay>
|               | |         |   |       `-StringLiteral 0x5608c1467010 <col:43> 'char [2]' lvalue "'"
|               | |         |   |-BinaryOperator 0x5608c1467290 <line:675:9, col:67> 'jv':'jv' '='
|               | |         |   | |-DeclRefExpr 0x5608c14670e0 <col:9> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         |   | `-CallExpr 0x5608c1467248 <col:16, col:67> 'jv':'jv'
|               | |         |   |   |-ImplicitCastExpr 0x5608c1467230 <col:16> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|               | |         |   |   | `-DeclRefExpr 0x5608c1467100 <col:16> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|               | |         |   |   |-ImplicitCastExpr 0x5608c1467278 <col:33> 'jv':'jv' <LValueToRValue>
|               | |         |   |   | `-DeclRefExpr 0x5608c1467120 <col:33> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         |   |   `-CallExpr 0x5608c14671b8 <col:39, col:66> 'jv':'jv'
|               | |         |   |     |-ImplicitCastExpr 0x5608c14671a0 <col:39> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|               | |         |   |     | `-DeclRefExpr 0x5608c1467140 <col:39> 'jv (jv, const char *)' Function 0x5608c145e7c8 'escape_string' 'jv (jv, const char *)'
|               | |         |   |     |-ImplicitCastExpr 0x5608c14671e8 <col:53> 'jv':'jv' <LValueToRValue>
|               | |         |   |     | `-DeclRefExpr 0x5608c1467160 <col:53> 'jv':'jv' lvalue Var 0x5608c14665e0 'x' 'jv':'jv'
|               | |         |   |     `-ImplicitCastExpr 0x5608c1467218 <col:56> 'const char *' <NoOp>
|               | |         |   |       `-ImplicitCastExpr 0x5608c1467200 <col:56> 'char *' <ArrayToPointerDecay>
|               | |         |   |         `-StringLiteral 0x5608c1467180 <col:56> 'char [7]' lvalue "''\\''\000"
|               | |         |   |-BinaryOperator 0x5608c14673c0 <line:676:9, col:46> 'jv':'jv' '='
|               | |         |   | |-DeclRefExpr 0x5608c14672b0 <col:9> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         |   | `-CallExpr 0x5608c1467348 <col:16, col:46> 'jv':'jv'
|               | |         |   |   |-ImplicitCastExpr 0x5608c1467330 <col:16> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|               | |         |   |   | `-DeclRefExpr 0x5608c14672d0 <col:16> 'jv (jv, const char *)' Function 0x5608c13e4128 'jv_string_append_str' 'jv (jv, const char *)'
|               | |         |   |   |-ImplicitCastExpr 0x5608c1467378 <col:37> 'jv':'jv' <LValueToRValue>
|               | |         |   |   | `-DeclRefExpr 0x5608c14672f0 <col:37> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         |   |   `-ImplicitCastExpr 0x5608c14673a8 <col:43> 'const char *' <NoOp>
|               | |         |   |     `-ImplicitCastExpr 0x5608c1467390 <col:43> 'char *' <ArrayToPointerDecay>
|               | |         |   |       `-StringLiteral 0x5608c1467310 <col:43> 'char [2]' lvalue "'"
|               | |         |   `-BreakStmt 0x5608c14673e0 <line:677:9>
|               | |         |-DefaultStmt 0x5608c14674b0 <line:680:7, line:681:22>
|               | |         | `-CallExpr 0x5608c1467470 <col:9, col:22> 'void'
|               | |         |   |-ImplicitCastExpr 0x5608c1467458 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|               | |         |   | `-DeclRefExpr 0x5608c1467418 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|               | |         |   `-ImplicitCastExpr 0x5608c1467498 <col:17> 'jv':'jv' <LValueToRValue>
|               | |         |     `-DeclRefExpr 0x5608c1467438 <col:17> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|               | |         |-CallExpr 0x5608c1467528 <line:682:9, col:21> 'void'
|               | |         | |-ImplicitCastExpr 0x5608c1467510 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|               | |         | | `-DeclRefExpr 0x5608c14674d0 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|               | |         | `-ImplicitCastExpr 0x5608c1467550 <col:17> 'jv':'jv' <LValueToRValue>
|               | |         |   `-DeclRefExpr 0x5608c14674f0 <col:17> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               | |         `-ReturnStmt 0x5608c1467670 <line:683:9, col:60>
|               | |           `-CallExpr 0x5608c14675f8 <col:16, col:60> 'jv':'jv'
|               | |             |-ImplicitCastExpr 0x5608c14675e0 <col:16> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|               | |             | `-DeclRefExpr 0x5608c1467568 <col:16> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|               | |             |-ImplicitCastExpr 0x5608c1467628 <col:27> 'jv':'jv' <LValueToRValue>
|               | |             | `-DeclRefExpr 0x5608c1467588 <col:27> 'jv':'jv' lvalue Var 0x5608c14665e0 'x' 'jv':'jv'
|               | |             `-ImplicitCastExpr 0x5608c1467658 <col:30> 'const char *' <NoOp>
|               | |               `-ImplicitCastExpr 0x5608c1467640 <col:30> 'char *' <ArrayToPointerDecay>
|               | |                 `-StringLiteral 0x5608c14675a8 <col:30> 'char [29]' lvalue "can not be escaped for shell"
|               | |-CallExpr 0x5608c14677a8 <line:686:5, col:18> 'void'
|               | | |-ImplicitCastExpr 0x5608c1467790 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|               | | | `-DeclRefExpr 0x5608c1467750 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|               | | `-ImplicitCastExpr 0x5608c14677d0 <col:13> 'jv':'jv' <LValueToRValue>
|               | |   `-DeclRefExpr 0x5608c1467770 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|               | `-ReturnStmt 0x5608c1467820 <line:687:5, col:12>
|               |   `-ImplicitCastExpr 0x5608c1467808 <col:12> 'jv':'jv' <LValueToRValue>
|               |     `-DeclRefExpr 0x5608c14677e8 <col:12> 'jv':'jv' lvalue Var 0x5608c1466120 'line' 'jv':'jv'
|               `-IfStmt 0x5608c146c200 <line:688:10, line:757:3> has_else
|                 |-UnaryOperator 0x5608c1467998 <line:688:14, col:37> 'int' prefix '!' cannot overflow
|                 | `-CallExpr 0x5608c1467920 <col:15, col:37> 'int'
|                 |   |-ImplicitCastExpr 0x5608c1467908 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                 |   | `-DeclRefExpr 0x5608c1467878 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|                 |   |-ImplicitCastExpr 0x5608c1467950 <col:22> 'const char *' <LValueToRValue>
|                 |   | `-DeclRefExpr 0x5608c1467898 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|                 |   `-ImplicitCastExpr 0x5608c1467980 <col:29> 'const char *' <NoOp>
|                 |     `-ImplicitCastExpr 0x5608c1467968 <col:29> 'char *' <ArrayToPointerDecay>
|                 |       `-StringLiteral 0x5608c14678b8 <col:29> 'char [7]' lvalue "base64"
|                 |-CompoundStmt 0x5608c1469488 <col:40, line:711:3>
|                 | |-CallExpr 0x5608c1467a08 <line:689:5, col:16> 'void'
|                 | | |-ImplicitCastExpr 0x5608c14679f0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|                 | | | `-DeclRefExpr 0x5608c14679b0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|                 | | `-ImplicitCastExpr 0x5608c1467a30 <col:13> 'jv':'jv' <LValueToRValue>
|                 | |   `-DeclRefExpr 0x5608c14679d0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|                 | |-BinaryOperator 0x5608c1467b40 <line:690:5, col:33> 'jv':'jv' '='
|                 | | |-DeclRefExpr 0x5608c1467a48 <col:5> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                 | | `-CallExpr 0x5608c1467ae0 <col:13, col:33> 'jv':'jv'
|                 | |   |-ImplicitCastExpr 0x5608c1467ac8 <col:13> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay>
|                 | |   | `-DeclRefExpr 0x5608c1467a68 <col:13> 'jv (jq_state *, jv)' Function 0x5608c1459140 'f_tostring' 'jv (jq_state *, jv)'
|                 | |   |-ImplicitCastExpr 0x5608c1467b10 <col:24> 'jq_state *' <LValueToRValue>
|                 | |   | `-DeclRefExpr 0x5608c1467a88 <col:24> 'jq_state *' lvalue ParmVar 0x5608c1460598 'jq' 'jq_state *'
|                 | |   `-ImplicitCastExpr 0x5608c1467b28 <col:28> 'jv':'jv' <LValueToRValue>
|                 | |     `-DeclRefExpr 0x5608c1467aa8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                 | |-DeclStmt 0x5608c1467c80 <line:691:5, col:28>
|                 | | `-VarDecl 0x5608c1467b70 <col:5, col:27> col:8 used line 'jv':'jv' nrvo cinit
|                 | |   `-CallExpr 0x5608c1467c28 <col:15, col:27> 'jv':'jv'
|                 | |     |-ImplicitCastExpr 0x5608c1467c10 <col:15> 'jv (*)(const char *)' <FunctionToPointerDecay>
|                 | |     | `-DeclRefExpr 0x5608c1467bd8 <col:15> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|                 | |     `-ImplicitCastExpr 0x5608c1467c68 <col:25> 'const char *' <NoOp>
|                 | |       `-ImplicitCastExpr 0x5608c1467c50 <col:25> 'char *' <ArrayToPointerDecay>
|                 | |         `-StringLiteral 0x5608c1467bf8 <col:25> 'char [1]' lvalue ""
|                 | |-DeclStmt 0x5608c1467df0 <line:692:5, col:77>
|                 | | `-VarDecl 0x5608c1467cb0 <col:5, col:76> col:26 used data 'const unsigned char *' cinit
|                 | |   `-CStyleCastExpr 0x5608c1467dc8 <col:33, col:76> 'const unsigned char *' <BitCast>
|                 | |     `-CallExpr 0x5608c1467d70 <col:55, col:76> 'const char *'
|                 | |       |-ImplicitCastExpr 0x5608c1467d58 <col:55> 'const char *(*)(jv)' <FunctionToPointerDecay>
|                 | |       | `-DeclRefExpr 0x5608c1467d18 <col:55> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|                 | |       `-ImplicitCastExpr 0x5608c1467d98 <col:71> 'jv':'jv' <LValueToRValue>
|                 | |         `-DeclRefExpr 0x5608c1467d38 <col:71> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                 | |-DeclStmt 0x5608c1467f80 <line:693:5, col:53>
|                 | | `-VarDecl 0x5608c1467e20 <col:5, col:52> col:9 used len 'int' cinit
|                 | |   `-CallExpr 0x5608c1467f58 <col:15, col:52> 'int'
|                 | |     |-ImplicitCastExpr 0x5608c1467f40 <col:15> 'int (*)(jv)' <FunctionToPointerDecay>
|                 | |     | `-DeclRefExpr 0x5608c1467e88 <col:15> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|                 | |     `-CallExpr 0x5608c1467f00 <col:38, col:51> 'jv':'jv'
|                 | |       |-ImplicitCastExpr 0x5608c1467ee8 <col:38> 'jv (*)(jv)' <FunctionToPointerDecay>
|                 | |       | `-DeclRefExpr 0x5608c1467ea8 <col:38> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|                 | |       `-ImplicitCastExpr 0x5608c1467f28 <col:46> 'jv':'jv' <LValueToRValue>
|                 | |         `-DeclRefExpr 0x5608c1467ec8 <col:46> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                 | |-ForStmt 0x5608c1469368 <line:694:5, line:708:5>
|                 | | |-DeclStmt 0x5608c1468038 <line:694:10, col:17>
|                 | | | `-VarDecl 0x5608c1467fb0 <col:10, col:16> col:14 used i 'int' cinit
|                 | | |   `-IntegerLiteral 0x5608c1468018 <col:16> 'int' 0
|                 | | |-<<<NULL>>>
|                 | | |-BinaryOperator 0x5608c14680c0 <col:19, col:21> 'int' '<'
|                 | | | |-ImplicitCastExpr 0x5608c1468090 <col:19> 'int' <LValueToRValue>
|                 | | | | `-DeclRefExpr 0x5608c1468050 <col:19> 'int' lvalue Var 0x5608c1467fb0 'i' 'int'
|                 | | | `-ImplicitCastExpr 0x5608c14680a8 <col:21> 'int' <LValueToRValue>
|                 | | |   `-DeclRefExpr 0x5608c1468070 <col:21> 'int' lvalue Var 0x5608c1467e20 'len' 'int'
|                 | | |-CompoundAssignOperator 0x5608c1468120 <col:26, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|                 | | | |-DeclRefExpr 0x5608c14680e0 <col:26> 'int' lvalue Var 0x5608c1467fb0 'i' 'int'
|                 | | | `-IntegerLiteral 0x5608c1468100 <col:29> 'int' 3
|                 | | `-CompoundStmt 0x5608c1469318 <col:32, line:708:5>
|                 | |   |-DeclStmt 0x5608c1468200 <line:695:7, col:24>
|                 | |   | `-VarDecl 0x5608c1468160 <col:7, col:23> col:16 used code 'uint32_t':'unsigned int' cinit
|                 | |   |   `-ImplicitCastExpr 0x5608c14681e8 <col:23> 'uint32_t':'unsigned int' <IntegralCast>
|                 | |   |     `-IntegerLiteral 0x5608c14681c8 <col:23> 'int' 0
|                 | |   |-DeclStmt 0x5608c1468448 <line:696:7, col:39>
|                 | |   | `-VarDecl 0x5608c1468230 <col:7, col:38> col:11 used n 'int' cinit
|                 | |   |   `-ConditionalOperator 0x5608c1468418 <col:15, col:38> 'int'
|                 | |   |     |-BinaryOperator 0x5608c1468348 <col:15, col:26> 'int' '>='
|                 | |   |     | |-BinaryOperator 0x5608c1468308 <col:15, col:21> 'int' '-'
|                 | |   |     | | |-ImplicitCastExpr 0x5608c14682d8 <col:15> 'int' <LValueToRValue>
|                 | |   |     | | | `-DeclRefExpr 0x5608c1468298 <col:15> 'int' lvalue Var 0x5608c1467e20 'len' 'int'
|                 | |   |     | | `-ImplicitCastExpr 0x5608c14682f0 <col:21> 'int' <LValueToRValue>
|                 | |   |     | |   `-DeclRefExpr 0x5608c14682b8 <col:21> 'int' lvalue Var 0x5608c1467fb0 'i' 'int'
|                 | |   |     | `-IntegerLiteral 0x5608c1468328 <col:26> 'int' 3
|                 | |   |     |-IntegerLiteral 0x5608c1468368 <col:30> 'int' 3
|                 | |   |     `-BinaryOperator 0x5608c14683f8 <col:34, col:38> 'int' '-'
|                 | |   |       |-ImplicitCastExpr 0x5608c14683c8 <col:34> 'int' <LValueToRValue>
|                 | |   |       | `-DeclRefExpr 0x5608c1468388 <col:34> 'int' lvalue Var 0x5608c1467e20 'len' 'int'
|                 | |   |       `-ImplicitCastExpr 0x5608c14683e0 <col:38> 'int' <LValueToRValue>
|                 | |   |         `-DeclRefExpr 0x5608c14683a8 <col:38> 'int' lvalue Var 0x5608c1467fb0 'i' 'int'
|                 | |   |-ForStmt 0x5608c14688f8 <line:697:7, line:700:7>
|                 | |   | |-DeclStmt 0x5608c1468500 <line:697:12, col:19>
|                 | |   | | `-VarDecl 0x5608c1468478 <col:12, col:18> col:16 used j 'int' cinit
|                 | |   | |   `-IntegerLiteral 0x5608c14684e0 <col:18> 'int' 0
|                 | |   | |-<<<NULL>>>
|                 | |   | |-BinaryOperator 0x5608c1468570 <col:21, col:23> 'int' '<'
|                 | |   | | |-ImplicitCastExpr 0x5608c1468558 <col:21> 'int' <LValueToRValue>
|                 | |   | | | `-DeclRefExpr 0x5608c1468518 <col:21> 'int' lvalue Var 0x5608c1468478 'j' 'int'
|                 | |   | | `-IntegerLiteral 0x5608c1468538 <col:23> 'int' 3
|                 | |   | |-UnaryOperator 0x5608c14685b0 <col:26, col:27> 'int' postfix '++'
|                 | |   | | `-DeclRefExpr 0x5608c1468590 <col:26> 'int' lvalue Var 0x5608c1468478 'j' 'int'
|                 | |   | `-CompoundStmt 0x5608c14688d8 <col:31, line:700:7>
|                 | |   |   |-CompoundAssignOperator 0x5608c1468620 <line:698:9, col:18> 'uint32_t':'unsigned int' '<<=' ComputeLHSTy='uint32_t':'unsigned int' ComputeResultTy='uint32_t':'unsigned int'
|                 | |   |   | |-DeclRefExpr 0x5608c14685c8 <col:9> 'uint32_t':'unsigned int' lvalue Var 0x5608c1468160 'code' 'uint32_t':'unsigned int'
|                 | |   |   | `-IntegerLiteral 0x5608c14685e8 <col:18> 'int' 8
|                 | |   |   `-CompoundAssignOperator 0x5608c14688a8 <line:699:9, col:47> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|                 | |   |     |-DeclRefExpr 0x5608c1468650 <col:9> 'uint32_t':'unsigned int' lvalue Var 0x5608c1468160 'code' 'uint32_t':'unsigned int'
|                 | |   |     `-ConditionalOperator 0x5608c1468878 <col:17, col:47> 'unsigned int'
|                 | |   |       |-BinaryOperator 0x5608c14686e0 <col:17, col:21> 'int' '<'
|                 | |   |       | |-ImplicitCastExpr 0x5608c14686b0 <col:17> 'int' <LValueToRValue>
|                 | |   |       | | `-DeclRefExpr 0x5608c1468670 <col:17> 'int' lvalue Var 0x5608c1468478 'j' 'int'
|                 | |   |       | `-ImplicitCastExpr 0x5608c14686c8 <col:21> 'int' <LValueToRValue>
|                 | |   |       |   `-DeclRefExpr 0x5608c1468690 <col:21> 'int' lvalue Var 0x5608c1468230 'n' 'int'
|                 | |   |       |-CStyleCastExpr 0x5608c1468818 <col:25, col:43> 'unsigned int' <IntegralCast>
|                 | |   |       | `-ImplicitCastExpr 0x5608c1468800 <col:35, col:43> 'unsigned char' <LValueToRValue> part_of_explicit_cast
|                 | |   |       |   `-ArraySubscriptExpr 0x5608c14687c8 <col:35, col:43> 'const unsigned char' lvalue
|                 | |   |       |     |-ImplicitCastExpr 0x5608c14687b0 <col:35> 'const unsigned char *' <LValueToRValue>
|                 | |   |       |     | `-DeclRefExpr 0x5608c1468700 <col:35> 'const unsigned char *' lvalue Var 0x5608c1467cb0 'data' 'const unsigned char *'
|                 | |   |       |     `-BinaryOperator 0x5608c1468790 <col:40, col:42> 'int' '+'
|                 | |   |       |       |-ImplicitCastExpr 0x5608c1468760 <col:40> 'int' <LValueToRValue>
|                 | |   |       |       | `-DeclRefExpr 0x5608c1468720 <col:40> 'int' lvalue Var 0x5608c1467fb0 'i' 'int'
|                 | |   |       |       `-ImplicitCastExpr 0x5608c1468778 <col:42> 'int' <LValueToRValue>
|                 | |   |       |         `-DeclRefExpr 0x5608c1468740 <col:42> 'int' lvalue Var 0x5608c1468478 'j' 'int'
|                 | |   |       `-ImplicitCastExpr 0x5608c1468860 <col:47> 'unsigned int' <IntegralCast>
|                 | |   |         `-IntegerLiteral 0x5608c1468840 <col:47> 'int' 0
|                 | |   |-DeclStmt 0x5608c14689f8 <line:701:7, col:18>
|                 | |   | `-VarDecl 0x5608c1468990 <col:7, col:17> col:12 used buf 'char [4]'
|                 | |   |-ForStmt 0x5608c1468e70 <line:702:7, line:704:7>
|                 | |   | |-DeclStmt 0x5608c1468ab0 <line:702:12, col:19>
|                 | |   | | `-VarDecl 0x5608c1468a28 <col:12, col:18> col:16 used j 'int' cinit
|                 | |   | |   `-IntegerLiteral 0x5608c1468a90 <col:18> 'int' 0
|                 | |   | |-<<<NULL>>>
|                 | |   | |-BinaryOperator 0x5608c1468b20 <col:21, col:23> 'int' '<'
|                 | |   | | |-ImplicitCastExpr 0x5608c1468b08 <col:21> 'int' <LValueToRValue>
|                 | |   | | | `-DeclRefExpr 0x5608c1468ac8 <col:21> 'int' lvalue Var 0x5608c1468a28 'j' 'int'
|                 | |   | | `-IntegerLiteral 0x5608c1468ae8 <col:23> 'int' 4
|                 | |   | |-UnaryOperator 0x5608c1468b60 <col:26, col:27> 'int' postfix '++'
|                 | |   | | `-DeclRefExpr 0x5608c1468b40 <col:26> 'int' lvalue Var 0x5608c1468a28 'j' 'int'
|                 | |   | `-CompoundStmt 0x5608c1468e58 <col:31, line:704:7>
|                 | |   |   `-BinaryOperator 0x5608c1468e38 <line:703:9, col:65> 'char' '='
|                 | |   |     |-ArraySubscriptExpr 0x5608c1468be8 <col:9, col:14> 'char' lvalue
|                 | |   |     | |-ImplicitCastExpr 0x5608c1468bb8 <col:9> 'char *' <ArrayToPointerDecay>
|                 | |   |     | | `-DeclRefExpr 0x5608c1468b78 <col:9> 'char [4]' lvalue Var 0x5608c1468990 'buf' 'char [4]'
|                 | |   |     | `-ImplicitCastExpr 0x5608c1468bd0 <col:13> 'int' <LValueToRValue>
|                 | |   |     |   `-DeclRefExpr 0x5608c1468b98 <col:13> 'int' lvalue Var 0x5608c1468a28 'j' 'int'
|                 | |   |     `-ImplicitCastExpr 0x5608c1468e20 <col:18, col:65> 'char' <IntegralCast>
|                 | |   |       `-ImplicitCastExpr 0x5608c1468e08 <col:18, col:65> 'unsigned char' <LValueToRValue>
|                 | |   |         `-ArraySubscriptExpr 0x5608c1468de8 <col:18, col:65> 'const unsigned char' lvalue
|                 | |   |           |-ImplicitCastExpr 0x5608c1468dd0 <col:18> 'const unsigned char *' <ArrayToPointerDecay>
|                 | |   |           | `-DeclRefExpr 0x5608c1468c08 <col:18> 'const unsigned char [65]' lvalue Var 0x5608c1459b00 'BASE64_ENCODE_TABLE' 'const unsigned char [65]'
|                 | |   |           `-BinaryOperator 0x5608c1468db0 <col:38, col:61> 'unsigned int' '&'
|                 | |   |             |-ParenExpr 0x5608c1468d58 <col:38, col:57> 'uint32_t':'unsigned int'
|                 | |   |             | `-BinaryOperator 0x5608c1468d38 <col:39, col:56> 'uint32_t':'unsigned int' '>>'
|                 | |   |             |   |-ImplicitCastExpr 0x5608c1468d20 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|                 | |   |             |   | `-DeclRefExpr 0x5608c1468c28 <col:39> 'uint32_t':'unsigned int' lvalue Var 0x5608c1468160 'code' 'uint32_t':'unsigned int'
|                 | |   |             |   `-ParenExpr 0x5608c1468d00 <col:47, col:56> 'int'
|                 | |   |             |     `-BinaryOperator 0x5608c1468ce0 <col:48, col:55> 'int' '-'
|                 | |   |             |       |-IntegerLiteral 0x5608c1468c48 <col:48> 'int' 18
|                 | |   |             |       `-BinaryOperator 0x5608c1468cc0 <col:53, col:55> 'int' '*'
|                 | |   |             |         |-ImplicitCastExpr 0x5608c1468ca8 <col:53> 'int' <LValueToRValue>
|                 | |   |             |         | `-DeclRefExpr 0x5608c1468c68 <col:53> 'int' lvalue Var 0x5608c1468a28 'j' 'int'
|                 | |   |             |         `-IntegerLiteral 0x5608c1468c88 <col:55> 'int' 6
|                 | |   |             `-ImplicitCastExpr 0x5608c1468d98 <col:61> 'unsigned int' <IntegralCast>
|                 | |   |               `-IntegerLiteral 0x5608c1468d78 <col:61> 'int' 63
|                 | |   |-IfStmt 0x5608c1468fe8 <line:705:7, col:27>
|                 | |   | |-BinaryOperator 0x5608c1468f00 <col:11, col:15> 'int' '<'
|                 | |   | | |-ImplicitCastExpr 0x5608c1468ee8 <col:11> 'int' <LValueToRValue>
|                 | |   | | | `-DeclRefExpr 0x5608c1468ea8 <col:11> 'int' lvalue Var 0x5608c1468230 'n' 'int'
|                 | |   | | `-IntegerLiteral 0x5608c1468ec8 <col:15> 'int' 3
|                 | |   | `-BinaryOperator 0x5608c1468fc8 <col:18, col:27> 'char' '='
|                 | |   |   |-ArraySubscriptExpr 0x5608c1468f78 <col:18, col:23> 'char' lvalue
|                 | |   |   | |-ImplicitCastExpr 0x5608c1468f60 <col:18> 'char *' <ArrayToPointerDecay>
|                 | |   |   | | `-DeclRefExpr 0x5608c1468f20 <col:18> 'char [4]' lvalue Var 0x5608c1468990 'buf' 'char [4]'
|                 | |   |   | `-IntegerLiteral 0x5608c1468f40 <col:22> 'int' 3
|                 | |   |   `-ImplicitCastExpr 0x5608c1468fb0 <col:27> 'char' <IntegralCast>
|                 | |   |     `-CharacterLiteral 0x5608c1468f98 <col:27> 'int' 61
|                 | |   |-IfStmt 0x5608c1469148 <line:706:7, col:27>
|                 | |   | |-BinaryOperator 0x5608c1469060 <col:11, col:15> 'int' '<'
|                 | |   | | |-ImplicitCastExpr 0x5608c1469048 <col:11> 'int' <LValueToRValue>
|                 | |   | | | `-DeclRefExpr 0x5608c1469008 <col:11> 'int' lvalue Var 0x5608c1468230 'n' 'int'
|                 | |   | | `-IntegerLiteral 0x5608c1469028 <col:15> 'int' 2
|                 | |   | `-BinaryOperator 0x5608c1469128 <col:18, col:27> 'char' '='
|                 | |   |   |-ArraySubscriptExpr 0x5608c14690d8 <col:18, col:23> 'char' lvalue
|                 | |   |   | |-ImplicitCastExpr 0x5608c14690c0 <col:18> 'char *' <ArrayToPointerDecay>
|                 | |   |   | | `-DeclRefExpr 0x5608c1469080 <col:18> 'char [4]' lvalue Var 0x5608c1468990 'buf' 'char [4]'
|                 | |   |   | `-IntegerLiteral 0x5608c14690a0 <col:22> 'int' 2
|                 | |   |   `-ImplicitCastExpr 0x5608c1469110 <col:27> 'char' <IntegralCast>
|                 | |   |     `-CharacterLiteral 0x5608c14690f8 <col:27> 'int' 61
|                 | |   `-BinaryOperator 0x5608c14692f8 <line:707:7, col:57> 'jv':'jv' '='
|                 | |     |-DeclRefExpr 0x5608c1469168 <col:7> 'jv':'jv' lvalue Var 0x5608c1467b70 'line' 'jv':'jv'
|                 | |     `-CallExpr 0x5608c1469260 <col:14, col:57> 'jv':'jv'
|                 | |       |-ImplicitCastExpr 0x5608c1469248 <col:14> 'jv (*)(jv, const char *, int)' <FunctionToPointerDecay>
|                 | |       | `-DeclRefExpr 0x5608c1469188 <col:14> 'jv (jv, const char *, int)' Function 0x5608c13e3ec8 'jv_string_append_buf' 'jv (jv, const char *, int)'
|                 | |       |-ImplicitCastExpr 0x5608c1469298 <col:35> 'jv':'jv' <LValueToRValue>
|                 | |       | `-DeclRefExpr 0x5608c14691a8 <col:35> 'jv':'jv' lvalue Var 0x5608c1467b70 'line' 'jv':'jv'
|                 | |       |-ImplicitCastExpr 0x5608c14692c8 <col:41> 'const char *' <NoOp>
|                 | |       | `-ImplicitCastExpr 0x5608c14692b0 <col:41> 'char *' <ArrayToPointerDecay>
|                 | |       |   `-DeclRefExpr 0x5608c14691c8 <col:41> 'char [4]' lvalue Var 0x5608c1468990 'buf' 'char [4]'
|                 | |       `-ImplicitCastExpr 0x5608c14692e0 <col:46, col:56> 'int' <IntegralCast>
|                 | |         `-UnaryExprOrTypeTraitExpr 0x5608c1469228 <col:46, col:56> 'unsigned long' sizeof
|                 | |           `-ParenExpr 0x5608c1469208 <col:52, col:56> 'char [4]' lvalue
|                 | |             `-DeclRefExpr 0x5608c14691e8 <col:53> 'char [4]' lvalue Var 0x5608c1468990 'buf' 'char [4]' non_odr_use_unevaluated
|                 | |-CallExpr 0x5608c14693f8 <line:709:5, col:18> 'void'
|                 | | |-ImplicitCastExpr 0x5608c14693e0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|                 | | | `-DeclRefExpr 0x5608c14693a0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|                 | | `-ImplicitCastExpr 0x5608c1469420 <col:13> 'jv':'jv' <LValueToRValue>
|                 | |   `-DeclRefExpr 0x5608c14693c0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                 | `-ReturnStmt 0x5608c1469470 <line:710:5, col:12>
|                 |   `-ImplicitCastExpr 0x5608c1469458 <col:12> 'jv':'jv' <LValueToRValue>
|                 |     `-DeclRefExpr 0x5608c1469438 <col:12> 'jv':'jv' lvalue Var 0x5608c1467b70 'line' 'jv':'jv'
|                 `-IfStmt 0x5608c146c1d0 <line:711:10, line:757:3> has_else
|                   |-UnaryOperator 0x5608c14695f8 <line:711:14, col:38> 'int' prefix '!' cannot overflow
|                   | `-CallExpr 0x5608c1469580 <col:15, col:38> 'int'
|                   |   |-ImplicitCastExpr 0x5608c1469568 <col:15> 'int (*)(const char *, const char *)' <FunctionToPointerDecay>
|                   |   | `-DeclRefExpr 0x5608c14694d8 <col:15> 'int (const char *, const char *)' Function 0x5608c136bc88 'strcmp' 'int (const char *, const char *)'
|                   |   |-ImplicitCastExpr 0x5608c14695b0 <col:22> 'const char *' <LValueToRValue>
|                   |   | `-DeclRefExpr 0x5608c14694f8 <col:22> 'const char *' lvalue Var 0x5608c1460b20 'fmt_s' 'const char *'
|                   |   `-ImplicitCastExpr 0x5608c14695e0 <col:29> 'const char *' <NoOp>
|                   |     `-ImplicitCastExpr 0x5608c14695c8 <col:29> 'char *' <ArrayToPointerDecay>
|                   |       `-StringLiteral 0x5608c1469518 <col:29> 'char [8]' lvalue "base64d"
|                   |-CompoundStmt 0x5608c146beb8 <col:41, line:754:3>
|                   | |-CallExpr 0x5608c1469668 <line:712:5, col:16> 'void'
|                   | | |-ImplicitCastExpr 0x5608c1469650 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|                   | | | `-DeclRefExpr 0x5608c1469610 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|                   | | `-ImplicitCastExpr 0x5608c1469690 <col:13> 'jv':'jv' <LValueToRValue>
|                   | |   `-DeclRefExpr 0x5608c1469630 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|                   | |-BinaryOperator 0x5608c14697a0 <line:713:5, col:33> 'jv':'jv' '='
|                   | | |-DeclRefExpr 0x5608c14696a8 <col:5> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                   | | `-CallExpr 0x5608c1469740 <col:13, col:33> 'jv':'jv'
|                   | |   |-ImplicitCastExpr 0x5608c1469728 <col:13> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay>
|                   | |   | `-DeclRefExpr 0x5608c14696c8 <col:13> 'jv (jq_state *, jv)' Function 0x5608c1459140 'f_tostring' 'jv (jq_state *, jv)'
|                   | |   |-ImplicitCastExpr 0x5608c1469770 <col:24> 'jq_state *' <LValueToRValue>
|                   | |   | `-DeclRefExpr 0x5608c14696e8 <col:24> 'jq_state *' lvalue ParmVar 0x5608c1460598 'jq' 'jq_state *'
|                   | |   `-ImplicitCastExpr 0x5608c1469788 <col:28> 'jv':'jv' <LValueToRValue>
|                   | |     `-DeclRefExpr 0x5608c1469708 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                   | |-DeclStmt 0x5608c1469918 <line:714:5, col:77>
|                   | | `-VarDecl 0x5608c14697d8 <col:5, col:76> col:26 used data 'const unsigned char *' cinit
|                   | |   `-CStyleCastExpr 0x5608c14698f0 <col:33, col:76> 'const unsigned char *' <BitCast>
|                   | |     `-CallExpr 0x5608c1469898 <col:55, col:76> 'const char *'
|                   | |       |-ImplicitCastExpr 0x5608c1469880 <col:55> 'const char *(*)(jv)' <FunctionToPointerDecay>
|                   | |       | `-DeclRefExpr 0x5608c1469840 <col:55> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|                   | |       `-ImplicitCastExpr 0x5608c14698c0 <col:71> 'jv':'jv' <LValueToRValue>
|                   | |         `-DeclRefExpr 0x5608c1469860 <col:71> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                   | |-DeclStmt 0x5608c1469aa8 <line:715:5, col:53>
|                   | | `-VarDecl 0x5608c1469948 <col:5, col:52> col:9 used len 'int' cinit
|                   | |   `-CallExpr 0x5608c1469a80 <col:15, col:52> 'int'
|                   | |     |-ImplicitCastExpr 0x5608c1469a68 <col:15> 'int (*)(jv)' <FunctionToPointerDecay>
|                   | |     | `-DeclRefExpr 0x5608c14699b0 <col:15> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|                   | |     `-CallExpr 0x5608c1469a28 <col:38, col:51> 'jv':'jv'
|                   | |       |-ImplicitCastExpr 0x5608c1469a10 <col:38> 'jv (*)(jv)' <FunctionToPointerDecay>
|                   | |       | `-DeclRefExpr 0x5608c14699d0 <col:38> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|                   | |       `-ImplicitCastExpr 0x5608c1469a50 <col:46> 'jv':'jv' <LValueToRValue>
|                   | |         `-DeclRefExpr 0x5608c14699f0 <col:46> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                   | |-DeclStmt 0x5608c1469c28 <line:716:5, col:39>
|                   | | `-VarDecl 0x5608c1469ad0 <col:5, col:38> col:12 used decoded_len 'size_t':'unsigned long' cinit
|                   | |   `-ImplicitCastExpr 0x5608c1469c10 <col:26, col:38> 'size_t':'unsigned long' <IntegralCast>
|                   | |     `-BinaryOperator 0x5608c1469bf0 <col:26, col:38> 'int' '/'
|                   | |       |-ParenExpr 0x5608c1469bb0 <col:26, col:34> 'int'
|                   | |       | `-BinaryOperator 0x5608c1469b90 <col:27, col:31> 'int' '*'
|                   | |       |   |-IntegerLiteral 0x5608c1469b38 <col:27> 'int' 3
|                   | |       |   `-ImplicitCastExpr 0x5608c1469b78 <col:31> 'int' <LValueToRValue>
|                   | |       |     `-DeclRefExpr 0x5608c1469b58 <col:31> 'int' lvalue Var 0x5608c1469948 'len' 'int'
|                   | |       `-IntegerLiteral 0x5608c1469bd0 <col:38> 'int' 4
|                   | |-DeclStmt 0x5608c1469e10 <line:717:5, col:60>
|                   | | `-VarDecl 0x5608c1469c58 <col:5, col:59> col:11 used result 'char *' cinit
|                   | |   `-ImplicitCastExpr 0x5608c1469df8 <col:20, col:59> 'char *' <BitCast>
|                   | |     `-CallExpr 0x5608c1469db0 <col:20, col:59> 'void *'
|                   | |       |-ImplicitCastExpr 0x5608c1469d98 <col:20> 'void *(*)(size_t, size_t)' <FunctionToPointerDecay>
|                   | |       | `-DeclRefExpr 0x5608c1469cc0 <col:20> 'void *(size_t, size_t)' Function 0x5608c1414f88 'jv_mem_calloc' 'void *(size_t, size_t)'
|                   | |       |-ImplicitCastExpr 0x5608c1469de0 <col:34> 'size_t':'unsigned long' <LValueToRValue>
|                   | |       | `-DeclRefExpr 0x5608c1469ce0 <col:34> 'size_t':'unsigned long' lvalue Var 0x5608c1469ad0 'decoded_len' 'size_t':'unsigned long'
|                   | |       `-UnaryExprOrTypeTraitExpr 0x5608c1469d10 <col:47, col:58> 'unsigned long' sizeof 'char'
|                   | |-CallExpr 0x5608c1469f70 <line:718:5, col:49> 'void *'
|                   | | |-ImplicitCastExpr 0x5608c1469f58 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|                   | | | `-DeclRefExpr 0x5608c1469e28 <col:5> 'void *(void *, int, unsigned long)' Function 0x5608c1368ab8 'memset' 'void *(void *, int, unsigned long)'
|                   | | |-ImplicitCastExpr 0x5608c1469fc0 <col:12> 'void *' <BitCast>
|                   | | | `-ImplicitCastExpr 0x5608c1469fa8 <col:12> 'char *' <LValueToRValue>
|                   | | |   `-DeclRefExpr 0x5608c1469e48 <col:12> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | | |-IntegerLiteral 0x5608c1469e68 <col:20> 'int' 0
|                   | | `-BinaryOperator 0x5608c1469ef0 <col:23, col:48> 'unsigned long' '*'
|                   | |   |-ImplicitCastExpr 0x5608c1469ed8 <col:23> 'size_t':'unsigned long' <LValueToRValue>
|                   | |   | `-DeclRefExpr 0x5608c1469e88 <col:23> 'size_t':'unsigned long' lvalue Var 0x5608c1469ad0 'decoded_len' 'size_t':'unsigned long'
|                   | |   `-UnaryExprOrTypeTraitExpr 0x5608c1469eb8 <col:37, col:48> 'unsigned long' sizeof 'char'
|                   | |-DeclStmt 0x5608c146a088 <line:719:5, col:20>
|                   | | `-VarDecl 0x5608c1469fe8 <col:5, col:19> col:14 used ri 'uint32_t':'unsigned int' cinit
|                   | |   `-ImplicitCastExpr 0x5608c146a070 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|                   | |     `-IntegerLiteral 0x5608c146a050 <col:19> 'int' 0
|                   | |-DeclStmt 0x5608c146a140 <line:720:5, col:27>
|                   | | `-VarDecl 0x5608c146a0b8 <col:5, col:26> col:9 used input_bytes_read 'int' cinit
|                   | |   `-IntegerLiteral 0x5608c146a120 <col:26> 'int' 0
|                   | |-DeclStmt 0x5608c146a208 <line:721:5, col:22>
|                   | | `-VarDecl 0x5608c146a168 <col:5, col:21> col:14 used code 'uint32_t':'unsigned int' cinit
|                   | |   `-ImplicitCastExpr 0x5608c146a1f0 <col:21> 'uint32_t':'unsigned int' <IntegralCast>
|                   | |     `-IntegerLiteral 0x5608c146a1d0 <col:21> 'int' 0
|                   | |-ForStmt 0x5608c146b1f0 <line:722:5, line:739:5>
|                   | | |-DeclStmt 0x5608c146a2c0 <line:722:10, col:17>
|                   | | | `-VarDecl 0x5608c146a238 <col:10, col:16> col:14 used i 'int' cinit
|                   | | |   `-IntegerLiteral 0x5608c146a2a0 <col:16> 'int' 0
|                   | | |-<<<NULL>>>
|                   | | |-BinaryOperator 0x5608c146a460 <col:19, col:39> 'int' '&&'
|                   | | | |-BinaryOperator 0x5608c146a348 <col:19, col:21> 'int' '<'
|                   | | | | |-ImplicitCastExpr 0x5608c146a318 <col:19> 'int' <LValueToRValue>
|                   | | | | | `-DeclRefExpr 0x5608c146a2d8 <col:19> 'int' lvalue Var 0x5608c146a238 'i' 'int'
|                   | | | | `-ImplicitCastExpr 0x5608c146a330 <col:21> 'int' <LValueToRValue>
|                   | | | |   `-DeclRefExpr 0x5608c146a2f8 <col:21> 'int' lvalue Var 0x5608c1469948 'len' 'int'
|                   | | | `-BinaryOperator 0x5608c146a440 <col:28, col:39> 'int' '!='
|                   | | |   |-ImplicitCastExpr 0x5608c146a428 <col:28, col:34> 'int' <IntegralCast>
|                   | | |   | `-ImplicitCastExpr 0x5608c146a410 <col:28, col:34> 'unsigned char' <LValueToRValue>
|                   | | |   |   `-ArraySubscriptExpr 0x5608c146a3d8 <col:28, col:34> 'const unsigned char' lvalue
|                   | | |   |     |-ImplicitCastExpr 0x5608c146a3a8 <col:28> 'const unsigned char *' <LValueToRValue>
|                   | | |   |     | `-DeclRefExpr 0x5608c146a368 <col:28> 'const unsigned char *' lvalue Var 0x5608c14697d8 'data' 'const unsigned char *'
|                   | | |   |     `-ImplicitCastExpr 0x5608c146a3c0 <col:33> 'int' <LValueToRValue>
|                   | | |   |       `-DeclRefExpr 0x5608c146a388 <col:33> 'int' lvalue Var 0x5608c146a238 'i' 'int'
|                   | | |   `-CharacterLiteral 0x5608c146a3f8 <col:39> 'int' 61
|                   | | |-UnaryOperator 0x5608c146a4a0 <col:44, col:45> 'int' postfix '++'
|                   | | | `-DeclRefExpr 0x5608c146a480 <col:44> 'int' lvalue Var 0x5608c146a238 'i' 'int'
|                   | | `-CompoundStmt 0x5608c146b1b8 <col:49, line:739:5>
|                   | |   |-IfStmt 0x5608c146a8e8 <line:723:7, line:726:7>
|                   | |   | |-BinaryOperator 0x5608c146a638 <line:723:11, col:43> 'int' '=='
|                   | |   | | |-ImplicitCastExpr 0x5608c146a608 <col:11, col:38> 'int' <IntegralCast>
|                   | |   | | | `-ImplicitCastExpr 0x5608c146a5d8 <col:11, col:38> 'unsigned char' <LValueToRValue>
|                   | |   | | |   `-ArraySubscriptExpr 0x5608c146a598 <col:11, col:38> 'const unsigned char' lvalue
|                   | |   | | |     |-ImplicitCastExpr 0x5608c146a568 <col:11> 'const unsigned char *' <ArrayToPointerDecay>
|                   | |   | | |     | `-DeclRefExpr 0x5608c146a4b8 <col:11> 'const unsigned char [255]' lvalue Var 0x5608c1459dd0 'BASE64_DECODE_TABLE' 'const unsigned char [255]'
|                   | |   | | |     `-ImplicitCastExpr 0x5608c146a580 <col:31, col:37> 'unsigned char' <LValueToRValue>
|                   | |   | | |       `-ArraySubscriptExpr 0x5608c146a548 <col:31, col:37> 'const unsigned char' lvalue
|                   | |   | | |         |-ImplicitCastExpr 0x5608c146a518 <col:31> 'const unsigned char *' <LValueToRValue>
|                   | |   | | |         | `-DeclRefExpr 0x5608c146a4d8 <col:31> 'const unsigned char *' lvalue Var 0x5608c14697d8 'data' 'const unsigned char *'
|                   | |   | | |         `-ImplicitCastExpr 0x5608c146a530 <col:36> 'int' <LValueToRValue>
|                   | |   | | |           `-DeclRefExpr 0x5608c146a4f8 <col:36> 'int' lvalue Var 0x5608c146a238 'i' 'int'
|                   | |   | | `-ImplicitCastExpr 0x5608c146a620 <col:43> 'int' <IntegralCast>
|                   | |   | |   `-ImplicitCastExpr 0x5608c146a5f0 <col:43> 'unsigned char' <LValueToRValue>
|                   | |   | |     `-DeclRefExpr 0x5608c146a5b8 <col:43> 'const unsigned char' lvalue Var 0x5608c1459c20 'BASE64_INVALID_ENTRY' 'const unsigned char'
|                   | |   | `-CompoundStmt 0x5608c146a8c8 <col:65, line:726:7>
|                   | |   |   |-CallExpr 0x5608c146a720 <line:724:9, col:20> 'void'
|                   | |   |   | |-ImplicitCastExpr 0x5608c146a708 <col:9> 'void (*)(void *)' <FunctionToPointerDecay>
|                   | |   |   | | `-DeclRefExpr 0x5608c146a6b0 <col:9> 'void (void *)' Function 0x5608c116cd90 'free' 'void (void *)'
|                   | |   |   | `-ImplicitCastExpr 0x5608c146a760 <col:14> 'void *' <BitCast>
|                   | |   |   |   `-ImplicitCastExpr 0x5608c146a748 <col:14> 'char *' <LValueToRValue>
|                   | |   |   |     `-DeclRefExpr 0x5608c146a6d0 <col:14> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | |   |   `-ReturnStmt 0x5608c146a8b8 <line:725:9, col:60>
|                   | |   |     `-CallExpr 0x5608c146a840 <col:16, col:60> 'jv':'jv'
|                   | |   |       |-ImplicitCastExpr 0x5608c146a828 <col:16> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|                   | |   |       | `-DeclRefExpr 0x5608c146a778 <col:16> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|                   | |   |       |-ImplicitCastExpr 0x5608c146a870 <col:27> 'jv':'jv' <LValueToRValue>
|                   | |   |       | `-DeclRefExpr 0x5608c146a798 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                   | |   |       `-ImplicitCastExpr 0x5608c146a8a0 <col:34> 'const char *' <NoOp>
|                   | |   |         `-ImplicitCastExpr 0x5608c146a888 <col:34> 'char *' <ArrayToPointerDecay>
|                   | |   |           `-StringLiteral 0x5608c146a7f8 <col:34> 'char [25]' lvalue "is not valid base64 data"
|                   | |   |-CompoundAssignOperator 0x5608c146a960 <line:728:7, col:16> 'uint32_t':'unsigned int' '<<=' ComputeLHSTy='uint32_t':'unsigned int' ComputeResultTy='uint32_t':'unsigned int'
|                   | |   | |-DeclRefExpr 0x5608c146a908 <col:7> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | |   | `-IntegerLiteral 0x5608c146a928 <col:16> 'int' 6
|                   | |   |-CompoundAssignOperator 0x5608c146aae0 <line:729:7, col:42> 'uint32_t':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|                   | |   | |-DeclRefExpr 0x5608c146a990 <col:7> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | |   | `-ImplicitCastExpr 0x5608c146aac8 <col:15, col:42> 'unsigned int' <IntegralCast>
|                   | |   |   `-ImplicitCastExpr 0x5608c146aab0 <col:15, col:42> 'unsigned char' <LValueToRValue>
|                   | |   |     `-ArraySubscriptExpr 0x5608c146aa90 <col:15, col:42> 'const unsigned char' lvalue
|                   | |   |       |-ImplicitCastExpr 0x5608c146aa60 <col:15> 'const unsigned char *' <ArrayToPointerDecay>
|                   | |   |       | `-DeclRefExpr 0x5608c146a9b0 <col:15> 'const unsigned char [255]' lvalue Var 0x5608c1459dd0 'BASE64_DECODE_TABLE' 'const unsigned char [255]'
|                   | |   |       `-ImplicitCastExpr 0x5608c146aa78 <col:35, col:41> 'unsigned char' <LValueToRValue>
|                   | |   |         `-ArraySubscriptExpr 0x5608c146aa40 <col:35, col:41> 'const unsigned char' lvalue
|                   | |   |           |-ImplicitCastExpr 0x5608c146aa10 <col:35> 'const unsigned char *' <LValueToRValue>
|                   | |   |           | `-DeclRefExpr 0x5608c146a9d0 <col:35> 'const unsigned char *' lvalue Var 0x5608c14697d8 'data' 'const unsigned char *'
|                   | |   |           `-ImplicitCastExpr 0x5608c146aa28 <col:40> 'int' <LValueToRValue>
|                   | |   |             `-DeclRefExpr 0x5608c146a9f0 <col:40> 'int' lvalue Var 0x5608c146a238 'i' 'int'
|                   | |   |-UnaryOperator 0x5608c146ab30 <line:730:7, col:23> 'int' postfix '++'
|                   | |   | `-DeclRefExpr 0x5608c146ab10 <col:7> 'int' lvalue Var 0x5608c146a0b8 'input_bytes_read' 'int'
|                   | |   `-IfStmt 0x5608c146b198 <line:732:7, line:738:7>
|                   | |     |-BinaryOperator 0x5608c146aba0 <line:732:11, col:31> 'int' '=='
|                   | |     | |-ImplicitCastExpr 0x5608c146ab88 <col:11> 'int' <LValueToRValue>
|                   | |     | | `-DeclRefExpr 0x5608c146ab48 <col:11> 'int' lvalue Var 0x5608c146a0b8 'input_bytes_read' 'int'
|                   | |     | `-IntegerLiteral 0x5608c146ab68 <col:31> 'int' 4
|                   | |     `-CompoundStmt 0x5608c146b160 <col:34, line:738:7>
|                   | |       |-BinaryOperator 0x5608c146ad58 <line:733:9, col:39> 'char' '='
|                   | |       | |-ArraySubscriptExpr 0x5608c146ac30 <col:9, col:20> 'char' lvalue
|                   | |       | | |-ImplicitCastExpr 0x5608c146ac18 <col:9> 'char *' <LValueToRValue>
|                   | |       | | | `-DeclRefExpr 0x5608c146abc0 <col:9> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | |       | | `-UnaryOperator 0x5608c146ac00 <col:16, col:18> 'uint32_t':'unsigned int' postfix '++'
|                   | |       | |   `-DeclRefExpr 0x5608c146abe0 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x5608c1469fe8 'ri' 'uint32_t':'unsigned int'
|                   | |       | `-ImplicitCastExpr 0x5608c146ad40 <col:24, col:39> 'char' <IntegralCast>
|                   | |       |   `-BinaryOperator 0x5608c146ad20 <col:24, col:39> 'unsigned int' '&'
|                   | |       |     |-ParenExpr 0x5608c146acc8 <col:24, col:35> 'uint32_t':'unsigned int'
|                   | |       |     | `-BinaryOperator 0x5608c146aca8 <col:25, col:33> 'uint32_t':'unsigned int' '>>'
|                   | |       |     |   |-ImplicitCastExpr 0x5608c146ac90 <col:25> 'uint32_t':'unsigned int' <LValueToRValue>
|                   | |       |     |   | `-DeclRefExpr 0x5608c146ac50 <col:25> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | |       |     |   `-IntegerLiteral 0x5608c146ac70 <col:33> 'int' 16
|                   | |       |     `-ImplicitCastExpr 0x5608c146ad08 <col:39> 'unsigned int' <IntegralCast>
|                   | |       |       `-IntegerLiteral 0x5608c146ace8 <col:39> 'int' 255
|                   | |       |-BinaryOperator 0x5608c146af10 <line:734:9, col:38> 'char' '='
|                   | |       | |-ArraySubscriptExpr 0x5608c146ade8 <col:9, col:20> 'char' lvalue
|                   | |       | | |-ImplicitCastExpr 0x5608c146add0 <col:9> 'char *' <LValueToRValue>
|                   | |       | | | `-DeclRefExpr 0x5608c146ad78 <col:9> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | |       | | `-UnaryOperator 0x5608c146adb8 <col:16, col:18> 'uint32_t':'unsigned int' postfix '++'
|                   | |       | |   `-DeclRefExpr 0x5608c146ad98 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x5608c1469fe8 'ri' 'uint32_t':'unsigned int'
|                   | |       | `-ImplicitCastExpr 0x5608c146aef8 <col:24, col:38> 'char' <IntegralCast>
|                   | |       |   `-BinaryOperator 0x5608c146aed8 <col:24, col:38> 'unsigned int' '&'
|                   | |       |     |-ParenExpr 0x5608c146ae80 <col:24, col:34> 'uint32_t':'unsigned int'
|                   | |       |     | `-BinaryOperator 0x5608c146ae60 <col:25, col:33> 'uint32_t':'unsigned int' '>>'
|                   | |       |     |   |-ImplicitCastExpr 0x5608c146ae48 <col:25> 'uint32_t':'unsigned int' <LValueToRValue>
|                   | |       |     |   | `-DeclRefExpr 0x5608c146ae08 <col:25> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | |       |     |   `-IntegerLiteral 0x5608c146ae28 <col:33> 'int' 8
|                   | |       |     `-ImplicitCastExpr 0x5608c146aec0 <col:38> 'unsigned int' <IntegralCast>
|                   | |       |       `-IntegerLiteral 0x5608c146aea0 <col:38> 'int' 255
|                   | |       |-BinaryOperator 0x5608c146b068 <line:735:9, col:31> 'char' '='
|                   | |       | |-ArraySubscriptExpr 0x5608c146afa0 <col:9, col:20> 'char' lvalue
|                   | |       | | |-ImplicitCastExpr 0x5608c146af88 <col:9> 'char *' <LValueToRValue>
|                   | |       | | | `-DeclRefExpr 0x5608c146af30 <col:9> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | |       | | `-UnaryOperator 0x5608c146af70 <col:16, col:18> 'uint32_t':'unsigned int' postfix '++'
|                   | |       | |   `-DeclRefExpr 0x5608c146af50 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x5608c1469fe8 'ri' 'uint32_t':'unsigned int'
|                   | |       | `-ImplicitCastExpr 0x5608c146b050 <col:24, col:31> 'char' <IntegralCast>
|                   | |       |   `-BinaryOperator 0x5608c146b030 <col:24, col:31> 'unsigned int' '&'
|                   | |       |     |-ImplicitCastExpr 0x5608c146b000 <col:24> 'uint32_t':'unsigned int' <LValueToRValue>
|                   | |       |     | `-DeclRefExpr 0x5608c146afc0 <col:24> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | |       |     `-ImplicitCastExpr 0x5608c146b018 <col:31> 'unsigned int' <IntegralCast>
|                   | |       |       `-IntegerLiteral 0x5608c146afe0 <col:31> 'int' 255
|                   | |       |-BinaryOperator 0x5608c146b0c8 <line:736:9, col:28> 'int' '='
|                   | |       | |-DeclRefExpr 0x5608c146b088 <col:9> 'int' lvalue Var 0x5608c146a0b8 'input_bytes_read' 'int'
|                   | |       | `-IntegerLiteral 0x5608c146b0a8 <col:28> 'int' 0
|                   | |       `-BinaryOperator 0x5608c146b140 <line:737:9, col:16> 'uint32_t':'unsigned int' '='
|                   | |         |-DeclRefExpr 0x5608c146b0e8 <col:9> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | |         `-ImplicitCastExpr 0x5608c146b128 <col:16> 'uint32_t':'unsigned int' <IntegralCast>
|                   | |           `-IntegerLiteral 0x5608c146b108 <col:16> 'int' 0
|                   | |-IfStmt 0x5608c146bb40 <line:740:5, line:748:5> has_else
|                   | | |-BinaryOperator 0x5608c146b280 <line:740:9, col:29> 'int' '=='
|                   | | | |-ImplicitCastExpr 0x5608c146b268 <col:9> 'int' <LValueToRValue>
|                   | | | | `-DeclRefExpr 0x5608c146b228 <col:9> 'int' lvalue Var 0x5608c146a0b8 'input_bytes_read' 'int'
|                   | | | `-IntegerLiteral 0x5608c146b248 <col:29> 'int' 3
|                   | | |-CompoundStmt 0x5608c146b610 <col:32, line:743:5>
|                   | | | |-BinaryOperator 0x5608c146b438 <line:741:7, col:37> 'char' '='
|                   | | | | |-ArraySubscriptExpr 0x5608c146b310 <col:7, col:18> 'char' lvalue
|                   | | | | | |-ImplicitCastExpr 0x5608c146b2f8 <col:7> 'char *' <LValueToRValue>
|                   | | | | | | `-DeclRefExpr 0x5608c146b2a0 <col:7> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | | | | | `-UnaryOperator 0x5608c146b2e0 <col:14, col:16> 'uint32_t':'unsigned int' postfix '++'
|                   | | | | |   `-DeclRefExpr 0x5608c146b2c0 <col:14> 'uint32_t':'unsigned int' lvalue Var 0x5608c1469fe8 'ri' 'uint32_t':'unsigned int'
|                   | | | | `-ImplicitCastExpr 0x5608c146b420 <col:22, col:37> 'char' <IntegralCast>
|                   | | | |   `-BinaryOperator 0x5608c146b400 <col:22, col:37> 'unsigned int' '&'
|                   | | | |     |-ParenExpr 0x5608c146b3a8 <col:22, col:33> 'uint32_t':'unsigned int'
|                   | | | |     | `-BinaryOperator 0x5608c146b388 <col:23, col:31> 'uint32_t':'unsigned int' '>>'
|                   | | | |     |   |-ImplicitCastExpr 0x5608c146b370 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|                   | | | |     |   | `-DeclRefExpr 0x5608c146b330 <col:23> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | | | |     |   `-IntegerLiteral 0x5608c146b350 <col:31> 'int' 10
|                   | | | |     `-ImplicitCastExpr 0x5608c146b3e8 <col:37> 'unsigned int' <IntegralCast>
|                   | | | |       `-IntegerLiteral 0x5608c146b3c8 <col:37> 'int' 255
|                   | | | `-BinaryOperator 0x5608c146b5f0 <line:742:7, col:36> 'char' '='
|                   | | |   |-ArraySubscriptExpr 0x5608c146b4c8 <col:7, col:18> 'char' lvalue
|                   | | |   | |-ImplicitCastExpr 0x5608c146b4b0 <col:7> 'char *' <LValueToRValue>
|                   | | |   | | `-DeclRefExpr 0x5608c146b458 <col:7> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | | |   | `-UnaryOperator 0x5608c146b498 <col:14, col:16> 'uint32_t':'unsigned int' postfix '++'
|                   | | |   |   `-DeclRefExpr 0x5608c146b478 <col:14> 'uint32_t':'unsigned int' lvalue Var 0x5608c1469fe8 'ri' 'uint32_t':'unsigned int'
|                   | | |   `-ImplicitCastExpr 0x5608c146b5d8 <col:22, col:36> 'char' <IntegralCast>
|                   | | |     `-BinaryOperator 0x5608c146b5b8 <col:22, col:36> 'unsigned int' '&'
|                   | | |       |-ParenExpr 0x5608c146b560 <col:22, col:32> 'uint32_t':'unsigned int'
|                   | | |       | `-BinaryOperator 0x5608c146b540 <col:23, col:31> 'uint32_t':'unsigned int' '>>'
|                   | | |       |   |-ImplicitCastExpr 0x5608c146b528 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|                   | | |       |   | `-DeclRefExpr 0x5608c146b4e8 <col:23> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | | |       |   `-IntegerLiteral 0x5608c146b508 <col:31> 'int' 2
|                   | | |       `-ImplicitCastExpr 0x5608c146b5a0 <col:36> 'unsigned int' <IntegralCast>
|                   | | |         `-IntegerLiteral 0x5608c146b580 <col:36> 'int' 255
|                   | | `-IfStmt 0x5608c146bb10 <line:743:12, line:748:5> has_else
|                   | |   |-BinaryOperator 0x5608c146b688 <line:743:16, col:36> 'int' '=='
|                   | |   | |-ImplicitCastExpr 0x5608c146b670 <col:16> 'int' <LValueToRValue>
|                   | |   | | `-DeclRefExpr 0x5608c146b630 <col:16> 'int' lvalue Var 0x5608c146a0b8 'input_bytes_read' 'int'
|                   | |   | `-IntegerLiteral 0x5608c146b650 <col:36> 'int' 2
|                   | |   |-CompoundStmt 0x5608c146b860 <col:39, line:745:5>
|                   | |   | `-BinaryOperator 0x5608c146b840 <line:744:7, col:36> 'char' '='
|                   | |   |   |-ArraySubscriptExpr 0x5608c146b718 <col:7, col:18> 'char' lvalue
|                   | |   |   | |-ImplicitCastExpr 0x5608c146b700 <col:7> 'char *' <LValueToRValue>
|                   | |   |   | | `-DeclRefExpr 0x5608c146b6a8 <col:7> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | |   |   | `-UnaryOperator 0x5608c146b6e8 <col:14, col:16> 'uint32_t':'unsigned int' postfix '++'
|                   | |   |   |   `-DeclRefExpr 0x5608c146b6c8 <col:14> 'uint32_t':'unsigned int' lvalue Var 0x5608c1469fe8 'ri' 'uint32_t':'unsigned int'
|                   | |   |   `-ImplicitCastExpr 0x5608c146b828 <col:22, col:36> 'char' <IntegralCast>
|                   | |   |     `-BinaryOperator 0x5608c146b808 <col:22, col:36> 'unsigned int' '&'
|                   | |   |       |-ParenExpr 0x5608c146b7b0 <col:22, col:32> 'uint32_t':'unsigned int'
|                   | |   |       | `-BinaryOperator 0x5608c146b790 <col:23, col:31> 'uint32_t':'unsigned int' '>>'
|                   | |   |       |   |-ImplicitCastExpr 0x5608c146b778 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|                   | |   |       |   | `-DeclRefExpr 0x5608c146b738 <col:23> 'uint32_t':'unsigned int' lvalue Var 0x5608c146a168 'code' 'uint32_t':'unsigned int'
|                   | |   |       |   `-IntegerLiteral 0x5608c146b758 <col:31> 'int' 4
|                   | |   |       `-ImplicitCastExpr 0x5608c146b7f0 <col:36> 'unsigned int' <IntegralCast>
|                   | |   |         `-IntegerLiteral 0x5608c146b7d0 <col:36> 'int' 255
|                   | |   `-IfStmt 0x5608c146baf0 <line:745:12, line:748:5>
|                   | |     |-BinaryOperator 0x5608c146b8d0 <line:745:16, col:36> 'int' '=='
|                   | |     | |-ImplicitCastExpr 0x5608c146b8b8 <col:16> 'int' <LValueToRValue>
|                   | |     | | `-DeclRefExpr 0x5608c146b878 <col:16> 'int' lvalue Var 0x5608c146a0b8 'input_bytes_read' 'int'
|                   | |     | `-IntegerLiteral 0x5608c146b898 <col:36> 'int' 1
|                   | |     `-CompoundStmt 0x5608c146bad0 <col:39, line:748:5>
|                   | |       |-CallExpr 0x5608c146b960 <line:746:7, col:18> 'void'
|                   | |       | |-ImplicitCastExpr 0x5608c146b948 <col:7> 'void (*)(void *)' <FunctionToPointerDecay>
|                   | |       | | `-DeclRefExpr 0x5608c146b8f0 <col:7> 'void (void *)' Function 0x5608c116cd90 'free' 'void (void *)'
|                   | |       | `-ImplicitCastExpr 0x5608c146b9a0 <col:12> 'void *' <BitCast>
|                   | |       |   `-ImplicitCastExpr 0x5608c146b988 <col:12> 'char *' <LValueToRValue>
|                   | |       |     `-DeclRefExpr 0x5608c146b910 <col:12> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | |       `-ReturnStmt 0x5608c146bac0 <line:747:7, col:60>
|                   | |         `-CallExpr 0x5608c146ba48 <col:14, col:60> 'jv':'jv'
|                   | |           |-ImplicitCastExpr 0x5608c146ba30 <col:14> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|                   | |           | `-DeclRefExpr 0x5608c146b9b8 <col:14> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|                   | |           |-ImplicitCastExpr 0x5608c146ba78 <col:25> 'jv':'jv' <LValueToRValue>
|                   | |           | `-DeclRefExpr 0x5608c146b9d8 <col:25> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                   | |           `-ImplicitCastExpr 0x5608c146baa8 <col:32> 'const char *' <NoOp>
|                   | |             `-ImplicitCastExpr 0x5608c146ba90 <col:32> 'char *' <ArrayToPointerDecay>
|                   | |               `-StringLiteral 0x5608c146b9f8 <col:32> 'char [27]' lvalue "trailing base64 byte found"
|                   | |-DeclStmt 0x5608c146bcf0 <line:750:5, col:42>
|                   | | `-VarDecl 0x5608c146bb80 <col:5, col:41> col:8 used line 'jv':'jv' cinit
|                   | |   `-CallExpr 0x5608c146bc60 <col:15, col:41> 'jv':'jv'
|                   | |     |-ImplicitCastExpr 0x5608c146bc48 <col:15> 'jv (*)(const char *, int)' <FunctionToPointerDecay>
|                   | |     | `-DeclRefExpr 0x5608c146bbe8 <col:15> 'jv (const char *, int)' Function 0x5608c13de3c8 'jv_string_sized' 'jv (const char *, int)'
|                   | |     |-ImplicitCastExpr 0x5608c146bca8 <col:31> 'const char *' <NoOp>
|                   | |     | `-ImplicitCastExpr 0x5608c146bc90 <col:31> 'char *' <LValueToRValue>
|                   | |     |   `-DeclRefExpr 0x5608c146bc08 <col:31> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | |     `-ImplicitCastExpr 0x5608c146bcd8 <col:39> 'int' <IntegralCast>
|                   | |       `-ImplicitCastExpr 0x5608c146bcc0 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|                   | |         `-DeclRefExpr 0x5608c146bc28 <col:39> 'uint32_t':'unsigned int' lvalue Var 0x5608c1469fe8 'ri' 'uint32_t':'unsigned int'
|                   | |-CallExpr 0x5608c146bd60 <line:751:5, col:18> 'void'
|                   | | |-ImplicitCastExpr 0x5608c146bd48 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|                   | | | `-DeclRefExpr 0x5608c146bd08 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|                   | | `-ImplicitCastExpr 0x5608c146bd88 <col:13> 'jv':'jv' <LValueToRValue>
|                   | |   `-DeclRefExpr 0x5608c146bd28 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                   | |-CallExpr 0x5608c146be10 <line:752:5, col:16> 'void'
|                   | | |-ImplicitCastExpr 0x5608c146bdf8 <col:5> 'void (*)(void *)' <FunctionToPointerDecay>
|                   | | | `-DeclRefExpr 0x5608c146bda0 <col:5> 'void (void *)' Function 0x5608c116cd90 'free' 'void (void *)'
|                   | | `-ImplicitCastExpr 0x5608c146be50 <col:10> 'void *' <BitCast>
|                   | |   `-ImplicitCastExpr 0x5608c146be38 <col:10> 'char *' <LValueToRValue>
|                   | |     `-DeclRefExpr 0x5608c146bdc0 <col:10> 'char *' lvalue Var 0x5608c1469c58 'result' 'char *'
|                   | `-ReturnStmt 0x5608c146bea0 <line:753:5, col:12>
|                   |   `-ImplicitCastExpr 0x5608c146be88 <col:12> 'jv':'jv' <LValueToRValue>
|                   |     `-DeclRefExpr 0x5608c146be68 <col:12> 'jv':'jv' lvalue Var 0x5608c146bb80 'line' 'jv':'jv'
|                   `-CompoundStmt 0x5608c146c1b0 <line:754:10, line:757:3>
|                     |-CallExpr 0x5608c146bfa0 <line:755:5, col:18> 'void'
|                     | |-ImplicitCastExpr 0x5608c146bf88 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|                     | | `-DeclRefExpr 0x5608c146bf48 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|                     | `-ImplicitCastExpr 0x5608c146bfc8 <col:13> 'jv':'jv' <LValueToRValue>
|                     |   `-DeclRefExpr 0x5608c146bf68 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1460610 'input' 'jv':'jv'
|                     `-ReturnStmt 0x5608c146c1a0 <line:756:5, col:90>
|                       `-CallExpr 0x5608c146c178 <col:12, col:90> 'jv':'jv'
|                         |-ImplicitCastExpr 0x5608c146c160 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|                         | `-DeclRefExpr 0x5608c146bfe0 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|                         `-CallExpr 0x5608c146c118 <col:32, col:89> 'jv':'jv'
|                           |-ImplicitCastExpr 0x5608c146c100 <col:32> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|                           | `-DeclRefExpr 0x5608c146c000 <col:32> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|                           |-ImplicitCastExpr 0x5608c146c148 <col:49> 'jv':'jv' <LValueToRValue>
|                           | `-DeclRefExpr 0x5608c146c020 <col:49> 'jv':'jv' lvalue ParmVar 0x5608c1460688 'fmt' 'jv':'jv'
|                           `-CallExpr 0x5608c146c0a8 <col:54, col:88> 'jv':'jv'
|                             |-ImplicitCastExpr 0x5608c146c090 <col:54> 'jv (*)(const char *)' <FunctionToPointerDecay>
|                             | `-DeclRefExpr 0x5608c146c040 <col:54> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|                             `-ImplicitCastExpr 0x5608c146c0e8 <col:64> 'const char *' <NoOp>
|                               `-ImplicitCastExpr 0x5608c146c0d0 <col:64> 'char *' <ArrayToPointerDecay>
|                                 `-StringLiteral 0x5608c146c060 <col:64> 'char [23]' lvalue " is not a valid format"
|-FunctionDecl 0x5608c146c570 <line:760:1, line:766:1> line:760:11 used f_keys 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c146c460 <col:18, col:28> col:28 jq 'jq_state *'
| |-ParmVarDecl 0x5608c146c4d8 <col:32, col:35> col:35 used input 'jv':'jv'
| `-CompoundStmt 0x5608c146ca98 <col:42, line:766:1>
|   `-IfStmt 0x5608c146ca68 <line:761:3, line:765:3> has_else
|     |-BinaryOperator 0x5608c146c830 <line:761:7, col:69> 'int' '||'
|     | |-BinaryOperator 0x5608c146c708 <col:7, col:29> 'int' '=='
|     | | |-ImplicitCastExpr 0x5608c146c6d8 <col:7, col:24> 'unsigned int' <IntegralCast>
|     | | | `-CallExpr 0x5608c146c678 <col:7, col:24> 'jv_kind':'jv_kind'
|     | | |   |-ImplicitCastExpr 0x5608c146c660 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | | |   | `-DeclRefExpr 0x5608c146c620 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | | |   `-ImplicitCastExpr 0x5608c146c6a0 <col:19> 'jv':'jv' <LValueToRValue>
|     | | |     `-DeclRefExpr 0x5608c146c640 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c146c4d8 'input' 'jv':'jv'
|     | | `-ImplicitCastExpr 0x5608c146c6f0 <col:29> 'unsigned int' <IntegralCast>
|     | |   `-DeclRefExpr 0x5608c146c6b8 <col:29> 'int' EnumConstant 0x5608c13d0c20 'JV_KIND_OBJECT' 'int'
|     | `-BinaryOperator 0x5608c146c810 <col:47, col:69> 'int' '=='
|     |   |-ImplicitCastExpr 0x5608c146c7e0 <col:47, col:64> 'unsigned int' <IntegralCast>
|     |   | `-CallExpr 0x5608c146c780 <col:47, col:64> 'jv_kind':'jv_kind'
|     |   |   |-ImplicitCastExpr 0x5608c146c768 <col:47> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5608c146c728 <col:47> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     |   |   `-ImplicitCastExpr 0x5608c146c7a8 <col:59> 'jv':'jv' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x5608c146c748 <col:59> 'jv':'jv' lvalue ParmVar 0x5608c146c4d8 'input' 'jv':'jv'
|     |   `-ImplicitCastExpr 0x5608c146c7f8 <col:69> 'unsigned int' <IntegralCast>
|     |     `-DeclRefExpr 0x5608c146c7c0 <col:69> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|     |-CompoundStmt 0x5608c146c8f8 <col:84, line:763:3>
|     | `-ReturnStmt 0x5608c146c8e8 <line:762:5, col:25>
|     |   `-CallExpr 0x5608c146c8a8 <col:12, col:25> 'jv':'jv'
|     |     |-ImplicitCastExpr 0x5608c146c890 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c146c850 <col:12> 'jv (jv)' Function 0x5608c13f5d90 'jv_keys' 'jv (jv)'
|     |     `-ImplicitCastExpr 0x5608c146c8d0 <col:20> 'jv':'jv' <LValueToRValue>
|     |       `-DeclRefExpr 0x5608c146c870 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c146c4d8 'input' 'jv':'jv'
|     `-CompoundStmt 0x5608c146ca50 <line:763:10, line:765:3>
|       `-ReturnStmt 0x5608c146ca40 <line:764:5, col:43>
|         `-CallExpr 0x5608c146c9c8 <col:12, col:43> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c146c9b0 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c146c910 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|           |-ImplicitCastExpr 0x5608c146c9f8 <col:23> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c146c930 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c146c4d8 'input' 'jv':'jv'
|           `-ImplicitCastExpr 0x5608c146ca28 <col:30> 'const char *' <NoOp>
|             `-ImplicitCastExpr 0x5608c146ca10 <col:30> 'char *' <ArrayToPointerDecay>
|               `-StringLiteral 0x5608c146c988 <col:30> 'char [12]' lvalue "has no keys"
|-FunctionDecl 0x5608c146cbd0 <line:768:1, line:774:1> line:768:11 used f_keys_unsorted 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c146cac0 <col:27, col:37> col:37 jq 'jq_state *'
| |-ParmVarDecl 0x5608c146cb38 <col:41, col:44> col:44 used input 'jv':'jv'
| `-CompoundStmt 0x5608c146d0c0 <col:51, line:774:1>
|   `-IfStmt 0x5608c146d090 <line:769:3, line:773:3> has_else
|     |-BinaryOperator 0x5608c146ce90 <line:769:7, col:69> 'int' '||'
|     | |-BinaryOperator 0x5608c146cd68 <col:7, col:29> 'int' '=='
|     | | |-ImplicitCastExpr 0x5608c146cd38 <col:7, col:24> 'unsigned int' <IntegralCast>
|     | | | `-CallExpr 0x5608c146ccd8 <col:7, col:24> 'jv_kind':'jv_kind'
|     | | |   |-ImplicitCastExpr 0x5608c146ccc0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | | |   | `-DeclRefExpr 0x5608c146cc80 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | | |   `-ImplicitCastExpr 0x5608c146cd00 <col:19> 'jv':'jv' <LValueToRValue>
|     | | |     `-DeclRefExpr 0x5608c146cca0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c146cb38 'input' 'jv':'jv'
|     | | `-ImplicitCastExpr 0x5608c146cd50 <col:29> 'unsigned int' <IntegralCast>
|     | |   `-DeclRefExpr 0x5608c146cd18 <col:29> 'int' EnumConstant 0x5608c13d0c20 'JV_KIND_OBJECT' 'int'
|     | `-BinaryOperator 0x5608c146ce70 <col:47, col:69> 'int' '=='
|     |   |-ImplicitCastExpr 0x5608c146ce40 <col:47, col:64> 'unsigned int' <IntegralCast>
|     |   | `-CallExpr 0x5608c146cde0 <col:47, col:64> 'jv_kind':'jv_kind'
|     |   |   |-ImplicitCastExpr 0x5608c146cdc8 <col:47> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5608c146cd88 <col:47> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     |   |   `-ImplicitCastExpr 0x5608c146ce08 <col:59> 'jv':'jv' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x5608c146cda8 <col:59> 'jv':'jv' lvalue ParmVar 0x5608c146cb38 'input' 'jv':'jv'
|     |   `-ImplicitCastExpr 0x5608c146ce58 <col:69> 'unsigned int' <IntegralCast>
|     |     `-DeclRefExpr 0x5608c146ce20 <col:69> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|     |-CompoundStmt 0x5608c146cf58 <col:84, line:771:3>
|     | `-ReturnStmt 0x5608c146cf48 <line:770:5, col:34>
|     |   `-CallExpr 0x5608c146cf08 <col:12, col:34> 'jv':'jv'
|     |     |-ImplicitCastExpr 0x5608c146cef0 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c146ceb0 <col:12> 'jv (jv)' Function 0x5608c13f5ed8 'jv_keys_unsorted' 'jv (jv)'
|     |     `-ImplicitCastExpr 0x5608c146cf30 <col:29> 'jv':'jv' <LValueToRValue>
|     |       `-DeclRefExpr 0x5608c146ced0 <col:29> 'jv':'jv' lvalue ParmVar 0x5608c146cb38 'input' 'jv':'jv'
|     `-CompoundStmt 0x5608c146d078 <line:771:10, line:773:3>
|       `-ReturnStmt 0x5608c146d068 <line:772:5, col:43>
|         `-CallExpr 0x5608c146cff0 <col:12, col:43> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c146cfd8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c146cf70 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|           |-ImplicitCastExpr 0x5608c146d020 <col:23> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c146cf90 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c146cb38 'input' 'jv':'jv'
|           `-ImplicitCastExpr 0x5608c146d050 <col:30> 'const char *' <NoOp>
|             `-ImplicitCastExpr 0x5608c146d038 <col:30> 'char *' <ArrayToPointerDecay>
|               `-StringLiteral 0x5608c146cfb0 <col:30> 'char [12]' lvalue "has no keys"
|-FunctionDecl 0x5608c146d1f8 <line:776:1, line:782:1> line:776:11 used f_sort 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c146d0e8 <col:18, col:28> col:28 jq 'jq_state *'
| |-ParmVarDecl 0x5608c146d160 <col:32, col:35> col:35 used input 'jv':'jv'
| `-CompoundStmt 0x5608c146d678 <col:41, line:782:1>
|   `-IfStmt 0x5608c146d648 <line:777:3, line:781:3> has_else
|     |-BinaryOperator 0x5608c146d390 <line:777:7, col:29> 'int' '=='
|     | |-ImplicitCastExpr 0x5608c146d360 <col:7, col:24> 'unsigned int' <IntegralCast>
|     | | `-CallExpr 0x5608c146d300 <col:7, col:24> 'jv_kind':'jv_kind'
|     | |   |-ImplicitCastExpr 0x5608c146d2e8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x5608c146d2a8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | |   `-ImplicitCastExpr 0x5608c146d328 <col:19> 'jv':'jv' <LValueToRValue>
|     | |     `-DeclRefExpr 0x5608c146d2c8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c146d160 'input' 'jv':'jv'
|     | `-ImplicitCastExpr 0x5608c146d378 <col:29> 'unsigned int' <IntegralCast>
|     |   `-DeclRefExpr 0x5608c146d340 <col:29> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|     |-CompoundStmt 0x5608c146d4f8 <col:44, line:779:3>
|     | `-ReturnStmt 0x5608c146d4e8 <line:778:5, col:41>
|     |   `-CallExpr 0x5608c146d4a0 <col:12, col:41> 'jv':'jv'
|     |     |-ImplicitCastExpr 0x5608c146d488 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c146d3b0 <col:12> 'jv (jv, jv)' Function 0x5608c13f6478 'jv_sort' 'jv (jv, jv)'
|     |     |-ImplicitCastExpr 0x5608c146d4d0 <col:20> 'jv':'jv' <LValueToRValue>
|     |     | `-DeclRefExpr 0x5608c146d3d0 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c146d160 'input' 'jv':'jv'
|     |     `-CallExpr 0x5608c146d448 <col:27, col:40> 'jv':'jv'
|     |       |-ImplicitCastExpr 0x5608c146d430 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x5608c146d3f0 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|     |       `-ImplicitCastExpr 0x5608c146d470 <col:35> 'jv':'jv' <LValueToRValue>
|     |         `-DeclRefExpr 0x5608c146d410 <col:35> 'jv':'jv' lvalue ParmVar 0x5608c146d160 'input' 'jv':'jv'
|     `-CompoundStmt 0x5608c146d630 <line:779:10, line:781:3>
|       `-ReturnStmt 0x5608c146d620 <line:780:5, col:71>
|         `-CallExpr 0x5608c146d5a8 <col:12, col:71> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c146d590 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c146d510 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|           |-ImplicitCastExpr 0x5608c146d5d8 <col:23> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c146d530 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c146d160 'input' 'jv':'jv'
|           `-ImplicitCastExpr 0x5608c146d608 <col:30> 'const char *' <NoOp>
|             `-ImplicitCastExpr 0x5608c146d5f0 <col:30> 'char *' <ArrayToPointerDecay>
|               `-StringLiteral 0x5608c146d550 <col:30> 'char [40]' lvalue "cannot be sorted, as it is not an array"
|-FunctionDecl 0x5608c146d830 <line:784:1, line:792:1> line:784:11 used f_sort_by_impl 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c146d6a0 <col:26, col:36> col:36 jq 'jq_state *'
| |-ParmVarDecl 0x5608c146d718 <col:40, col:43> col:43 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c146d790 <col:50, col:53> col:53 used keys 'jv':'jv'
| `-CompoundStmt 0x5608c146e520 <col:59, line:792:1>
|   `-IfStmt 0x5608c146e4f0 <line:785:3, line:791:3> has_else
|     |-BinaryOperator 0x5608c146dd28 <line:785:7, line:787:71> 'int' '&&'
|     | |-BinaryOperator 0x5608c146daf8 <line:785:7, line:786:28> 'int' '&&'
|     | | |-BinaryOperator 0x5608c146d9d0 <line:785:7, col:29> 'int' '=='
|     | | | |-ImplicitCastExpr 0x5608c146d9a0 <col:7, col:24> 'unsigned int' <IntegralCast>
|     | | | | `-CallExpr 0x5608c146d940 <col:7, col:24> 'jv_kind':'jv_kind'
|     | | | |   |-ImplicitCastExpr 0x5608c146d928 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | | | |   | `-DeclRefExpr 0x5608c146d8e8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | | | |   `-ImplicitCastExpr 0x5608c146d968 <col:19> 'jv':'jv' <LValueToRValue>
|     | | | |     `-DeclRefExpr 0x5608c146d908 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c146d718 'input' 'jv':'jv'
|     | | | `-ImplicitCastExpr 0x5608c146d9b8 <col:29> 'unsigned int' <IntegralCast>
|     | | |   `-DeclRefExpr 0x5608c146d980 <col:29> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|     | | `-BinaryOperator 0x5608c146dad8 <line:786:7, col:28> 'int' '=='
|     | |   |-ImplicitCastExpr 0x5608c146daa8 <col:7, col:23> 'unsigned int' <IntegralCast>
|     | |   | `-CallExpr 0x5608c146da48 <col:7, col:23> 'jv_kind':'jv_kind'
|     | |   |   |-ImplicitCastExpr 0x5608c146da30 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | |   |   | `-DeclRefExpr 0x5608c146d9f0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | |   |   `-ImplicitCastExpr 0x5608c146da70 <col:19> 'jv':'jv' <LValueToRValue>
|     | |   |     `-DeclRefExpr 0x5608c146da10 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c146d790 'keys' 'jv':'jv'
|     | |   `-ImplicitCastExpr 0x5608c146dac0 <col:28> 'unsigned int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5608c146da88 <col:28> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|     | `-BinaryOperator 0x5608c146dd08 <line:787:7, col:71> 'int' '=='
|     |   |-CallExpr 0x5608c146dbe8 <col:7, col:37> 'int'
|     |   | |-ImplicitCastExpr 0x5608c146dbd0 <col:7> 'int (*)(jv)' <FunctionToPointerDecay>
|     |   | | `-DeclRefExpr 0x5608c146db18 <col:7> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|     |   | `-CallExpr 0x5608c146db90 <col:23, col:36> 'jv':'jv'
|     |   |   |-ImplicitCastExpr 0x5608c146db78 <col:23> 'jv (*)(jv)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5608c146db38 <col:23> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|     |   |   `-ImplicitCastExpr 0x5608c146dbb8 <col:31> 'jv':'jv' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x5608c146db58 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c146d718 'input' 'jv':'jv'
|     |   `-CallExpr 0x5608c146dce0 <col:42, col:71> 'int'
|     |     |-ImplicitCastExpr 0x5608c146dcc8 <col:42> 'int (*)(jv)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c146dc10 <col:42> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|     |     `-CallExpr 0x5608c146dc88 <col:58, col:70> 'jv':'jv'
|     |       |-ImplicitCastExpr 0x5608c146dc70 <col:58> 'jv (*)(jv)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x5608c146dc30 <col:58> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|     |       `-ImplicitCastExpr 0x5608c146dcb0 <col:66> 'jv':'jv' <LValueToRValue>
|     |         `-DeclRefExpr 0x5608c146dc50 <col:66> 'jv':'jv' lvalue ParmVar 0x5608c146d790 'keys' 'jv':'jv'
|     |-CompoundStmt 0x5608c146e358 <col:74, line:789:3>
|     | `-ReturnStmt 0x5608c146e348 <line:788:5, col:31>
|     |   `-CallExpr 0x5608c146e2e8 <col:12, col:31> 'jv':'jv'
|     |     |-ImplicitCastExpr 0x5608c146e2d0 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c146dd48 <col:12> 'jv (jv, jv)' Function 0x5608c13f6478 'jv_sort' 'jv (jv, jv)'
|     |     |-ImplicitCastExpr 0x5608c146e318 <col:20> 'jv':'jv' <LValueToRValue>
|     |     | `-DeclRefExpr 0x5608c146e290 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c146d718 'input' 'jv':'jv'
|     |     `-ImplicitCastExpr 0x5608c146e330 <col:27> 'jv':'jv' <LValueToRValue>
|     |       `-DeclRefExpr 0x5608c146e2b0 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c146d790 'keys' 'jv':'jv'
|     `-CompoundStmt 0x5608c146e4d8 <line:789:10, line:791:3>
|       `-ReturnStmt 0x5608c146e4c8 <line:790:5, col:84>
|         `-CallExpr 0x5608c146e430 <col:12, col:84> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c146e418 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c146e370 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|           |-ImplicitCastExpr 0x5608c146e468 <col:24> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c146e390 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c146d718 'input' 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c146e480 <col:31> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c146e3b0 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c146d790 'keys' 'jv':'jv'
|           `-ImplicitCastExpr 0x5608c146e4b0 <col:37> 'const char *' <NoOp>
|             `-ImplicitCastExpr 0x5608c146e498 <col:37> 'char *' <ArrayToPointerDecay>
|               `-StringLiteral 0x5608c146e3d0 <col:37> 'char [46]' lvalue "cannot be sorted, as they are not both arrays"
|-FunctionDecl 0x5608c146e6d8 <line:794:1, line:802:1> line:794:11 used f_group_by_impl 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c146e548 <col:27, col:37> col:37 jq 'jq_state *'
| |-ParmVarDecl 0x5608c146e5c0 <col:41, col:44> col:44 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c146e638 <col:51, col:54> col:54 used keys 'jv':'jv'
| `-CompoundStmt 0x5608c146eea0 <col:60, line:802:1>
|   `-IfStmt 0x5608c146ee70 <line:795:3, line:801:3> has_else
|     |-BinaryOperator 0x5608c146ebd0 <line:795:7, line:797:71> 'int' '&&'
|     | |-BinaryOperator 0x5608c146e9a0 <line:795:7, line:796:28> 'int' '&&'
|     | | |-BinaryOperator 0x5608c146e878 <line:795:7, col:29> 'int' '=='
|     | | | |-ImplicitCastExpr 0x5608c146e848 <col:7, col:24> 'unsigned int' <IntegralCast>
|     | | | | `-CallExpr 0x5608c146e7e8 <col:7, col:24> 'jv_kind':'jv_kind'
|     | | | |   |-ImplicitCastExpr 0x5608c146e7d0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | | | |   | `-DeclRefExpr 0x5608c146e790 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | | | |   `-ImplicitCastExpr 0x5608c146e810 <col:19> 'jv':'jv' <LValueToRValue>
|     | | | |     `-DeclRefExpr 0x5608c146e7b0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c146e5c0 'input' 'jv':'jv'
|     | | | `-ImplicitCastExpr 0x5608c146e860 <col:29> 'unsigned int' <IntegralCast>
|     | | |   `-DeclRefExpr 0x5608c146e828 <col:29> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|     | | `-BinaryOperator 0x5608c146e980 <line:796:7, col:28> 'int' '=='
|     | |   |-ImplicitCastExpr 0x5608c146e950 <col:7, col:23> 'unsigned int' <IntegralCast>
|     | |   | `-CallExpr 0x5608c146e8f0 <col:7, col:23> 'jv_kind':'jv_kind'
|     | |   |   |-ImplicitCastExpr 0x5608c146e8d8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|     | |   |   | `-DeclRefExpr 0x5608c146e898 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|     | |   |   `-ImplicitCastExpr 0x5608c146e918 <col:19> 'jv':'jv' <LValueToRValue>
|     | |   |     `-DeclRefExpr 0x5608c146e8b8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c146e638 'keys' 'jv':'jv'
|     | |   `-ImplicitCastExpr 0x5608c146e968 <col:28> 'unsigned int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5608c146e930 <col:28> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|     | `-BinaryOperator 0x5608c146ebb0 <line:797:7, col:71> 'int' '=='
|     |   |-CallExpr 0x5608c146ea90 <col:7, col:37> 'int'
|     |   | |-ImplicitCastExpr 0x5608c146ea78 <col:7> 'int (*)(jv)' <FunctionToPointerDecay>
|     |   | | `-DeclRefExpr 0x5608c146e9c0 <col:7> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|     |   | `-CallExpr 0x5608c146ea38 <col:23, col:36> 'jv':'jv'
|     |   |   |-ImplicitCastExpr 0x5608c146ea20 <col:23> 'jv (*)(jv)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5608c146e9e0 <col:23> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|     |   |   `-ImplicitCastExpr 0x5608c146ea60 <col:31> 'jv':'jv' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x5608c146ea00 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c146e5c0 'input' 'jv':'jv'
|     |   `-CallExpr 0x5608c146eb88 <col:42, col:71> 'int'
|     |     |-ImplicitCastExpr 0x5608c146eb70 <col:42> 'int (*)(jv)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c146eab8 <col:42> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|     |     `-CallExpr 0x5608c146eb30 <col:58, col:70> 'jv':'jv'
|     |       |-ImplicitCastExpr 0x5608c146eb18 <col:58> 'jv (*)(jv)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x5608c146ead8 <col:58> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|     |       `-ImplicitCastExpr 0x5608c146eb58 <col:66> 'jv':'jv' <LValueToRValue>
|     |         `-DeclRefExpr 0x5608c146eaf8 <col:66> 'jv':'jv' lvalue ParmVar 0x5608c146e638 'keys' 'jv':'jv'
|     |-CompoundStmt 0x5608c146ecd8 <col:74, line:799:3>
|     | `-ReturnStmt 0x5608c146ecc8 <line:798:5, col:32>
|     |   `-CallExpr 0x5608c146ec68 <col:12, col:32> 'jv':'jv'
|     |     |-ImplicitCastExpr 0x5608c146ec50 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x5608c146ebf0 <col:12> 'jv (jv, jv)' Function 0x5608c13f62a8 'jv_group' 'jv (jv, jv)'
|     |     |-ImplicitCastExpr 0x5608c146ec98 <col:21> 'jv':'jv' <LValueToRValue>
|     |     | `-DeclRefExpr 0x5608c146ec10 <col:21> 'jv':'jv' lvalue ParmVar 0x5608c146e5c0 'input' 'jv':'jv'
|     |     `-ImplicitCastExpr 0x5608c146ecb0 <col:28> 'jv':'jv' <LValueToRValue>
|     |       `-DeclRefExpr 0x5608c146ec30 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c146e638 'keys' 'jv':'jv'
|     `-CompoundStmt 0x5608c146ee58 <line:799:10, line:801:3>
|       `-ReturnStmt 0x5608c146ee48 <line:800:5, col:84>
|         `-CallExpr 0x5608c146edb0 <col:12, col:84> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c146ed98 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c146ecf0 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|           |-ImplicitCastExpr 0x5608c146ede8 <col:24> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c146ed10 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c146e5c0 'input' 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c146ee00 <col:31> 'jv':'jv' <LValueToRValue>
|           | `-DeclRefExpr 0x5608c146ed30 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c146e638 'keys' 'jv':'jv'
|           `-ImplicitCastExpr 0x5608c146ee30 <col:37> 'const char *' <NoOp>
|             `-ImplicitCastExpr 0x5608c146ee18 <col:37> 'char *' <ArrayToPointerDecay>
|               `-StringLiteral 0x5608c146ed50 <col:37> 'char [46]' lvalue "cannot be sorted, as they are not both arrays"
|-FunctionDecl 0x5608c146f250 <line:805:1, line:819:1> line:805:12 used f_match_name_iter 'int (const OnigUChar *, const OnigUChar *, int, int *, regex_t *, void *)' static
| |-ParmVarDecl 0x5608c146eec8 <col:30, col:43> col:43 used name 'const OnigUChar *'
| |-ParmVarDecl 0x5608c146ef40 <col:49, col:62> col:62 used name_end 'const OnigUChar *'
| |-ParmVarDecl 0x5608c146efc0 <col:72, col:76> col:76 used ngroups 'int'
| |-ParmVarDecl 0x5608c146f040 <line:806:5, col:10> col:10 used groups 'int *'
| |-ParmVarDecl 0x5608c146f0b8 <col:18, col:27> col:27 reg 'regex_t *'
| |-ParmVarDecl 0x5608c146f138 <col:32, col:38> col:38 used arg 'void *'
| `-CompoundStmt 0x5608c1470140 <col:43, line:819:1>
|   |-DeclStmt 0x5608c146f498 <line:807:3, col:26>
|   | `-VarDecl 0x5608c146f330 <col:3, col:23> col:6 used captures 'jv':'jv' cinit
|   |   `-ImplicitCastExpr 0x5608c146f480 <col:17, col:23> 'jv':'jv' <LValueToRValue>
|   |     `-UnaryOperator 0x5608c146f468 <col:17, col:23> 'jv':'jv' lvalue prefix '*' cannot overflow
|   |       `-CStyleCastExpr 0x5608c146f440 <col:18, col:23> 'jv *' <BitCast>
|   |         `-ImplicitCastExpr 0x5608c146f428 <col:23> 'void *' <LValueToRValue> part_of_explicit_cast
|   |           `-DeclRefExpr 0x5608c146f398 <col:23> 'void *' lvalue ParmVar 0x5608c146f138 'arg' 'void *'
|   |-ForStmt 0x5608c146fff8 <line:808:3, line:816:3>
|   | |-DeclStmt 0x5608c146f550 <line:808:8, col:17>
|   | | `-VarDecl 0x5608c146f4c8 <col:8, col:16> col:12 used i 'int' cinit
|   | |   `-IntegerLiteral 0x5608c146f530 <col:16> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5608c146f5d8 <col:19, col:23> 'int' '<'
|   | | |-ImplicitCastExpr 0x5608c146f5a8 <col:19> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c146f568 <col:19> 'int' lvalue Var 0x5608c146f4c8 'i' 'int'
|   | | `-ImplicitCastExpr 0x5608c146f5c0 <col:23> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5608c146f588 <col:23> 'int' lvalue ParmVar 0x5608c146efc0 'ngroups' 'int'
|   | |-UnaryOperator 0x5608c146f618 <col:32, col:34> 'int' prefix '++'
|   | | `-DeclRefExpr 0x5608c146f5f8 <col:34> 'int' lvalue Var 0x5608c146f4c8 'i' 'int'
|   | `-CompoundStmt 0x5608c146ffd8 <col:37, line:816:3>
|   |   |-DeclStmt 0x5608c146f890 <line:809:5, col:57>
|   |   | `-VarDecl 0x5608c146f640 <col:5, col:56> col:8 used cap 'jv':'jv' cinit
|   |   |   `-CallExpr 0x5608c146f860 <col:14, col:56> 'jv':'jv'
|   |   |     |-ImplicitCastExpr 0x5608c146f848 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x5608c146f6a8 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   |   |     |-CallExpr 0x5608c146f720 <col:27, col:43> 'jv':'jv'
|   |   |     | |-ImplicitCastExpr 0x5608c146f708 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x5608c146f6c8 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |   |     | `-ImplicitCastExpr 0x5608c146f748 <col:35> 'jv':'jv' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x5608c146f6e8 <col:35> 'jv':'jv' lvalue Var 0x5608c146f330 'captures' 'jv':'jv'
|   |   |     `-BinaryOperator 0x5608c146f828 <col:45, col:55> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5608c146f810 <col:45, col:53> 'int' <LValueToRValue>
|   |   |       | `-ArraySubscriptExpr 0x5608c146f7d0 <col:45, col:53> 'int' lvalue
|   |   |       |   |-ImplicitCastExpr 0x5608c146f7a0 <col:45> 'int *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x5608c146f760 <col:45> 'int *' lvalue ParmVar 0x5608c146f040 'groups' 'int *'
|   |   |       |   `-ImplicitCastExpr 0x5608c146f7b8 <col:52> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x5608c146f780 <col:52> 'int' lvalue Var 0x5608c146f4c8 'i' 'int'
|   |   |       `-IntegerLiteral 0x5608c146f7f0 <col:55> 'int' 1
|   |   `-IfStmt 0x5608c146ffa8 <line:810:5, line:815:5> has_else
|   |     |-BinaryOperator 0x5608c146f990 <line:810:9, col:29> 'int' '=='
|   |     | |-ImplicitCastExpr 0x5608c146f960 <col:9, col:24> 'unsigned int' <IntegralCast>
|   |     | | `-CallExpr 0x5608c146f900 <col:9, col:24> 'jv_kind':'jv_kind'
|   |     | |   |-ImplicitCastExpr 0x5608c146f8e8 <col:9> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x5608c146f8a8 <col:9> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     | |   `-ImplicitCastExpr 0x5608c146f928 <col:21> 'jv':'jv' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5608c146f8c8 <col:21> 'jv':'jv' lvalue Var 0x5608c146f640 'cap' 'jv':'jv'
|   |     | `-ImplicitCastExpr 0x5608c146f978 <col:29> 'unsigned int' <IntegralCast>
|   |     |   `-DeclRefExpr 0x5608c146f940 <col:29> 'int' EnumConstant 0x5608c13d0c20 'JV_KIND_OBJECT' 'int'
|   |     |-CompoundStmt 0x5608c146fed8 <col:45, line:813:5>
|   |     | |-BinaryOperator 0x5608c146fcb0 <line:811:7, col:100> 'jv':'jv' '='
|   |     | | |-DeclRefExpr 0x5608c146f9b0 <col:7> 'jv':'jv' lvalue Var 0x5608c146f640 'cap' 'jv':'jv'
|   |     | | `-CallExpr 0x5608c146fc60 <col:13, col:100> 'jv':'jv'
|   |     | |   |-ImplicitCastExpr 0x5608c146fc48 <col:13> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x5608c146f9d0 <col:13> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   |     | |   |-ImplicitCastExpr 0x5608c146fc98 <col:27> 'jv':'jv' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x5608c146f9f0 <col:27> 'jv':'jv' lvalue Var 0x5608c146f640 'cap' 'jv':'jv'
|   |     | |   |-CallExpr 0x5608c146fa68 <col:32, col:48> 'jv':'jv'
|   |     | |   | |-ImplicitCastExpr 0x5608c146fa50 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |     | |   | | `-DeclRefExpr 0x5608c146fa10 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |     | |   | `-ImplicitCastExpr 0x5608c146faa8 <col:42> 'const char *' <NoOp>
|   |     | |   |   `-ImplicitCastExpr 0x5608c146fa90 <col:42> 'char *' <ArrayToPointerDecay>
|   |     | |   |     `-StringLiteral 0x5608c146fa30 <col:42> 'char [5]' lvalue "name"
|   |     | |   `-CallExpr 0x5608c146fc00 <col:51, col:99> 'jv':'jv'
|   |     | |     |-ImplicitCastExpr 0x5608c146fbe8 <col:51> 'jv (*)(const char *, int)' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x5608c146fac0 <col:51> 'jv (const char *, int)' Function 0x5608c13de3c8 'jv_string_sized' 'jv (const char *, int)'
|   |     | |     |-CStyleCastExpr 0x5608c146fb30 <col:67, col:80> 'const char *' <BitCast>
|   |     | |     | `-ImplicitCastExpr 0x5608c146fb18 <col:80> 'const OnigUChar *' <LValueToRValue> part_of_explicit_cast
|   |     | |     |   `-DeclRefExpr 0x5608c146fae0 <col:80> 'const OnigUChar *' lvalue ParmVar 0x5608c146eec8 'name' 'const OnigUChar *'
|   |     | |     `-ImplicitCastExpr 0x5608c146fc30 <col:86, col:95> 'int' <IntegralCast>
|   |     | |       `-BinaryOperator 0x5608c146fbc8 <col:86, col:95> 'long' '-'
|   |     | |         |-ImplicitCastExpr 0x5608c146fb98 <col:86> 'const OnigUChar *' <LValueToRValue>
|   |     | |         | `-DeclRefExpr 0x5608c146fb58 <col:86> 'const OnigUChar *' lvalue ParmVar 0x5608c146ef40 'name_end' 'const OnigUChar *'
|   |     | |         `-ImplicitCastExpr 0x5608c146fbb0 <col:95> 'const OnigUChar *' <LValueToRValue>
|   |     | |           `-DeclRefExpr 0x5608c146fb78 <col:95> 'const OnigUChar *' lvalue ParmVar 0x5608c146eec8 'name' 'const OnigUChar *'
|   |     | `-BinaryOperator 0x5608c146feb8 <line:812:7, col:55> 'jv':'jv' '='
|   |     |   |-DeclRefExpr 0x5608c146fcd0 <col:7> 'jv':'jv' lvalue Var 0x5608c146f330 'captures' 'jv':'jv'
|   |     |   `-CallExpr 0x5608c146fe50 <col:18, col:55> 'jv':'jv'
|   |     |     |-ImplicitCastExpr 0x5608c146fe38 <col:18> 'jv (*)(jv, int, jv)' <FunctionToPointerDecay>
|   |     |     | `-DeclRefExpr 0x5608c146fcf0 <col:18> 'jv (jv, int, jv)' Function 0x5608c13dc718 'jv_array_set' 'jv (jv, int, jv)'
|   |     |     |-ImplicitCastExpr 0x5608c146fe88 <col:31> 'jv':'jv' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x5608c146fd10 <col:31> 'jv':'jv' lvalue Var 0x5608c146f330 'captures' 'jv':'jv'
|   |     |     |-BinaryOperator 0x5608c146fdf8 <col:40, col:50> 'int' '-'
|   |     |     | |-ImplicitCastExpr 0x5608c146fde0 <col:40, col:48> 'int' <LValueToRValue>
|   |     |     | | `-ArraySubscriptExpr 0x5608c146fda0 <col:40, col:48> 'int' lvalue
|   |     |     | |   |-ImplicitCastExpr 0x5608c146fd70 <col:40> 'int *' <LValueToRValue>
|   |     |     | |   | `-DeclRefExpr 0x5608c146fd30 <col:40> 'int *' lvalue ParmVar 0x5608c146f040 'groups' 'int *'
|   |     |     | |   `-ImplicitCastExpr 0x5608c146fd88 <col:47> 'int' <LValueToRValue>
|   |     |     | |     `-DeclRefExpr 0x5608c146fd50 <col:47> 'int' lvalue Var 0x5608c146f4c8 'i' 'int'
|   |     |     | `-IntegerLiteral 0x5608c146fdc0 <col:50> 'int' 1
|   |     |     `-ImplicitCastExpr 0x5608c146fea0 <col:52> 'jv':'jv' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5608c146fe18 <col:52> 'jv':'jv' lvalue Var 0x5608c146f640 'cap' 'jv':'jv'
|   |     `-CompoundStmt 0x5608c146ff90 <line:813:12, line:815:5>
|   |       `-CallExpr 0x5608c146ff50 <line:814:7, col:18> 'void'
|   |         |-ImplicitCastExpr 0x5608c146ff38 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c146fef8 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |         `-ImplicitCastExpr 0x5608c146ff78 <col:15> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c146ff18 <col:15> 'jv':'jv' lvalue Var 0x5608c146f640 'cap' 'jv':'jv'
|   |-BinaryOperator 0x5608c14700f0 <line:817:3, col:16> 'jv':'jv' '='
|   | |-UnaryOperator 0x5608c14700a0 <col:3, col:10> 'jv':'jv' lvalue prefix '*' cannot overflow
|   | | `-CStyleCastExpr 0x5608c1470078 <col:4, col:10> 'jv *' <BitCast>
|   | |   `-ImplicitCastExpr 0x5608c1470060 <col:10> 'void *' <LValueToRValue> part_of_explicit_cast
|   | |     `-DeclRefExpr 0x5608c1470030 <col:10> 'void *' lvalue ParmVar 0x5608c146f138 'arg' 'void *'
|   | `-ImplicitCastExpr 0x5608c14700d8 <col:16> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14700b8 <col:16> 'jv':'jv' lvalue Var 0x5608c146f330 'captures' 'jv':'jv'
|   `-ReturnStmt 0x5608c1470130 <line:818:3, col:10>
|     `-IntegerLiteral 0x5608c1470110 <col:10> 'int' 0
|-FunctionDecl 0x5608c1470410 <line:821:1, line:1007:1> line:821:11 used f_match 'jv (jq_state *, jv, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1470180 <col:19, col:29> col:29 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14701f8 <col:33, col:36> col:36 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1470270 <col:43, col:46> col:46 used regex 'jv':'jv'
| |-ParmVarDecl 0x5608c14702e8 <col:53, col:56> col:56 used modifiers 'jv':'jv'
| |-ParmVarDecl 0x5608c1470360 <col:67, col:70> col:70 used testmode 'jv':'jv'
| `-CompoundStmt 0x5608c147c0f0 <col:80, line:1007:1>
|   |-DeclStmt 0x5608c1470650 <line:822:3, col:43>
|   | `-VarDecl 0x5608c14704f0 <col:3, col:42> col:7 used test 'int' cinit
|   |   `-CallExpr 0x5608c1470608 <col:14, col:42> 'int'
|   |     |-ImplicitCastExpr 0x5608c14705f0 <col:14> 'int (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1470558 <col:14> 'int (jv, jv)' Function 0x5608c13d20e0 'jv_equal' 'int (jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c1470638 <col:23> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c1470578 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1470360 'testmode' 'jv':'jv'
|   |     `-CallExpr 0x5608c14705d0 <col:33, col:41> 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14705b8 <col:33> 'jv (*)(void)' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5608c1470598 <col:33> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|   |-DeclStmt 0x5608c14706e0 <line:823:3, col:12>
|   | `-VarDecl 0x5608c1470678 <col:3, col:6> col:6 used result 'jv':'jv'
|   |-DeclStmt 0x5608c1470778 <line:824:3, col:14>
|   | `-VarDecl 0x5608c1470710 <col:3, col:7> col:7 used onigret 'int'
|   |-DeclStmt 0x5608c1470830 <line:825:3, col:17>
|   | `-VarDecl 0x5608c14707a8 <col:3, col:16> col:7 used global 'int' cinit
|   |   `-IntegerLiteral 0x5608c1470810 <col:16> 'int' 0
|   |-DeclStmt 0x5608c14708c0 <line:826:3, col:15>
|   | `-VarDecl 0x5608c1470858 <col:3, col:12> col:12 used reg 'regex_t *'
|   |-DeclStmt 0x5608c1470950 <line:827:3, col:22>
|   | `-VarDecl 0x5608c14708e8 <col:3, col:17> col:17 used einfo 'OnigErrorInfo':'OnigErrorInfo'
|   |-DeclStmt 0x5608c14709e0 <line:828:3, col:21>
|   | `-VarDecl 0x5608c1470978 <col:3, col:15> col:15 used region 'OnigRegion *'
|   |-IfStmt 0x5608c1470db0 <line:830:3, line:834:3>
|   | |-BinaryOperator 0x5608c1470ae0 <line:830:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1470ab0 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1470a50 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1470a38 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14709f8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1470a78 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1470a18 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1470ac8 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1470a90 <col:29> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-CompoundStmt 0x5608c1470d88 <col:45, line:834:3>
|   |   |-CallExpr 0x5608c1470b58 <line:831:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1470b40 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1470b00 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1470b80 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1470b20 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   |   |-CallExpr 0x5608c1470bf0 <line:832:5, col:22> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1470bd8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1470b98 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1470c18 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1470bb8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14702e8 'modifiers' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1470d78 <line:833:5, col:72>
|   |     `-CallExpr 0x5608c1470d00 <col:12, col:72> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1470ce8 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1470c30 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1470d30 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1470c50 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1470d60 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1470d48 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1470ca8 <col:30> 'char [41]' lvalue "cannot be matched, as it is not a string"
|   |-IfStmt 0x5608c1471138 <line:836:3, line:840:3>
|   | |-BinaryOperator 0x5608c1470eb8 <line:836:7, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1470e88 <col:7, col:24> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1470e28 <col:7, col:24> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1470e10 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1470dd0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1470e50 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1470df0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1470ea0 <col:29> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1470e68 <col:29> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-CompoundStmt 0x5608c1471110 <col:45, line:840:3>
|   |   |-CallExpr 0x5608c1470f30 <line:837:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1470f18 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1470ed8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1470f58 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1470ef8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   |   |-CallExpr 0x5608c1470fc8 <line:838:5, col:22> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1470fb0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1470f70 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1470ff0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1470f90 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14702e8 'modifiers' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1471100 <line:839:5, col:47>
|   |     `-CallExpr 0x5608c1471088 <col:12, col:47> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1471070 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1471008 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c14710b8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1471028 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c14710e8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14710d0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1471048 <col:30> 'char [16]' lvalue "is not a string"
|   |-DeclStmt 0x5608c14714f0 <line:842:3, col:53>
|   | `-VarDecl 0x5608c1471168 <col:3, ./modules/oniguruma/src/oniguruma.h:396:78> src/builtin.c:842:18 used options 'OnigOptionType':'unsigned int' cinit
|   |   `-ParenExpr 0x5608c14714d0 <./modules/oniguruma/src/oniguruma.h:396:42, col:78> 'unsigned int'
|   |     `-BinaryOperator 0x5608c14714b0 <line:395:42, line:396:77> 'unsigned int' '<<'
|   |       |-ParenExpr 0x5608c1471470 <line:395:42, col:78> 'unsigned int'
|   |       | `-BinaryOperator 0x5608c1471450 <line:394:42, line:395:77> 'unsigned int' '<<'
|   |       |   |-ParenExpr 0x5608c1471410 <line:394:42, col:78> 'unsigned int'
|   |       |   | `-BinaryOperator 0x5608c14713f0 <line:393:42, line:394:77> 'unsigned int' '<<'
|   |       |   |   |-ParenExpr 0x5608c14713b0 <line:393:42, col:78> 'unsigned int'
|   |       |   |   | `-BinaryOperator 0x5608c1471390 <line:392:42, line:393:77> 'unsigned int' '<<'
|   |       |   |   |   |-ParenExpr 0x5608c1471350 <line:392:42, col:78> 'unsigned int'
|   |       |   |   |   | `-BinaryOperator 0x5608c1471330 <line:391:42, line:392:77> 'unsigned int' '<<'
|   |       |   |   |   |   |-ParenExpr 0x5608c14712f0 <line:391:42, col:78> 'unsigned int'
|   |       |   |   |   |   | `-BinaryOperator 0x5608c14712d0 <line:390:42, line:391:77> 'unsigned int' '<<'
|   |       |   |   |   |   |   |-ParenExpr 0x5608c1471290 <line:390:42, col:78> 'unsigned int'
|   |       |   |   |   |   |   | `-BinaryOperator 0x5608c1471270 <line:389:42, line:390:77> 'unsigned int' '<<'
|   |       |   |   |   |   |   |   |-ParenExpr 0x5608c1471230 <line:389:42, col:78> 'unsigned int'
|   |       |   |   |   |   |   |   | `-BinaryOperator 0x5608c1471210 <line:388:42, line:389:77> 'unsigned int' '<<'
|   |       |   |   |   |   |   |   |   |-IntegerLiteral 0x5608c14711d0 <line:388:42> 'unsigned int' 1
|   |       |   |   |   |   |   |   |   `-IntegerLiteral 0x5608c14711f0 <line:389:77> 'int' 1
|   |       |   |   |   |   |   |   `-IntegerLiteral 0x5608c1471250 <line:390:77> 'int' 1
|   |       |   |   |   |   |   `-IntegerLiteral 0x5608c14712b0 <line:391:77> 'int' 1
|   |       |   |   |   |   `-IntegerLiteral 0x5608c1471310 <line:392:77> 'int' 1
|   |       |   |   |   `-IntegerLiteral 0x5608c1471370 <line:393:77> 'int' 1
|   |       |   |   `-IntegerLiteral 0x5608c14713d0 <line:394:77> 'int' 1
|   |       |   `-IntegerLiteral 0x5608c1471430 <line:395:77> 'int' 1
|   |       `-IntegerLiteral 0x5608c1471490 <line:396:77> 'int' 1
|   |-IfStmt 0x5608c1473720 <src/builtin.c:844:3, line:886:3> has_else
|   | |-BinaryOperator 0x5608c14715f0 <line:844:7, col:33> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c14715c0 <col:7, col:28> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1471560 <col:7, col:28> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1471548 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1471508 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1471588 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1471528 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14702e8 'modifiers' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14715d8 <col:33> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14715a0 <col:33> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | |-CompoundStmt 0x5608c1473370 <col:49, line:881:3>
|   | | |-DeclStmt 0x5608c1471780 <line:845:5, col:56>
|   | | | `-VarDecl 0x5608c1471620 <col:5, col:55> col:8 used modarray 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c1471758 <col:19, col:55> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c1471740 <col:19> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c1471688 <col:19> 'jv (jv)' Function 0x5608c13e4448 'jv_string_explode' 'jv (jv)'
|   | | |     `-CallExpr 0x5608c1471700 <col:37, col:54> 'jv':'jv'
|   | | |       |-ImplicitCastExpr 0x5608c14716e8 <col:37> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x5608c14716a8 <col:37> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |       `-ImplicitCastExpr 0x5608c1471728 <col:45> 'jv':'jv' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x5608c14716c8 <col:45> 'jv':'jv' lvalue ParmVar 0x5608c14702e8 'modifiers' 'jv':'jv'
|   | | |-ForStmt 0x5608c14732a0 <./src/jv.h:80:3, src/builtin.c:879:5>
|   | | | |-DeclStmt 0x5608c1471a70 <./src/jv.h:80:8, col:67>
|   | | | | |-VarDecl 0x5608c14717b0 <col:8, col:49> col:12 used jv_len__ 'int' cinit
|   | | | | | `-CallExpr 0x5608c14718e8 <col:23, col:49> 'int'
|   | | | | |   |-ImplicitCastExpr 0x5608c14718d0 <col:23> 'int (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c1471818 <col:23> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|   | | | | |   `-CallExpr 0x5608c1471890 <col:39, col:48> 'jv':'jv'
|   | | | | |     |-ImplicitCastExpr 0x5608c1471878 <col:39> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | | | |     | `-DeclRefExpr 0x5608c1471838 <col:39> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | | | |     `-ImplicitCastExpr 0x5608c14718b8 <src/builtin.c:846:22> 'jv':'jv' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x5608c1471858 <col:22> 'jv':'jv' lvalue Var 0x5608c1471620 'modarray' 'jv':'jv'
|   | | | | |-VarDecl 0x5608c1471928 <./src/jv.h:80:8, col:54> src/builtin.c:846:32 used i 'int' cinit
|   | | | | | `-IntegerLiteral 0x5608c1471990 <./src/jv.h:80:54> 'int' 0
|   | | | | `-VarDecl 0x5608c14719c8 <col:8, col:66> col:57 used jv_j__ 'int' cinit
|   | | | |   `-IntegerLiteral 0x5608c1471a30 <col:66> 'int' 1
|   | | | |-<<<NULL>>>
|   | | | |-ImplicitCastExpr 0x5608c1471aa8 <line:81:8> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5608c1471a88 <col:8> 'int' lvalue Var 0x5608c14719c8 'jv_j__' 'int'
|   | | | |-BinaryOperator 0x5608c1471b00 <col:16, col:25> 'int' '='
|   | | | | |-DeclRefExpr 0x5608c1471ac0 <col:16> 'int' lvalue Var 0x5608c14719c8 'jv_j__' 'int'
|   | | | | `-IntegerLiteral 0x5608c1471ae0 <col:25> 'int' 0
|   | | | `-ForStmt 0x5608c1473268 <line:82:5, src/builtin.c:879:5>
|   | | |   |-DeclStmt 0x5608c1471b98 <./src/jv.h:82:10, col:14>
|   | | |   | `-VarDecl 0x5608c1471b30 <col:10, src/builtin.c:846:35> col:35 used mod 'jv':'jv'
|   | | |   |-<<<NULL>>>
|   | | |   |-ConditionalOperator 0x5608c1471e38 <col:32, ./src/jv.h:84:51> 'int'
|   | | |   | |-BinaryOperator 0x5608c1471c20 <src/builtin.c:846:32, ./src/jv.h:83:14> 'int' '<'
|   | | |   | | |-ImplicitCastExpr 0x5608c1471bf0 <src/builtin.c:846:32> 'int' <LValueToRValue>
|   | | |   | | | `-DeclRefExpr 0x5608c1471bb0 <col:32> 'int' lvalue Var 0x5608c1471928 'i' 'int'
|   | | |   | | `-ImplicitCastExpr 0x5608c1471c08 <./src/jv.h:83:14> 'int' <LValueToRValue>
|   | | |   | |   `-DeclRefExpr 0x5608c1471bd0 <col:14> 'int' lvalue Var 0x5608c14717b0 'jv_len__' 'int'
|   | | |   | |-ParenExpr 0x5608c1471df8 <line:84:12, col:47> 'int'
|   | | |   | | `-BinaryOperator 0x5608c1471dd8 <src/builtin.c:846:35, ./src/jv.h:84:46> 'int' ','
|   | | |   | |   |-BinaryOperator 0x5608c1471d98 <src/builtin.c:846:35, ./src/jv.h:84:43> 'jv':'jv' '='
|   | | |   | |   | |-DeclRefExpr 0x5608c1471c40 <src/builtin.c:846:35> 'jv':'jv' lvalue Var 0x5608c1471b30 'mod' 'jv':'jv'
|   | | |   | |   | `-CallExpr 0x5608c1471d50 <./src/jv.h:84:17, col:43> 'jv':'jv'
|   | | |   | |   |   |-ImplicitCastExpr 0x5608c1471d38 <col:17> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |   | |   |   | `-DeclRefExpr 0x5608c1471c60 <col:17> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |   | |   |   |-CallExpr 0x5608c1471cd8 <col:30, col:39> 'jv':'jv'
|   | | |   | |   |   | |-ImplicitCastExpr 0x5608c1471cc0 <col:30> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |   | |   |   | | `-DeclRefExpr 0x5608c1471c80 <col:30> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |   | |   |   | `-ImplicitCastExpr 0x5608c1471d00 <src/builtin.c:846:22> 'jv':'jv' <LValueToRValue>
|   | | |   | |   |   |   `-DeclRefExpr 0x5608c1471ca0 <col:22> 'jv':'jv' lvalue Var 0x5608c1471620 'modarray' 'jv':'jv'
|   | | |   | |   |   `-ImplicitCastExpr 0x5608c1471d80 <col:32> 'int' <LValueToRValue>
|   | | |   | |   |     `-DeclRefExpr 0x5608c1471d18 <col:32> 'int' lvalue Var 0x5608c1471928 'i' 'int'
|   | | |   | |   `-IntegerLiteral 0x5608c1471db8 <./src/jv.h:84:46> 'int' 1
|   | | |   | `-IntegerLiteral 0x5608c1471e18 <col:51> 'int' 0
|   | | |   |-UnaryOperator 0x5608c1471e88 <src/builtin.c:846:32, ./src/jv.h:85:11> 'int' postfix '++'
|   | | |   | `-DeclRefExpr 0x5608c1471e68 <src/builtin.c:846:32> 'int' lvalue Var 0x5608c1471928 'i' 'int'
|   | | |   `-CompoundStmt 0x5608c1473250 <col:40, line:879:5>
|   | | |     `-SwitchStmt 0x5608c1471f78 <line:847:7, line:878:7>
|   | | |       |-CStyleCastExpr 0x5608c1471f50 <line:847:15, col:39> 'int' <FloatingToIntegral>
|   | | |       | `-CallExpr 0x5608c1471ef8 <col:20, col:39> 'double'
|   | | |       |   |-ImplicitCastExpr 0x5608c1471ee0 <col:20> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |       |   | `-DeclRefExpr 0x5608c1471ea0 <col:20> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |       |   `-ImplicitCastExpr 0x5608c1471f20 <col:36> 'jv':'jv' <LValueToRValue>
|   | | |       |     `-DeclRefExpr 0x5608c1471ec0 <col:36> 'jv':'jv' lvalue Var 0x5608c1471b30 'mod' 'jv':'jv'
|   | | |       `-CompoundStmt 0x5608c14731a0 <col:42, line:878:7>
|   | | |         |-CaseStmt 0x5608c1471fd0 <line:848:9, line:849:20>
|   | | |         | |-ConstantExpr 0x5608c1471fb8 <line:848:14> 'int'
|   | | |         | | `-CharacterLiteral 0x5608c1471fa0 <col:14> 'int' 103
|   | | |         | `-BinaryOperator 0x5608c1472038 <line:849:11, col:20> 'int' '='
|   | | |         |   |-DeclRefExpr 0x5608c1471ff8 <col:11> 'int' lvalue Var 0x5608c14707a8 'global' 'int'
|   | | |         |   `-IntegerLiteral 0x5608c1472018 <col:20> 'int' 1
|   | | |         |-BreakStmt 0x5608c1472058 <line:850:11>
|   | | |         |-CaseStmt 0x5608c1472090 <line:851:9, ./modules/oniguruma/src/oniguruma.h:388:42>
|   | | |         | |-ConstantExpr 0x5608c1472078 <src/builtin.c:851:14> 'int'
|   | | |         | | `-CharacterLiteral 0x5608c1472060 <col:14> 'int' 105
|   | | |         | `-CompoundAssignOperator 0x5608c14720f8 <line:852:11, ./modules/oniguruma/src/oniguruma.h:388:42> 'OnigOptionType':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | | |         |   |-DeclRefExpr 0x5608c14720b8 <src/builtin.c:852:11> 'OnigOptionType':'unsigned int' lvalue Var 0x5608c1471168 'options' 'OnigOptionType':'unsigned int'
|   | | |         |   `-IntegerLiteral 0x5608c14720d8 <./modules/oniguruma/src/oniguruma.h:388:42> 'unsigned int' 1
|   | | |         |-BreakStmt 0x5608c1472128 <src/builtin.c:853:11>
|   | | |         |-CaseStmt 0x5608c1472160 <line:854:9, ./modules/oniguruma/src/oniguruma.h:389:78>
|   | | |         | |-ConstantExpr 0x5608c1472148 <src/builtin.c:854:14> 'int'
|   | | |         | | `-CharacterLiteral 0x5608c1472130 <col:14> 'int' 120
|   | | |         | `-CompoundAssignOperator 0x5608c1472228 <line:855:11, ./modules/oniguruma/src/oniguruma.h:389:78> 'OnigOptionType':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | | |         |   |-DeclRefExpr 0x5608c1472188 <src/builtin.c:855:11> 'OnigOptionType':'unsigned int' lvalue Var 0x5608c1471168 'options' 'OnigOptionType':'unsigned int'
|   | | |         |   `-ParenExpr 0x5608c1472208 <./modules/oniguruma/src/oniguruma.h:389:42, col:78> 'unsigned int'
|   | | |         |     `-BinaryOperator 0x5608c14721e8 <line:388:42, line:389:77> 'unsigned int' '<<'
|   | | |         |       |-IntegerLiteral 0x5608c14721a8 <line:388:42> 'unsigned int' 1
|   | | |         |       `-IntegerLiteral 0x5608c14721c8 <line:389:77> 'int' 1
|   | | |         |-BreakStmt 0x5608c1472258 <src/builtin.c:856:11>
|   | | |         |-CaseStmt 0x5608c14722a0 <line:857:9, ./modules/oniguruma/src/oniguruma.h:390:78>
|   | | |         | |-ConstantExpr 0x5608c1472278 <src/builtin.c:857:14> 'int'
|   | | |         | | `-CharacterLiteral 0x5608c1472260 <col:14> 'int' 109
|   | | |         | `-CompoundAssignOperator 0x5608c14723c8 <line:858:11, ./modules/oniguruma/src/oniguruma.h:390:78> 'OnigOptionType':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | | |         |   |-DeclRefExpr 0x5608c14722c8 <src/builtin.c:858:11> 'OnigOptionType':'unsigned int' lvalue Var 0x5608c1471168 'options' 'OnigOptionType':'unsigned int'
|   | | |         |   `-ParenExpr 0x5608c14723a8 <./modules/oniguruma/src/oniguruma.h:390:42, col:78> 'unsigned int'
|   | | |         |     `-BinaryOperator 0x5608c1472388 <line:389:42, line:390:77> 'unsigned int' '<<'
|   | | |         |       |-ParenExpr 0x5608c1472348 <line:389:42, col:78> 'unsigned int'
|   | | |         |       | `-BinaryOperator 0x5608c1472328 <line:388:42, line:389:77> 'unsigned int' '<<'
|   | | |         |       |   |-IntegerLiteral 0x5608c14722e8 <line:388:42> 'unsigned int' 1
|   | | |         |       |   `-IntegerLiteral 0x5608c1472308 <line:389:77> 'int' 1
|   | | |         |       `-IntegerLiteral 0x5608c1472368 <line:390:77> 'int' 1
|   | | |         |-BreakStmt 0x5608c14723f8 <src/builtin.c:859:11>
|   | | |         |-CaseStmt 0x5608c1472430 <line:860:9, ./modules/oniguruma/src/oniguruma.h:391:78>
|   | | |         | |-ConstantExpr 0x5608c1472418 <src/builtin.c:860:14> 'int'
|   | | |         | | `-CharacterLiteral 0x5608c1472400 <col:14> 'int' 115
|   | | |         | `-CompoundAssignOperator 0x5608c14725b8 <line:861:11, ./modules/oniguruma/src/oniguruma.h:391:78> 'OnigOptionType':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | | |         |   |-DeclRefExpr 0x5608c1472458 <src/builtin.c:861:11> 'OnigOptionType':'unsigned int' lvalue Var 0x5608c1471168 'options' 'OnigOptionType':'unsigned int'
|   | | |         |   `-ParenExpr 0x5608c1472598 <./modules/oniguruma/src/oniguruma.h:391:42, col:78> 'unsigned int'
|   | | |         |     `-BinaryOperator 0x5608c1472578 <line:390:42, line:391:77> 'unsigned int' '<<'
|   | | |         |       |-ParenExpr 0x5608c1472538 <line:390:42, col:78> 'unsigned int'
|   | | |         |       | `-BinaryOperator 0x5608c1472518 <line:389:42, line:390:77> 'unsigned int' '<<'
|   | | |         |       |   |-ParenExpr 0x5608c14724d8 <line:389:42, col:78> 'unsigned int'
|   | | |         |       |   | `-BinaryOperator 0x5608c14724b8 <line:388:42, line:389:77> 'unsigned int' '<<'
|   | | |         |       |   |   |-IntegerLiteral 0x5608c1472478 <line:388:42> 'unsigned int' 1
|   | | |         |       |   |   `-IntegerLiteral 0x5608c1472498 <line:389:77> 'int' 1
|   | | |         |       |   `-IntegerLiteral 0x5608c14724f8 <line:390:77> 'int' 1
|   | | |         |       `-IntegerLiteral 0x5608c1472558 <line:391:77> 'int' 1
|   | | |         |-BreakStmt 0x5608c14725e8 <src/builtin.c:862:11>
|   | | |         |-CaseStmt 0x5608c1472620 <line:863:9, ./modules/oniguruma/src/oniguruma.h:391:78>
|   | | |         | |-ConstantExpr 0x5608c1472608 <src/builtin.c:863:14> 'int'
|   | | |         | | `-CharacterLiteral 0x5608c14725f0 <col:14> 'int' 112
|   | | |         | `-CompoundAssignOperator 0x5608c14728a8 <line:864:11, ./modules/oniguruma/src/oniguruma.h:391:78> 'OnigOptionType':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | | |         |   |-DeclRefExpr 0x5608c1472648 <src/builtin.c:864:11> 'OnigOptionType':'unsigned int' lvalue Var 0x5608c1471168 'options' 'OnigOptionType':'unsigned int'
|   | | |         |   `-BinaryOperator 0x5608c1472888 <./modules/oniguruma/src/oniguruma.h:390:42, line:391:78> 'unsigned int' '|'
|   | | |         |     |-ParenExpr 0x5608c1472728 <line:390:42, col:78> 'unsigned int'
|   | | |         |     | `-BinaryOperator 0x5608c1472708 <line:389:42, line:390:77> 'unsigned int' '<<'
|   | | |         |     |   |-ParenExpr 0x5608c14726c8 <line:389:42, col:78> 'unsigned int'
|   | | |         |     |   | `-BinaryOperator 0x5608c14726a8 <line:388:42, line:389:77> 'unsigned int' '<<'
|   | | |         |     |   |   |-IntegerLiteral 0x5608c1472668 <line:388:42> 'unsigned int' 1
|   | | |         |     |   |   `-IntegerLiteral 0x5608c1472688 <line:389:77> 'int' 1
|   | | |         |     |   `-IntegerLiteral 0x5608c14726e8 <line:390:77> 'int' 1
|   | | |         |     `-ParenExpr 0x5608c1472868 <line:391:42, col:78> 'unsigned int'
|   | | |         |       `-BinaryOperator 0x5608c1472848 <line:390:42, line:391:77> 'unsigned int' '<<'
|   | | |         |         |-ParenExpr 0x5608c1472808 <line:390:42, col:78> 'unsigned int'
|   | | |         |         | `-BinaryOperator 0x5608c14727e8 <line:389:42, line:390:77> 'unsigned int' '<<'
|   | | |         |         |   |-ParenExpr 0x5608c14727a8 <line:389:42, col:78> 'unsigned int'
|   | | |         |         |   | `-BinaryOperator 0x5608c1472788 <line:388:42, line:389:77> 'unsigned int' '<<'
|   | | |         |         |   |   |-IntegerLiteral 0x5608c1472748 <line:388:42> 'unsigned int' 1
|   | | |         |         |   |   `-IntegerLiteral 0x5608c1472768 <line:389:77> 'int' 1
|   | | |         |         |   `-IntegerLiteral 0x5608c14727c8 <line:390:77> 'int' 1
|   | | |         |         `-IntegerLiteral 0x5608c1472828 <line:391:77> 'int' 1
|   | | |         |-BreakStmt 0x5608c14728d8 <src/builtin.c:865:11>
|   | | |         |-CaseStmt 0x5608c1472910 <line:866:9, ./modules/oniguruma/src/oniguruma.h:392:78>
|   | | |         | |-ConstantExpr 0x5608c14728f8 <src/builtin.c:866:14> 'int'
|   | | |         | | `-CharacterLiteral 0x5608c14728e0 <col:14> 'int' 108
|   | | |         | `-CompoundAssignOperator 0x5608c1472af8 <line:867:11, ./modules/oniguruma/src/oniguruma.h:392:78> 'OnigOptionType':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | | |         |   |-DeclRefExpr 0x5608c1472938 <src/builtin.c:867:11> 'OnigOptionType':'unsigned int' lvalue Var 0x5608c1471168 'options' 'OnigOptionType':'unsigned int'
|   | | |         |   `-ParenExpr 0x5608c1472ad8 <./modules/oniguruma/src/oniguruma.h:392:42, col:78> 'unsigned int'
|   | | |         |     `-BinaryOperator 0x5608c1472ab8 <line:391:42, line:392:77> 'unsigned int' '<<'
|   | | |         |       |-ParenExpr 0x5608c1472a78 <line:391:42, col:78> 'unsigned int'
|   | | |         |       | `-BinaryOperator 0x5608c1472a58 <line:390:42, line:391:77> 'unsigned int' '<<'
|   | | |         |       |   |-ParenExpr 0x5608c1472a18 <line:390:42, col:78> 'unsigned int'
|   | | |         |       |   | `-BinaryOperator 0x5608c14729f8 <line:389:42, line:390:77> 'unsigned int' '<<'
|   | | |         |       |   |   |-ParenExpr 0x5608c14729b8 <line:389:42, col:78> 'unsigned int'
|   | | |         |       |   |   | `-BinaryOperator 0x5608c1472998 <line:388:42, line:389:77> 'unsigned int' '<<'
|   | | |         |       |   |   |   |-IntegerLiteral 0x5608c1472958 <line:388:42> 'unsigned int' 1
|   | | |         |       |   |   |   `-IntegerLiteral 0x5608c1472978 <line:389:77> 'int' 1
|   | | |         |       |   |   `-IntegerLiteral 0x5608c14729d8 <line:390:77> 'int' 1
|   | | |         |       |   `-IntegerLiteral 0x5608c1472a38 <line:391:77> 'int' 1
|   | | |         |       `-IntegerLiteral 0x5608c1472a98 <line:392:77> 'int' 1
|   | | |         |-BreakStmt 0x5608c1472b28 <src/builtin.c:868:11>
|   | | |         |-CaseStmt 0x5608c1472b60 <line:869:9, ./modules/oniguruma/src/oniguruma.h:393:78>
|   | | |         | |-ConstantExpr 0x5608c1472b48 <src/builtin.c:869:14> 'int'
|   | | |         | | `-CharacterLiteral 0x5608c1472b30 <col:14> 'int' 110
|   | | |         | `-CompoundAssignOperator 0x5608c1472da8 <line:870:11, ./modules/oniguruma/src/oniguruma.h:393:78> 'OnigOptionType':'unsigned int' '|=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | | |         |   |-DeclRefExpr 0x5608c1472b88 <src/builtin.c:870:11> 'OnigOptionType':'unsigned int' lvalue Var 0x5608c1471168 'options' 'OnigOptionType':'unsigned int'
|   | | |         |   `-ParenExpr 0x5608c1472d88 <./modules/oniguruma/src/oniguruma.h:393:42, col:78> 'unsigned int'
|   | | |         |     `-BinaryOperator 0x5608c1472d68 <line:392:42, line:393:77> 'unsigned int' '<<'
|   | | |         |       |-ParenExpr 0x5608c1472d28 <line:392:42, col:78> 'unsigned int'
|   | | |         |       | `-BinaryOperator 0x5608c1472d08 <line:391:42, line:392:77> 'unsigned int' '<<'
|   | | |         |       |   |-ParenExpr 0x5608c1472cc8 <line:391:42, col:78> 'unsigned int'
|   | | |         |       |   | `-BinaryOperator 0x5608c1472ca8 <line:390:42, line:391:77> 'unsigned int' '<<'
|   | | |         |       |   |   |-ParenExpr 0x5608c1472c68 <line:390:42, col:78> 'unsigned int'
|   | | |         |       |   |   | `-BinaryOperator 0x5608c1472c48 <line:389:42, line:390:77> 'unsigned int' '<<'
|   | | |         |       |   |   |   |-ParenExpr 0x5608c1472c08 <line:389:42, col:78> 'unsigned int'
|   | | |         |       |   |   |   | `-BinaryOperator 0x5608c1472be8 <line:388:42, line:389:77> 'unsigned int' '<<'
|   | | |         |       |   |   |   |   |-IntegerLiteral 0x5608c1472ba8 <line:388:42> 'unsigned int' 1
|   | | |         |       |   |   |   |   `-IntegerLiteral 0x5608c1472bc8 <line:389:77> 'int' 1
|   | | |         |       |   |   |   `-IntegerLiteral 0x5608c1472c28 <line:390:77> 'int' 1
|   | | |         |       |   |   `-IntegerLiteral 0x5608c1472c88 <line:391:77> 'int' 1
|   | | |         |       |   `-IntegerLiteral 0x5608c1472ce8 <line:392:77> 'int' 1
|   | | |         |       `-IntegerLiteral 0x5608c1472d48 <line:393:77> 'int' 1
|   | | |         |-BreakStmt 0x5608c1472dd8 <src/builtin.c:871:11>
|   | | |         |-DefaultStmt 0x5608c1472e78 <line:872:9, line:873:24>
|   | | |         | `-CallExpr 0x5608c1472e38 <col:11, col:24> 'void'
|   | | |         |   |-ImplicitCastExpr 0x5608c1472e20 <col:11> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |         |   | `-DeclRefExpr 0x5608c1472de0 <col:11> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |         |   `-ImplicitCastExpr 0x5608c1472e60 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |         |     `-DeclRefExpr 0x5608c1472e00 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   | | |         |-CallExpr 0x5608c1472ef0 <line:874:11, col:24> 'void'
|   | | |         | |-ImplicitCastExpr 0x5608c1472ed8 <col:11> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |         | | `-DeclRefExpr 0x5608c1472e98 <col:11> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |         | `-ImplicitCastExpr 0x5608c1472f18 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |         |   `-DeclRefExpr 0x5608c1472eb8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   | | |         |-CallExpr 0x5608c1472f88 <line:875:11, col:27> 'void'
|   | | |         | |-ImplicitCastExpr 0x5608c1472f70 <col:11> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |         | | `-DeclRefExpr 0x5608c1472f30 <col:11> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |         | `-ImplicitCastExpr 0x5608c1472fb0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |         |   `-DeclRefExpr 0x5608c1472f50 <col:19> 'jv':'jv' lvalue Var 0x5608c1471620 'modarray' 'jv':'jv'
|   | | |         `-ReturnStmt 0x5608c1473190 <line:876:11, line:877:62>
|   | | |           `-CallExpr 0x5608c1473168 <line:876:18, line:877:62> 'jv':'jv'
|   | | |             |-ImplicitCastExpr 0x5608c1473150 <line:876:18> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |             | `-DeclRefExpr 0x5608c1472fc8 <col:18> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   | | |             `-CallExpr 0x5608c1473108 <col:38, line:877:61> 'jv':'jv'
|   | | |               |-ImplicitCastExpr 0x5608c14730f0 <line:876:38> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   | | |               | `-DeclRefExpr 0x5608c1472fe8 <col:38> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|   | | |               |-ImplicitCastExpr 0x5608c1473138 <col:55> 'jv':'jv' <LValueToRValue>
|   | | |               | `-DeclRefExpr 0x5608c1473008 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c14702e8 'modifiers' 'jv':'jv'
|   | | |               `-CallExpr 0x5608c1473098 <line:877:17, col:60> 'jv':'jv'
|   | | |                 |-ImplicitCastExpr 0x5608c1473080 <col:17> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | | |                 | `-DeclRefExpr 0x5608c1473028 <col:17> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | | |                 `-ImplicitCastExpr 0x5608c14730d8 <col:27> 'const char *' <NoOp>
|   | | |                   `-ImplicitCastExpr 0x5608c14730c0 <col:27> 'char *' <ArrayToPointerDecay>
|   | | |                     `-StringLiteral 0x5608c1473048 <col:27> 'char [32]' lvalue " is not a valid modifier string"
|   | | `-CallExpr 0x5608c1473330 <line:880:5, col:21> 'void'
|   | |   |-ImplicitCastExpr 0x5608c1473318 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c14732d8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c1473358 <col:13> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c14732f8 <col:13> 'jv':'jv' lvalue Var 0x5608c1471620 'modarray' 'jv':'jv'
|   | `-IfStmt 0x5608c1473700 <line:881:10, line:886:3>
|   |   |-BinaryOperator 0x5608c1473480 <line:881:14, col:40> 'int' '!='
|   |   | |-ImplicitCastExpr 0x5608c1473450 <col:14, col:35> 'unsigned int' <IntegralCast>
|   |   | | `-CallExpr 0x5608c14733f0 <col:14, col:35> 'jv_kind':'jv_kind'
|   |   | |   |-ImplicitCastExpr 0x5608c14733d8 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x5608c1473398 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |   | |   `-ImplicitCastExpr 0x5608c1473418 <col:26> 'jv':'jv' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x5608c14733b8 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14702e8 'modifiers' 'jv':'jv'
|   |   | `-ImplicitCastExpr 0x5608c1473468 <col:40> 'unsigned int' <IntegralCast>
|   |   |   `-DeclRefExpr 0x5608c1473430 <col:40> 'int' EnumConstant 0x5608c13d0a40 'JV_KIND_NULL' 'int'
|   |   `-CompoundStmt 0x5608c14736d8 <col:54, line:886:3>
|   |     |-CallExpr 0x5608c14734f8 <line:883:5, col:18> 'void'
|   |     | |-ImplicitCastExpr 0x5608c14734e0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c14734a0 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |     | `-ImplicitCastExpr 0x5608c1473520 <col:13> 'jv':'jv' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c14734c0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   |     |-CallExpr 0x5608c1473590 <line:884:5, col:18> 'void'
|   |     | |-ImplicitCastExpr 0x5608c1473578 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c1473538 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |     | `-ImplicitCastExpr 0x5608c14735b8 <col:13> 'jv':'jv' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c1473558 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   |     `-ReturnStmt 0x5608c14736c8 <line:885:5, col:51>
|   |       `-CallExpr 0x5608c1473650 <col:12, col:51> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1473638 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14735d0 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |         |-ImplicitCastExpr 0x5608c1473680 <col:23> 'jv':'jv' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5608c14735f0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14702e8 'modifiers' 'jv':'jv'
|   |         `-ImplicitCastExpr 0x5608c14736b0 <col:34> 'const char *' <NoOp>
|   |           `-ImplicitCastExpr 0x5608c1473698 <col:34> 'char *' <ArrayToPointerDecay>
|   |             `-StringLiteral 0x5608c1473610 <col:34> 'char [16]' lvalue "is not a string"
|   |-CallExpr 0x5608c14737a8 <line:888:3, col:20> 'void'
|   | |-ImplicitCastExpr 0x5608c1473790 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1473750 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14737d0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1473770 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14702e8 'modifiers' 'jv':'jv'
|   |-BinaryOperator 0x5608c1473fb8 <line:890:3, line:892:63> 'int' '='
|   | |-DeclRefExpr 0x5608c14737e8 <line:890:3> 'int' lvalue Var 0x5608c1470710 'onigret' 'int'
|   | `-CallExpr 0x5608c1473d00 <col:13, line:892:63> 'int'
|   |   |-ImplicitCastExpr 0x5608c1473ce8 <line:890:13> 'int (*)(OnigRegex *, const OnigUChar *, const OnigUChar *, OnigOptionType, OnigEncoding, OnigSyntaxType *, OnigErrorInfo *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5608c1473808 <col:13> 'int (OnigRegex *, const OnigUChar *, const OnigUChar *, OnigOptionType, OnigEncoding, OnigSyntaxType *, OnigErrorInfo *)' Function 0x5608c135e430 'onig_new' 'int (OnigRegex *, const OnigUChar *, const OnigUChar *, OnigOptionType, OnigEncoding, OnigSyntaxType *, OnigErrorInfo *)'
|   |   |-UnaryOperator 0x5608c1473878 <col:22, col:23> 'regex_t **' prefix '&' cannot overflow
|   |   | `-DeclRefExpr 0x5608c1473828 <col:23> 'regex_t *' lvalue Var 0x5608c1470858 'reg' 'regex_t *'
|   |   |-CStyleCastExpr 0x5608c1473938 <col:28, col:63> 'const OnigUChar *' <BitCast>
|   |   | `-CallExpr 0x5608c14738e8 <col:42, col:63> 'const char *'
|   |   |   |-ImplicitCastExpr 0x5608c14738d0 <col:42> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5608c1473890 <col:42> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |   |   `-ImplicitCastExpr 0x5608c1473910 <col:58> 'jv':'jv' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5608c14738b0 <col:58> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   |   |-CStyleCastExpr 0x5608c1473b60 <line:891:7, col:85> 'const OnigUChar *' <BitCast>
|   |   | `-ParenExpr 0x5608c1473b40 <col:21, col:85> 'const char *'
|   |   |   `-BinaryOperator 0x5608c1473af0 <col:22, col:84> 'const char *' '+'
|   |   |     |-CallExpr 0x5608c14739b8 <col:22, col:43> 'const char *'
|   |   |     | |-ImplicitCastExpr 0x5608c14739a0 <col:22> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x5608c1473960 <col:22> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |   |     | `-ImplicitCastExpr 0x5608c14739e0 <col:38> 'jv':'jv' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x5608c1473980 <col:38> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   |   |     `-CallExpr 0x5608c1473ac8 <col:47, col:84> 'int'
|   |   |       |-ImplicitCastExpr 0x5608c1473ab0 <col:47> 'int (*)(jv)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5608c14739f8 <col:47> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |   |       `-CallExpr 0x5608c1473a70 <col:70, col:83> 'jv':'jv'
|   |   |         |-ImplicitCastExpr 0x5608c1473a58 <col:70> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x5608c1473a18 <col:70> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |   |         `-ImplicitCastExpr 0x5608c1473a98 <col:78> 'jv':'jv' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x5608c1473a38 <col:78> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   |   |-ImplicitCastExpr 0x5608c1473d58 <line:892:7> 'OnigOptionType':'unsigned int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5608c1473b88 <col:7> 'OnigOptionType':'unsigned int' lvalue Var 0x5608c1471168 'options' 'OnigOptionType':'unsigned int'
|   |   |-ParenExpr 0x5608c1473be0 <./modules/oniguruma/src/oniguruma.h:221:36, col:54> 'OnigEncodingType *'
|   |   | `-UnaryOperator 0x5608c1473bc8 <col:37, col:38> 'OnigEncodingType *' prefix '&' cannot overflow
|   |   |   `-DeclRefExpr 0x5608c1473ba8 <col:38> 'OnigEncodingType':'struct OnigEncodingTypeST' lvalue Var 0x5608c133aac0 'OnigEncodingUTF8' 'OnigEncodingType':'struct OnigEncodingTypeST'
|   |   |-ParenExpr 0x5608c1473c38 <line:437:40, col:59> 'OnigSyntaxType *'
|   |   | `-UnaryOperator 0x5608c1473c20 <col:41, col:42> 'OnigSyntaxType *' prefix '&' cannot overflow
|   |   |   `-DeclRefExpr 0x5608c1473c00 <col:42> 'OnigSyntaxType':'OnigSyntaxType' lvalue Var 0x5608c1348000 'OnigSyntaxPerl_NG' 'OnigSyntaxType':'OnigSyntaxType'
|   |   `-UnaryOperator 0x5608c1473c78 <src/builtin.c:892:57, col:58> 'OnigErrorInfo *' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x5608c1473c58 <col:58> 'OnigErrorInfo':'OnigErrorInfo' lvalue Var 0x5608c14708e8 'einfo' 'OnigErrorInfo':'OnigErrorInfo'
|   |-IfStmt 0x5608c14746d0 <line:893:3, line:900:3>
|   | |-BinaryOperator 0x5608c1474030 <line:893:7, ./modules/oniguruma/src/oniguruma.h:534:64> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1474018 <src/builtin.c:893:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c1473fd8 <col:7> 'int' lvalue Var 0x5608c1470710 'onigret' 'int'
|   | | `-IntegerLiteral 0x5608c1473ff8 <./modules/oniguruma/src/oniguruma.h:534:64> 'int' 0
|   | `-CompoundStmt 0x5608c1474698 <src/builtin.c:893:31, line:900:3>
|   |   |-DeclStmt 0x5608c1474190 <./modules/oniguruma/src/oniguruma.h:96:15, src/builtin.c:894:43>
|   |   | `-VarDecl 0x5608c1474128 <./modules/oniguruma/src/oniguruma.h:96:15, src/builtin.c:894:42> col:11 used ebuf 'OnigUChar [90]'
|   |   |-CallExpr 0x5608c1474280 <line:895:5, col:49> 'int'
|   |   | |-ImplicitCastExpr 0x5608c1474268 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14741a8 <col:5> 'int ()' Function 0x5608c135d6f0 'onig_error_code_to_str' 'int ()'
|   |   | |-ImplicitCastExpr 0x5608c14742b8 <col:28> 'OnigUChar *' <ArrayToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14741c8 <col:28> 'OnigUChar [90]' lvalue Var 0x5608c1474128 'ebuf' 'OnigUChar [90]'
|   |   | |-ImplicitCastExpr 0x5608c14742d0 <col:34> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x5608c14741e8 <col:34> 'int' lvalue Var 0x5608c1470710 'onigret' 'int'
|   |   | `-UnaryOperator 0x5608c1474228 <col:43, col:44> 'OnigErrorInfo *' prefix '&' cannot overflow
|   |   |   `-DeclRefExpr 0x5608c1474208 <col:44> 'OnigErrorInfo':'OnigErrorInfo' lvalue Var 0x5608c14708e8 'einfo' 'OnigErrorInfo':'OnigErrorInfo'
|   |   |-CallExpr 0x5608c1474340 <line:896:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1474328 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14742e8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1474368 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1474308 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   |   |-CallExpr 0x5608c14743d8 <line:897:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14743c0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1474380 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1474400 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14743a0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1474688 <line:898:5, line:899:34>
|   |     `-CallExpr 0x5608c1474660 <line:898:12, line:899:34> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1474648 <line:898:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1474418 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |       `-CallExpr 0x5608c1474618 <col:32, line:899:33> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1474600 <line:898:32> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1474438 <col:32> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|   |         |-CallExpr 0x5608c14744b8 <col:49, col:76> 'jv':'jv'
|   |         | |-ImplicitCastExpr 0x5608c14744a0 <col:49> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |         | | `-DeclRefExpr 0x5608c1474458 <col:49> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |         | `-ImplicitCastExpr 0x5608c14744f8 <col:59> 'const char *' <NoOp>
|   |         |   `-ImplicitCastExpr 0x5608c14744e0 <col:59> 'char *' <ArrayToPointerDecay>
|   |         |     `-StringLiteral 0x5608c1474478 <col:59> 'char [16]' lvalue "Regex failure: "
|   |         `-CallExpr 0x5608c14745c0 <line:899:11, col:32> 'jv':'jv'
|   |           |-ImplicitCastExpr 0x5608c14745a8 <col:11> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c1474510 <col:11> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |           `-ImplicitCastExpr 0x5608c14745e8 <col:21, col:28> 'const char *' <NoOp>
|   |             `-CStyleCastExpr 0x5608c1474580 <col:21, col:28> 'char *' <BitCast>
|   |               `-ImplicitCastExpr 0x5608c1474568 <col:28> 'OnigUChar *' <ArrayToPointerDecay> part_of_explicit_cast
|   |                 `-DeclRefExpr 0x5608c1474530 <col:28> 'OnigUChar [90]' lvalue Var 0x5608c1474128 'ebuf' 'OnigUChar [90]'
|   |-BinaryOperator 0x5608c1474828 <line:901:3, col:41> 'jv':'jv' '='
|   | |-DeclRefExpr 0x5608c14746f0 <col:3> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|   | `-ConditionalOperator 0x5608c14747f8 <col:12, col:41> 'jv':'jv'
|   |   |-ImplicitCastExpr 0x5608c14747e0 <col:12> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5608c1474710 <col:12> 'int' lvalue Var 0x5608c14704f0 'test' 'int'
|   |   |-CallExpr 0x5608c1474768 <col:19, col:28> 'jv':'jv'
|   |   | `-ImplicitCastExpr 0x5608c1474750 <col:19> 'jv (*)(void)' <FunctionToPointerDecay>
|   |   |   `-DeclRefExpr 0x5608c1474730 <col:19> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|   |   `-CallExpr 0x5608c14747c0 <col:32, col:41> 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c14747a8 <col:32> 'jv (*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5608c1474788 <col:32> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|   |-DeclStmt 0x5608c1474960 <line:902:3, col:52>
|   | `-VarDecl 0x5608c1474860 <col:3, col:51> col:15 used input_string 'const char *' cinit
|   |   `-CallExpr 0x5608c1474920 <col:30, col:51> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c1474908 <col:30> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14748c8 <col:30> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c1474948 <col:46> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14748e8 <col:46> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c1474ac0 <line:903:3, col:60>
|   | `-VarDecl 0x5608c1474988 <col:3, col:59> col:16 used start 'const OnigUChar *' cinit
|   |   `-CStyleCastExpr 0x5608c1474a98 <col:24, col:59> 'const OnigUChar *' <BitCast>
|   |     `-CallExpr 0x5608c1474a48 <col:38, col:59> 'const char *'
|   |       |-ImplicitCastExpr 0x5608c1474a30 <col:38> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14749f0 <col:38> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |       `-ImplicitCastExpr 0x5608c1474a70 <col:54> 'jv':'jv' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c1474a10 <col:54> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c1474c68 <line:904:3, col:70>
|   | `-VarDecl 0x5608c1474af0 <col:3, col:69> col:23 used length 'const unsigned long' cinit
|   |   `-ImplicitCastExpr 0x5608c1474c50 <col:32, col:69> 'unsigned long' <IntegralCast>
|   |     `-CallExpr 0x5608c1474c28 <col:32, col:69> 'int'
|   |       |-ImplicitCastExpr 0x5608c1474c10 <col:32> 'int (*)(jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1474b58 <col:32> 'int (jv)' Function 0x5608c13de670 'jv_string_length_bytes' 'int (jv)'
|   |       `-CallExpr 0x5608c1474bd0 <col:55, col:68> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1474bb8 <col:55> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1474b78 <col:55> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |         `-ImplicitCastExpr 0x5608c1474bf8 <col:63> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1474b98 <col:63> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c1474de0 <line:905:3, col:36>
|   | `-VarDecl 0x5608c1474c90 <col:3, col:30> col:16 used end 'const OnigUChar *' cinit
|   |   `-BinaryOperator 0x5608c1474dc0 <col:22, col:30> 'const OnigUChar *' '+'
|   |     |-ImplicitCastExpr 0x5608c1474d38 <col:22> 'const OnigUChar *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c1474cf8 <col:22> 'const OnigUChar *' lvalue Var 0x5608c1474988 'start' 'const OnigUChar *'
|   |     `-ImplicitCastExpr 0x5608c1474d50 <col:30> 'unsigned long' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1474d18 <col:30> 'const unsigned long' lvalue Var 0x5608c1474af0 'length' 'const unsigned long'
|   |-BinaryOperator 0x5608c1474ed0 <line:906:3, col:28> 'OnigRegion *' '='
|   | |-DeclRefExpr 0x5608c1474df8 <col:3> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | `-CallExpr 0x5608c1474eb0 <col:12, col:28> 'OnigRegion *'
|   |   `-ImplicitCastExpr 0x5608c1474e98 <col:12> 'OnigRegion *(*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x5608c1474e18 <col:12> 'OnigRegion *(void)' Function 0x5608c1360a98 'onig_region_new' 'OnigRegion *(void)'
|   |-DoStmt 0x5608c147bba8 <line:907:3, line:998:34>
|   | |-CompoundStmt 0x5608c147baa0 <line:907:6, line:998:3>
|   | | |-BinaryOperator 0x5608c14753d0 <line:908:5, line:911:33> 'int' '='
|   | | | |-DeclRefExpr 0x5608c1474ef0 <line:908:5> 'int' lvalue Var 0x5608c1470710 'onigret' 'int'
|   | | | `-CallExpr 0x5608c1475130 <col:15, line:911:33> 'int'
|   | | |   |-ImplicitCastExpr 0x5608c1475118 <line:908:15> 'int (*)(OnigRegex, const OnigUChar *, const OnigUChar *, const OnigUChar *, const OnigUChar *, OnigRegion *, OnigOptionType)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1474f10 <col:15> 'int (OnigRegex, const OnigUChar *, const OnigUChar *, const OnigUChar *, const OnigUChar *, OnigRegion *, OnigOptionType)' Function 0x5608c1360410 'onig_search' 'int (OnigRegex, const OnigUChar *, const OnigUChar *, const OnigUChar *, const OnigUChar *, OnigRegion *, OnigOptionType)'
|   | | |   |-ImplicitCastExpr 0x5608c1475188 <col:27> 'regex_t *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x5608c1474f30 <col:27> 'regex_t *' lvalue Var 0x5608c1470858 'reg' 'regex_t *'
|   | | |   |-CStyleCastExpr 0x5608c1474ff8 <line:909:9, col:44> 'const OnigUChar *' <BitCast>
|   | | |   | `-CallExpr 0x5608c1474fa8 <col:23, col:44> 'const char *'
|   | | |   |   |-ImplicitCastExpr 0x5608c1474f90 <col:23> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   | | |   |   | `-DeclRefExpr 0x5608c1474f50 <col:23> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   | | |   |   `-ImplicitCastExpr 0x5608c1474fd0 <col:39> 'jv':'jv' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x5608c1474f70 <col:39> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   | | |   |-ImplicitCastExpr 0x5608c14751a0 <col:47> 'const OnigUChar *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x5608c1475020 <col:47> 'const OnigUChar *' lvalue Var 0x5608c1474c90 'end' 'const OnigUChar *'
|   | | |   |-ImplicitCastExpr 0x5608c14751b8 <line:910:9> 'const OnigUChar *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x5608c1475040 <col:9> 'const OnigUChar *' lvalue Var 0x5608c1474988 'start' 'const OnigUChar *'
|   | | |   |-ImplicitCastExpr 0x5608c14751d0 <col:16> 'const OnigUChar *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x5608c1475060 <col:16> 'const OnigUChar *' lvalue Var 0x5608c1474c90 'end' 'const OnigUChar *'
|   | | |   |-ImplicitCastExpr 0x5608c14751e8 <line:911:9> 'OnigRegion *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x5608c1475080 <col:9> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | | |   `-IntegerLiteral 0x5608c14750a0 <./modules/oniguruma/src/oniguruma.h:387:42> 'unsigned int' 0
|   | | `-IfStmt 0x5608c147ba70 <src/builtin.c:912:5, line:997:5> has_else
|   | |   |-BinaryOperator 0x5608c1475448 <line:912:9, col:20> 'int' '>='
|   | |   | |-ImplicitCastExpr 0x5608c1475430 <col:9> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x5608c14753f0 <col:9> 'int' lvalue Var 0x5608c1470710 'onigret' 'int'
|   | |   | `-IntegerLiteral 0x5608c1475410 <col:20> 'int' 0
|   | |   |-CompoundStmt 0x5608c147b378 <col:23, line:988:5>
|   | |   | |-IfStmt 0x5608c1475560 <line:913:7, line:916:7>
|   | |   | | |-ImplicitCastExpr 0x5608c1475488 <line:913:11> 'int' <LValueToRValue>
|   | |   | | | `-DeclRefExpr 0x5608c1475468 <col:11> 'int' lvalue Var 0x5608c14704f0 'test' 'int'
|   | |   | | `-CompoundStmt 0x5608c1475540 <col:17, line:916:7>
|   | |   | |   |-BinaryOperator 0x5608c1475518 <line:914:9, col:26> 'jv':'jv' '='
|   | |   | |   | |-DeclRefExpr 0x5608c14754a0 <col:9> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|   | |   | |   | `-CallExpr 0x5608c14754f8 <col:18, col:26> 'jv':'jv'
|   | |   | |   |   `-ImplicitCastExpr 0x5608c14754e0 <col:18> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |     `-DeclRefExpr 0x5608c14754c0 <col:18> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|   | |   | |   `-BreakStmt 0x5608c1475538 <line:915:9>
|   | |   | |-IfStmt 0x5608c1476818 <line:919:7, line:932:7>
|   | |   | | |-BinaryOperator 0x5608c1475730 <line:919:11, col:42> 'int' '=='
|   | |   | | | |-ImplicitCastExpr 0x5608c1475700 <col:11, col:24> 'int' <LValueToRValue>
|   | |   | | | | `-ArraySubscriptExpr 0x5608c1475620 <col:11, col:24> 'int' lvalue
|   | |   | | | |   |-ImplicitCastExpr 0x5608c1475608 <col:11, col:19> 'int *' <LValueToRValue>
|   | |   | | | |   | `-MemberExpr 0x5608c14755b8 <col:11, col:19> 'int *' lvalue ->end 0x5608c1348880
|   | |   | | | |   |   `-ImplicitCastExpr 0x5608c14755a0 <col:11> 'OnigRegion *' <LValueToRValue>
|   | |   | | | |   |     `-DeclRefExpr 0x5608c1475580 <col:11> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | | | |   `-IntegerLiteral 0x5608c14755e8 <col:23> 'int' 0
|   | |   | | | `-ImplicitCastExpr 0x5608c1475718 <col:29, col:42> 'int' <LValueToRValue>
|   | |   | | |   `-ArraySubscriptExpr 0x5608c14756e0 <col:29, col:42> 'int' lvalue
|   | |   | | |     |-ImplicitCastExpr 0x5608c14756c8 <col:29, col:37> 'int *' <LValueToRValue>
|   | |   | | |     | `-MemberExpr 0x5608c1475678 <col:29, col:37> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | | |     |   `-ImplicitCastExpr 0x5608c1475660 <col:29> 'OnigRegion *' <LValueToRValue>
|   | |   | | |     |     `-DeclRefExpr 0x5608c1475640 <col:29> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | | |     `-IntegerLiteral 0x5608c14756a8 <col:41> 'int' 0
|   | |   | | `-CompoundStmt 0x5608c14767b8 <col:45, line:932:7>
|   | |   | |   |-DeclStmt 0x5608c14757d0 <line:920:9, col:26>
|   | |   | |   | `-VarDecl 0x5608c1475768 <col:9, col:23> col:23 used idx 'unsigned long'
|   | |   | |   |-DeclStmt 0x5608c14758e0 <line:921:9, col:51>
|   | |   | |   | `-VarDecl 0x5608c1475800 <col:9, col:39> col:21 used fr 'const char *' cinit
|   | |   | |   |   `-CStyleCastExpr 0x5608c14758b8 <col:26, col:39> 'const char *' <NoOp>
|   | |   | |   |     `-ImplicitCastExpr 0x5608c14758a0 <col:39> 'const char *' <LValueToRValue> part_of_explicit_cast
|   | |   | |   |       `-DeclRefExpr 0x5608c1475868 <col:39> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   |-ForStmt 0x5608c1475c88 <line:922:9, line:924:9>
|   | |   | |   | |-BinaryOperator 0x5608c1475950 <line:922:14, col:20> 'unsigned long' '='
|   | |   | |   | | |-DeclRefExpr 0x5608c14758f8 <col:14> 'unsigned long' lvalue Var 0x5608c1475768 'idx' 'unsigned long'
|   | |   | |   | | `-ImplicitCastExpr 0x5608c1475938 <col:20> 'unsigned long' <IntegralCast>
|   | |   | |   | |   `-IntegerLiteral 0x5608c1475918 <col:20> 'int' 0
|   | |   | |   | |-<<<NULL>>>
|   | |   | |   | |-BinaryOperator 0x5608c1475ad8 <col:23, col:54> 'int' '<'
|   | |   | |   | | |-ImplicitCastExpr 0x5608c1475ac0 <col:23> 'const char *' <LValueToRValue>
|   | |   | |   | | | `-DeclRefExpr 0x5608c1475970 <col:23> 'const char *' lvalue Var 0x5608c1475800 'fr' 'const char *'
|   | |   | |   | | `-BinaryOperator 0x5608c1475aa0 <col:28, col:54> 'const char *' '+'
|   | |   | |   | |   |-ImplicitCastExpr 0x5608c1475a70 <col:28> 'const char *' <LValueToRValue>
|   | |   | |   | |   | `-DeclRefExpr 0x5608c1475990 <col:28> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   | |   `-ImplicitCastExpr 0x5608c1475a88 <col:41, col:54> 'int' <LValueToRValue>
|   | |   | |   | |     `-ArraySubscriptExpr 0x5608c1475a50 <col:41, col:54> 'int' lvalue
|   | |   | |   | |       |-ImplicitCastExpr 0x5608c1475a38 <col:41, col:49> 'int *' <LValueToRValue>
|   | |   | |   | |       | `-MemberExpr 0x5608c14759e8 <col:41, col:49> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |   | |       |   `-ImplicitCastExpr 0x5608c14759d0 <col:41> 'OnigRegion *' <LValueToRValue>
|   | |   | |   | |       |     `-DeclRefExpr 0x5608c14759b0 <col:41> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   | |       `-IntegerLiteral 0x5608c1475a18 <col:53> 'int' 0
|   | |   | |   | |-UnaryOperator 0x5608c1475b18 <col:57, col:60> 'unsigned long' postfix '++'
|   | |   | |   | | `-DeclRefExpr 0x5608c1475af8 <col:57> 'unsigned long' lvalue Var 0x5608c1475768 'idx' 'unsigned long'
|   | |   | |   | `-CompoundStmt 0x5608c1475c70 <col:64, line:924:9>
|   | |   | |   |   `-CompoundAssignOperator 0x5608c1475c40 <line:923:11, col:43> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   | |   | |   |     |-DeclRefExpr 0x5608c1475b30 <col:11> 'const char *' lvalue Var 0x5608c1475800 'fr' 'const char *'
|   | |   | |   |     `-CallExpr 0x5608c1475c00 <col:17, col:43> 'int'
|   | |   | |   |       |-ImplicitCastExpr 0x5608c1475be8 <col:17> 'int (*)(char)' <FunctionToPointerDecay>
|   | |   | |   |       | `-DeclRefExpr 0x5608c1475b50 <col:17> 'int (char)' Function 0x5608c14142b0 'jvp_utf8_decode_length' 'int (char)'
|   | |   | |   |       `-ImplicitCastExpr 0x5608c1475c28 <col:40, col:41> 'char' <LValueToRValue>
|   | |   | |   |         `-UnaryOperator 0x5608c1475ba8 <col:40, col:41> 'const char' lvalue prefix '*' cannot overflow
|   | |   | |   |           `-ImplicitCastExpr 0x5608c1475b90 <col:41> 'const char *' <LValueToRValue>
|   | |   | |   |             `-DeclRefExpr 0x5608c1475b70 <col:41> 'const char *' lvalue Var 0x5608c1475800 'fr' 'const char *'
|   | |   | |   |-DeclStmt 0x5608c1475f60 <line:925:9, col:83>
|   | |   | |   | `-VarDecl 0x5608c1475cd0 <col:9, col:82> col:12 used match 'jv':'jv' cinit
|   | |   | |   |   `-CallExpr 0x5608c1475f28 <col:20, col:82> 'jv':'jv'
|   | |   | |   |     |-ImplicitCastExpr 0x5608c1475f10 <col:20> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |     | `-DeclRefExpr 0x5608c1475d38 <col:20> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |     |-CallExpr 0x5608c1475d90 <col:34, col:44> 'jv':'jv'
|   | |   | |   |     | `-ImplicitCastExpr 0x5608c1475d78 <col:34> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |     |   `-DeclRefExpr 0x5608c1475d58 <col:34> 'jv (void)' Function 0x5608c13e46d0 'jv_object' 'jv (void)'
|   | |   | |   |     |-CallExpr 0x5608c1475e08 <col:47, col:65> 'jv':'jv'
|   | |   | |   |     | |-ImplicitCastExpr 0x5608c1475df0 <col:47> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |     | | `-DeclRefExpr 0x5608c1475db0 <col:47> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |     | `-ImplicitCastExpr 0x5608c1475e48 <col:57> 'const char *' <NoOp>
|   | |   | |   |     |   `-ImplicitCastExpr 0x5608c1475e30 <col:57> 'char *' <ArrayToPointerDecay>
|   | |   | |   |     |     `-StringLiteral 0x5608c1475dd0 <col:57> 'char [7]' lvalue "offset"
|   | |   | |   |     `-CallExpr 0x5608c1475eb8 <col:68, col:81> 'jv':'jv'
|   | |   | |   |       |-ImplicitCastExpr 0x5608c1475ea0 <col:68> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |   |       | `-DeclRefExpr 0x5608c1475e60 <col:68> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |   |       `-ImplicitCastExpr 0x5608c1475ef8 <col:78> 'double' <IntegralToFloating>
|   | |   | |   |         `-ImplicitCastExpr 0x5608c1475ee0 <col:78> 'unsigned long' <LValueToRValue>
|   | |   | |   |           `-DeclRefExpr 0x5608c1475e80 <col:78> 'unsigned long' lvalue Var 0x5608c1475768 'idx' 'unsigned long'
|   | |   | |   |-BinaryOperator 0x5608c1476188 <line:926:9, col:71> 'jv':'jv' '='
|   | |   | |   | |-DeclRefExpr 0x5608c1475f78 <col:9> 'jv':'jv' lvalue Var 0x5608c1475cd0 'match' 'jv':'jv'
|   | |   | |   | `-CallExpr 0x5608c1476138 <col:17, col:71> 'jv':'jv'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c1476120 <col:17> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | `-DeclRefExpr 0x5608c1475f98 <col:17> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c1476170 <col:31> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x5608c1475fb8 <col:31> 'jv':'jv' lvalue Var 0x5608c1475cd0 'match' 'jv':'jv'
|   | |   | |   |   |-CallExpr 0x5608c1476030 <col:38, col:56> 'jv':'jv'
|   | |   | |   |   | |-ImplicitCastExpr 0x5608c1476018 <col:38> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   | | `-DeclRefExpr 0x5608c1475fd8 <col:38> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   | `-ImplicitCastExpr 0x5608c1476070 <col:48> 'const char *' <NoOp>
|   | |   | |   |   |   `-ImplicitCastExpr 0x5608c1476058 <col:48> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |     `-StringLiteral 0x5608c1475ff8 <col:48> 'char [7]' lvalue "length"
|   | |   | |   |   `-CallExpr 0x5608c14760e0 <col:59, col:70> 'jv':'jv'
|   | |   | |   |     |-ImplicitCastExpr 0x5608c14760c8 <col:59> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |   |     | `-DeclRefExpr 0x5608c1476088 <col:59> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |   |     `-ImplicitCastExpr 0x5608c1476108 <col:69> 'double' <IntegralToFloating>
|   | |   | |   |       `-IntegerLiteral 0x5608c14760a8 <col:69> 'int' 0
|   | |   | |   |-BinaryOperator 0x5608c14763d8 <line:927:9, col:72> 'jv':'jv' '='
|   | |   | |   | |-DeclRefExpr 0x5608c14761a8 <col:9> 'jv':'jv' lvalue Var 0x5608c1475cd0 'match' 'jv':'jv'
|   | |   | |   | `-CallExpr 0x5608c1476388 <col:17, col:72> 'jv':'jv'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c1476370 <col:17> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | `-DeclRefExpr 0x5608c14761c8 <col:17> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c14763c0 <col:31> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x5608c14761e8 <col:31> 'jv':'jv' lvalue Var 0x5608c1475cd0 'match' 'jv':'jv'
|   | |   | |   |   |-CallExpr 0x5608c1476260 <col:38, col:56> 'jv':'jv'
|   | |   | |   |   | |-ImplicitCastExpr 0x5608c1476248 <col:38> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   | | `-DeclRefExpr 0x5608c1476208 <col:38> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   | `-ImplicitCastExpr 0x5608c14762b0 <col:48> 'const char *' <NoOp>
|   | |   | |   |   |   `-ImplicitCastExpr 0x5608c1476288 <col:48> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |     `-StringLiteral 0x5608c1476228 <col:48> 'char [7]' lvalue "string"
|   | |   | |   |   `-CallExpr 0x5608c1476318 <col:59, col:71> 'jv':'jv'
|   | |   | |   |     |-ImplicitCastExpr 0x5608c1476300 <col:59> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |     | `-DeclRefExpr 0x5608c14762c8 <col:59> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |     `-ImplicitCastExpr 0x5608c1476358 <col:69> 'const char *' <NoOp>
|   | |   | |   |       `-ImplicitCastExpr 0x5608c1476340 <col:69> 'char *' <ArrayToPointerDecay>
|   | |   | |   |         `-StringLiteral 0x5608c14762e8 <col:69> 'char [1]' lvalue ""
|   | |   | |   |-BinaryOperator 0x5608c1476608 <line:928:9, col:71> 'jv':'jv' '='
|   | |   | |   | |-DeclRefExpr 0x5608c14763f8 <col:9> 'jv':'jv' lvalue Var 0x5608c1475cd0 'match' 'jv':'jv'
|   | |   | |   | `-CallExpr 0x5608c14765b8 <col:17, col:71> 'jv':'jv'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c14765a0 <col:17> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | `-DeclRefExpr 0x5608c1476418 <col:17> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c14765f0 <col:31> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x5608c1476438 <col:31> 'jv':'jv' lvalue Var 0x5608c1475cd0 'match' 'jv':'jv'
|   | |   | |   |   |-CallExpr 0x5608c14764f0 <col:38, col:58> 'jv':'jv'
|   | |   | |   |   | |-ImplicitCastExpr 0x5608c14764d8 <col:38> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   | | `-DeclRefExpr 0x5608c1476458 <col:38> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   | `-ImplicitCastExpr 0x5608c1476530 <col:48> 'const char *' <NoOp>
|   | |   | |   |   |   `-ImplicitCastExpr 0x5608c1476518 <col:48> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |     `-StringLiteral 0x5608c14764b8 <col:48> 'char [9]' lvalue "captures"
|   | |   | |   |   `-CallExpr 0x5608c1476580 <col:61, col:70> 'jv':'jv'
|   | |   | |   |     `-ImplicitCastExpr 0x5608c1476568 <col:61> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |       `-DeclRefExpr 0x5608c1476548 <col:61> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|   | |   | |   |-BinaryOperator 0x5608c1476720 <line:929:9, col:47> 'jv':'jv' '='
|   | |   | |   | |-DeclRefExpr 0x5608c1476628 <col:9> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|   | |   | |   | `-CallExpr 0x5608c14766c0 <col:18, col:47> 'jv':'jv'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c14766a8 <col:18> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | `-DeclRefExpr 0x5608c1476648 <col:18> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c14766f0 <col:34> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x5608c1476668 <col:34> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|   | |   | |   |   `-ImplicitCastExpr 0x5608c1476708 <col:42> 'jv':'jv' <LValueToRValue>
|   | |   | |   |     `-DeclRefExpr 0x5608c1476688 <col:42> 'jv':'jv' lvalue Var 0x5608c1475cd0 'match' 'jv':'jv'
|   | |   | |   |-CompoundAssignOperator 0x5608c1476780 <line:930:9, col:18> 'const OnigUChar *' '+=' ComputeLHSTy='const OnigUChar *' ComputeResultTy='const OnigUChar *'
|   | |   | |   | |-DeclRefExpr 0x5608c1476740 <col:9> 'const OnigUChar *' lvalue Var 0x5608c1474988 'start' 'const OnigUChar *'
|   | |   | |   | `-IntegerLiteral 0x5608c1476760 <col:18> 'int' 1
|   | |   | |   `-ContinueStmt 0x5608c14767b0 <line:931:9>
|   | |   | |-DeclStmt 0x5608c14768b8 <line:934:7, col:24>
|   | |   | | `-VarDecl 0x5608c1476850 <col:7, col:21> col:21 used idx 'unsigned long'
|   | |   | |-DeclStmt 0x5608c1476950 <line:935:7, col:24>
|   | |   | | `-VarDecl 0x5608c14768e8 <col:7, col:21> col:21 used len 'unsigned long'
|   | |   | |-DeclStmt 0x5608c1476a60 <line:936:7, col:49>
|   | |   | | `-VarDecl 0x5608c1476980 <col:7, col:37> col:19 used fr 'const char *' cinit
|   | |   | |   `-CStyleCastExpr 0x5608c1476a38 <col:24, col:37> 'const char *' <NoOp>
|   | |   | |     `-ImplicitCastExpr 0x5608c1476a20 <col:37> 'const char *' <LValueToRValue> part_of_explicit_cast
|   | |   | |       `-DeclRefExpr 0x5608c14769e8 <col:37> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |-ForStmt 0x5608c14770e0 <line:938:7, line:941:7>
|   | |   | | |-BinaryOperator 0x5608c1476b10 <line:938:12, col:24> 'unsigned long' '='
|   | |   | | | |-DeclRefExpr 0x5608c1476a78 <col:12> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | | | `-BinaryOperator 0x5608c1476af0 <col:18, col:24> 'unsigned long' '='
|   | |   | | |   |-DeclRefExpr 0x5608c1476a98 <col:18> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | | |   `-ImplicitCastExpr 0x5608c1476ad8 <col:24> 'unsigned long' <IntegralCast>
|   | |   | | |     `-IntegerLiteral 0x5608c1476ab8 <col:24> 'int' 0
|   | |   | | |-<<<NULL>>>
|   | |   | | |-BinaryOperator 0x5608c1476c98 <col:27, col:58> 'int' '<'
|   | |   | | | |-ImplicitCastExpr 0x5608c1476c80 <col:27> 'const char *' <LValueToRValue>
|   | |   | | | | `-DeclRefExpr 0x5608c1476b30 <col:27> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | | | `-BinaryOperator 0x5608c1476c60 <col:32, col:58> 'const char *' '+'
|   | |   | | |   |-ImplicitCastExpr 0x5608c1476c30 <col:32> 'const char *' <LValueToRValue>
|   | |   | | |   | `-DeclRefExpr 0x5608c1476b50 <col:32> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | | |   `-ImplicitCastExpr 0x5608c1476c48 <col:45, col:58> 'int' <LValueToRValue>
|   | |   | | |     `-ArraySubscriptExpr 0x5608c1476c10 <col:45, col:58> 'int' lvalue
|   | |   | | |       |-ImplicitCastExpr 0x5608c1476bf8 <col:45, col:53> 'int *' <LValueToRValue>
|   | |   | | |       | `-MemberExpr 0x5608c1476ba8 <col:45, col:53> 'int *' lvalue ->end 0x5608c1348880
|   | |   | | |       |   `-ImplicitCastExpr 0x5608c1476b90 <col:45> 'OnigRegion *' <LValueToRValue>
|   | |   | | |       |     `-DeclRefExpr 0x5608c1476b70 <col:45> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | | |       `-IntegerLiteral 0x5608c1476bd8 <col:57> 'int' 0
|   | |   | | |-UnaryOperator 0x5608c1476cd8 <col:61, col:64> 'unsigned long' postfix '++'
|   | |   | | | `-DeclRefExpr 0x5608c1476cb8 <col:61> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | | `-CompoundStmt 0x5608c14770c0 <col:68, line:941:7>
|   | |   | |   |-IfStmt 0x5608c1476f88 <line:939:9, col:63>
|   | |   | |   | |-BinaryOperator 0x5608c1476e58 <col:13, col:45> 'int' '=='
|   | |   | |   | | |-ImplicitCastExpr 0x5608c1476e40 <col:13> 'const char *' <LValueToRValue>
|   | |   | |   | | | `-DeclRefExpr 0x5608c1476cf0 <col:13> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   | | `-BinaryOperator 0x5608c1476e20 <col:19, col:45> 'const char *' '+'
|   | |   | |   | |   |-ImplicitCastExpr 0x5608c1476df0 <col:19> 'const char *' <LValueToRValue>
|   | |   | |   | |   | `-DeclRefExpr 0x5608c1476d10 <col:19> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   | |   `-ImplicitCastExpr 0x5608c1476e08 <col:32, col:45> 'int' <LValueToRValue>
|   | |   | |   | |     `-ArraySubscriptExpr 0x5608c1476dd0 <col:32, col:45> 'int' lvalue
|   | |   | |   | |       |-ImplicitCastExpr 0x5608c1476db8 <col:32, col:40> 'int *' <LValueToRValue>
|   | |   | |   | |       | `-MemberExpr 0x5608c1476d68 <col:32, col:40> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |   | |       |   `-ImplicitCastExpr 0x5608c1476d50 <col:32> 'OnigRegion *' <LValueToRValue>
|   | |   | |   | |       |     `-DeclRefExpr 0x5608c1476d30 <col:32> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   | |       `-IntegerLiteral 0x5608c1476d98 <col:44> 'int' 0
|   | |   | |   | `-BinaryOperator 0x5608c1476f68 <col:48, col:63> 'unsigned long' ','
|   | |   | |   |   |-BinaryOperator 0x5608c1476ed0 <col:48, col:54> 'unsigned long' '='
|   | |   | |   |   | |-DeclRefExpr 0x5608c1476e78 <col:48> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | |   |   | `-ImplicitCastExpr 0x5608c1476eb8 <col:54> 'unsigned long' <LValueToRValue>
|   | |   | |   |   |   `-DeclRefExpr 0x5608c1476e98 <col:54> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | |   |   `-BinaryOperator 0x5608c1476f48 <col:59, col:63> 'unsigned long' '='
|   | |   | |   |     |-DeclRefExpr 0x5608c1476ef0 <col:59> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | |   |     `-ImplicitCastExpr 0x5608c1476f30 <col:63> 'unsigned long' <IntegralCast>
|   | |   | |   |       `-IntegerLiteral 0x5608c1476f10 <col:63> 'int' 0
|   | |   | |   `-CompoundAssignOperator 0x5608c1477090 <line:940:9, col:41> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   | |   | |     |-DeclRefExpr 0x5608c1476fa8 <col:9> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |     `-CallExpr 0x5608c1477050 <col:15, col:41> 'int'
|   | |   | |       |-ImplicitCastExpr 0x5608c1477038 <col:15> 'int (*)(char)' <FunctionToPointerDecay>
|   | |   | |       | `-DeclRefExpr 0x5608c1476fc8 <col:15> 'int (char)' Function 0x5608c14142b0 'jvp_utf8_decode_length' 'int (char)'
|   | |   | |       `-ImplicitCastExpr 0x5608c1477078 <col:38, col:39> 'char' <LValueToRValue>
|   | |   | |         `-UnaryOperator 0x5608c1477020 <col:38, col:39> 'const char' lvalue prefix '*' cannot overflow
|   | |   | |           `-ImplicitCastExpr 0x5608c1477008 <col:39> 'const char *' <LValueToRValue>
|   | |   | |             `-DeclRefExpr 0x5608c1476fe8 <col:39> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |-DeclStmt 0x5608c14773b8 <line:943:7, col:81>
|   | |   | | `-VarDecl 0x5608c1477128 <col:7, col:80> col:10 used match 'jv':'jv' cinit
|   | |   | |   `-CallExpr 0x5608c1477380 <col:18, col:80> 'jv':'jv'
|   | |   | |     |-ImplicitCastExpr 0x5608c1477368 <col:18> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |     | `-DeclRefExpr 0x5608c1477190 <col:18> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |     |-CallExpr 0x5608c14771e8 <col:32, col:42> 'jv':'jv'
|   | |   | |     | `-ImplicitCastExpr 0x5608c14771d0 <col:32> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |     |   `-DeclRefExpr 0x5608c14771b0 <col:32> 'jv (void)' Function 0x5608c13e46d0 'jv_object' 'jv (void)'
|   | |   | |     |-CallExpr 0x5608c1477260 <col:45, col:63> 'jv':'jv'
|   | |   | |     | |-ImplicitCastExpr 0x5608c1477248 <col:45> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |     | | `-DeclRefExpr 0x5608c1477208 <col:45> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |     | `-ImplicitCastExpr 0x5608c14772a0 <col:55> 'const char *' <NoOp>
|   | |   | |     |   `-ImplicitCastExpr 0x5608c1477288 <col:55> 'char *' <ArrayToPointerDecay>
|   | |   | |     |     `-StringLiteral 0x5608c1477228 <col:55> 'char [7]' lvalue "offset"
|   | |   | |     `-CallExpr 0x5608c1477310 <col:66, col:79> 'jv':'jv'
|   | |   | |       |-ImplicitCastExpr 0x5608c14772f8 <col:66> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |       | `-DeclRefExpr 0x5608c14772b8 <col:66> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |       `-ImplicitCastExpr 0x5608c1477350 <col:76> 'double' <IntegralToFloating>
|   | |   | |         `-ImplicitCastExpr 0x5608c1477338 <col:76> 'unsigned long' <LValueToRValue>
|   | |   | |           `-DeclRefExpr 0x5608c14772d8 <col:76> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | |-DeclStmt 0x5608c1477638 <line:945:7, col:57>
|   | |   | | `-VarDecl 0x5608c14773e8 <col:7, col:56> col:21 used blen 'unsigned long' cinit
|   | |   | |   `-ImplicitCastExpr 0x5608c1477620 <col:28, col:56> 'unsigned long' <IntegralCast>
|   | |   | |     `-BinaryOperator 0x5608c1477600 <col:28, col:56> 'int' '-'
|   | |   | |       |-ImplicitCastExpr 0x5608c14775d0 <col:28, col:41> 'int' <LValueToRValue>
|   | |   | |       | `-ArraySubscriptExpr 0x5608c14774f0 <col:28, col:41> 'int' lvalue
|   | |   | |       |   |-ImplicitCastExpr 0x5608c14774d8 <col:28, col:36> 'int *' <LValueToRValue>
|   | |   | |       |   | `-MemberExpr 0x5608c1477488 <col:28, col:36> 'int *' lvalue ->end 0x5608c1348880
|   | |   | |       |   |   `-ImplicitCastExpr 0x5608c1477470 <col:28> 'OnigRegion *' <LValueToRValue>
|   | |   | |       |   |     `-DeclRefExpr 0x5608c1477450 <col:28> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |       |   `-IntegerLiteral 0x5608c14774b8 <col:40> 'int' 0
|   | |   | |       `-ImplicitCastExpr 0x5608c14775e8 <col:43, col:56> 'int' <LValueToRValue>
|   | |   | |         `-ArraySubscriptExpr 0x5608c14775b0 <col:43, col:56> 'int' lvalue
|   | |   | |           |-ImplicitCastExpr 0x5608c1477598 <col:43, col:51> 'int *' <LValueToRValue>
|   | |   | |           | `-MemberExpr 0x5608c1477548 <col:43, col:51> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |           |   `-ImplicitCastExpr 0x5608c1477530 <col:43> 'OnigRegion *' <LValueToRValue>
|   | |   | |           |     `-DeclRefExpr 0x5608c1477510 <col:43> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |           `-IntegerLiteral 0x5608c1477578 <col:55> 'int' 0
|   | |   | |-BinaryOperator 0x5608c1477878 <line:946:7, col:71> 'jv':'jv' '='
|   | |   | | |-DeclRefExpr 0x5608c1477650 <col:7> 'jv':'jv' lvalue Var 0x5608c1477128 'match' 'jv':'jv'
|   | |   | | `-CallExpr 0x5608c1477828 <col:15, col:71> 'jv':'jv'
|   | |   | |   |-ImplicitCastExpr 0x5608c1477810 <col:15> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   | `-DeclRefExpr 0x5608c1477670 <col:15> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |-ImplicitCastExpr 0x5608c1477860 <col:29> 'jv':'jv' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x5608c1477690 <col:29> 'jv':'jv' lvalue Var 0x5608c1477128 'match' 'jv':'jv'
|   | |   | |   |-CallExpr 0x5608c1477708 <col:36, col:54> 'jv':'jv'
|   | |   | |   | |-ImplicitCastExpr 0x5608c14776f0 <col:36> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   | | `-DeclRefExpr 0x5608c14776b0 <col:36> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   | `-ImplicitCastExpr 0x5608c1477748 <col:46> 'const char *' <NoOp>
|   | |   | |   |   `-ImplicitCastExpr 0x5608c1477730 <col:46> 'char *' <ArrayToPointerDecay>
|   | |   | |   |     `-StringLiteral 0x5608c14776d0 <col:46> 'char [7]' lvalue "length"
|   | |   | |   `-CallExpr 0x5608c14777b8 <col:57, col:70> 'jv':'jv'
|   | |   | |     |-ImplicitCastExpr 0x5608c14777a0 <col:57> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |     | `-DeclRefExpr 0x5608c1477760 <col:57> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |     `-ImplicitCastExpr 0x5608c14777f8 <col:67> 'double' <IntegralToFloating>
|   | |   | |       `-ImplicitCastExpr 0x5608c14777e0 <col:67> 'unsigned long' <LValueToRValue>
|   | |   | |         `-DeclRefExpr 0x5608c1477780 <col:67> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | |-BinaryOperator 0x5608c1477bf8 <line:947:7, col:106> 'jv':'jv' '='
|   | |   | | |-DeclRefExpr 0x5608c1477898 <col:7> 'jv':'jv' lvalue Var 0x5608c1477128 'match' 'jv':'jv'
|   | |   | | `-CallExpr 0x5608c1477ba8 <col:15, col:106> 'jv':'jv'
|   | |   | |   |-ImplicitCastExpr 0x5608c1477b90 <col:15> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   | `-DeclRefExpr 0x5608c14778b8 <col:15> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |-ImplicitCastExpr 0x5608c1477be0 <col:29> 'jv':'jv' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x5608c14778d8 <col:29> 'jv':'jv' lvalue Var 0x5608c1477128 'match' 'jv':'jv'
|   | |   | |   |-CallExpr 0x5608c1477950 <col:36, col:54> 'jv':'jv'
|   | |   | |   | |-ImplicitCastExpr 0x5608c1477938 <col:36> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   | | `-DeclRefExpr 0x5608c14778f8 <col:36> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   | `-ImplicitCastExpr 0x5608c1477990 <col:46> 'const char *' <NoOp>
|   | |   | |   |   `-ImplicitCastExpr 0x5608c1477978 <col:46> 'char *' <ArrayToPointerDecay>
|   | |   | |   |     `-StringLiteral 0x5608c1477918 <col:46> 'char [7]' lvalue "string"
|   | |   | |   `-CallExpr 0x5608c1477b30 <col:57, col:105> 'jv':'jv'
|   | |   | |     |-ImplicitCastExpr 0x5608c1477b18 <col:57> 'jv (*)(const char *, int)' <FunctionToPointerDecay>
|   | |   | |     | `-DeclRefExpr 0x5608c14779a8 <col:57> 'jv (const char *, int)' Function 0x5608c13de3c8 'jv_string_sized' 'jv (const char *, int)'
|   | |   | |     |-BinaryOperator 0x5608c1477ad8 <col:73, col:99> 'const char *' '+'
|   | |   | |     | |-ImplicitCastExpr 0x5608c1477aa8 <col:73> 'const char *' <LValueToRValue>
|   | |   | |     | | `-DeclRefExpr 0x5608c14779c8 <col:73> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |     | `-ImplicitCastExpr 0x5608c1477ac0 <col:86, col:99> 'int' <LValueToRValue>
|   | |   | |     |   `-ArraySubscriptExpr 0x5608c1477a88 <col:86, col:99> 'int' lvalue
|   | |   | |     |     |-ImplicitCastExpr 0x5608c1477a70 <col:86, col:94> 'int *' <LValueToRValue>
|   | |   | |     |     | `-MemberExpr 0x5608c1477a20 <col:86, col:94> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |     |     |   `-ImplicitCastExpr 0x5608c1477a08 <col:86> 'OnigRegion *' <LValueToRValue>
|   | |   | |     |     |     `-DeclRefExpr 0x5608c14779e8 <col:86> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |     |     `-IntegerLiteral 0x5608c1477a50 <col:98> 'int' 0
|   | |   | |     `-ImplicitCastExpr 0x5608c1477b78 <col:101> 'int' <IntegralCast>
|   | |   | |       `-ImplicitCastExpr 0x5608c1477b60 <col:101> 'unsigned long' <LValueToRValue>
|   | |   | |         `-DeclRefExpr 0x5608c1477af8 <col:101> 'unsigned long' lvalue Var 0x5608c14773e8 'blen' 'unsigned long'
|   | |   | |-DeclStmt 0x5608c1477ce8 <line:948:7, col:31>
|   | |   | | `-VarDecl 0x5608c1477c28 <col:7, col:30> col:10 used captures 'jv':'jv' cinit
|   | |   | |   `-CallExpr 0x5608c1477cc8 <col:21, col:30> 'jv':'jv'
|   | |   | |     `-ImplicitCastExpr 0x5608c1477cb0 <col:21> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |       `-DeclRefExpr 0x5608c1477c90 <col:21> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|   | |   | |-ForStmt 0x5608c147aba0 <line:949:7, line:982:7>
|   | |   | | |-DeclStmt 0x5608c1477da0 <line:949:12, col:21>
|   | |   | | | `-VarDecl 0x5608c1477d18 <col:12, col:20> col:16 used i 'int' cinit
|   | |   | | |   `-IntegerLiteral 0x5608c1477d80 <col:20> 'int' 1
|   | |   | | |-<<<NULL>>>
|   | |   | | |-BinaryOperator 0x5608c1477e70 <col:23, col:35> 'int' '<'
|   | |   | | | |-ImplicitCastExpr 0x5608c1477e40 <col:23> 'int' <LValueToRValue>
|   | |   | | | | `-DeclRefExpr 0x5608c1477db8 <col:23> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | | | `-ImplicitCastExpr 0x5608c1477e58 <col:27, col:35> 'int' <LValueToRValue>
|   | |   | | |   `-MemberExpr 0x5608c1477e10 <col:27, col:35> 'int' lvalue ->num_regs 0x5608c13487b0
|   | |   | | |     `-ImplicitCastExpr 0x5608c1477df8 <col:27> 'OnigRegion *' <LValueToRValue>
|   | |   | | |       `-DeclRefExpr 0x5608c1477dd8 <col:27> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | | |-UnaryOperator 0x5608c1477eb0 <col:45, col:47> 'int' prefix '++'
|   | |   | | | `-DeclRefExpr 0x5608c1477e90 <col:47> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | | `-CompoundStmt 0x5608c147ab48 <col:50, line:982:7>
|   | |   | |   |-IfStmt 0x5608c14795d0 <line:951:9, line:969:9>
|   | |   | |   | |-BinaryOperator 0x5608c14780a8 <line:951:13, col:44> 'int' '=='
|   | |   | |   | | |-ImplicitCastExpr 0x5608c1478078 <col:13, col:26> 'int' <LValueToRValue>
|   | |   | |   | | | `-ArraySubscriptExpr 0x5608c1477f80 <col:13, col:26> 'int' lvalue
|   | |   | |   | | |   |-ImplicitCastExpr 0x5608c1477f50 <col:13, col:21> 'int *' <LValueToRValue>
|   | |   | |   | | |   | `-MemberExpr 0x5608c1477f00 <col:13, col:21> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |   | | |   |   `-ImplicitCastExpr 0x5608c1477ee8 <col:13> 'OnigRegion *' <LValueToRValue>
|   | |   | |   | | |   |     `-DeclRefExpr 0x5608c1477ec8 <col:13> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   | | |   `-ImplicitCastExpr 0x5608c1477f68 <col:25> 'int' <LValueToRValue>
|   | |   | |   | | |     `-DeclRefExpr 0x5608c1477f30 <col:25> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   | | `-ImplicitCastExpr 0x5608c1478090 <col:31, col:44> 'int' <LValueToRValue>
|   | |   | |   | |   `-ArraySubscriptExpr 0x5608c1478058 <col:31, col:44> 'int' lvalue
|   | |   | |   | |     |-ImplicitCastExpr 0x5608c1478028 <col:31, col:39> 'int *' <LValueToRValue>
|   | |   | |   | |     | `-MemberExpr 0x5608c1477fd8 <col:31, col:39> 'int *' lvalue ->end 0x5608c1348880
|   | |   | |   | |     |   `-ImplicitCastExpr 0x5608c1477fc0 <col:31> 'OnigRegion *' <LValueToRValue>
|   | |   | |   | |     |     `-DeclRefExpr 0x5608c1477fa0 <col:31> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   | |     `-ImplicitCastExpr 0x5608c1478040 <col:43> 'int' <LValueToRValue>
|   | |   | |   | |       `-DeclRefExpr 0x5608c1478008 <col:43> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   | `-CompoundStmt 0x5608c1479590 <col:47, line:969:9>
|   | |   | |   |   |-DeclStmt 0x5608c1478140 <line:953:11, col:17>
|   | |   | |   |   | `-VarDecl 0x5608c14780d8 <col:11, col:14> col:14 used cap 'jv':'jv'
|   | |   | |   |   |-IfStmt 0x5608c1479020 <line:954:11, line:964:11> has_else
|   | |   | |   |   | |-BinaryOperator 0x5608c1478280 <line:954:15, col:34> 'int' '=='
|   | |   | |   |   | | |-ImplicitCastExpr 0x5608c1478268 <col:15, col:28> 'int' <LValueToRValue>
|   | |   | |   |   | | | `-ArraySubscriptExpr 0x5608c1478210 <col:15, col:28> 'int' lvalue
|   | |   | |   |   | | |   |-ImplicitCastExpr 0x5608c14781e0 <col:15, col:23> 'int *' <LValueToRValue>
|   | |   | |   |   | | |   | `-MemberExpr 0x5608c1478190 <col:15, col:23> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |   |   | | |   |   `-ImplicitCastExpr 0x5608c1478178 <col:15> 'OnigRegion *' <LValueToRValue>
|   | |   | |   |   | | |   |     `-DeclRefExpr 0x5608c1478158 <col:15> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   |   | | |   `-ImplicitCastExpr 0x5608c14781f8 <col:27> 'int' <LValueToRValue>
|   | |   | |   |   | | |     `-DeclRefExpr 0x5608c14781c0 <col:27> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   |   | | `-UnaryOperator 0x5608c1478250 <col:33, col:34> 'int' prefix '-'
|   | |   | |   |   | |   `-IntegerLiteral 0x5608c1478230 <col:34> 'int' 1
|   | |   | |   |   | |-CompoundStmt 0x5608c14786f8 <col:37, line:957:11>
|   | |   | |   |   | | |-BinaryOperator 0x5608c14784e8 <line:955:13, col:80> 'jv':'jv' '='
|   | |   | |   |   | | | |-DeclRefExpr 0x5608c14782a0 <col:13> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   | | | `-CallExpr 0x5608c14784b0 <col:19, col:80> 'jv':'jv'
|   | |   | |   |   | | |   |-ImplicitCastExpr 0x5608c1478498 <col:19> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | | |   | `-DeclRefExpr 0x5608c14782c0 <col:19> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   | | |   |-CallExpr 0x5608c1478318 <col:33, col:43> 'jv':'jv'
|   | |   | |   |   | | |   | `-ImplicitCastExpr 0x5608c1478300 <col:33> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |   | | |   |   `-DeclRefExpr 0x5608c14782e0 <col:33> 'jv (void)' Function 0x5608c13e46d0 'jv_object' 'jv (void)'
|   | |   | |   |   | | |   |-CallExpr 0x5608c1478390 <col:46, col:64> 'jv':'jv'
|   | |   | |   |   | | |   | |-ImplicitCastExpr 0x5608c1478378 <col:46> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   | | |   | | `-DeclRefExpr 0x5608c1478338 <col:46> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   | | |   | `-ImplicitCastExpr 0x5608c14783d0 <col:56> 'const char *' <NoOp>
|   | |   | |   |   | | |   |   `-ImplicitCastExpr 0x5608c14783b8 <col:56> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   | | |   |     `-StringLiteral 0x5608c1478358 <col:56> 'char [7]' lvalue "offset"
|   | |   | |   |   | | |   `-CallExpr 0x5608c1478458 <col:67, col:79> 'jv':'jv'
|   | |   | |   |   | | |     |-ImplicitCastExpr 0x5608c1478440 <col:67> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |   |   | | |     | `-DeclRefExpr 0x5608c14783e8 <col:67> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |   |   | | |     `-ImplicitCastExpr 0x5608c1478480 <col:77, col:78> 'double' <IntegralToFloating>
|   | |   | |   |   | | |       `-UnaryOperator 0x5608c1478428 <col:77, col:78> 'int' prefix '-'
|   | |   | |   |   | | |         `-IntegerLiteral 0x5608c1478408 <col:78> 'int' 1
|   | |   | |   |   | | `-BinaryOperator 0x5608c14786d8 <line:956:13, col:68> 'jv':'jv' '='
|   | |   | |   |   | |   |-DeclRefExpr 0x5608c1478508 <col:13> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   | |   `-CallExpr 0x5608c1478688 <col:19, col:68> 'jv':'jv'
|   | |   | |   |   | |     |-ImplicitCastExpr 0x5608c1478670 <col:19> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | |     | `-DeclRefExpr 0x5608c1478528 <col:19> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   | |     |-ImplicitCastExpr 0x5608c14786c0 <col:33> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   | |     | `-DeclRefExpr 0x5608c1478548 <col:33> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   | |     |-CallExpr 0x5608c14785c0 <col:38, col:56> 'jv':'jv'
|   | |   | |   |   | |     | |-ImplicitCastExpr 0x5608c14785a8 <col:38> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   | |     | | `-DeclRefExpr 0x5608c1478568 <col:38> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   | |     | `-ImplicitCastExpr 0x5608c1478600 <col:48> 'const char *' <NoOp>
|   | |   | |   |   | |     |   `-ImplicitCastExpr 0x5608c14785e8 <col:48> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   | |     |     `-StringLiteral 0x5608c1478588 <col:48> 'char [7]' lvalue "string"
|   | |   | |   |   | |     `-CallExpr 0x5608c1478650 <col:59, col:67> 'jv':'jv'
|   | |   | |   |   | |       `-ImplicitCastExpr 0x5608c1478638 <col:59> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |   | |         `-DeclRefExpr 0x5608c1478618 <col:59> 'jv (void)' Function 0x5608c13db090 'jv_null' 'jv (void)'
|   | |   | |   |   | `-CompoundStmt 0x5608c1478ff0 <line:957:18, line:964:11>
|   | |   | |   |   |   |-BinaryOperator 0x5608c1478770 <line:958:13, col:18> 'const char *' '='
|   | |   | |   |   |   | |-DeclRefExpr 0x5608c1478718 <col:13> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   |   |   | `-ImplicitCastExpr 0x5608c1478758 <col:18> 'const char *' <LValueToRValue>
|   | |   | |   |   |   |   `-DeclRefExpr 0x5608c1478738 <col:18> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   |   |   |-ForStmt 0x5608c1478b10 <line:959:13, line:961:13>
|   | |   | |   |   |   | |-BinaryOperator 0x5608c14787e8 <line:959:18, col:24> 'unsigned long' '='
|   | |   | |   |   |   | | |-DeclRefExpr 0x5608c1478790 <col:18> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | |   |   |   | | `-ImplicitCastExpr 0x5608c14787d0 <col:24> 'unsigned long' <IntegralCast>
|   | |   | |   |   |   | |   `-IntegerLiteral 0x5608c14787b0 <col:24> 'int' 0
|   | |   | |   |   |   | |-<<<NULL>>>
|   | |   | |   |   |   | |-BinaryOperator 0x5608c1478988 <col:27, col:58> 'int' '<'
|   | |   | |   |   |   | | |-ImplicitCastExpr 0x5608c1478970 <col:27> 'const char *' <LValueToRValue>
|   | |   | |   |   |   | | | `-DeclRefExpr 0x5608c1478808 <col:27> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   |   |   | | `-BinaryOperator 0x5608c1478950 <col:32, col:58> 'const char *' '+'
|   | |   | |   |   |   | |   |-ImplicitCastExpr 0x5608c1478920 <col:32> 'const char *' <LValueToRValue>
|   | |   | |   |   |   | |   | `-DeclRefExpr 0x5608c1478828 <col:32> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   |   |   | |   `-ImplicitCastExpr 0x5608c1478938 <col:45, col:58> 'int' <LValueToRValue>
|   | |   | |   |   |   | |     `-ArraySubscriptExpr 0x5608c1478900 <col:45, col:58> 'int' lvalue
|   | |   | |   |   |   | |       |-ImplicitCastExpr 0x5608c14788d0 <col:45, col:53> 'int *' <LValueToRValue>
|   | |   | |   |   |   | |       | `-MemberExpr 0x5608c1478880 <col:45, col:53> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |   |   |   | |       |   `-ImplicitCastExpr 0x5608c1478868 <col:45> 'OnigRegion *' <LValueToRValue>
|   | |   | |   |   |   | |       |     `-DeclRefExpr 0x5608c1478848 <col:45> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   |   |   | |       `-ImplicitCastExpr 0x5608c14788e8 <col:57> 'int' <LValueToRValue>
|   | |   | |   |   |   | |         `-DeclRefExpr 0x5608c14788b0 <col:57> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   |   |   | |-UnaryOperator 0x5608c14789c8 <col:61, col:64> 'unsigned long' postfix '++'
|   | |   | |   |   |   | | `-DeclRefExpr 0x5608c14789a8 <col:61> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | |   |   |   | `-CompoundStmt 0x5608c1478af8 <col:68, line:961:13>
|   | |   | |   |   |   |   `-CompoundAssignOperator 0x5608c1478ac8 <line:960:15, col:47> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   | |   | |   |   |   |     |-DeclRefExpr 0x5608c14789e0 <col:15> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   |   |   |     `-CallExpr 0x5608c1478a88 <col:21, col:47> 'int'
|   | |   | |   |   |   |       |-ImplicitCastExpr 0x5608c1478a70 <col:21> 'int (*)(char)' <FunctionToPointerDecay>
|   | |   | |   |   |   |       | `-DeclRefExpr 0x5608c1478a00 <col:21> 'int (char)' Function 0x5608c14142b0 'jvp_utf8_decode_length' 'int (char)'
|   | |   | |   |   |   |       `-ImplicitCastExpr 0x5608c1478ab0 <col:44, col:45> 'char' <LValueToRValue>
|   | |   | |   |   |   |         `-UnaryOperator 0x5608c1478a58 <col:44, col:45> 'const char' lvalue prefix '*' cannot overflow
|   | |   | |   |   |   |           `-ImplicitCastExpr 0x5608c1478a40 <col:45> 'const char *' <LValueToRValue>
|   | |   | |   |   |   |             `-DeclRefExpr 0x5608c1478a20 <col:45> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   |   |   |-BinaryOperator 0x5608c1478d90 <line:962:13, col:81> 'jv':'jv' '='
|   | |   | |   |   |   | |-DeclRefExpr 0x5608c1478b48 <col:13> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   |   | `-CallExpr 0x5608c1478d58 <col:19, col:81> 'jv':'jv'
|   | |   | |   |   |   |   |-ImplicitCastExpr 0x5608c1478d40 <col:19> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   |   |   | `-DeclRefExpr 0x5608c1478b68 <col:19> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |   |   |-CallExpr 0x5608c1478bc0 <col:33, col:43> 'jv':'jv'
|   | |   | |   |   |   |   | `-ImplicitCastExpr 0x5608c1478ba8 <col:33> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |   |   |   |   `-DeclRefExpr 0x5608c1478b88 <col:33> 'jv (void)' Function 0x5608c13e46d0 'jv_object' 'jv (void)'
|   | |   | |   |   |   |   |-CallExpr 0x5608c1478c38 <col:46, col:64> 'jv':'jv'
|   | |   | |   |   |   |   | |-ImplicitCastExpr 0x5608c1478c20 <col:46> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   |   |   | | `-DeclRefExpr 0x5608c1478be0 <col:46> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   |   |   | `-ImplicitCastExpr 0x5608c1478c78 <col:56> 'const char *' <NoOp>
|   | |   | |   |   |   |   |   `-ImplicitCastExpr 0x5608c1478c60 <col:56> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |   |   |     `-StringLiteral 0x5608c1478c00 <col:56> 'char [7]' lvalue "offset"
|   | |   | |   |   |   |   `-CallExpr 0x5608c1478ce8 <col:67, col:80> 'jv':'jv'
|   | |   | |   |   |   |     |-ImplicitCastExpr 0x5608c1478cd0 <col:67> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |   |   |   |     | `-DeclRefExpr 0x5608c1478c90 <col:67> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |   |   |   |     `-ImplicitCastExpr 0x5608c1478d28 <col:77> 'double' <IntegralToFloating>
|   | |   | |   |   |   |       `-ImplicitCastExpr 0x5608c1478d10 <col:77> 'unsigned long' <LValueToRValue>
|   | |   | |   |   |   |         `-DeclRefExpr 0x5608c1478cb0 <col:77> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | |   |   |   `-BinaryOperator 0x5608c1478fd0 <line:963:13, col:72> 'jv':'jv' '='
|   | |   | |   |   |     |-DeclRefExpr 0x5608c1478db0 <col:13> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   |     `-CallExpr 0x5608c1478f80 <col:19, col:72> 'jv':'jv'
|   | |   | |   |   |       |-ImplicitCastExpr 0x5608c1478f68 <col:19> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   |       | `-DeclRefExpr 0x5608c1478dd0 <col:19> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |       |-ImplicitCastExpr 0x5608c1478fb8 <col:33> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   |       | `-DeclRefExpr 0x5608c1478df0 <col:33> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   |       |-CallExpr 0x5608c1478e68 <col:38, col:56> 'jv':'jv'
|   | |   | |   |   |       | |-ImplicitCastExpr 0x5608c1478e50 <col:38> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   |       | | `-DeclRefExpr 0x5608c1478e10 <col:38> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   |       | `-ImplicitCastExpr 0x5608c1478ea8 <col:48> 'const char *' <NoOp>
|   | |   | |   |   |       |   `-ImplicitCastExpr 0x5608c1478e90 <col:48> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |       |     `-StringLiteral 0x5608c1478e30 <col:48> 'char [7]' lvalue "string"
|   | |   | |   |   |       `-CallExpr 0x5608c1478f10 <col:59, col:71> 'jv':'jv'
|   | |   | |   |   |         |-ImplicitCastExpr 0x5608c1478ef8 <col:59> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   |         | `-DeclRefExpr 0x5608c1478ec0 <col:59> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   |         `-ImplicitCastExpr 0x5608c1478f50 <col:69> 'const char *' <NoOp>
|   | |   | |   |   |           `-ImplicitCastExpr 0x5608c1478f38 <col:69> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |             `-StringLiteral 0x5608c1478ee0 <col:69> 'char [1]' lvalue ""
|   | |   | |   |   |-BinaryOperator 0x5608c1479260 <line:965:11, col:69> 'jv':'jv' '='
|   | |   | |   |   | |-DeclRefExpr 0x5608c1479050 <col:11> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   | `-CallExpr 0x5608c1479210 <col:17, col:69> 'jv':'jv'
|   | |   | |   |   |   |-ImplicitCastExpr 0x5608c14791f8 <col:17> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   |   | `-DeclRefExpr 0x5608c1479070 <col:17> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |   |-ImplicitCastExpr 0x5608c1479248 <col:31> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   |   | `-DeclRefExpr 0x5608c1479090 <col:31> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   |   |-CallExpr 0x5608c1479108 <col:36, col:54> 'jv':'jv'
|   | |   | |   |   |   | |-ImplicitCastExpr 0x5608c14790f0 <col:36> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   |   | | `-DeclRefExpr 0x5608c14790b0 <col:36> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   |   | `-ImplicitCastExpr 0x5608c1479148 <col:46> 'const char *' <NoOp>
|   | |   | |   |   |   |   `-ImplicitCastExpr 0x5608c1479130 <col:46> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |   |     `-StringLiteral 0x5608c14790d0 <col:46> 'char [7]' lvalue "length"
|   | |   | |   |   |   `-CallExpr 0x5608c14791b8 <col:57, col:68> 'jv':'jv'
|   | |   | |   |   |     |-ImplicitCastExpr 0x5608c14791a0 <col:57> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |   |   |     | `-DeclRefExpr 0x5608c1479160 <col:57> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |   |   |     `-ImplicitCastExpr 0x5608c14791e0 <col:67> 'double' <IntegralToFloating>
|   | |   | |   |   |       `-IntegerLiteral 0x5608c1479180 <col:67> 'int' 0
|   | |   | |   |   |-BinaryOperator 0x5608c1479450 <line:966:11, col:64> 'jv':'jv' '='
|   | |   | |   |   | |-DeclRefExpr 0x5608c1479280 <col:11> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   | `-CallExpr 0x5608c1479400 <col:17, col:64> 'jv':'jv'
|   | |   | |   |   |   |-ImplicitCastExpr 0x5608c14793e8 <col:17> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   |   | `-DeclRefExpr 0x5608c14792a0 <col:17> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |   |-ImplicitCastExpr 0x5608c1479438 <col:31> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   |   | `-DeclRefExpr 0x5608c14792c0 <col:31> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   |   |-CallExpr 0x5608c1479338 <col:36, col:52> 'jv':'jv'
|   | |   | |   |   |   | |-ImplicitCastExpr 0x5608c1479320 <col:36> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   |   | | `-DeclRefExpr 0x5608c14792e0 <col:36> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   |   | `-ImplicitCastExpr 0x5608c1479378 <col:46> 'const char *' <NoOp>
|   | |   | |   |   |   |   `-ImplicitCastExpr 0x5608c1479360 <col:46> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |   |     `-StringLiteral 0x5608c1479300 <col:46> 'char [5]' lvalue "name"
|   | |   | |   |   |   `-CallExpr 0x5608c14793c8 <col:55, col:63> 'jv':'jv'
|   | |   | |   |   |     `-ImplicitCastExpr 0x5608c14793b0 <col:55> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |   |       `-DeclRefExpr 0x5608c1479390 <col:55> 'jv (void)' Function 0x5608c13db090 'jv_null' 'jv (void)'
|   | |   | |   |   |-BinaryOperator 0x5608c1479568 <line:967:11, col:51> 'jv':'jv' '='
|   | |   | |   |   | |-DeclRefExpr 0x5608c1479470 <col:11> 'jv':'jv' lvalue Var 0x5608c1477c28 'captures' 'jv':'jv'
|   | |   | |   |   | `-CallExpr 0x5608c1479508 <col:22, col:51> 'jv':'jv'
|   | |   | |   |   |   |-ImplicitCastExpr 0x5608c14794f0 <col:22> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   |   | `-DeclRefExpr 0x5608c1479490 <col:22> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   | |   | |   |   |   |-ImplicitCastExpr 0x5608c1479538 <col:38> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   |   | `-DeclRefExpr 0x5608c14794b0 <col:38> 'jv':'jv' lvalue Var 0x5608c1477c28 'captures' 'jv':'jv'
|   | |   | |   |   |   `-ImplicitCastExpr 0x5608c1479550 <col:48> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   |     `-DeclRefExpr 0x5608c14794d0 <col:48> 'jv':'jv' lvalue Var 0x5608c14780d8 'cap' 'jv':'jv'
|   | |   | |   |   `-ContinueStmt 0x5608c1479588 <line:968:11>
|   | |   | |   |-BinaryOperator 0x5608c1479648 <line:970:9, col:14> 'const char *' '='
|   | |   | |   | |-DeclRefExpr 0x5608c14795f0 <col:9> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   | `-ImplicitCastExpr 0x5608c1479630 <col:14> 'const char *' <LValueToRValue>
|   | |   | |   |   `-DeclRefExpr 0x5608c1479610 <col:14> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   |-ForStmt 0x5608c1479d00 <line:971:9, line:974:9>
|   | |   | |   | |-BinaryOperator 0x5608c1479700 <line:971:14, col:26> 'unsigned long' '='
|   | |   | |   | | |-DeclRefExpr 0x5608c1479668 <col:14> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | |   | | `-BinaryOperator 0x5608c14796e0 <col:20, col:26> 'unsigned long' '='
|   | |   | |   | |   |-DeclRefExpr 0x5608c1479688 <col:20> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | |   | |   `-ImplicitCastExpr 0x5608c14796c8 <col:26> 'unsigned long' <IntegralCast>
|   | |   | |   | |     `-IntegerLiteral 0x5608c14796a8 <col:26> 'int' 0
|   | |   | |   | |-<<<NULL>>>
|   | |   | |   | |-BinaryOperator 0x5608c14798a0 <col:29, col:60> 'int' '<'
|   | |   | |   | | |-ImplicitCastExpr 0x5608c1479888 <col:29> 'const char *' <LValueToRValue>
|   | |   | |   | | | `-DeclRefExpr 0x5608c1479720 <col:29> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   | | `-BinaryOperator 0x5608c1479868 <col:34, col:60> 'const char *' '+'
|   | |   | |   | |   |-ImplicitCastExpr 0x5608c1479838 <col:34> 'const char *' <LValueToRValue>
|   | |   | |   | |   | `-DeclRefExpr 0x5608c1479740 <col:34> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   | |   `-ImplicitCastExpr 0x5608c1479850 <col:47, col:60> 'int' <LValueToRValue>
|   | |   | |   | |     `-ArraySubscriptExpr 0x5608c1479818 <col:47, col:60> 'int' lvalue
|   | |   | |   | |       |-ImplicitCastExpr 0x5608c14797e8 <col:47, col:55> 'int *' <LValueToRValue>
|   | |   | |   | |       | `-MemberExpr 0x5608c1479798 <col:47, col:55> 'int *' lvalue ->end 0x5608c1348880
|   | |   | |   | |       |   `-ImplicitCastExpr 0x5608c1479780 <col:47> 'OnigRegion *' <LValueToRValue>
|   | |   | |   | |       |     `-DeclRefExpr 0x5608c1479760 <col:47> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   | |       `-ImplicitCastExpr 0x5608c1479800 <col:59> 'int' <LValueToRValue>
|   | |   | |   | |         `-DeclRefExpr 0x5608c14797c8 <col:59> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   | |-UnaryOperator 0x5608c14798e0 <col:63, col:66> 'unsigned long' postfix '++'
|   | |   | |   | | `-DeclRefExpr 0x5608c14798c0 <col:63> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | |   | `-CompoundStmt 0x5608c1479ce0 <col:70, line:974:9>
|   | |   | |   |   |-IfStmt 0x5608c1479ba8 <line:972:11, col:65>
|   | |   | |   |   | |-BinaryOperator 0x5608c1479a78 <col:15, col:47> 'int' '=='
|   | |   | |   |   | | |-ImplicitCastExpr 0x5608c1479a60 <col:15> 'const char *' <LValueToRValue>
|   | |   | |   |   | | | `-DeclRefExpr 0x5608c14798f8 <col:15> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   |   | | `-BinaryOperator 0x5608c1479a40 <col:21, col:47> 'const char *' '+'
|   | |   | |   |   | |   |-ImplicitCastExpr 0x5608c1479a10 <col:21> 'const char *' <LValueToRValue>
|   | |   | |   |   | |   | `-DeclRefExpr 0x5608c1479918 <col:21> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   |   | |   `-ImplicitCastExpr 0x5608c1479a28 <col:34, col:47> 'int' <LValueToRValue>
|   | |   | |   |   | |     `-ArraySubscriptExpr 0x5608c14799f0 <col:34, col:47> 'int' lvalue
|   | |   | |   |   | |       |-ImplicitCastExpr 0x5608c14799c0 <col:34, col:42> 'int *' <LValueToRValue>
|   | |   | |   |   | |       | `-MemberExpr 0x5608c1479970 <col:34, col:42> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |   |   | |       |   `-ImplicitCastExpr 0x5608c1479958 <col:34> 'OnigRegion *' <LValueToRValue>
|   | |   | |   |   | |       |     `-DeclRefExpr 0x5608c1479938 <col:34> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   |   | |       `-ImplicitCastExpr 0x5608c14799d8 <col:46> 'int' <LValueToRValue>
|   | |   | |   |   | |         `-DeclRefExpr 0x5608c14799a0 <col:46> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   |   | `-BinaryOperator 0x5608c1479b88 <col:50, col:65> 'unsigned long' ','
|   | |   | |   |   |   |-BinaryOperator 0x5608c1479af0 <col:50, col:56> 'unsigned long' '='
|   | |   | |   |   |   | |-DeclRefExpr 0x5608c1479a98 <col:50> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | |   |   |   | `-ImplicitCastExpr 0x5608c1479ad8 <col:56> 'unsigned long' <LValueToRValue>
|   | |   | |   |   |   |   `-DeclRefExpr 0x5608c1479ab8 <col:56> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | |   |   |   `-BinaryOperator 0x5608c1479b68 <col:61, col:65> 'unsigned long' '='
|   | |   | |   |   |     |-DeclRefExpr 0x5608c1479b10 <col:61> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | |   |   |     `-ImplicitCastExpr 0x5608c1479b50 <col:65> 'unsigned long' <IntegralCast>
|   | |   | |   |   |       `-IntegerLiteral 0x5608c1479b30 <col:65> 'int' 0
|   | |   | |   |   `-CompoundAssignOperator 0x5608c1479cb0 <line:973:11, col:43> 'const char *' '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   | |   | |   |     |-DeclRefExpr 0x5608c1479bc8 <col:11> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   |     `-CallExpr 0x5608c1479c70 <col:17, col:43> 'int'
|   | |   | |   |       |-ImplicitCastExpr 0x5608c1479c58 <col:17> 'int (*)(char)' <FunctionToPointerDecay>
|   | |   | |   |       | `-DeclRefExpr 0x5608c1479be8 <col:17> 'int (char)' Function 0x5608c14142b0 'jvp_utf8_decode_length' 'int (char)'
|   | |   | |   |       `-ImplicitCastExpr 0x5608c1479c98 <col:40, col:41> 'char' <LValueToRValue>
|   | |   | |   |         `-UnaryOperator 0x5608c1479c40 <col:40, col:41> 'const char' lvalue prefix '*' cannot overflow
|   | |   | |   |           `-ImplicitCastExpr 0x5608c1479c28 <col:41> 'const char *' <LValueToRValue>
|   | |   | |   |             `-DeclRefExpr 0x5608c1479c08 <col:41> 'const char *' lvalue Var 0x5608c1476980 'fr' 'const char *'
|   | |   | |   |-BinaryOperator 0x5608c1479f70 <line:976:9, col:44> 'unsigned long' '='
|   | |   | |   | |-DeclRefExpr 0x5608c1479d38 <col:9> 'unsigned long' lvalue Var 0x5608c14773e8 'blen' 'unsigned long'
|   | |   | |   | `-ImplicitCastExpr 0x5608c1479f58 <col:16, col:44> 'unsigned long' <IntegralCast>
|   | |   | |   |   `-BinaryOperator 0x5608c1479f38 <col:16, col:44> 'int' '-'
|   | |   | |   |     |-ImplicitCastExpr 0x5608c1479f08 <col:16, col:29> 'int' <LValueToRValue>
|   | |   | |   |     | `-ArraySubscriptExpr 0x5608c1479e10 <col:16, col:29> 'int' lvalue
|   | |   | |   |     |   |-ImplicitCastExpr 0x5608c1479de0 <col:16, col:24> 'int *' <LValueToRValue>
|   | |   | |   |     |   | `-MemberExpr 0x5608c1479d90 <col:16, col:24> 'int *' lvalue ->end 0x5608c1348880
|   | |   | |   |     |   |   `-ImplicitCastExpr 0x5608c1479d78 <col:16> 'OnigRegion *' <LValueToRValue>
|   | |   | |   |     |   |     `-DeclRefExpr 0x5608c1479d58 <col:16> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   |     |   `-ImplicitCastExpr 0x5608c1479df8 <col:28> 'int' <LValueToRValue>
|   | |   | |   |     |     `-DeclRefExpr 0x5608c1479dc0 <col:28> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   |     `-ImplicitCastExpr 0x5608c1479f20 <col:31, col:44> 'int' <LValueToRValue>
|   | |   | |   |       `-ArraySubscriptExpr 0x5608c1479ee8 <col:31, col:44> 'int' lvalue
|   | |   | |   |         |-ImplicitCastExpr 0x5608c1479eb8 <col:31, col:39> 'int *' <LValueToRValue>
|   | |   | |   |         | `-MemberExpr 0x5608c1479e68 <col:31, col:39> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |   |         |   `-ImplicitCastExpr 0x5608c1479e50 <col:31> 'OnigRegion *' <LValueToRValue>
|   | |   | |   |         |     `-DeclRefExpr 0x5608c1479e30 <col:31> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   |         `-ImplicitCastExpr 0x5608c1479ed0 <col:43> 'int' <LValueToRValue>
|   | |   | |   |           `-DeclRefExpr 0x5608c1479e98 <col:43> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   |-DeclStmt 0x5608c147a230 <line:977:9, col:81>
|   | |   | |   | `-VarDecl 0x5608c1479fa0 <col:9, col:80> col:12 used cap 'jv':'jv' cinit
|   | |   | |   |   `-CallExpr 0x5608c147a1f8 <col:18, col:80> 'jv':'jv'
|   | |   | |   |     |-ImplicitCastExpr 0x5608c147a1e0 <col:18> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |     | `-DeclRefExpr 0x5608c147a008 <col:18> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |     |-CallExpr 0x5608c147a060 <col:32, col:42> 'jv':'jv'
|   | |   | |   |     | `-ImplicitCastExpr 0x5608c147a048 <col:32> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |     |   `-DeclRefExpr 0x5608c147a028 <col:32> 'jv (void)' Function 0x5608c13e46d0 'jv_object' 'jv (void)'
|   | |   | |   |     |-CallExpr 0x5608c147a0d8 <col:45, col:63> 'jv':'jv'
|   | |   | |   |     | |-ImplicitCastExpr 0x5608c147a0c0 <col:45> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |     | | `-DeclRefExpr 0x5608c147a080 <col:45> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |     | `-ImplicitCastExpr 0x5608c147a118 <col:55> 'const char *' <NoOp>
|   | |   | |   |     |   `-ImplicitCastExpr 0x5608c147a100 <col:55> 'char *' <ArrayToPointerDecay>
|   | |   | |   |     |     `-StringLiteral 0x5608c147a0a0 <col:55> 'char [7]' lvalue "offset"
|   | |   | |   |     `-CallExpr 0x5608c147a188 <col:66, col:79> 'jv':'jv'
|   | |   | |   |       |-ImplicitCastExpr 0x5608c147a170 <col:66> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |   |       | `-DeclRefExpr 0x5608c147a130 <col:66> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |   |       `-ImplicitCastExpr 0x5608c147a1c8 <col:76> 'double' <IntegralToFloating>
|   | |   | |   |         `-ImplicitCastExpr 0x5608c147a1b0 <col:76> 'unsigned long' <LValueToRValue>
|   | |   | |   |           `-DeclRefExpr 0x5608c147a150 <col:76> 'unsigned long' lvalue Var 0x5608c1476850 'idx' 'unsigned long'
|   | |   | |   |-BinaryOperator 0x5608c147a488 <line:978:9, col:69> 'jv':'jv' '='
|   | |   | |   | |-DeclRefExpr 0x5608c147a248 <col:9> 'jv':'jv' lvalue Var 0x5608c1479fa0 'cap' 'jv':'jv'
|   | |   | |   | `-CallExpr 0x5608c147a438 <col:15, col:69> 'jv':'jv'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c147a420 <col:15> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | `-DeclRefExpr 0x5608c147a268 <col:15> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c147a470 <col:29> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x5608c147a288 <col:29> 'jv':'jv' lvalue Var 0x5608c1479fa0 'cap' 'jv':'jv'
|   | |   | |   |   |-CallExpr 0x5608c147a318 <col:34, col:52> 'jv':'jv'
|   | |   | |   |   | |-ImplicitCastExpr 0x5608c147a300 <col:34> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   | | `-DeclRefExpr 0x5608c147a2c0 <col:34> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   | `-ImplicitCastExpr 0x5608c147a358 <col:44> 'const char *' <NoOp>
|   | |   | |   |   |   `-ImplicitCastExpr 0x5608c147a340 <col:44> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |     `-StringLiteral 0x5608c147a2e0 <col:44> 'char [7]' lvalue "length"
|   | |   | |   |   `-CallExpr 0x5608c147a3c8 <col:55, col:68> 'jv':'jv'
|   | |   | |   |     |-ImplicitCastExpr 0x5608c147a3b0 <col:55> 'jv (*)(double)' <FunctionToPointerDecay>
|   | |   | |   |     | `-DeclRefExpr 0x5608c147a370 <col:55> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   | |   | |   |     `-ImplicitCastExpr 0x5608c147a408 <col:65> 'double' <IntegralToFloating>
|   | |   | |   |       `-ImplicitCastExpr 0x5608c147a3f0 <col:65> 'unsigned long' <LValueToRValue>
|   | |   | |   |         `-DeclRefExpr 0x5608c147a390 <col:65> 'unsigned long' lvalue Var 0x5608c14768e8 'len' 'unsigned long'
|   | |   | |   |-BinaryOperator 0x5608c147a820 <line:979:9, col:104> 'jv':'jv' '='
|   | |   | |   | |-DeclRefExpr 0x5608c147a4a8 <col:9> 'jv':'jv' lvalue Var 0x5608c1479fa0 'cap' 'jv':'jv'
|   | |   | |   | `-CallExpr 0x5608c147a7d0 <col:15, col:104> 'jv':'jv'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c147a7b8 <col:15> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | `-DeclRefExpr 0x5608c147a4c8 <col:15> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c147a808 <col:29> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x5608c147a4e8 <col:29> 'jv':'jv' lvalue Var 0x5608c1479fa0 'cap' 'jv':'jv'
|   | |   | |   |   |-CallExpr 0x5608c147a560 <col:34, col:52> 'jv':'jv'
|   | |   | |   |   | |-ImplicitCastExpr 0x5608c147a548 <col:34> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   | | `-DeclRefExpr 0x5608c147a508 <col:34> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   | `-ImplicitCastExpr 0x5608c147a5a0 <col:44> 'const char *' <NoOp>
|   | |   | |   |   |   `-ImplicitCastExpr 0x5608c147a588 <col:44> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |     `-StringLiteral 0x5608c147a528 <col:44> 'char [7]' lvalue "string"
|   | |   | |   |   `-CallExpr 0x5608c147a758 <col:55, col:103> 'jv':'jv'
|   | |   | |   |     |-ImplicitCastExpr 0x5608c147a740 <col:55> 'jv (*)(const char *, int)' <FunctionToPointerDecay>
|   | |   | |   |     | `-DeclRefExpr 0x5608c147a5b8 <col:55> 'jv (const char *, int)' Function 0x5608c13de3c8 'jv_string_sized' 'jv (const char *, int)'
|   | |   | |   |     |-BinaryOperator 0x5608c147a700 <col:71, col:97> 'const char *' '+'
|   | |   | |   |     | |-ImplicitCastExpr 0x5608c147a6d0 <col:71> 'const char *' <LValueToRValue>
|   | |   | |   |     | | `-DeclRefExpr 0x5608c147a5d8 <col:71> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |   |     | `-ImplicitCastExpr 0x5608c147a6e8 <col:84, col:97> 'int' <LValueToRValue>
|   | |   | |   |     |   `-ArraySubscriptExpr 0x5608c147a6b0 <col:84, col:97> 'int' lvalue
|   | |   | |   |     |     |-ImplicitCastExpr 0x5608c147a680 <col:84, col:92> 'int *' <LValueToRValue>
|   | |   | |   |     |     | `-MemberExpr 0x5608c147a630 <col:84, col:92> 'int *' lvalue ->beg 0x5608c1348818
|   | |   | |   |     |     |   `-ImplicitCastExpr 0x5608c147a618 <col:84> 'OnigRegion *' <LValueToRValue>
|   | |   | |   |     |     |     `-DeclRefExpr 0x5608c147a5f8 <col:84> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |   |     |     `-ImplicitCastExpr 0x5608c147a698 <col:96> 'int' <LValueToRValue>
|   | |   | |   |     |       `-DeclRefExpr 0x5608c147a660 <col:96> 'int' lvalue Var 0x5608c1477d18 'i' 'int'
|   | |   | |   |     `-ImplicitCastExpr 0x5608c147a7a0 <col:99> 'int' <IntegralCast>
|   | |   | |   |       `-ImplicitCastExpr 0x5608c147a788 <col:99> 'unsigned long' <LValueToRValue>
|   | |   | |   |         `-DeclRefExpr 0x5608c147a720 <col:99> 'unsigned long' lvalue Var 0x5608c14773e8 'blen' 'unsigned long'
|   | |   | |   |-BinaryOperator 0x5608c147aa10 <line:980:9, col:62> 'jv':'jv' '='
|   | |   | |   | |-DeclRefExpr 0x5608c147a840 <col:9> 'jv':'jv' lvalue Var 0x5608c1479fa0 'cap' 'jv':'jv'
|   | |   | |   | `-CallExpr 0x5608c147a9c0 <col:15, col:62> 'jv':'jv'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c147a9a8 <col:15> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   |   | `-DeclRefExpr 0x5608c147a860 <col:15> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |   |-ImplicitCastExpr 0x5608c147a9f8 <col:29> 'jv':'jv' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x5608c147a880 <col:29> 'jv':'jv' lvalue Var 0x5608c1479fa0 'cap' 'jv':'jv'
|   | |   | |   |   |-CallExpr 0x5608c147a8f8 <col:34, col:50> 'jv':'jv'
|   | |   | |   |   | |-ImplicitCastExpr 0x5608c147a8e0 <col:34> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   |   | | `-DeclRefExpr 0x5608c147a8a0 <col:34> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   |   | `-ImplicitCastExpr 0x5608c147a938 <col:44> 'const char *' <NoOp>
|   | |   | |   |   |   `-ImplicitCastExpr 0x5608c147a920 <col:44> 'char *' <ArrayToPointerDecay>
|   | |   | |   |   |     `-StringLiteral 0x5608c147a8c0 <col:44> 'char [5]' lvalue "name"
|   | |   | |   |   `-CallExpr 0x5608c147a988 <col:53, col:61> 'jv':'jv'
|   | |   | |   |     `-ImplicitCastExpr 0x5608c147a970 <col:53> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   | |   |       `-DeclRefExpr 0x5608c147a950 <col:53> 'jv (void)' Function 0x5608c13db090 'jv_null' 'jv (void)'
|   | |   | |   `-BinaryOperator 0x5608c147ab28 <line:981:9, col:48> 'jv':'jv' '='
|   | |   | |     |-DeclRefExpr 0x5608c147aa30 <col:9> 'jv':'jv' lvalue Var 0x5608c1477c28 'captures' 'jv':'jv'
|   | |   | |     `-CallExpr 0x5608c147aac8 <col:20, col:48> 'jv':'jv'
|   | |   | |       |-ImplicitCastExpr 0x5608c147aab0 <col:20> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   | |   | |       | `-DeclRefExpr 0x5608c147aa50 <col:20> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   | |   | |       |-ImplicitCastExpr 0x5608c147aaf8 <col:36> 'jv':'jv' <LValueToRValue>
|   | |   | |       | `-DeclRefExpr 0x5608c147aa70 <col:36> 'jv':'jv' lvalue Var 0x5608c1477c28 'captures' 'jv':'jv'
|   | |   | |       `-ImplicitCastExpr 0x5608c147ab10 <col:45> 'jv':'jv' <LValueToRValue>
|   | |   | |         `-DeclRefExpr 0x5608c147aa90 <col:45> 'jv':'jv' lvalue Var 0x5608c1479fa0 'cap' 'jv':'jv'
|   | |   | |-CallExpr 0x5608c147ace0 <line:983:7, col:56> 'int'
|   | |   | | |-ImplicitCastExpr 0x5608c147acc8 <col:7> 'int (*)(OnigRegex, int (*)(const OnigUChar *, const OnigUChar *, int, int *, OnigRegex, void *), void *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x5608c147abd8 <col:7> 'int (OnigRegex, int (*)(const OnigUChar *, const OnigUChar *, int, int *, OnigRegex, void *), void *)' Function 0x5608c1363700 'onig_foreach_name' 'int (OnigRegex, int (*)(const OnigUChar *, const OnigUChar *, int, int *, OnigRegex, void *), void *)'
|   | |   | | |-ImplicitCastExpr 0x5608c147ad18 <col:25> 'regex_t *' <LValueToRValue>
|   | |   | | | `-DeclRefExpr 0x5608c147abf8 <col:25> 'regex_t *' lvalue Var 0x5608c1470858 'reg' 'regex_t *'
|   | |   | | |-ImplicitCastExpr 0x5608c147ad58 <col:29> 'int (*)(const OnigUChar *, const OnigUChar *, int, int *, regex_t *, void *)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x5608c147ac18 <col:29> 'int (const OnigUChar *, const OnigUChar *, int, int *, regex_t *, void *)' Function 0x5608c146f250 'f_match_name_iter' 'int (const OnigUChar *, const OnigUChar *, int, int *, regex_t *, void *)'
|   | |   | | `-ImplicitCastExpr 0x5608c147ad70 <col:47, col:48> 'void *' <BitCast>
|   | |   | |   `-UnaryOperator 0x5608c147ac58 <col:47, col:48> 'jv *' prefix '&' cannot overflow
|   | |   | |     `-DeclRefExpr 0x5608c147ac38 <col:48> 'jv':'jv' lvalue Var 0x5608c1477c28 'captures' 'jv':'jv'
|   | |   | |-BinaryOperator 0x5608c147af38 <line:984:7, col:67> 'jv':'jv' '='
|   | |   | | |-DeclRefExpr 0x5608c147ad88 <col:7> 'jv':'jv' lvalue Var 0x5608c1477128 'match' 'jv':'jv'
|   | |   | | `-CallExpr 0x5608c147aed0 <col:15, col:67> 'jv':'jv'
|   | |   | |   |-ImplicitCastExpr 0x5608c147aeb8 <col:15> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   | |   | |   | `-DeclRefExpr 0x5608c147ada8 <col:15> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   | |   | |   |-ImplicitCastExpr 0x5608c147af08 <col:29> 'jv':'jv' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x5608c147adc8 <col:29> 'jv':'jv' lvalue Var 0x5608c1477128 'match' 'jv':'jv'
|   | |   | |   |-CallExpr 0x5608c147ae40 <col:36, col:56> 'jv':'jv'
|   | |   | |   | |-ImplicitCastExpr 0x5608c147ae28 <col:36> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |   | |   | | `-DeclRefExpr 0x5608c147ade8 <col:36> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |   | |   | `-ImplicitCastExpr 0x5608c147ae80 <col:46> 'const char *' <NoOp>
|   | |   | |   |   `-ImplicitCastExpr 0x5608c147ae68 <col:46> 'char *' <ArrayToPointerDecay>
|   | |   | |   |     `-StringLiteral 0x5608c147ae08 <col:46> 'char [9]' lvalue "captures"
|   | |   | |   `-ImplicitCastExpr 0x5608c147af20 <col:59> 'jv':'jv' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x5608c147ae98 <col:59> 'jv':'jv' lvalue Var 0x5608c1477c28 'captures' 'jv':'jv'
|   | |   | |-BinaryOperator 0x5608c147b050 <line:985:7, col:45> 'jv':'jv' '='
|   | |   | | |-DeclRefExpr 0x5608c147af58 <col:7> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|   | |   | | `-CallExpr 0x5608c147aff0 <col:16, col:45> 'jv':'jv'
|   | |   | |   |-ImplicitCastExpr 0x5608c147afd8 <col:16> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   | |   | |   | `-DeclRefExpr 0x5608c147af78 <col:16> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   | |   | |   |-ImplicitCastExpr 0x5608c147b020 <col:32> 'jv':'jv' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x5608c147af98 <col:32> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|   | |   | |   `-ImplicitCastExpr 0x5608c147b038 <col:40> 'jv':'jv' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x5608c147afb8 <col:40> 'jv':'jv' lvalue Var 0x5608c1477128 'match' 'jv':'jv'
|   | |   | |-BinaryOperator 0x5608c147b238 <line:986:7, col:57> 'const OnigUChar *' '='
|   | |   | | |-DeclRefExpr 0x5608c147b070 <col:7> 'const OnigUChar *' lvalue Var 0x5608c1474988 'start' 'const OnigUChar *'
|   | |   | | `-CStyleCastExpr 0x5608c147b210 <col:15, col:57> 'const OnigUChar *' <BitCast>
|   | |   | |   `-ParenExpr 0x5608c147b1f0 <col:29, col:57> 'const char *'
|   | |   | |     `-BinaryOperator 0x5608c147b1a0 <col:30, col:56> 'const char *' '+'
|   | |   | |       |-ImplicitCastExpr 0x5608c147b170 <col:30> 'const char *' <LValueToRValue>
|   | |   | |       | `-DeclRefExpr 0x5608c147b090 <col:30> 'const char *' lvalue Var 0x5608c1474860 'input_string' 'const char *'
|   | |   | |       `-ImplicitCastExpr 0x5608c147b188 <col:43, col:56> 'int' <LValueToRValue>
|   | |   | |         `-ArraySubscriptExpr 0x5608c147b150 <col:43, col:56> 'int' lvalue
|   | |   | |           |-ImplicitCastExpr 0x5608c147b138 <col:43, col:51> 'int *' <LValueToRValue>
|   | |   | |           | `-MemberExpr 0x5608c147b0e8 <col:43, col:51> 'int *' lvalue ->end 0x5608c1348880
|   | |   | |           |   `-ImplicitCastExpr 0x5608c147b0d0 <col:43> 'OnigRegion *' <LValueToRValue>
|   | |   | |           |     `-DeclRefExpr 0x5608c147b0b0 <col:43> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   | |           `-IntegerLiteral 0x5608c147b118 <col:55> 'int' 0
|   | |   | `-CallExpr 0x5608c147b330 <line:987:7, col:32> 'void'
|   | |   |   |-ImplicitCastExpr 0x5608c147b318 <col:7> 'void (*)(OnigRegion *, int)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x5608c147b258 <col:7> 'void (OnigRegion *, int)' Function 0x5608c1360e88 'onig_region_free' 'void (OnigRegion *, int)'
|   | |   |   |-ImplicitCastExpr 0x5608c147b360 <col:24> 'OnigRegion *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x5608c147b278 <col:24> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | |   |   `-IntegerLiteral 0x5608c147b298 <col:31> 'int' 0
|   | |   `-IfStmt 0x5608c147ba40 <line:988:12, line:997:5> has_else
|   | |     |-BinaryOperator 0x5608c147b480 <line:988:16, ./modules/oniguruma/src/oniguruma.h:535:64> 'int' '=='
|   | |     | |-ImplicitCastExpr 0x5608c147b468 <src/builtin.c:988:16> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x5608c147b410 <col:16> 'int' lvalue Var 0x5608c1470710 'onigret' 'int'
|   | |     | `-UnaryOperator 0x5608c147b450 <./modules/oniguruma/src/oniguruma.h:535:63, col:64> 'int' prefix '-'
|   | |     |   `-IntegerLiteral 0x5608c147b430 <col:64> 'int' 1
|   | |     |-CompoundStmt 0x5608c147b4a8 <src/builtin.c:988:42, line:990:5>
|   | |     | `-BreakStmt 0x5608c147b4a0 <line:989:7>
|   | |     `-CompoundStmt 0x5608c147ba08 <line:990:12, line:997:5>
|   | |       |-DeclStmt 0x5608c147b588 <./modules/oniguruma/src/oniguruma.h:96:15, src/builtin.c:991:45>
|   | |       | `-VarDecl 0x5608c147b520 <./modules/oniguruma/src/oniguruma.h:96:15, src/builtin.c:991:44> col:13 used ebuf 'OnigUChar [90]'
|   | |       |-CallExpr 0x5608c147b650 <line:992:7, col:51> 'int'
|   | |       | |-ImplicitCastExpr 0x5608c147b638 <col:7> 'int (*)()' <FunctionToPointerDecay>
|   | |       | | `-DeclRefExpr 0x5608c147b5a0 <col:7> 'int ()' Function 0x5608c135d6f0 'onig_error_code_to_str' 'int ()'
|   | |       | |-ImplicitCastExpr 0x5608c147b688 <col:30> 'OnigUChar *' <ArrayToPointerDecay>
|   | |       | | `-DeclRefExpr 0x5608c147b5c0 <col:30> 'OnigUChar [90]' lvalue Var 0x5608c147b520 'ebuf' 'OnigUChar [90]'
|   | |       | |-ImplicitCastExpr 0x5608c147b6a0 <col:36> 'int' <LValueToRValue>
|   | |       | | `-DeclRefExpr 0x5608c147b5e0 <col:36> 'int' lvalue Var 0x5608c1470710 'onigret' 'int'
|   | |       | `-UnaryOperator 0x5608c147b620 <col:45, col:46> 'OnigErrorInfo *' prefix '&' cannot overflow
|   | |       |   `-DeclRefExpr 0x5608c147b600 <col:46> 'OnigErrorInfo':'OnigErrorInfo' lvalue Var 0x5608c14708e8 'einfo' 'OnigErrorInfo':'OnigErrorInfo'
|   | |       |-CallExpr 0x5608c147b710 <line:993:7, col:21> 'void'
|   | |       | |-ImplicitCastExpr 0x5608c147b6f8 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |       | | `-DeclRefExpr 0x5608c147b6b8 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |       | `-ImplicitCastExpr 0x5608c147b738 <col:15> 'jv':'jv' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x5608c147b6d8 <col:15> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|   | |       |-BinaryOperator 0x5608c147b9e0 <line:994:7, line:995:36> 'jv':'jv' '='
|   | |       | |-DeclRefExpr 0x5608c147b750 <line:994:7> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|   | |       | `-CallExpr 0x5608c147b9b8 <col:16, line:995:36> 'jv':'jv'
|   | |       |   |-ImplicitCastExpr 0x5608c147b9a0 <line:994:16> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | |       |   | `-DeclRefExpr 0x5608c147b770 <col:16> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   | |       |   `-CallExpr 0x5608c147b970 <col:36, line:995:35> 'jv':'jv'
|   | |       |     |-ImplicitCastExpr 0x5608c147b958 <line:994:36> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   | |       |     | `-DeclRefExpr 0x5608c147b790 <col:36> 'jv (jv, jv)' Function 0x5608c13df0c0 'jv_string_concat' 'jv (jv, jv)'
|   | |       |     |-CallExpr 0x5608c147b810 <col:53, col:80> 'jv':'jv'
|   | |       |     | |-ImplicitCastExpr 0x5608c147b7f8 <col:53> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |       |     | | `-DeclRefExpr 0x5608c147b7b0 <col:53> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |       |     | `-ImplicitCastExpr 0x5608c147b850 <col:63> 'const char *' <NoOp>
|   | |       |     |   `-ImplicitCastExpr 0x5608c147b838 <col:63> 'char *' <ArrayToPointerDecay>
|   | |       |     |     `-StringLiteral 0x5608c147b7d0 <col:63> 'char [16]' lvalue "Regex failure: "
|   | |       |     `-CallExpr 0x5608c147b918 <line:995:13, col:34> 'jv':'jv'
|   | |       |       |-ImplicitCastExpr 0x5608c147b900 <col:13> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   | |       |       | `-DeclRefExpr 0x5608c147b868 <col:13> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   | |       |       `-ImplicitCastExpr 0x5608c147b940 <col:23, col:30> 'const char *' <NoOp>
|   | |       |         `-CStyleCastExpr 0x5608c147b8d8 <col:23, col:30> 'char *' <BitCast>
|   | |       |           `-ImplicitCastExpr 0x5608c147b8c0 <col:30> 'OnigUChar *' <ArrayToPointerDecay> part_of_explicit_cast
|   | |       |             `-DeclRefExpr 0x5608c147b888 <col:30> 'OnigUChar [90]' lvalue Var 0x5608c147b520 'ebuf' 'OnigUChar [90]'
|   | |       `-BreakStmt 0x5608c147ba00 <line:996:7>
|   | `-BinaryOperator 0x5608c147bb88 <line:998:12, col:31> 'int' '&&'
|   |   |-ImplicitCastExpr 0x5608c147bb70 <col:12> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5608c147bac0 <col:12> 'int' lvalue Var 0x5608c14707a8 'global' 'int'
|   |   `-BinaryOperator 0x5608c147bb50 <col:22, col:31> 'int' '!='
|   |     |-ImplicitCastExpr 0x5608c147bb20 <col:22> 'const OnigUChar *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c147bae0 <col:22> 'const OnigUChar *' lvalue Var 0x5608c1474988 'start' 'const OnigUChar *'
|   |     `-ImplicitCastExpr 0x5608c147bb38 <col:31> 'const OnigUChar *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c147bb00 <col:31> 'const OnigUChar *' lvalue Var 0x5608c1474c90 'end' 'const OnigUChar *'
|   |-CallExpr 0x5608c147bc40 <line:999:3, col:28> 'void'
|   | |-ImplicitCastExpr 0x5608c147bc28 <col:3> 'void (*)(OnigRegion *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c147bbc8 <col:3> 'void (OnigRegion *, int)' Function 0x5608c1360e88 'onig_region_free' 'void (OnigRegion *, int)'
|   | |-ImplicitCastExpr 0x5608c147bc70 <col:20> 'OnigRegion *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5608c147bbe8 <col:20> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | `-IntegerLiteral 0x5608c147bc08 <col:27> 'int' 1
|   |-BinaryOperator 0x5608c147bd40 <line:1000:3, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'OnigRegion *' '='
|   | |-DeclRefExpr 0x5608c147bc88 <src/builtin.c:1000:3> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | `-ImplicitCastExpr 0x5608c147bd28 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'OnigRegion *' <NullToPointer>
|   |   `-ParenExpr 0x5608c147bd08 <col:16, col:25> 'void *'
|   |     `-CStyleCastExpr 0x5608c147bce0 <col:17, col:24> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x5608c147bca8 <col:24> 'int' 0
|   |-IfStmt 0x5608c147be58 <src/builtin.c:1001:3, line:1002:30>
|   | |-ImplicitCastExpr 0x5608c147bd80 <line:1001:7> 'OnigRegion *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5608c147bd60 <col:7> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   | `-CallExpr 0x5608c147be10 <line:1002:5, col:30> 'void'
|   |   |-ImplicitCastExpr 0x5608c147bdf8 <col:5> 'void (*)(OnigRegion *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5608c147bd98 <col:5> 'void (OnigRegion *, int)' Function 0x5608c1360e88 'onig_region_free' 'void (OnigRegion *, int)'
|   |   |-ImplicitCastExpr 0x5608c147be40 <col:22> 'OnigRegion *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5608c147bdb8 <col:22> 'OnigRegion *' lvalue Var 0x5608c1470978 'region' 'OnigRegion *'
|   |   `-IntegerLiteral 0x5608c147bdd8 <col:29> 'int' 1
|   |-CallExpr 0x5608c147bf30 <line:1003:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c147bf18 <col:3> 'void (*)(OnigRegex)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c147be78 <col:3> 'void (OnigRegex)' Function 0x5608c135f438 'onig_free' 'void (OnigRegex)'
|   | `-ImplicitCastExpr 0x5608c147bf58 <col:13> 'regex_t *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c147be98 <col:13> 'regex_t *' lvalue Var 0x5608c1470858 'reg' 'regex_t *'
|   |-CallExpr 0x5608c147bfc8 <line:1004:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c147bfb0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c147bf70 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c147bff0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c147bf90 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14701f8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c147c060 <line:1005:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c147c048 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c147c008 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c147c088 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c147c028 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1470270 'regex' 'jv':'jv'
|   `-ReturnStmt 0x5608c147c0d8 <line:1006:3, col:10>
|     `-ImplicitCastExpr 0x5608c147c0c0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c147c0a0 <col:10> 'jv':'jv' lvalue Var 0x5608c1470678 'result' 'jv':'jv'
|-FunctionDecl 0x5608c147c458 <line:1014:1, line:1045:1> line:1014:11 used minmax_by 'jv (jv, jv, int)' static
| |-ParmVarDecl 0x5608c147c238 <col:21, col:24> col:24 used values 'jv':'jv'
| |-ParmVarDecl 0x5608c147c2b0 <col:32, col:35> col:35 used keys 'jv':'jv'
| |-ParmVarDecl 0x5608c147c330 <col:41, col:45> col:45 used is_min 'int'
| `-CompoundStmt 0x5608c1482200 <col:53, line:1045:1>
|   |-IfStmt 0x5608c147c7a8 <line:1015:3, line:1016:63>
|   | |-BinaryOperator 0x5608c147c5f8 <line:1015:7, col:30> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c147c5c8 <col:7, col:25> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c147c568 <col:7, col:25> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c147c550 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c147c510 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c147c590 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c147c530 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c147c5e0 <col:30> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c147c5a8 <col:30> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|   | `-ReturnStmt 0x5608c147c798 <line:1016:5, col:63>
|   |   `-CallExpr 0x5608c147c700 <col:12, col:63> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c147c6e8 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c147c618 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|   |     |-ImplicitCastExpr 0x5608c147c738 <col:24> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c147c638 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c147c750 <col:32> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c147c658 <col:32> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c147c780 <col:38> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x5608c147c768 <col:38> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x5608c147c6b8 <col:38> 'char [24]' lvalue "cannot be iterated over"
|   |-IfStmt 0x5608c147ca20 <line:1017:3, line:1018:63>
|   | |-BinaryOperator 0x5608c147c8b0 <line:1017:7, col:28> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c147c880 <col:7, col:23> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c147c820 <col:7, col:23> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c147c808 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c147c7c8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c147c848 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c147c7e8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c147c898 <col:28> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c147c860 <col:28> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|   | `-ReturnStmt 0x5608c147ca10 <line:1018:5, col:63>
|   |   `-CallExpr 0x5608c147c978 <col:12, col:63> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c147c960 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c147c8d0 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|   |     |-ImplicitCastExpr 0x5608c147c9b0 <col:24> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c147c8f0 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c147c9c8 <col:32> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c147c910 <col:32> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c147c9f8 <col:38> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x5608c147c9e0 <col:38> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x5608c147c930 <col:38> 'char [24]' lvalue "cannot be iterated over"
|   |-IfStmt 0x5608c147cda0 <line:1019:3, line:1020:57>
|   | |-BinaryOperator 0x5608c147cc30 <line:1019:7, col:72> 'int' '!='
|   | | |-CallExpr 0x5608c147cb10 <col:7, col:38> 'int'
|   | | | |-ImplicitCastExpr 0x5608c147caf8 <col:7> 'int (*)(jv)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5608c147ca40 <col:7> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|   | | | `-CallExpr 0x5608c147cab8 <col:23, col:37> 'jv':'jv'
|   | | |   |-ImplicitCastExpr 0x5608c147caa0 <col:23> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c147ca60 <col:23> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c147cae0 <col:31> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c147ca80 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   | | `-CallExpr 0x5608c147cc08 <col:43, col:72> 'int'
|   | |   |-ImplicitCastExpr 0x5608c147cbf0 <col:43> 'int (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c147cb38 <col:43> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|   | |   `-CallExpr 0x5608c147cbb0 <col:59, col:71> 'jv':'jv'
|   | |     |-ImplicitCastExpr 0x5608c147cb98 <col:59> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x5608c147cb58 <col:59> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | |     `-ImplicitCastExpr 0x5608c147cbd8 <col:67> 'jv':'jv' <LValueToRValue>
|   | |       `-DeclRefExpr 0x5608c147cb78 <col:67> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   | `-ReturnStmt 0x5608c147cd90 <line:1020:5, col:57>
|   |   `-CallExpr 0x5608c147ccf8 <col:12, col:57> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c147cce0 <col:12> 'jv (*)(jv, jv, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c147cc50 <col:12> 'jv (jv, jv, const char *)' Function 0x5608c1418e18 'type_error2' 'jv (jv, jv, const char *)'
|   |     |-ImplicitCastExpr 0x5608c147cd30 <col:24> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c147cc70 <col:24> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c147cd48 <col:32> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c147cc90 <col:32> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c147cd78 <col:38> 'const char *' <NoOp>
|   |       `-ImplicitCastExpr 0x5608c147cd60 <col:38> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x5608c147ccb0 <col:38> 'char [18]' lvalue "have wrong length"
|   |-IfStmt 0x5608c147d0b8 <line:1022:3, line:1026:3>
|   | |-BinaryOperator 0x5608c147ced8 <line:1022:7, col:43> 'int' '=='
|   | | |-CallExpr 0x5608c147ce90 <col:7, col:38> 'int'
|   | | | |-ImplicitCastExpr 0x5608c147ce78 <col:7> 'int (*)(jv)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5608c147cdc0 <col:7> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|   | | | `-CallExpr 0x5608c147ce38 <col:23, col:37> 'jv':'jv'
|   | | |   |-ImplicitCastExpr 0x5608c147ce20 <col:23> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c147cde0 <col:23> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c147ce60 <col:31> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c147ce00 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   | | `-IntegerLiteral 0x5608c147ceb8 <col:43> 'int' 0
|   | `-CompoundStmt 0x5608c147d090 <col:46, line:1026:3>
|   |   |-CallExpr 0x5608c147cf50 <line:1023:5, col:19> 'void'
|   |   | |-ImplicitCastExpr 0x5608c147cf38 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c147cef8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c147cf78 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c147cf18 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   |   |-CallExpr 0x5608c147cfe8 <line:1024:5, col:17> 'void'
|   |   | |-ImplicitCastExpr 0x5608c147cfd0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c147cf90 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c147d010 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c147cfb0 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c147d080 <line:1025:5, col:20>
|   |     `-CallExpr 0x5608c147d060 <col:12, col:20> 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c147d048 <col:12> 'jv (*)(void)' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5608c147d028 <col:12> 'jv (void)' Function 0x5608c13db090 'jv_null' 'jv (void)'
|   |-DeclStmt 0x5608c147d270 <line:1027:3, col:44>
|   | `-VarDecl 0x5608c147d0e8 <col:3, col:43> col:6 used ret 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c147d240 <col:12, col:43> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c147d228 <col:12> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c147d150 <col:12> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   |     |-CallExpr 0x5608c147d1c8 <col:25, col:39> 'jv':'jv'
|   |     | |-ImplicitCastExpr 0x5608c147d1b0 <col:25> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c147d170 <col:25> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |     | `-ImplicitCastExpr 0x5608c147d1f0 <col:33> 'jv':'jv' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c147d190 <col:33> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   |     `-IntegerLiteral 0x5608c147d208 <col:42> 'int' 0
|   |-DeclStmt 0x5608c147d420 <line:1028:3, col:45>
|   | `-VarDecl 0x5608c147d298 <col:3, col:44> col:6 used retkey 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c147d3f0 <col:15, col:44> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c147d3d8 <col:15> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c147d300 <col:15> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   |     |-CallExpr 0x5608c147d378 <col:28, col:40> 'jv':'jv'
|   |     | |-ImplicitCastExpr 0x5608c147d360 <col:28> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c147d320 <col:28> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |     | `-ImplicitCastExpr 0x5608c147d3a0 <col:36> 'jv':'jv' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c147d340 <col:36> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   |     `-IntegerLiteral 0x5608c147d3b8 <col:43> 'int' 0
|   |-ForStmt 0x5608c147e018 <line:1029:3, line:1040:3>
|   | |-DeclStmt 0x5608c147d4d8 <line:1029:8, col:15>
|   | | `-VarDecl 0x5608c147d450 <col:8, col:14> col:12 used i 'int' cinit
|   | |   `-IntegerLiteral 0x5608c147d4b8 <col:14> 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5608c147d620 <col:17, col:50> 'int' '<'
|   | | |-ImplicitCastExpr 0x5608c147d608 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c147d4f0 <col:17> 'int' lvalue Var 0x5608c147d450 'i' 'int'
|   | | `-CallExpr 0x5608c147d5e0 <col:19, col:50> 'int'
|   | |   |-ImplicitCastExpr 0x5608c147d5c8 <col:19> 'int (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c147d510 <col:19> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|   | |   `-CallExpr 0x5608c147d588 <col:35, col:49> 'jv':'jv'
|   | |     |-ImplicitCastExpr 0x5608c147d570 <col:35> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x5608c147d530 <col:35> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | |     `-ImplicitCastExpr 0x5608c147d5b0 <col:43> 'jv':'jv' <LValueToRValue>
|   | |       `-DeclRefExpr 0x5608c147d550 <col:43> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   | |-UnaryOperator 0x5608c147d660 <col:53, col:54> 'int' postfix '++'
|   | | `-DeclRefExpr 0x5608c147d640 <col:53> 'int' lvalue Var 0x5608c147d450 'i' 'int'
|   | `-CompoundStmt 0x5608c147dff0 <col:58, line:1040:3>
|   |   |-DeclStmt 0x5608c147d828 <line:1030:5, col:45>
|   |   | `-VarDecl 0x5608c147d688 <col:5, col:44> col:8 used item 'jv':'jv' cinit
|   |   |   `-CallExpr 0x5608c147d7e0 <col:15, col:44> 'jv':'jv'
|   |   |     |-ImplicitCastExpr 0x5608c147d7c8 <col:15> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x5608c147d6f0 <col:15> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   |   |     |-CallExpr 0x5608c147d768 <col:28, col:40> 'jv':'jv'
|   |   |     | |-ImplicitCastExpr 0x5608c147d750 <col:28> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x5608c147d710 <col:28> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |   |     | `-ImplicitCastExpr 0x5608c147d790 <col:36> 'jv':'jv' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x5608c147d730 <col:36> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   |   |     `-ImplicitCastExpr 0x5608c147d810 <col:43> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x5608c147d7a8 <col:43> 'int' lvalue Var 0x5608c147d450 'i' 'int'
|   |   |-DeclStmt 0x5608c147da58 <line:1031:5, col:53>
|   |   | `-VarDecl 0x5608c147d858 <col:5, col:52> col:9 used cmp 'int' cinit
|   |   |   `-CallExpr 0x5608c147da28 <col:15, col:52> 'int'
|   |   |     |-ImplicitCastExpr 0x5608c147da10 <col:15> 'int (*)(jv, jv)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x5608c147d8c0 <col:15> 'int (jv, jv)' Function 0x5608c13f60d8 'jv_cmp' 'int (jv, jv)'
|   |   |     |-CallExpr 0x5608c147d938 <col:22, col:34> 'jv':'jv'
|   |   |     | |-ImplicitCastExpr 0x5608c147d920 <col:22> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x5608c147d8e0 <col:22> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |   |     | `-ImplicitCastExpr 0x5608c147d960 <col:30> 'jv':'jv' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x5608c147d900 <col:30> 'jv':'jv' lvalue Var 0x5608c147d688 'item' 'jv':'jv'
|   |   |     `-CallExpr 0x5608c147d9d0 <col:37, col:51> 'jv':'jv'
|   |   |       |-ImplicitCastExpr 0x5608c147d9b8 <col:37> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5608c147d978 <col:37> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |   |       `-ImplicitCastExpr 0x5608c147d9f8 <col:45> 'jv':'jv' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x5608c147d998 <col:45> 'jv':'jv' lvalue Var 0x5608c147d298 'retkey' 'jv':'jv'
|   |   `-IfStmt 0x5608c147dfc0 <line:1032:5, line:1039:5> has_else
|   |     |-BinaryOperator 0x5608c147dba0 <line:1032:9, col:34> 'int' '=='
|   |     | |-ParenExpr 0x5608c147dae8 <col:9, col:17> 'int'
|   |     | | `-BinaryOperator 0x5608c147dac8 <col:10, col:16> 'int' '<'
|   |     | |   |-ImplicitCastExpr 0x5608c147dab0 <col:10> 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x5608c147da70 <col:10> 'int' lvalue Var 0x5608c147d858 'cmp' 'int'
|   |     | |   `-IntegerLiteral 0x5608c147da90 <col:16> 'int' 0
|   |     | `-ParenExpr 0x5608c147db80 <col:22, col:34> 'int'
|   |     |   `-BinaryOperator 0x5608c147db60 <col:23, col:33> 'int' '=='
|   |     |     |-ImplicitCastExpr 0x5608c147db48 <col:23> 'int' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x5608c147db08 <col:23> 'int' lvalue ParmVar 0x5608c147c330 'is_min' 'int'
|   |     |     `-IntegerLiteral 0x5608c147db28 <col:33> 'int' 1
|   |     |-CompoundStmt 0x5608c147dee0 <col:37, line:1037:5>
|   |     | |-CallExpr 0x5608c147dc18 <line:1033:7, col:21> 'void'
|   |     | | |-ImplicitCastExpr 0x5608c147dc00 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5608c147dbc0 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |     | | `-ImplicitCastExpr 0x5608c147dc40 <col:15> 'jv':'jv' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5608c147dbe0 <col:15> 'jv':'jv' lvalue Var 0x5608c147d298 'retkey' 'jv':'jv'
|   |     | |-BinaryOperator 0x5608c147dcb0 <line:1034:7, col:16> 'jv':'jv' '='
|   |     | | |-DeclRefExpr 0x5608c147dc58 <col:7> 'jv':'jv' lvalue Var 0x5608c147d298 'retkey' 'jv':'jv'
|   |     | | `-ImplicitCastExpr 0x5608c147dc98 <col:16> 'jv':'jv' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5608c147dc78 <col:16> 'jv':'jv' lvalue Var 0x5608c147d688 'item' 'jv':'jv'
|   |     | |-CallExpr 0x5608c147dd28 <line:1035:7, col:18> 'void'
|   |     | | |-ImplicitCastExpr 0x5608c147dd10 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x5608c147dcd0 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |     | | `-ImplicitCastExpr 0x5608c147dd50 <col:15> 'jv':'jv' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5608c147dcf0 <col:15> 'jv':'jv' lvalue Var 0x5608c147d0e8 'ret' 'jv':'jv'
|   |     | `-BinaryOperator 0x5608c147dec0 <line:1036:7, col:44> 'jv':'jv' '='
|   |     |   |-DeclRefExpr 0x5608c147dd68 <col:7> 'jv':'jv' lvalue Var 0x5608c147d0e8 'ret' 'jv':'jv'
|   |     |   `-CallExpr 0x5608c147de78 <col:13, col:44> 'jv':'jv'
|   |     |     |-ImplicitCastExpr 0x5608c147de60 <col:13> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   |     |     | `-DeclRefExpr 0x5608c147dd88 <col:13> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   |     |     |-CallExpr 0x5608c147de00 <col:26, col:40> 'jv':'jv'
|   |     |     | |-ImplicitCastExpr 0x5608c147dde8 <col:26> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     |     | | `-DeclRefExpr 0x5608c147dda8 <col:26> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |     |     | `-ImplicitCastExpr 0x5608c147de28 <col:34> 'jv':'jv' <LValueToRValue>
|   |     |     |   `-DeclRefExpr 0x5608c147ddc8 <col:34> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   |     |     `-ImplicitCastExpr 0x5608c147dea8 <col:43> 'int' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5608c147de40 <col:43> 'int' lvalue Var 0x5608c147d450 'i' 'int'
|   |     `-CompoundStmt 0x5608c147dfa8 <line:1037:12, line:1039:5>
|   |       `-CallExpr 0x5608c147df68 <line:1038:7, col:19> 'void'
|   |         |-ImplicitCastExpr 0x5608c147df50 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c147df10 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |         `-ImplicitCastExpr 0x5608c147df90 <col:15> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c147df30 <col:15> 'jv':'jv' lvalue Var 0x5608c147d688 'item' 'jv':'jv'
|   |-CallExpr 0x5608c147e0a8 <line:1041:3, col:17> 'void'
|   | |-ImplicitCastExpr 0x5608c147e090 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c147e050 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c147e0d0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c147e070 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c147c238 'values' 'jv':'jv'
|   |-CallExpr 0x5608c147e140 <line:1042:3, col:15> 'void'
|   | |-ImplicitCastExpr 0x5608c147e128 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c147e0e8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c147e168 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c147e108 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c147c2b0 'keys' 'jv':'jv'
|   |-CallExpr 0x5608c147e1d8 <line:1043:3, col:17> 'void'
|   | |-ImplicitCastExpr 0x5608c147e1c0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c147e180 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c147e200 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c147e1a0 <col:11> 'jv':'jv' lvalue Var 0x5608c147d298 'retkey' 'jv':'jv'
|   `-ReturnStmt 0x5608c147e250 <line:1044:3, col:10>
|     `-ImplicitCastExpr 0x5608c147e238 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c147e218 <col:10> 'jv':'jv' lvalue Var 0x5608c147d0e8 'ret' 'jv':'jv'
|-FunctionDecl 0x5608c1482388 <line:1047:1, line:1049:1> line:1047:11 used f_min 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1482278 <col:17, col:27> col:27 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14822f0 <col:31, col:34> col:34 used x 'jv':'jv'
| `-CompoundStmt 0x5608c1482600 <col:37, line:1049:1>
|   `-ReturnStmt 0x5608c14825f0 <line:1048:3, col:36>
|     `-CallExpr 0x5608c14825a0 <col:10, col:36> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1482588 <col:10> 'jv (*)(jv, jv, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1482438 <col:10> 'jv (jv, jv, int)' Function 0x5608c147c458 'minmax_by' 'jv (jv, jv, int)'
|       |-ImplicitCastExpr 0x5608c14825d8 <col:20> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1482458 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c14822f0 'x' 'jv':'jv'
|       |-CallExpr 0x5608c14824d0 <col:23, col:32> 'jv':'jv'
|       | |-ImplicitCastExpr 0x5608c14824b8 <col:23> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5608c1482478 <col:23> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | `-ImplicitCastExpr 0x5608c14824f8 <col:31> 'jv':'jv' <LValueToRValue>
|       |   `-DeclRefExpr 0x5608c1482498 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c14822f0 'x' 'jv':'jv'
|       `-IntegerLiteral 0x5608c1482510 <col:35> 'int' 1
|-FunctionDecl 0x5608c1482738 <line:1051:1, line:1053:1> line:1051:11 used f_max 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1482628 <col:17, col:27> col:27 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14826a0 <col:31, col:34> col:34 used x 'jv':'jv'
| `-CompoundStmt 0x5608c1482958 <col:37, line:1053:1>
|   `-ReturnStmt 0x5608c1482948 <line:1052:3, col:36>
|     `-CallExpr 0x5608c14828f8 <col:10, col:36> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14828e0 <col:10> 'jv (*)(jv, jv, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14827e8 <col:10> 'jv (jv, jv, int)' Function 0x5608c147c458 'minmax_by' 'jv (jv, jv, int)'
|       |-ImplicitCastExpr 0x5608c1482930 <col:20> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1482808 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c14826a0 'x' 'jv':'jv'
|       |-CallExpr 0x5608c1482880 <col:23, col:32> 'jv':'jv'
|       | |-ImplicitCastExpr 0x5608c1482868 <col:23> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x5608c1482828 <col:23> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|       | `-ImplicitCastExpr 0x5608c14828a8 <col:31> 'jv':'jv' <LValueToRValue>
|       |   `-DeclRefExpr 0x5608c1482848 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c14826a0 'x' 'jv':'jv'
|       `-IntegerLiteral 0x5608c14828c0 <col:35> 'int' 0
|-FunctionDecl 0x5608c1482b10 <line:1055:1, line:1057:1> line:1055:11 used f_min_by_impl 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c1482980 <col:25, col:35> col:35 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14829f8 <col:39, col:42> col:42 used x 'jv':'jv'
| |-ParmVarDecl 0x5608c1482a70 <col:45, col:48> col:48 used y 'jv':'jv'
| `-CompoundStmt 0x5608c1482cd8 <col:51, line:1057:1>
|   `-ReturnStmt 0x5608c1482cc8 <line:1056:3, col:27>
|     `-CallExpr 0x5608c1482c60 <col:10, col:27> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1482c48 <col:10> 'jv (*)(jv, jv, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1482bc8 <col:10> 'jv (jv, jv, int)' Function 0x5608c147c458 'minmax_by' 'jv (jv, jv, int)'
|       |-ImplicitCastExpr 0x5608c1482c98 <col:20> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1482be8 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c14829f8 'x' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1482cb0 <col:23> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1482c08 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1482a70 'y' 'jv':'jv'
|       `-IntegerLiteral 0x5608c1482c28 <col:26> 'int' 1
|-FunctionDecl 0x5608c1482e90 <line:1059:1, line:1061:1> line:1059:11 used f_max_by_impl 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c1482d00 <col:25, col:35> col:35 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1482d78 <col:39, col:42> col:42 used x 'jv':'jv'
| |-ParmVarDecl 0x5608c1482df0 <col:45, col:48> col:48 used y 'jv':'jv'
| `-CompoundStmt 0x5608c1483058 <col:51, line:1061:1>
|   `-ReturnStmt 0x5608c1483048 <line:1060:3, col:27>
|     `-CallExpr 0x5608c1482fe0 <col:10, col:27> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1482fc8 <col:10> 'jv (*)(jv, jv, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1482f48 <col:10> 'jv (jv, jv, int)' Function 0x5608c147c458 'minmax_by' 'jv (jv, jv, int)'
|       |-ImplicitCastExpr 0x5608c1483018 <col:20> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1482f68 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c1482d78 'x' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1483030 <col:23> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1482f88 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1482df0 'y' 'jv':'jv'
|       `-IntegerLiteral 0x5608c1482fa8 <col:26> 'int' 0
|-FunctionDecl 0x5608c1483190 <line:1064:1, line:1068:1> line:1064:11 used f_type 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1483080 <col:18, col:28> col:28 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14830f8 <col:32, col:35> col:35 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1483510 <col:42, line:1068:1>
|   |-DeclStmt 0x5608c1483410 <line:1065:3, col:55>
|   | `-VarDecl 0x5608c1483250 <col:3, col:54> col:6 used out 'jv':'jv' nrvo cinit
|   |   `-CallExpr 0x5608c14833e8 <col:12, col:54> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14833d0 <col:12> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14832b8 <col:12> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |     `-CallExpr 0x5608c14833a8 <col:22, col:53> 'const char *'
|   |       |-ImplicitCastExpr 0x5608c1483390 <col:22> 'const char *(*)(jv_kind)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14832d8 <col:22> 'const char *(jv_kind)' Function 0x5608c13d16b0 'jv_kind_name' 'const char *(jv_kind)'
|   |       `-CallExpr 0x5608c1483350 <col:35, col:52> 'jv_kind':'jv_kind'
|   |         |-ImplicitCastExpr 0x5608c1483338 <col:35> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14832f8 <col:35> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |         `-ImplicitCastExpr 0x5608c1483378 <col:47> 'jv':'jv' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1483318 <col:47> 'jv':'jv' lvalue ParmVar 0x5608c14830f8 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1483480 <line:1066:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1483468 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1483428 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14834a8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1483448 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14830f8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14834f8 <line:1067:3, col:10>
|     `-ImplicitCastExpr 0x5608c14834e0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14834c0 <col:10> 'jv':'jv' lvalue Var 0x5608c1483250 'out' 'jv':'jv'
|-FunctionDecl 0x5608c1483658 <line:1070:1, line:1079:1> line:1070:11 used f_isinfinite 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1483548 <col:24, col:34> col:34 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14835c0 <col:38, col:41> col:41 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1483eb0 <col:48, line:1079:1>
|   |-DeclStmt 0x5608c1483818 <line:1071:3, col:33>
|   | `-VarDecl 0x5608c1483718 <col:3, col:32> col:11 used k 'jv_kind':'jv_kind' cinit
|   |   `-CallExpr 0x5608c14837d8 <col:15, col:32> 'jv_kind':'jv_kind'
|   |     |-ImplicitCastExpr 0x5608c14837c0 <col:15> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1483780 <col:15> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     `-ImplicitCastExpr 0x5608c1483800 <col:27> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14837a0 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c14835c0 'input' 'jv':'jv'
|   |-IfStmt 0x5608c14839f8 <line:1072:3, line:1075:3>
|   | |-BinaryOperator 0x5608c14838b8 <line:1072:7, col:12> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1483888 <col:7> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5608c1483870 <col:7> 'jv_kind':'jv_kind' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5608c1483830 <col:7> 'jv_kind':'jv_kind' lvalue Var 0x5608c1483718 'k' 'jv_kind':'jv_kind'
|   | | `-ImplicitCastExpr 0x5608c14838a0 <col:12> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1483850 <col:12> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c14839d8 <col:28, line:1075:3>
|   |   |-CallExpr 0x5608c1483930 <line:1073:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1483918 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c14838d8 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1483958 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14838f8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c14835c0 'input' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c14839c8 <line:1074:5, col:21>
|   |     `-CallExpr 0x5608c14839a8 <col:12, col:21> 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1483990 <col:12> 'jv (*)(void)' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5608c1483970 <col:12> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|   |-DeclStmt 0x5608c1483b30 <line:1076:3, col:36>
|   | `-VarDecl 0x5608c1483a30 <col:3, col:35> col:10 used n 'double' cinit
|   |   `-CallExpr 0x5608c1483af0 <col:14, col:35> 'double'
|   |     |-ImplicitCastExpr 0x5608c1483ad8 <col:14> 'double (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1483a98 <col:14> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |     `-ImplicitCastExpr 0x5608c1483b18 <col:30> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1483ab8 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c14835c0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1483ba0 <line:1077:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1483b88 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1483b48 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1483bc8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1483b68 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14835c0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1483ea0 <line:1078:3, col:42>
|     `-ConditionalOperator 0x5608c1483e70 </usr/include/math.h:1029:20, src/builtin.c:1078:42> 'jv':'jv'
|       |-CallExpr 0x5608c1483d80 </usr/include/math.h:1029:20, col:43> 'int'
|       | |-ImplicitCastExpr 0x5608c1483d68 <col:20> 'int (*)()' <BuiltinFnToFnPtr>
|       | | `-DeclRefExpr 0x5608c1483d28 <col:20> '<builtin fn type>' Function 0x5608c1483be0 '__builtin_isinf_sign' 'int ()'
|       | `-ImplicitCastExpr 0x5608c1483da8 <src/builtin.c:1078:16> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x5608c1483d48 <col:16> 'double' lvalue Var 0x5608c1483a30 'n' 'double'
|       |-CallExpr 0x5608c1483df8 <col:21, col:29> 'jv':'jv'
|       | `-ImplicitCastExpr 0x5608c1483de0 <col:21> 'jv (*)(void)' <FunctionToPointerDecay>
|       |   `-DeclRefExpr 0x5608c1483dc0 <col:21> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|       `-CallExpr 0x5608c1483e50 <col:33, col:42> 'jv':'jv'
|         `-ImplicitCastExpr 0x5608c1483e38 <col:33> 'jv (*)(void)' <FunctionToPointerDecay>
|           `-DeclRefExpr 0x5608c1483e18 <col:33> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|-FunctionDecl 0x5608c1483be0 </usr/include/math.h:1029:20> col:20 implicit used __builtin_isinf_sign 'int ()' extern
| |-BuiltinAttr 0x5608c1483c80 <<invalid sloc>> Implicit 344
| |-NoThrowAttr 0x5608c1483cd8 <col:20> Implicit
| `-ConstAttr 0x5608c1483d00 <col:20> Implicit
|-FunctionDecl 0x5608c1484008 <src/builtin.c:1081:1, line:1090:1> line:1081:11 used f_isnan 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1483ef8 <col:19, col:29> col:29 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1483f70 <col:33, col:36> col:36 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1484860 <col:43, line:1090:1>
|   |-DeclStmt 0x5608c14841c8 <line:1082:3, col:33>
|   | `-VarDecl 0x5608c14840c8 <col:3, col:32> col:11 used k 'jv_kind':'jv_kind' cinit
|   |   `-CallExpr 0x5608c1484188 <col:15, col:32> 'jv_kind':'jv_kind'
|   |     |-ImplicitCastExpr 0x5608c1484170 <col:15> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1484130 <col:15> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     `-ImplicitCastExpr 0x5608c14841b0 <col:27> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1484150 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1483f70 'input' 'jv':'jv'
|   |-IfStmt 0x5608c14843a8 <line:1083:3, line:1086:3>
|   | |-BinaryOperator 0x5608c1484268 <line:1083:7, col:12> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1484238 <col:7> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5608c1484220 <col:7> 'jv_kind':'jv_kind' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5608c14841e0 <col:7> 'jv_kind':'jv_kind' lvalue Var 0x5608c14840c8 'k' 'jv_kind':'jv_kind'
|   | | `-ImplicitCastExpr 0x5608c1484250 <col:12> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1484200 <col:12> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1484388 <col:28, line:1086:3>
|   |   |-CallExpr 0x5608c14842e0 <line:1084:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c14842c8 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1484288 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1484308 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c14842a8 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1483f70 'input' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1484378 <line:1085:5, col:21>
|   |     `-CallExpr 0x5608c1484358 <col:12, col:21> 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1484340 <col:12> 'jv (*)(void)' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5608c1484320 <col:12> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|   |-DeclStmt 0x5608c14844e0 <line:1087:3, col:36>
|   | `-VarDecl 0x5608c14843e0 <col:3, col:35> col:10 used n 'double' cinit
|   |   `-CallExpr 0x5608c14844a0 <col:14, col:35> 'double'
|   |     |-ImplicitCastExpr 0x5608c1484488 <col:14> 'double (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1484448 <col:14> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |     `-ImplicitCastExpr 0x5608c14844c8 <col:30> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1484468 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c1483f70 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1484550 <line:1088:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1484538 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14844f8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1484578 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1484518 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1483f70 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1484850 <line:1089:3, col:42>
|     `-ConditionalOperator 0x5608c1484820 </usr/include/math.h:1011:20, src/builtin.c:1089:42> 'jv':'jv'
|       |-CallExpr 0x5608c1484730 </usr/include/math.h:1011:20, col:38> 'int'
|       | |-ImplicitCastExpr 0x5608c1484718 <col:20> 'int (*)()' <BuiltinFnToFnPtr>
|       | | `-DeclRefExpr 0x5608c14846d8 <col:20> '<builtin fn type>' Function 0x5608c1484590 '__builtin_isnan' 'int ()'
|       | `-ImplicitCastExpr 0x5608c1484758 <src/builtin.c:1089:16> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x5608c14846f8 <col:16> 'double' lvalue Var 0x5608c14843e0 'n' 'double'
|       |-CallExpr 0x5608c14847a8 <col:21, col:29> 'jv':'jv'
|       | `-ImplicitCastExpr 0x5608c1484790 <col:21> 'jv (*)(void)' <FunctionToPointerDecay>
|       |   `-DeclRefExpr 0x5608c1484770 <col:21> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|       `-CallExpr 0x5608c1484800 <col:33, col:42> 'jv':'jv'
|         `-ImplicitCastExpr 0x5608c14847e8 <col:33> 'jv (*)(void)' <FunctionToPointerDecay>
|           `-DeclRefExpr 0x5608c14847c8 <col:33> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|-FunctionDecl 0x5608c1484590 </usr/include/math.h:1011:20> col:20 implicit used __builtin_isnan 'int ()' extern
| |-BuiltinAttr 0x5608c1484630 <<invalid sloc>> Implicit 345
| |-NoThrowAttr 0x5608c1484688 <col:20> Implicit
| `-ConstAttr 0x5608c14846b0 <col:20> Implicit
|-FunctionDecl 0x5608c14849b8 <src/builtin.c:1092:1, line:1101:1> line:1092:11 used f_isnormal 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14848a8 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1484920 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1485210 <col:46, line:1101:1>
|   |-DeclStmt 0x5608c1484b78 <line:1093:3, col:33>
|   | `-VarDecl 0x5608c1484a78 <col:3, col:32> col:11 used k 'jv_kind':'jv_kind' cinit
|   |   `-CallExpr 0x5608c1484b38 <col:15, col:32> 'jv_kind':'jv_kind'
|   |     |-ImplicitCastExpr 0x5608c1484b20 <col:15> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1484ae0 <col:15> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     `-ImplicitCastExpr 0x5608c1484b60 <col:27> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1484b00 <col:27> 'jv':'jv' lvalue ParmVar 0x5608c1484920 'input' 'jv':'jv'
|   |-IfStmt 0x5608c1484d58 <line:1094:3, line:1097:3>
|   | |-BinaryOperator 0x5608c1484c18 <line:1094:7, col:12> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1484be8 <col:7> 'unsigned int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5608c1484bd0 <col:7> 'jv_kind':'jv_kind' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5608c1484b90 <col:7> 'jv_kind':'jv_kind' lvalue Var 0x5608c1484a78 'k' 'jv_kind':'jv_kind'
|   | | `-ImplicitCastExpr 0x5608c1484c00 <col:12> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1484bb0 <col:12> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1484d38 <col:28, line:1097:3>
|   |   |-CallExpr 0x5608c1484c90 <line:1095:5, col:18> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1484c78 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1484c38 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1484cb8 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1484c58 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1484920 'input' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1484d28 <line:1096:5, col:21>
|   |     `-CallExpr 0x5608c1484d08 <col:12, col:21> 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1484cf0 <col:12> 'jv (*)(void)' <FunctionToPointerDecay>
|   |         `-DeclRefExpr 0x5608c1484cd0 <col:12> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|   |-DeclStmt 0x5608c1484e90 <line:1098:3, col:36>
|   | `-VarDecl 0x5608c1484d90 <col:3, col:35> col:10 used n 'double' cinit
|   |   `-CallExpr 0x5608c1484e50 <col:14, col:35> 'double'
|   |     |-ImplicitCastExpr 0x5608c1484e38 <col:14> 'double (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1484df8 <col:14> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |     `-ImplicitCastExpr 0x5608c1484e78 <col:30> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1484e18 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c1484920 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1484f00 <line:1099:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1484ee8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1484ea8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1484f28 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1484ec8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1484920 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1485200 <line:1100:3, col:45>
|     `-ConditionalOperator 0x5608c14851d0 </usr/include/math.h:1002:23, src/builtin.c:1100:45> 'jv':'jv'
|       |-CallExpr 0x5608c14850e0 </usr/include/math.h:1002:23, col:44> 'int'
|       | |-ImplicitCastExpr 0x5608c14850c8 <col:23> 'int (*)()' <BuiltinFnToFnPtr>
|       | | `-DeclRefExpr 0x5608c1485088 <col:23> '<builtin fn type>' Function 0x5608c1484f40 '__builtin_isnormal' 'int ()'
|       | `-ImplicitCastExpr 0x5608c1485108 <src/builtin.c:1100:19> 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x5608c14850a8 <col:19> 'double' lvalue Var 0x5608c1484d90 'n' 'double'
|       |-CallExpr 0x5608c1485158 <col:24, col:32> 'jv':'jv'
|       | `-ImplicitCastExpr 0x5608c1485140 <col:24> 'jv (*)(void)' <FunctionToPointerDecay>
|       |   `-DeclRefExpr 0x5608c1485120 <col:24> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|       `-CallExpr 0x5608c14851b0 <col:36, col:45> 'jv':'jv'
|         `-ImplicitCastExpr 0x5608c1485198 <col:36> 'jv (*)(void)' <FunctionToPointerDecay>
|           `-DeclRefExpr 0x5608c1485178 <col:36> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|-FunctionDecl 0x5608c1484f40 </usr/include/math.h:1002:23> col:23 implicit used __builtin_isnormal 'int ()' extern
| |-BuiltinAttr 0x5608c1484fe0 <<invalid sloc>> Implicit 346
| |-NoThrowAttr 0x5608c1485038 <col:23> Implicit
| `-ConstAttr 0x5608c1485060 <col:23> Implicit
|-FunctionDecl 0x5608c1485368 <src/builtin.c:1103:1, line:1106:1> line:1103:11 used f_infinite 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1485258 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14852d0 <col:36, col:39> col:39 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1485748 <col:46, line:1106:1>
|   |-CallExpr 0x5608c1485470 <line:1104:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1485458 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1485418 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1485498 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1485438 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14852d0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1485738 <line:1105:3, col:28>
|     `-CallExpr 0x5608c14856f8 <col:10, col:28> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14856e0 <col:10> 'jv (*)(double)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14854b0 <col:10> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|       `-ImplicitCastExpr 0x5608c1485720 </usr/include/math.h:91:20, col:38> 'double' <FloatingCast>
|         `-ParenExpr 0x5608c14856c0 <col:20, col:38> 'float'
|           `-CallExpr 0x5608c14856a0 <col:21, col:37> 'float'
|             `-ImplicitCastExpr 0x5608c1485688 <col:21> 'float (*)(void)' <BuiltinFnToFnPtr>
|               `-DeclRefExpr 0x5608c1485640 <col:21> '<builtin fn type>' Function 0x5608c14854f8 '__builtin_inff' 'float (void)'
|-FunctionDecl 0x5608c14854f8 <col:21> col:21 implicit used __builtin_inff 'float (void)' extern
| |-BuiltinAttr 0x5608c1485598 <<invalid sloc>> Implicit 30
| |-NoThrowAttr 0x5608c14855f0 <col:21> Implicit
| `-ConstAttr 0x5608c1485618 <col:21> Implicit
|-FunctionDecl 0x5608c1485888 <src/builtin.c:1108:1, line:1111:1> line:1108:11 used f_nan 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1485778 <col:17, col:27> col:27 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14857f0 <col:31, col:34> col:34 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1485d20 <col:41, line:1111:1>
|   |-CallExpr 0x5608c1485990 <line:1109:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1485978 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1485938 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14859b8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1485958 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14857f0 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1485d10 <line:1110:3, col:23>
|     `-CallExpr 0x5608c1485cd0 <col:10, col:23> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1485cb8 <col:10> 'jv (*)(double)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14859d0 <col:10> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|       `-ImplicitCastExpr 0x5608c1485cf8 </usr/include/math.h:98:15, col:35> 'double' <FloatingCast>
|         `-ParenExpr 0x5608c1485c98 <col:15, col:35> 'float'
|           `-CallExpr 0x5608c1485c40 <col:16, col:34> 'float'
|             |-ImplicitCastExpr 0x5608c1485c28 <col:16> 'float (*)(const char *)' <BuiltinFnToFnPtr>
|             | `-DeclRefExpr 0x5608c1485ba8 <col:16> '<builtin fn type>' Function 0x5608c14859f0 '__builtin_nanf' 'float (const char *)'
|             `-ImplicitCastExpr 0x5608c1485c80 <col:32> 'const char *' <NoOp>
|               `-ImplicitCastExpr 0x5608c1485c68 <col:32> 'char *' <ArrayToPointerDecay>
|                 `-StringLiteral 0x5608c1485bc8 <col:32> 'char [1]' lvalue ""
|-FunctionDecl 0x5608c14859f0 <col:16> col:16 implicit used __builtin_nanf 'float (const char *)' extern
| |-ParmVarDecl 0x5608c1485ae8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-BuiltinAttr 0x5608c1485a90 <<invalid sloc>> Implicit 44
| |-NoThrowAttr 0x5608c1485b58 <col:16> Implicit
| `-PureAttr 0x5608c1485b80 <col:16> Implicit
|-FunctionDecl 0x5608c1485e60 <src/builtin.c:1113:1, line:1115:1> line:1113:11 used f_error 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1485d50 <col:19, col:29> col:29 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1485dc8 <col:33, col:36> col:36 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1485fb8 <col:43, line:1115:1>
|   `-ReturnStmt 0x5608c1485fa8 <line:1114:3, col:35>
|     `-CallExpr 0x5608c1485f68 <col:10, col:35> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1485f50 <col:10> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1485f10 <col:10> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|       `-ImplicitCastExpr 0x5608c1485f90 <col:30> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c1485f30 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c1485dc8 'input' 'jv':'jv'
|-VarDecl 0x5608c1485fe8 <line:1119:1, col:15> col:15 used environ 'char **' extern
|-FunctionDecl 0x5608c1486210 <line:1122:1, line:1135:1> line:1122:11 used f_env 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1486060 <col:17, col:27> col:27 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14860d8 <col:31, col:34> col:34 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1487200 <col:41, line:1135:1>
|   |-CallExpr 0x5608c1486318 <line:1123:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1486300 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14862c0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1486340 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14862e0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14860d8 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c1486428 <line:1124:3, col:23>
|   | `-VarDecl 0x5608c1486368 <col:3, col:22> col:6 used env 'jv':'jv' nrvo cinit
|   |   `-CallExpr 0x5608c1486408 <col:12, col:22> 'jv':'jv'
|   |     `-ImplicitCastExpr 0x5608c14863f0 <col:12> 'jv (*)(void)' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5608c14863d0 <col:12> 'jv (void)' Function 0x5608c13e46d0 'jv_object' 'jv (void)'
|   |-DeclStmt 0x5608c1486558 <line:1125:3, col:24>
|   | |-VarDecl 0x5608c1486458 <col:3, col:15> col:15 used var 'const char *'
|   | `-VarDecl 0x5608c14864d8 <col:3, col:21> col:21 used val 'const char *'
|   |-ForStmt 0x5608c1487178 <line:1126:3, line:1133:3>
|   | |-DeclStmt 0x5608c1486628 <line:1126:8, col:26>
|   | | `-VarDecl 0x5608c1486588 <col:8, col:19> col:15 used e 'char **' cinit
|   | |   `-ImplicitCastExpr 0x5608c1486610 <col:19> 'char **' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c14865f0 <col:19> 'char **' lvalue Var 0x5608c1485fe8 'environ' 'char **'
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5608c1486740 <col:28, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1486710 <src/builtin.c:1126:28, col:29> 'char *' <LValueToRValue>
|   | | | `-UnaryOperator 0x5608c1486678 <col:28, col:29> 'char *' lvalue prefix '*' cannot overflow
|   | | |   `-ImplicitCastExpr 0x5608c1486660 <col:29> 'char **' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1486640 <col:29> 'char **' lvalue Var 0x5608c1486588 'e' 'char **'
|   | | `-ImplicitCastExpr 0x5608c1486728 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'char *' <BitCast>
|   | |   `-ParenExpr 0x5608c14866f0 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x5608c14866c8 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5608c1486690 <col:24> 'int' 0
|   | |-UnaryOperator 0x5608c1486780 <src/builtin.c:1126:40, col:41> 'char **' postfix '++'
|   | | `-DeclRefExpr 0x5608c1486760 <col:40> 'char **' lvalue Var 0x5608c1486588 'e' 'char **'
|   | `-CompoundStmt 0x5608c1487150 <col:45, line:1133:3>
|   |   |-BinaryOperator 0x5608c1486860 <line:1127:5, col:14> 'const char *' '='
|   |   | |-DeclRefExpr 0x5608c1486798 <col:5> 'const char *' lvalue Var 0x5608c1486458 'var' 'const char *'
|   |   | `-ImplicitCastExpr 0x5608c1486848 <col:11, col:14> 'const char *' <NoOp>
|   |   |   `-ImplicitCastExpr 0x5608c1486830 <col:11, col:14> 'char *' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x5608c1486810 <col:11, col:14> 'char *' lvalue
|   |   |       |-ImplicitCastExpr 0x5608c14867f8 <col:11> 'char **' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x5608c14867b8 <col:11> 'char **' lvalue Var 0x5608c1486588 'e' 'char **'
|   |   |       `-IntegerLiteral 0x5608c14867d8 <col:13> 'int' 0
|   |   |-BinaryOperator 0x5608c1486a28 <line:1128:5, col:27> 'const char *' '='
|   |   | |-DeclRefExpr 0x5608c1486880 <col:5> 'const char *' lvalue Var 0x5608c14864d8 'val' 'const char *'
|   |   | `-ImplicitCastExpr 0x5608c1486a10 <col:11, col:27> 'const char *' <NoOp>
|   |   |   `-CallExpr 0x5608c14869b0 <col:11, col:27> 'char *'
|   |   |     |-ImplicitCastExpr 0x5608c1486998 <col:11> 'char *(*)(const char *, int)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x5608c14868a0 <col:11> 'char *(const char *, int)' Function 0x5608c136f288 'strchr' 'char *(const char *, int)'
|   |   |     |-ImplicitCastExpr 0x5608c14869f8 <col:18, col:21> 'const char *' <NoOp>
|   |   |     | `-ImplicitCastExpr 0x5608c14869e0 <col:18, col:21> 'char *' <LValueToRValue>
|   |   |     |   `-ArraySubscriptExpr 0x5608c1486918 <col:18, col:21> 'char *' lvalue
|   |   |     |     |-ImplicitCastExpr 0x5608c1486900 <col:18> 'char **' <LValueToRValue>
|   |   |     |     | `-DeclRefExpr 0x5608c14868c0 <col:18> 'char **' lvalue Var 0x5608c1486588 'e' 'char **'
|   |   |     |     `-IntegerLiteral 0x5608c14868e0 <col:20> 'int' 0
|   |   |     `-CharacterLiteral 0x5608c1486938 <col:24> 'int' 61
|   |   `-IfStmt 0x5608c1487120 <line:1129:5, line:1132:83> has_else
|   |     |-BinaryOperator 0x5608c1486b18 <line:1129:9, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'int' '=='
|   |     | |-ImplicitCastExpr 0x5608c1486ae8 <src/builtin.c:1129:9> 'const char *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x5608c1486a48 <col:9> 'const char *' lvalue Var 0x5608c14864d8 'val' 'const char *'
|   |     | `-ImplicitCastExpr 0x5608c1486b00 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'const char *' <BitCast>
|   |     |   `-ParenExpr 0x5608c1486ac8 <col:16, col:25> 'void *'
|   |     |     `-CStyleCastExpr 0x5608c1486aa0 <col:17, col:24> 'void *' <NullToPointer>
|   |     |       `-IntegerLiteral 0x5608c1486a68 <col:24> 'int' 0
|   |     |-BinaryOperator 0x5608c1486cf0 <src/builtin.c:1130:7, col:57> 'jv':'jv' '='
|   |     | |-DeclRefExpr 0x5608c1486b38 <col:7> 'jv':'jv' lvalue Var 0x5608c1486368 'env' 'jv':'jv'
|   |     | `-CallExpr 0x5608c1486ca0 <col:13, col:57> 'jv':'jv'
|   |     |   |-ImplicitCastExpr 0x5608c1486c88 <col:13> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x5608c1486b58 <col:13> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   |     |   |-ImplicitCastExpr 0x5608c1486cd8 <col:27> 'jv':'jv' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x5608c1486b78 <col:27> 'jv':'jv' lvalue Var 0x5608c1486368 'env' 'jv':'jv'
|   |     |   |-CallExpr 0x5608c1486bf0 <col:32, col:45> 'jv':'jv'
|   |     |   | |-ImplicitCastExpr 0x5608c1486bd8 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |     |   | | `-DeclRefExpr 0x5608c1486b98 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |     |   | `-ImplicitCastExpr 0x5608c1486c18 <col:42> 'const char *' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x5608c1486bb8 <col:42> 'const char *' lvalue Var 0x5608c1486458 'var' 'const char *'
|   |     |   `-CallExpr 0x5608c1486c68 <col:48, col:56> 'jv':'jv'
|   |     |     `-ImplicitCastExpr 0x5608c1486c50 <col:48> 'jv (*)(void)' <FunctionToPointerDecay>
|   |     |       `-DeclRefExpr 0x5608c1486c30 <col:48> 'jv (void)' Function 0x5608c13db090 'jv_null' 'jv (void)'
|   |     `-IfStmt 0x5608c1487100 <line:1131:10, line:1132:83>
|   |       |-BinaryOperator 0x5608c1486dd8 <line:1131:14, <built-in>:39:21> 'int' '<'
|   |       | |-BinaryOperator 0x5608c1486d80 <src/builtin.c:1131:14, col:20> 'long' '-'
|   |       | | |-ImplicitCastExpr 0x5608c1486d50 <col:14> 'const char *' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x5608c1486d10 <col:14> 'const char *' lvalue Var 0x5608c1486458 'var' 'const char *'
|   |       | | `-ImplicitCastExpr 0x5608c1486d68 <col:20> 'const char *' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x5608c1486d30 <col:20> 'const char *' lvalue Var 0x5608c14864d8 'val' 'const char *'
|   |       | `-ImplicitCastExpr 0x5608c1486dc0 <<built-in>:39:21> 'long' <IntegralCast>
|   |       |   `-IntegerLiteral 0x5608c1486da0 <col:21> 'int' 2147483647
|   |       `-BinaryOperator 0x5608c14870e0 <src/builtin.c:1132:7, col:83> 'jv':'jv' '='
|   |         |-DeclRefExpr 0x5608c1486df8 <col:7> 'jv':'jv' lvalue Var 0x5608c1486368 'env' 'jv':'jv'
|   |         `-CallExpr 0x5608c1487090 <col:13, col:83> 'jv':'jv'
|   |           |-ImplicitCastExpr 0x5608c1487078 <col:13> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c1486e18 <col:13> 'jv (jv, jv, jv)' Function 0x5608c13e4d38 'jv_object_set' 'jv (jv, jv, jv)'
|   |           |-ImplicitCastExpr 0x5608c14870c8 <col:27> 'jv':'jv' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5608c1486e38 <col:27> 'jv':'jv' lvalue Var 0x5608c1486368 'env' 'jv':'jv'
|   |           |-CallExpr 0x5608c1486f40 <col:32, col:62> 'jv':'jv'
|   |           | |-ImplicitCastExpr 0x5608c1486f28 <col:32> 'jv (*)(const char *, int)' <FunctionToPointerDecay>
|   |           | | `-DeclRefExpr 0x5608c1486e58 <col:32> 'jv (const char *, int)' Function 0x5608c13de3c8 'jv_string_sized' 'jv (const char *, int)'
|   |           | |-ImplicitCastExpr 0x5608c1486f70 <col:48> 'const char *' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x5608c1486e78 <col:48> 'const char *' lvalue Var 0x5608c1486458 'var' 'const char *'
|   |           | `-ImplicitCastExpr 0x5608c1486f88 <col:53, col:59> 'int' <IntegralCast>
|   |           |   `-BinaryOperator 0x5608c1486f08 <col:53, col:59> 'long' '-'
|   |           |     |-ImplicitCastExpr 0x5608c1486ed8 <col:53> 'const char *' <LValueToRValue>
|   |           |     | `-DeclRefExpr 0x5608c1486e98 <col:53> 'const char *' lvalue Var 0x5608c14864d8 'val' 'const char *'
|   |           |     `-ImplicitCastExpr 0x5608c1486ef0 <col:59> 'const char *' <LValueToRValue>
|   |           |       `-DeclRefExpr 0x5608c1486eb8 <col:59> 'const char *' lvalue Var 0x5608c1486458 'var' 'const char *'
|   |           `-CallExpr 0x5608c1487050 <col:65, col:82> 'jv':'jv'
|   |             |-ImplicitCastExpr 0x5608c1487038 <col:65> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x5608c1486fa0 <col:65> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |             `-BinaryOperator 0x5608c1487018 <col:75, col:81> 'const char *' '+'
|   |               |-ImplicitCastExpr 0x5608c1487000 <col:75> 'const char *' <LValueToRValue>
|   |               | `-DeclRefExpr 0x5608c1486fc0 <col:75> 'const char *' lvalue Var 0x5608c14864d8 'val' 'const char *'
|   |               `-IntegerLiteral 0x5608c1486fe0 <col:81> 'int' 1
|   `-ReturnStmt 0x5608c14871e8 <line:1134:3, col:10>
|     `-ImplicitCastExpr 0x5608c14871d0 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c14871b0 <col:10> 'jv':'jv' lvalue Var 0x5608c1486368 'env' 'jv':'jv'
|-FunctionDecl 0x5608c1487388 <line:1137:1, line:1141:1> line:1137:11 used f_halt 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1487278 <col:18, col:28> col:28 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c14872f0 <col:32, col:35> col:35 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14876e8 <col:42, line:1141:1>
|   |-CallExpr 0x5608c1487490 <line:1138:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1487478 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1487438 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14874b8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1487458 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14872f0 'input' 'jv':'jv'
|   |-CallExpr 0x5608c1487630 <line:1139:3, col:41> 'void'
|   | |-ImplicitCastExpr 0x5608c1487618 <col:3> 'void (*)(jq_state *, jv, jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14874d0 <col:3> 'void (jq_state *, jv, jv)' Function 0x5608c13f8be8 'jq_halt' 'void (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c1487668 <col:11> 'jq_state *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5608c14874f0 <col:11> 'jq_state *' lvalue ParmVar 0x5608c1487278 'jq' 'jq_state *'
|   | |-CallExpr 0x5608c1487548 <col:15, col:26> 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1487530 <col:15> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5608c1487510 <col:15> 'jv (void)' Function 0x5608c13dab78 'jv_invalid' 'jv (void)'
|   | `-CallExpr 0x5608c14875a0 <col:29, col:40> 'jv':'jv'
|   |   `-ImplicitCastExpr 0x5608c1487588 <col:29> 'jv (*)(void)' <FunctionToPointerDecay>
|   |     `-DeclRefExpr 0x5608c1487568 <col:29> 'jv (void)' Function 0x5608c13dab78 'jv_invalid' 'jv (void)'
|   `-ReturnStmt 0x5608c14876d8 <line:1140:3, col:18>
|     `-CallExpr 0x5608c14876b8 <col:10, col:18> 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c14876a0 <col:10> 'jv (*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5608c1487680 <col:10> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|-FunctionDecl 0x5608c14878b0 <line:1143:1, line:1150:1> line:1143:11 used f_halt_error 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c1487720 <col:24, col:34> col:34 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c1487798 <col:38, col:41> col:41 used input 'jv':'jv'
| |-ParmVarDecl 0x5608c1487810 <col:48, col:51> col:51 used a 'jv':'jv'
| `-CompoundStmt 0x5608c1487de0 <col:54, line:1150:1>
|   |-IfStmt 0x5608c1487c40 <line:1144:3, line:1147:3>
|   | |-BinaryOperator 0x5608c1487a50 <line:1144:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1487a20 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14879c0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14879a8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1487968 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14879e8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1487988 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1487810 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1487a38 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1487a00 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-CompoundStmt 0x5608c1487c20 <col:41, line:1147:3>
|   |   |-CallExpr 0x5608c1487ac8 <line:1145:5, col:14> 'void'
|   |   | |-ImplicitCastExpr 0x5608c1487ab0 <col:5> 'void (*)(jv)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5608c1487a70 <col:5> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   |   | `-ImplicitCastExpr 0x5608c1487af0 <col:13> 'jv':'jv' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x5608c1487a90 <col:13> 'jv':'jv' lvalue ParmVar 0x5608c1487810 'a' 'jv':'jv'
|   |   `-ReturnStmt 0x5608c1487c10 <line:1146:5, col:61>
|   |     `-CallExpr 0x5608c1487b98 <col:12, col:61> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1487b80 <col:12> 'jv (*)(jv, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1487b08 <col:12> 'jv (jv, const char *)' Function 0x5608c1415978 'type_error' 'jv (jv, const char *)'
|   |       |-ImplicitCastExpr 0x5608c1487bc8 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1487b28 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1487798 'input' 'jv':'jv'
|   |       `-ImplicitCastExpr 0x5608c1487bf8 <col:30> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c1487be0 <col:30> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c1487b48 <col:30> 'char [30]' lvalue "halt_error/1: number required"
|   |-CallExpr 0x5608c1487cf8 <line:1148:3, col:23> 'void'
|   | |-ImplicitCastExpr 0x5608c1487ce0 <col:3> 'void (*)(jq_state *, jv, jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1487c60 <col:3> 'void (jq_state *, jv, jv)' Function 0x5608c13f8be8 'jq_halt' 'void (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c1487d30 <col:11> 'jq_state *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5608c1487c80 <col:11> 'jq_state *' lvalue ParmVar 0x5608c1487720 'jq' 'jq_state *'
|   | |-ImplicitCastExpr 0x5608c1487d48 <col:15> 'jv':'jv' <LValueToRValue>
|   | | `-DeclRefExpr 0x5608c1487ca0 <col:15> 'jv':'jv' lvalue ParmVar 0x5608c1487810 'a' 'jv':'jv'
|   | `-ImplicitCastExpr 0x5608c1487d60 <col:18> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1487cc0 <col:18> 'jv':'jv' lvalue ParmVar 0x5608c1487798 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1487dd0 <line:1149:3, col:18>
|     `-CallExpr 0x5608c1487db0 <col:10, col:18> 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c1487d98 <col:10> 'jv (*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5608c1487d78 <col:10> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|-FunctionDecl 0x5608c1487f28 <line:1152:1, line:1155:1> line:1152:11 used f_get_search_list 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1487e18 <col:29, col:39> col:39 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c1487e90 <col:43, col:46> col:46 used input 'jv':'jv'
| `-CompoundStmt 0x5608c1488170 <col:53, line:1155:1>
|   |-CallExpr 0x5608c1488030 <line:1153:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c1488018 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1487fd8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1488058 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1487ff8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1487e90 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1488160 <line:1154:3, col:28>
|     `-CallExpr 0x5608c1488120 <col:10, col:28> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1488108 <col:10> 'jv (*)(jq_state *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1488070 <col:10> 'jv (jq_state *)' Function 0x5608c13fa528 'jq_get_lib_dirs' 'jv (jq_state *)'
|       `-ImplicitCastExpr 0x5608c1488148 <col:26> 'jq_state *' <LValueToRValue>
|         `-DeclRefExpr 0x5608c1488090 <col:26> 'jq_state *' lvalue ParmVar 0x5608c1487e18 'jq' 'jq_state *'
|-FunctionDecl 0x5608c14882b0 <line:1157:1, line:1160:1> line:1157:11 used f_get_prog_origin 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14881a0 <col:29, col:39> col:39 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c1488218 <col:43, col:46> col:46 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14884a0 <col:53, line:1160:1>
|   |-CallExpr 0x5608c14883b8 <line:1158:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14883a0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1488360 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14883e0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1488380 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1488218 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c1488490 <line:1159:3, col:31>
|     `-CallExpr 0x5608c1488450 <col:10, col:31> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1488438 <col:10> 'jv (*)(jq_state *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14883f8 <col:10> 'jv (jq_state *)' Function 0x5608c13fa3e0 'jq_get_prog_origin' 'jv (jq_state *)'
|       `-ImplicitCastExpr 0x5608c1488478 <col:29> 'jq_state *' <LValueToRValue>
|         `-DeclRefExpr 0x5608c1488418 <col:29> 'jq_state *' lvalue ParmVar 0x5608c14881a0 'jq' 'jq_state *'
|-FunctionDecl 0x5608c14885e0 <line:1162:1, line:1165:1> line:1162:11 used f_get_jq_origin 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14884d0 <col:27, col:37> col:37 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c1488548 <col:41, col:44> col:44 used input 'jv':'jv'
| `-CompoundStmt 0x5608c14887d0 <col:51, line:1165:1>
|   |-CallExpr 0x5608c14886e8 <line:1163:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c14886d0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1488690 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1488710 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14886b0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1488548 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c14887c0 <line:1164:3, col:29>
|     `-CallExpr 0x5608c1488780 <col:10, col:29> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1488768 <col:10> 'jv (*)(jq_state *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1488728 <col:10> 'jv (jq_state *)' Function 0x5608c13fa298 'jq_get_jq_origin' 'jv (jq_state *)'
|       `-ImplicitCastExpr 0x5608c14887a8 <col:27> 'jq_state *' <LValueToRValue>
|         `-DeclRefExpr 0x5608c1488748 <col:27> 'jq_state *' lvalue ParmVar 0x5608c14884d0 'jq' 'jq_state *'
|-FunctionDecl 0x5608c1488990 <line:1167:1, line:1172:1> line:1167:11 used f_string_split 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c1488800 <col:26, col:36> col:36 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1488878 <col:40, col:43> col:43 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14888f0 <col:46, col:49> col:49 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1488fa0 <col:52, line:1172:1>
|   |-IfStmt 0x5608c1488e98 <line:1168:3, line:1170:3>
|   | |-BinaryOperator 0x5608c1488c58 <line:1168:7, col:61> 'int' '||'
|   | | |-BinaryOperator 0x5608c1488b30 <col:7, col:25> 'int' '!='
|   | | | |-ImplicitCastExpr 0x5608c1488b00 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | | `-CallExpr 0x5608c1488aa0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | | |   |-ImplicitCastExpr 0x5608c1488a88 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | |   | `-DeclRefExpr 0x5608c1488a48 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | |   `-ImplicitCastExpr 0x5608c1488ac8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x5608c1488a68 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1488878 'a' 'jv':'jv'
|   | | | `-ImplicitCastExpr 0x5608c1488b18 <col:25> 'unsigned int' <IntegralCast>
|   | | |   `-DeclRefExpr 0x5608c1488ae0 <col:25> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | | `-BinaryOperator 0x5608c1488c38 <col:43, col:61> 'int' '!='
|   | |   |-ImplicitCastExpr 0x5608c1488c08 <col:43, col:56> 'unsigned int' <IntegralCast>
|   | |   | `-CallExpr 0x5608c1488ba8 <col:43, col:56> 'jv_kind':'jv_kind'
|   | |   |   |-ImplicitCastExpr 0x5608c1488b90 <col:43> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x5608c1488b50 <col:43> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | |   |   `-ImplicitCastExpr 0x5608c1488bd0 <col:55> 'jv':'jv' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x5608c1488b70 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c14888f0 'b' 'jv':'jv'
|   | |   `-ImplicitCastExpr 0x5608c1488c20 <col:61> 'unsigned int' <IntegralCast>
|   | |     `-DeclRefExpr 0x5608c1488be8 <col:61> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-CompoundStmt 0x5608c1488e80 <col:77, line:1170:3>
|   |   `-ReturnStmt 0x5608c1488e70 <line:1169:5, col:83>
|   |     `-CallExpr 0x5608c1488e08 <col:12, col:83> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1488df0 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1488c78 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |       |-ImplicitCastExpr 0x5608c1488e40 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1488c98 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1488878 'a' 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1488e58 <col:26> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1488cb8 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14888f0 'b' 'jv':'jv'
|   |       `-CallExpr 0x5608c1488d98 <col:29, col:82> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1488d80 <col:29> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1488cd8 <col:29> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |         `-ImplicitCastExpr 0x5608c1488dd8 <col:39> 'const char *' <NoOp>
|   |           `-ImplicitCastExpr 0x5608c1488dc0 <col:39> 'char *' <ArrayToPointerDecay>
|   |             `-StringLiteral 0x5608c1488d38 <col:39> 'char [42]' lvalue "split input and separator must be strings"
|   `-ReturnStmt 0x5608c1488f90 <line:1171:3, col:30>
|     `-CallExpr 0x5608c1488f30 <col:10, col:30> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1488f18 <col:10> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1488eb8 <col:10> 'jv (jv, jv)' Function 0x5608c13e42f8 'jv_string_split' 'jv (jv, jv)'
|       |-ImplicitCastExpr 0x5608c1488f60 <col:26> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c1488ed8 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1488878 'a' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c1488f78 <col:29> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c1488ef8 <col:29> 'jv':'jv' lvalue ParmVar 0x5608c14888f0 'b' 'jv':'jv'
|-FunctionDecl 0x5608c14890e0 <line:1174:1, line:1179:1> line:1174:11 used f_string_explode 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c1488fd0 <col:28, col:38> col:38 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1489048 <col:42, col:45> col:45 used a 'jv':'jv'
| `-CompoundStmt 0x5608c1489530 <col:48, line:1179:1>
|   |-IfStmt 0x5608c1489468 <line:1175:3, line:1177:3>
|   | |-BinaryOperator 0x5608c1489278 <line:1175:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1489248 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14891e8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14891d0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1489190 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1489210 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14891b0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1489048 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1489260 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1489228 <col:25> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-CompoundStmt 0x5608c1489450 <col:41, line:1177:3>
|   |   `-ReturnStmt 0x5608c1489440 <line:1176:5, col:68>
|   |     `-CallExpr 0x5608c14893f8 <col:12, col:68> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14893e0 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1489298 <col:12> 'jv (jv, jv)' Function 0x5608c1419b18 'ret_error' 'jv (jv, jv)'
|   |       |-ImplicitCastExpr 0x5608c1489428 <col:22> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14892b8 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c1489048 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c1489388 <col:25, col:67> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1489370 <col:25> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14892d8 <col:25> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |         `-ImplicitCastExpr 0x5608c14893c8 <col:35> 'const char *' <NoOp>
|   |           `-ImplicitCastExpr 0x5608c14893b0 <col:35> 'char *' <ArrayToPointerDecay>
|   |             `-StringLiteral 0x5608c1489338 <col:35> 'char [31]' lvalue "explode input must be a string"
|   `-ReturnStmt 0x5608c1489520 <line:1178:3, col:29>
|     `-CallExpr 0x5608c14894e0 <col:10, col:29> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14894c8 <col:10> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1489488 <col:10> 'jv (jv)' Function 0x5608c13e4448 'jv_string_explode' 'jv (jv)'
|       `-ImplicitCastExpr 0x5608c1489508 <col:28> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c14894a8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1489048 'a' 'jv':'jv'
|-FunctionDecl 0x5608c14896f0 <line:1181:1, line:1183:1> line:1181:11 used f_string_indexes 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c1489560 <col:28, col:38> col:38 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14895d8 <col:42, col:45> col:45 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1489650 <col:48, col:51> col:51 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1489890 <col:54, line:1183:1>
|   `-ReturnStmt 0x5608c1489880 <line:1182:3, col:32>
|     `-CallExpr 0x5608c1489820 <col:10, col:32> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1489808 <col:10> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14897a8 <col:10> 'jv (jv, jv)' Function 0x5608c13dec88 'jv_string_indexes' 'jv (jv, jv)'
|       |-ImplicitCastExpr 0x5608c1489850 <col:28> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c14897c8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c14895d8 'a' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c1489868 <col:31> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c14897e8 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c1489650 'b' 'jv':'jv'
|-FunctionDecl 0x5608c14899c8 <line:1185:1, line:1190:1> line:1185:11 used f_string_implode 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14898b8 <col:28, col:38> col:38 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1489930 <col:42, col:45> col:45 used a 'jv':'jv'
| `-CompoundStmt 0x5608c1489dd8 <col:48, line:1190:1>
|   |-IfStmt 0x5608c1489d10 <line:1186:3, line:1188:3>
|   | |-BinaryOperator 0x5608c1489b60 <line:1186:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1489b30 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c1489ad0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c1489ab8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c1489a78 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c1489af8 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c1489a98 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1489930 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c1489b48 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c1489b10 <col:25> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|   | `-CompoundStmt 0x5608c1489cf8 <col:40, line:1188:3>
|   |   `-ReturnStmt 0x5608c1489ce8 <line:1187:5, col:68>
|   |     `-CallExpr 0x5608c1489ca0 <col:12, col:68> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1489c88 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1489b80 <col:12> 'jv (jv, jv)' Function 0x5608c1419b18 'ret_error' 'jv (jv, jv)'
|   |       |-ImplicitCastExpr 0x5608c1489cd0 <col:22> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1489ba0 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c1489930 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c1489c30 <col:25, col:67> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1489c18 <col:25> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1489bc0 <col:25> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |         `-ImplicitCastExpr 0x5608c1489c70 <col:35> 'const char *' <NoOp>
|   |           `-ImplicitCastExpr 0x5608c1489c58 <col:35> 'char *' <ArrayToPointerDecay>
|   |             `-StringLiteral 0x5608c1489be0 <col:35> 'char [31]' lvalue "implode input must be an array"
|   `-ReturnStmt 0x5608c1489dc8 <line:1189:3, col:29>
|     `-CallExpr 0x5608c1489d88 <col:10, col:29> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c1489d70 <col:10> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c1489d30 <col:10> 'jv (jv)' Function 0x5608c13e4590 'jv_string_implode' 'jv (jv)'
|       `-ImplicitCastExpr 0x5608c1489db0 <col:28> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c1489d50 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1489930 'a' 'jv':'jv'
|-FunctionDecl 0x5608c148a018 <line:1192:1, col:83> col:11 used f_setpath 'jv (jq_state *, jv, jv, jv)' static
| |-ParmVarDecl 0x5608c1489e08 <col:21, col:31> col:31 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1489e80 <col:35, col:38> col:38 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1489ef8 <col:41, col:44> col:44 used b 'jv':'jv'
| |-ParmVarDecl 0x5608c1489f70 <col:47, col:50> col:50 used c 'jv':'jv'
| `-CompoundStmt 0x5608c148a220 <col:53, col:83>
|   `-ReturnStmt 0x5608c148a1f0 <col:55, col:80>
|     `-CallExpr 0x5608c148a170 <col:62, col:80> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c148a158 <col:62> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c148a0d8 <col:62> 'jv (jv, jv, jv)' Function 0x5608c13f5898 'jv_setpath' 'jv (jv, jv, jv)'
|       |-ImplicitCastExpr 0x5608c148a1a8 <col:73> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c148a0f8 <col:73> 'jv':'jv' lvalue ParmVar 0x5608c1489e80 'a' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c148a1c0 <col:76> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c148a118 <col:76> 'jv':'jv' lvalue ParmVar 0x5608c1489ef8 'b' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c148a1d8 <col:79> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c148a138 <col:79> 'jv':'jv' lvalue ParmVar 0x5608c1489f70 'c' 'jv':'jv'
|-FunctionDecl 0x5608c148a458 <line:1193:1, col:49> col:11 used _jq_path_append 'jv (jq_state *, jv, jv, jv)' extern
| |-ParmVarDecl 0x5608c148a248 <col:27, col:36> col:37 'jq_state *'
| |-ParmVarDecl 0x5608c148a2c0 <col:39> col:41 'jv':'jv'
| |-ParmVarDecl 0x5608c148a338 <col:43> col:45 'jv':'jv'
| `-ParmVarDecl 0x5608c148a3b0 <col:47> col:49 'jv':'jv'
|-FunctionDecl 0x5608c148a6b8 <line:1194:1, line:1196:1> line:1194:11 used f_getpath 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c148a528 <col:21, col:31> col:31 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c148a5a0 <col:35, col:38> col:38 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c148a618 <col:41, col:44> col:44 used b 'jv':'jv'
| `-CompoundStmt 0x5608c148aa98 <col:47, line:1196:1>
|   `-ReturnStmt 0x5608c148aa88 <line:1195:3, col:70>
|     `-CallExpr 0x5608c148aa00 <col:10, col:70> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c148a9e8 <col:10> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c148a770 <col:10> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c148a458 '_jq_path_append' 'jv (jq_state *, jv, jv, jv)'
|       |-ImplicitCastExpr 0x5608c148aa40 <col:26> 'jq_state *' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c148a790 <col:26> 'jq_state *' lvalue ParmVar 0x5608c148a528 'jq' 'jq_state *'
|       |-ImplicitCastExpr 0x5608c148aa58 <col:30> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c148a7b0 <col:30> 'jv':'jv' lvalue ParmVar 0x5608c148a5a0 'a' 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c148aa70 <col:33> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c148a7d0 <col:33> 'jv':'jv' lvalue ParmVar 0x5608c148a618 'b' 'jv':'jv'
|       `-CallExpr 0x5608c148a958 <col:36, col:69> 'jv':'jv'
|         |-ImplicitCastExpr 0x5608c148a940 <col:36> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c148a7f0 <col:36> 'jv (jv, jv)' Function 0x5608c13f5a70 'jv_getpath' 'jv (jv, jv)'
|         |-CallExpr 0x5608c148a868 <col:47, col:56> 'jv':'jv'
|         | |-ImplicitCastExpr 0x5608c148a850 <col:47> 'jv (*)(jv)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5608c148a810 <col:47> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|         | `-ImplicitCastExpr 0x5608c148a890 <col:55> 'jv':'jv' <LValueToRValue>
|         |   `-DeclRefExpr 0x5608c148a830 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c148a5a0 'a' 'jv':'jv'
|         `-CallExpr 0x5608c148a900 <col:59, col:68> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c148a8e8 <col:59> 'jv (*)(jv)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c148a8a8 <col:59> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|           `-ImplicitCastExpr 0x5608c148a928 <col:67> 'jv':'jv' <LValueToRValue>
|             `-DeclRefExpr 0x5608c148a8c8 <col:67> 'jv':'jv' lvalue ParmVar 0x5608c148a618 'b' 'jv':'jv'
|-FunctionDecl 0x5608c148ac50 <line:1197:1, col:76> col:11 used f_delpaths 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c148aac0 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c148ab38 <col:36, col:39> col:39 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c148abb0 <col:42, col:45> col:45 used b 'jv':'jv'
| `-CompoundStmt 0x5608c148adf0 <col:48, col:76>
|   `-ReturnStmt 0x5608c148ade0 <col:50, col:73>
|     `-CallExpr 0x5608c148ad80 <col:57, col:73> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c148ad68 <col:57> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c148ad08 <col:57> 'jv (jv, jv)' Function 0x5608c13f5c40 'jv_delpaths' 'jv (jv, jv)'
|       |-ImplicitCastExpr 0x5608c148adb0 <col:69> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c148ad28 <col:69> 'jv':'jv' lvalue ParmVar 0x5608c148ab38 'a' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c148adc8 <col:72> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c148ad48 <col:72> 'jv':'jv' lvalue ParmVar 0x5608c148abb0 'b' 'jv':'jv'
|-FunctionDecl 0x5608c148afa8 <line:1198:1, col:66> col:11 used f_has 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c148ae18 <col:17, col:27> col:27 jq 'jq_state *'
| |-ParmVarDecl 0x5608c148ae90 <col:31, col:34> col:34 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c148af08 <col:37, col:40> col:40 used b 'jv':'jv'
| `-CompoundStmt 0x5608c148b148 <col:43, col:66>
|   `-ReturnStmt 0x5608c148b138 <col:45, col:63>
|     `-CallExpr 0x5608c148b0d8 <col:52, col:63> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c148b0c0 <col:52> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c148b060 <col:52> 'jv (jv, jv)' Function 0x5608c13f5648 'jv_has' 'jv (jv, jv)'
|       |-ImplicitCastExpr 0x5608c148b108 <col:59> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c148b080 <col:59> 'jv':'jv' lvalue ParmVar 0x5608c148ae90 'a' 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c148b120 <col:62> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c148b0a0 <col:62> 'jv':'jv' lvalue ParmVar 0x5608c148af08 'b' 'jv':'jv'
|-FunctionDecl 0x5608c148b280 <line:1200:1, line:1205:1> line:1200:11 used f_modulemeta 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c148b170 <col:24, col:34> col:34 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c148b1e8 <col:38, col:41> col:41 used a 'jv':'jv'
| `-CompoundStmt 0x5608c148b6e0 <col:44, line:1205:1>
|   |-IfStmt 0x5608c148b5d8 <line:1201:3, line:1203:3>
|   | |-BinaryOperator 0x5608c148b418 <line:1201:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c148b3e8 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c148b388 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c148b370 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c148b330 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c148b3b0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c148b350 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c148b1e8 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c148b400 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c148b3c8 <col:25> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-CompoundStmt 0x5608c148b5c0 <col:41, line:1203:3>
|   |   `-ReturnStmt 0x5608c148b5b0 <line:1202:5, col:83>
|   |     `-CallExpr 0x5608c148b568 <col:12, col:83> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c148b550 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c148b438 <col:12> 'jv (jv, jv)' Function 0x5608c1419b18 'ret_error' 'jv (jv, jv)'
|   |       |-ImplicitCastExpr 0x5608c148b598 <col:22> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c148b458 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c148b1e8 'a' 'jv':'jv'
|   |       `-CallExpr 0x5608c148b4f8 <col:25, col:82> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c148b4e0 <col:25> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c148b478 <col:25> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |         `-ImplicitCastExpr 0x5608c148b538 <col:35> 'const char *' <NoOp>
|   |           `-ImplicitCastExpr 0x5608c148b520 <col:35> 'char *' <ArrayToPointerDecay>
|   |             `-StringLiteral 0x5608c148b498 <col:35> 'char [46]' lvalue "modulemeta input module name must be a string"
|   `-ReturnStmt 0x5608c148b6d0 <line:1204:3, col:32>
|     `-CallExpr 0x5608c148b670 <col:10, col:32> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c148b658 <col:10> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c148b5f8 <col:10> 'jv (jq_state *, jv)' Function 0x5608c140f0a8 'load_module_meta' 'jv (jq_state *, jv)'
|       |-ImplicitCastExpr 0x5608c148b6a0 <col:27> 'jq_state *' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c148b618 <col:27> 'jq_state *' lvalue ParmVar 0x5608c148b170 'jq' 'jq_state *'
|       `-ImplicitCastExpr 0x5608c148b6b8 <col:31> 'jv':'jv' <LValueToRValue>
|         `-DeclRefExpr 0x5608c148b638 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c148b1e8 'a' 'jv':'jv'
|-FunctionDecl 0x5608c148b820 <line:1207:1, line:1218:1> line:1207:11 used f_input 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c148b710 <col:19, col:29> col:29 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c148b788 <col:33, col:36> col:36 used input 'jv':'jv'
| `-CompoundStmt 0x5608c148c310 <col:43, line:1218:1>
|   |-CallExpr 0x5608c148b928 <line:1208:3, col:16> 'void'
|   | |-ImplicitCastExpr 0x5608c148b910 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c148b8d0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c148b950 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c148b8f0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c148b788 'input' 'jv':'jv'
|   |-DeclStmt 0x5608c148b9e0 <line:1209:3, col:17>
|   | `-VarDecl 0x5608c148b978 <col:3, col:15> col:15 used cb 'jq_input_cb':'jv (*)(jq_state *, void *)'
|   |-DeclStmt 0x5608c148ba78 <line:1210:3, col:13>
|   | `-VarDecl 0x5608c148ba10 <col:3, col:9> col:9 used data 'void *'
|   |-CallExpr 0x5608c148bbb0 <line:1211:3, col:33> 'void'
|   | |-ImplicitCastExpr 0x5608c148bb98 <col:3> 'void (*)(jq_state *, jq_input_cb *, void **)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c148ba90 <col:3> 'void (jq_state *, jq_input_cb *, void **)' Function 0x5608c13f9918 'jq_get_input_cb' 'void (jq_state *, jq_input_cb *, void **)'
|   | |-ImplicitCastExpr 0x5608c148bbe8 <col:19> 'jq_state *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5608c148bab0 <col:19> 'jq_state *' lvalue ParmVar 0x5608c148b710 'jq' 'jq_state *'
|   | |-UnaryOperator 0x5608c148baf0 <col:23, col:24> 'jq_input_cb *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x5608c148bad0 <col:24> 'jq_input_cb':'jv (*)(jq_state *, void *)' lvalue Var 0x5608c148b978 'cb' 'jq_input_cb':'jv (*)(jq_state *, void *)'
|   | `-UnaryOperator 0x5608c148bb28 <col:28, col:29> 'void **' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x5608c148bb08 <col:29> 'void *' lvalue Var 0x5608c148ba10 'data' 'void *'
|   |-IfStmt 0x5608c148be48 <line:1212:3, line:1213:50>
|   | |-BinaryOperator 0x5608c148bcd0 <line:1212:7, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c148bca0 <src/builtin.c:1212:7> 'jq_input_cb':'jv (*)(jq_state *, void *)' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c148bc00 <col:7> 'jq_input_cb':'jv (*)(jq_state *, void *)' lvalue Var 0x5608c148b978 'cb' 'jq_input_cb':'jv (*)(jq_state *, void *)'
|   | | `-ImplicitCastExpr 0x5608c148bcb8 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'jq_input_cb':'jv (*)(jq_state *, void *)' <BitCast>
|   | |   `-ParenExpr 0x5608c148bc80 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x5608c148bc58 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5608c148bc20 <col:24> 'int' 0
|   | `-ReturnStmt 0x5608c148be38 <src/builtin.c:1213:5, col:50>
|   |   `-CallExpr 0x5608c148be10 <col:12, col:50> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c148bdf8 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c148bcf0 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c148bda0 <col:32, col:49> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c148bd88 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c148bd10 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c148bde0 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c148bdc8 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c148bd68 <col:42> 'char [6]' lvalue "break"
|   |-DeclStmt 0x5608c148bfb8 <line:1214:3, col:22>
|   | `-VarDecl 0x5608c148be78 <col:3, col:21> col:6 used v 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c148bf58 <col:10, col:21> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c148bf40 <col:10> 'jq_input_cb':'jv (*)(jq_state *, void *)' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c148bee0 <col:10> 'jq_input_cb':'jv (*)(jq_state *, void *)' lvalue Var 0x5608c148b978 'cb' 'jq_input_cb':'jv (*)(jq_state *, void *)'
|   |     |-ImplicitCastExpr 0x5608c148bf88 <col:13> 'jq_state *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c148bf00 <col:13> 'jq_state *' lvalue ParmVar 0x5608c148b710 'jq' 'jq_state *'
|   |     `-ImplicitCastExpr 0x5608c148bfa0 <col:17> 'void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c148bf20 <col:17> 'void *' lvalue Var 0x5608c148ba10 'data' 'void *'
|   |-IfStmt 0x5608c148c1d0 <line:1215:3, line:1216:12>
|   | |-BinaryOperator 0x5608c148c160 <line:1215:7, col:54> 'int' '||'
|   | | |-CallExpr 0x5608c148c028 <col:7, col:20> 'int'
|   | | | |-ImplicitCastExpr 0x5608c148c010 <col:7> 'int (*)(jv)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5608c148bfd0 <col:7> 'int (jv)' Function 0x5608c13d1860 'jv_is_valid' 'int (jv)'
|   | | | `-ImplicitCastExpr 0x5608c148c050 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5608c148bff0 <col:19> 'jv':'jv' lvalue Var 0x5608c148be78 'v' 'jv':'jv'
|   | | `-CallExpr 0x5608c148c138 <col:25, col:54> 'int'
|   | |   |-ImplicitCastExpr 0x5608c148c120 <col:25> 'int (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c148c068 <col:25> 'int (jv)' Function 0x5608c13daf50 'jv_invalid_has_msg' 'int (jv)'
|   | |   `-CallExpr 0x5608c148c0e0 <col:44, col:53> 'jv':'jv'
|   | |     |-ImplicitCastExpr 0x5608c148c0c8 <col:44> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x5608c148c088 <col:44> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | |     `-ImplicitCastExpr 0x5608c148c108 <col:52> 'jv':'jv' <LValueToRValue>
|   | |       `-DeclRefExpr 0x5608c148c0a8 <col:52> 'jv':'jv' lvalue Var 0x5608c148be78 'v' 'jv':'jv'
|   | `-ReturnStmt 0x5608c148c1b8 <line:1216:5, col:12>
|   |   `-ImplicitCastExpr 0x5608c148c1a0 <col:12> 'jv':'jv' <LValueToRValue>
|   |     `-DeclRefExpr 0x5608c148c180 <col:12> 'jv':'jv' lvalue Var 0x5608c148be78 'v' 'jv':'jv'
|   `-ReturnStmt 0x5608c148c300 <line:1217:3, col:48>
|     `-CallExpr 0x5608c148c2d8 <col:10, col:48> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c148c2c0 <col:10> 'jv (*)(jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c148c1f0 <col:10> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|       `-CallExpr 0x5608c148c268 <col:30, col:47> 'jv':'jv'
|         |-ImplicitCastExpr 0x5608c148c250 <col:30> 'jv (*)(const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c148c210 <col:30> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|         `-ImplicitCastExpr 0x5608c148c2a8 <col:40> 'const char *' <NoOp>
|           `-ImplicitCastExpr 0x5608c148c290 <col:40> 'char *' <ArrayToPointerDecay>
|             `-StringLiteral 0x5608c148c230 <col:40> 'char [6]' lvalue "break"
|-FunctionDecl 0x5608c148c480 <line:1220:1, line:1227:1> line:1220:11 used f_debug 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c148c370 <col:19, col:29> col:29 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c148c3e8 <col:33, col:36> col:36 used input 'jv':'jv'
| `-CompoundStmt 0x5608c148ca60 <col:43, line:1227:1>
|   |-DeclStmt 0x5608c148c5a8 <line:1221:3, col:15>
|   | `-VarDecl 0x5608c148c540 <col:3, col:13> col:13 used cb 'jq_msg_cb':'void (*)(void *, jv)'
|   |-DeclStmt 0x5608c148c640 <line:1222:3, col:13>
|   | `-VarDecl 0x5608c148c5d8 <col:3, col:9> col:9 used data 'void *'
|   |-CallExpr 0x5608c148c780 <line:1223:3, col:33> 'void'
|   | |-ImplicitCastExpr 0x5608c148c768 <col:3> 'void (*)(jq_state *, jq_msg_cb *, void **)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c148c658 <col:3> 'void (jq_state *, jq_msg_cb *, void **)' Function 0x5608c13f9dd8 'jq_get_debug_cb' 'void (jq_state *, jq_msg_cb *, void **)'
|   | |-ImplicitCastExpr 0x5608c148c7b8 <col:19> 'jq_state *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5608c148c678 <col:19> 'jq_state *' lvalue ParmVar 0x5608c148c370 'jq' 'jq_state *'
|   | |-UnaryOperator 0x5608c148c6b8 <col:23, col:24> 'jq_msg_cb *' prefix '&' cannot overflow
|   | | `-DeclRefExpr 0x5608c148c698 <col:24> 'jq_msg_cb':'void (*)(void *, jv)' lvalue Var 0x5608c148c540 'cb' 'jq_msg_cb':'void (*)(void *, jv)'
|   | `-UnaryOperator 0x5608c148c6f0 <col:28, col:29> 'void **' prefix '&' cannot overflow
|   |   `-DeclRefExpr 0x5608c148c6d0 <col:29> 'void *' lvalue Var 0x5608c148c5d8 'data' 'void *'
|   |-IfStmt 0x5608c148c9f8 <line:1224:3, line:1225:28>
|   | |-BinaryOperator 0x5608c148c8a0 <line:1224:7, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c148c870 <src/builtin.c:1224:7> 'jq_msg_cb':'void (*)(void *, jv)' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c148c7d0 <col:7> 'jq_msg_cb':'void (*)(void *, jv)' lvalue Var 0x5608c148c540 'cb' 'jq_msg_cb':'void (*)(void *, jv)'
|   | | `-ImplicitCastExpr 0x5608c148c888 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'jq_msg_cb':'void (*)(void *, jv)' <BitCast>
|   | |   `-ParenExpr 0x5608c148c850 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x5608c148c828 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5608c148c7f0 <col:24> 'int' 0
|   | `-CallExpr 0x5608c148c9b0 <src/builtin.c:1225:5, col:28> 'void'
|   |   |-ImplicitCastExpr 0x5608c148c998 <col:5> 'jq_msg_cb':'void (*)(void *, jv)' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5608c148c8c0 <col:5> 'jq_msg_cb':'void (*)(void *, jv)' lvalue Var 0x5608c148c540 'cb' 'jq_msg_cb':'void (*)(void *, jv)'
|   |   |-ImplicitCastExpr 0x5608c148c9e0 <col:8> 'void *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5608c148c8e0 <col:8> 'void *' lvalue Var 0x5608c148c5d8 'data' 'void *'
|   |   `-CallExpr 0x5608c148c958 <col:14, col:27> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c148c940 <col:14> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c148c900 <col:14> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   |     `-ImplicitCastExpr 0x5608c148c980 <col:22> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c148c920 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c148c3e8 'input' 'jv':'jv'
|   `-ReturnStmt 0x5608c148ca50 <line:1226:3, col:10>
|     `-ImplicitCastExpr 0x5608c148ca38 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c148ca18 <col:10> 'jv':'jv' lvalue ParmVar 0x5608c148c3e8 'input' 'jv':'jv'
|-FunctionDecl 0x5608c148cbb8 <line:1229:1, line:1232:1> line:1229:11 used f_stderr 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c148caa8 <col:20, col:30> col:30 jq 'jq_state *'
| |-ParmVarDecl 0x5608c148cb20 <col:34, col:37> col:37 used input 'jv':'jv'
| `-CompoundStmt 0x5608c148ce68 <col:44, line:1232:1>
|   |-CallExpr 0x5608c148cdd0 <line:1230:3, col:37> 'void'
|   | |-ImplicitCastExpr 0x5608c148cdb8 <col:3> 'void (*)(jv, FILE *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c148cc68 <col:3> 'void (jv, FILE *, int)' Function 0x5608c13e7958 'jv_dumpf' 'void (jv, FILE *, int)'
|   | |-CallExpr 0x5608c148cce0 <col:12, col:25> 'jv':'jv'
|   | | |-ImplicitCastExpr 0x5608c148ccc8 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x5608c148cc88 <col:12> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | `-ImplicitCastExpr 0x5608c148cd08 <col:20> 'jv':'jv' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5608c148cca8 <col:20> 'jv':'jv' lvalue ParmVar 0x5608c148cb20 'input' 'jv':'jv'
|   | |-ImplicitCastExpr 0x5608c148ce08 </usr/include/stdio.h:149:16> 'FILE *' <LValueToRValue>
|   | | `-DeclRefExpr 0x5608c148cd20 <col:16> 'FILE *' lvalue Var 0x5608c13a1c38 'stderr' 'FILE *'
|   | `-IntegerLiteral 0x5608c148cd40 <src/builtin.c:1230:36> 'int' 0
|   `-ReturnStmt 0x5608c148ce58 <line:1231:3, col:10>
|     `-ImplicitCastExpr 0x5608c148ce40 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c148ce20 <col:10> 'jv':'jv' lvalue ParmVar 0x5608c148cb20 'input' 'jv':'jv'
|-FunctionDecl 0x5608c148cfa8 <line:1234:1, line:1243:1> line:1234:11 used tm2jv 'jv (struct tm *)' static
| |-ParmVarDecl 0x5608c148ceb0 <col:17, col:28> col:28 used tm 'struct tm *'
| `-CompoundStmt 0x5608c148dcf8 <col:32, line:1243:1>
|   `-ReturnStmt 0x5608c148dce8 <line:1235:3, ./src/jv.h:94:98>
|     `-ParenExpr 0x5608c148dcc8 <col:45, col:98> 'jv':'jv'
|       `-CallExpr 0x5608c148dc98 <col:46, col:97> 'jv':'jv'
|         |-ImplicitCastExpr 0x5608c148dc80 <col:46> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c148d050 <col:46> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|         |-ParenExpr 0x5608c148db68 <line:93:42, col:92> 'jv':'jv'
|         | `-CallExpr 0x5608c148db38 <col:43, col:91> 'jv':'jv'
|         |   |-ImplicitCastExpr 0x5608c148db20 <col:43> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         |   | `-DeclRefExpr 0x5608c148d070 <col:43> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|         |   |-ParenExpr 0x5608c148da08 <line:92:39, col:86> 'jv':'jv'
|         |   | `-CallExpr 0x5608c148d9d8 <col:40, col:85> 'jv':'jv'
|         |   |   |-ImplicitCastExpr 0x5608c148d9c0 <col:40> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         |   |   | `-DeclRefExpr 0x5608c148d090 <col:40> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|         |   |   |-ParenExpr 0x5608c148d8a8 <line:91:36, col:80> 'jv':'jv'
|         |   |   | `-CallExpr 0x5608c148d878 <col:37, col:79> 'jv':'jv'
|         |   |   |   |-ImplicitCastExpr 0x5608c148d860 <col:37> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         |   |   |   | `-DeclRefExpr 0x5608c148d0b0 <col:37> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|         |   |   |   |-ParenExpr 0x5608c148d748 <line:90:33, col:74> 'jv':'jv'
|         |   |   |   | `-CallExpr 0x5608c148d718 <col:34, col:73> 'jv':'jv'
|         |   |   |   |   |-ImplicitCastExpr 0x5608c148d700 <col:34> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         |   |   |   |   | `-DeclRefExpr 0x5608c148d0d0 <col:34> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|         |   |   |   |   |-ParenExpr 0x5608c148d5e8 <line:89:30, col:68> 'jv':'jv'
|         |   |   |   |   | `-CallExpr 0x5608c148d5b8 <col:31, col:67> 'jv':'jv'
|         |   |   |   |   |   |-ImplicitCastExpr 0x5608c148d5a0 <col:31> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         |   |   |   |   |   | `-DeclRefExpr 0x5608c148d0f0 <col:31> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|         |   |   |   |   |   |-ParenExpr 0x5608c148d488 <line:88:27, col:62> 'jv':'jv'
|         |   |   |   |   |   | `-CallExpr 0x5608c148d458 <col:28, col:61> 'jv':'jv'
|         |   |   |   |   |   |   |-ImplicitCastExpr 0x5608c148d440 <col:28> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         |   |   |   |   |   |   | `-DeclRefExpr 0x5608c148d110 <col:28> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|         |   |   |   |   |   |   |-ParenExpr 0x5608c148d328 <line:87:23, col:53> 'jv':'jv'
|         |   |   |   |   |   |   | `-CallExpr 0x5608c148d2f8 <col:24, col:52> 'jv':'jv'
|         |   |   |   |   |   |   |   |-ImplicitCastExpr 0x5608c148d2e0 <col:24> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|         |   |   |   |   |   |   |   | `-DeclRefExpr 0x5608c148d130 <col:24> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|         |   |   |   |   |   |   |   |-CallExpr 0x5608c148d188 <col:40, col:49> 'jv':'jv'
|         |   |   |   |   |   |   |   | `-ImplicitCastExpr 0x5608c148d170 <col:40> 'jv (*)(void)' <FunctionToPointerDecay>
|         |   |   |   |   |   |   |   |   `-DeclRefExpr 0x5608c148d150 <col:40> 'jv (void)' Function 0x5608c13dbf50 'jv_array' 'jv (void)'
|         |   |   |   |   |   |   |   `-CallExpr 0x5608c148d2a0 <src/builtin.c:1235:19, col:47> 'jv':'jv'
|         |   |   |   |   |   |   |     |-ImplicitCastExpr 0x5608c148d288 <col:19> 'jv (*)(double)' <FunctionToPointerDecay>
|         |   |   |   |   |   |   |     | `-DeclRefExpr 0x5608c148d1a8 <col:19> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         |   |   |   |   |   |   |     `-ImplicitCastExpr 0x5608c148d2c8 <col:29, col:43> 'double' <IntegralToFloating>
|         |   |   |   |   |   |   |       `-BinaryOperator 0x5608c148d268 <col:29, col:43> 'int' '+'
|         |   |   |   |   |   |   |         |-ImplicitCastExpr 0x5608c148d250 <col:29, col:33> 'int' <LValueToRValue>
|         |   |   |   |   |   |   |         | `-MemberExpr 0x5608c148d200 <col:29, col:33> 'int' lvalue ->tm_year 0x5608c1385c30
|         |   |   |   |   |   |   |         |   `-ImplicitCastExpr 0x5608c148d1e8 <col:29> 'struct tm *' <LValueToRValue>
|         |   |   |   |   |   |   |         |     `-DeclRefExpr 0x5608c148d1c8 <col:29> 'struct tm *' lvalue ParmVar 0x5608c148ceb0 'tm' 'struct tm *'
|         |   |   |   |   |   |   |         `-IntegerLiteral 0x5608c148d230 <col:43> 'int' 1900
|         |   |   |   |   |   |   `-CallExpr 0x5608c148d3e8 <line:1236:19, col:39> 'jv':'jv'
|         |   |   |   |   |   |     |-ImplicitCastExpr 0x5608c148d3d0 <col:19> 'jv (*)(double)' <FunctionToPointerDecay>
|         |   |   |   |   |   |     | `-DeclRefExpr 0x5608c148d348 <col:19> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         |   |   |   |   |   |     `-ImplicitCastExpr 0x5608c148d428 <col:29, col:33> 'double' <IntegralToFloating>
|         |   |   |   |   |   |       `-ImplicitCastExpr 0x5608c148d410 <col:29, col:33> 'int' <LValueToRValue>
|         |   |   |   |   |   |         `-MemberExpr 0x5608c148d3a0 <col:29, col:33> 'int' lvalue ->tm_mon 0x5608c1385bc8
|         |   |   |   |   |   |           `-ImplicitCastExpr 0x5608c148d388 <col:29> 'struct tm *' <LValueToRValue>
|         |   |   |   |   |   |             `-DeclRefExpr 0x5608c148d368 <col:29> 'struct tm *' lvalue ParmVar 0x5608c148ceb0 'tm' 'struct tm *'
|         |   |   |   |   |   `-CallExpr 0x5608c148d548 <line:1237:19, col:40> 'jv':'jv'
|         |   |   |   |   |     |-ImplicitCastExpr 0x5608c148d530 <col:19> 'jv (*)(double)' <FunctionToPointerDecay>
|         |   |   |   |   |     | `-DeclRefExpr 0x5608c148d4a8 <col:19> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         |   |   |   |   |     `-ImplicitCastExpr 0x5608c148d588 <col:29, col:33> 'double' <IntegralToFloating>
|         |   |   |   |   |       `-ImplicitCastExpr 0x5608c148d570 <col:29, col:33> 'int' <LValueToRValue>
|         |   |   |   |   |         `-MemberExpr 0x5608c148d500 <col:29, col:33> 'int' lvalue ->tm_mday 0x5608c1385b60
|         |   |   |   |   |           `-ImplicitCastExpr 0x5608c148d4e8 <col:29> 'struct tm *' <LValueToRValue>
|         |   |   |   |   |             `-DeclRefExpr 0x5608c148d4c8 <col:29> 'struct tm *' lvalue ParmVar 0x5608c148ceb0 'tm' 'struct tm *'
|         |   |   |   |   `-CallExpr 0x5608c148d6a8 <line:1238:19, col:40> 'jv':'jv'
|         |   |   |   |     |-ImplicitCastExpr 0x5608c148d690 <col:19> 'jv (*)(double)' <FunctionToPointerDecay>
|         |   |   |   |     | `-DeclRefExpr 0x5608c148d608 <col:19> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         |   |   |   |     `-ImplicitCastExpr 0x5608c148d6e8 <col:29, col:33> 'double' <IntegralToFloating>
|         |   |   |   |       `-ImplicitCastExpr 0x5608c148d6d0 <col:29, col:33> 'int' <LValueToRValue>
|         |   |   |   |         `-MemberExpr 0x5608c148d660 <col:29, col:33> 'int' lvalue ->tm_hour 0x5608c1385af8
|         |   |   |   |           `-ImplicitCastExpr 0x5608c148d648 <col:29> 'struct tm *' <LValueToRValue>
|         |   |   |   |             `-DeclRefExpr 0x5608c148d628 <col:29> 'struct tm *' lvalue ParmVar 0x5608c148ceb0 'tm' 'struct tm *'
|         |   |   |   `-CallExpr 0x5608c148d808 <line:1239:19, col:39> 'jv':'jv'
|         |   |   |     |-ImplicitCastExpr 0x5608c148d7f0 <col:19> 'jv (*)(double)' <FunctionToPointerDecay>
|         |   |   |     | `-DeclRefExpr 0x5608c148d768 <col:19> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         |   |   |     `-ImplicitCastExpr 0x5608c148d848 <col:29, col:33> 'double' <IntegralToFloating>
|         |   |   |       `-ImplicitCastExpr 0x5608c148d830 <col:29, col:33> 'int' <LValueToRValue>
|         |   |   |         `-MemberExpr 0x5608c148d7c0 <col:29, col:33> 'int' lvalue ->tm_min 0x5608c1385a90
|         |   |   |           `-ImplicitCastExpr 0x5608c148d7a8 <col:29> 'struct tm *' <LValueToRValue>
|         |   |   |             `-DeclRefExpr 0x5608c148d788 <col:29> 'struct tm *' lvalue ParmVar 0x5608c148ceb0 'tm' 'struct tm *'
|         |   |   `-CallExpr 0x5608c148d968 <line:1240:19, col:39> 'jv':'jv'
|         |   |     |-ImplicitCastExpr 0x5608c148d950 <col:19> 'jv (*)(double)' <FunctionToPointerDecay>
|         |   |     | `-DeclRefExpr 0x5608c148d8c8 <col:19> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         |   |     `-ImplicitCastExpr 0x5608c148d9a8 <col:29, col:33> 'double' <IntegralToFloating>
|         |   |       `-ImplicitCastExpr 0x5608c148d990 <col:29, col:33> 'int' <LValueToRValue>
|         |   |         `-MemberExpr 0x5608c148d920 <col:29, col:33> 'int' lvalue ->tm_sec 0x5608c1385a28
|         |   |           `-ImplicitCastExpr 0x5608c148d908 <col:29> 'struct tm *' <LValueToRValue>
|         |   |             `-DeclRefExpr 0x5608c148d8e8 <col:29> 'struct tm *' lvalue ParmVar 0x5608c148ceb0 'tm' 'struct tm *'
|         |   `-CallExpr 0x5608c148dac8 <line:1241:19, col:40> 'jv':'jv'
|         |     |-ImplicitCastExpr 0x5608c148dab0 <col:19> 'jv (*)(double)' <FunctionToPointerDecay>
|         |     | `-DeclRefExpr 0x5608c148da28 <col:19> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         |     `-ImplicitCastExpr 0x5608c148db08 <col:29, col:33> 'double' <IntegralToFloating>
|         |       `-ImplicitCastExpr 0x5608c148daf0 <col:29, col:33> 'int' <LValueToRValue>
|         |         `-MemberExpr 0x5608c148da80 <col:29, col:33> 'int' lvalue ->tm_wday 0x5608c1385c98
|         |           `-ImplicitCastExpr 0x5608c148da68 <col:29> 'struct tm *' <LValueToRValue>
|         |             `-DeclRefExpr 0x5608c148da48 <col:29> 'struct tm *' lvalue ParmVar 0x5608c148ceb0 'tm' 'struct tm *'
|         `-CallExpr 0x5608c148dc28 <line:1242:19, col:40> 'jv':'jv'
|           |-ImplicitCastExpr 0x5608c148dc10 <col:19> 'jv (*)(double)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5608c148db88 <col:19> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|           `-ImplicitCastExpr 0x5608c148dc68 <col:29, col:33> 'double' <IntegralToFloating>
|             `-ImplicitCastExpr 0x5608c148dc50 <col:29, col:33> 'int' <LValueToRValue>
|               `-MemberExpr 0x5608c148dbe0 <col:29, col:33> 'int' lvalue ->tm_yday 0x5608c1385d00
|                 `-ImplicitCastExpr 0x5608c148dbc8 <col:29> 'struct tm *' <LValueToRValue>
|                   `-DeclRefExpr 0x5608c148dba8 <col:29> 'struct tm *' lvalue ParmVar 0x5608c148ceb0 'tm' 'struct tm *'
|-FunctionDecl 0x5608c148ddc8 <line:1281:1, line:1308:1> line:1281:15 used my_mktime 'time_t (struct tm *)' static
| |-ParmVarDecl 0x5608c148dd38 <col:25, col:36> col:36 used tm 'struct tm *'
| `-CompoundStmt 0x5608c148e018 <col:40, line:1308:1>
|   `-ReturnStmt 0x5608c148e008 <line:1283:3, col:19>
|     `-CallExpr 0x5608c148df20 <col:10, col:19> 'time_t':'long'
|       |-ImplicitCastExpr 0x5608c148df08 <col:10> 'time_t (*)(struct tm *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c148de70 <col:10> 'time_t (struct tm *)' Function 0x5608c1394d10 'timegm' 'time_t (struct tm *)'
|       `-ImplicitCastExpr 0x5608c148df48 <col:17> 'struct tm *' <LValueToRValue>
|         `-DeclRefExpr 0x5608c148de90 <col:17> 'struct tm *' lvalue ParmVar 0x5608c148dd38 'tm' 'struct tm *'
|-FunctionDecl 0x5608c148e148 <line:1311:1, line:1342:1> line:1311:13 used set_tm_wday 'void (struct tm *)' static
| |-ParmVarDecl 0x5608c148e058 <col:25, col:36> col:36 used tm 'struct tm *'
| `-CompoundStmt 0x5608c14960e0 <col:40, line:1342:1>
|   |-DeclStmt 0x5608c1495318 <line:1322:3, col:43>
|   | `-VarDecl 0x5608c1495190 <col:3, col:40> col:7 used century 'int' cinit
|   |   `-BinaryOperator 0x5608c14952f8 <col:17, col:40> 'int' '/'
|   |     |-ParenExpr 0x5608c14952b8 <col:17, col:36> 'int'
|   |     | `-BinaryOperator 0x5608c1495298 <col:18, col:29> 'int' '+'
|   |     |   |-IntegerLiteral 0x5608c14951f8 <col:18> 'int' 1900
|   |     |   `-ImplicitCastExpr 0x5608c1495280 <col:25, col:29> 'int' <LValueToRValue>
|   |     |     `-MemberExpr 0x5608c1495250 <col:25, col:29> 'int' lvalue ->tm_year 0x5608c1385c30
|   |     |       `-ImplicitCastExpr 0x5608c1495238 <col:25> 'struct tm *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x5608c1495218 <col:25> 'struct tm *' lvalue ParmVar 0x5608c148e058 'tm' 'struct tm *'
|   |     `-IntegerLiteral 0x5608c14952d8 <col:40> 'int' 100
|   |-DeclStmt 0x5608c14954d0 <line:1323:3, col:40>
|   | `-VarDecl 0x5608c1495348 <col:3, col:37> col:7 used year 'int' cinit
|   |   `-BinaryOperator 0x5608c14954b0 <col:14, col:37> 'int' '%'
|   |     |-ParenExpr 0x5608c1495470 <col:14, col:33> 'int'
|   |     | `-BinaryOperator 0x5608c1495450 <col:15, col:26> 'int' '+'
|   |     |   |-IntegerLiteral 0x5608c14953b0 <col:15> 'int' 1900
|   |     |   `-ImplicitCastExpr 0x5608c1495438 <col:22, col:26> 'int' <LValueToRValue>
|   |     |     `-MemberExpr 0x5608c1495408 <col:22, col:26> 'int' lvalue ->tm_year 0x5608c1385c30
|   |     |       `-ImplicitCastExpr 0x5608c14953f0 <col:22> 'struct tm *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x5608c14953d0 <col:22> 'struct tm *' lvalue ParmVar 0x5608c148e058 'tm' 'struct tm *'
|   |     `-IntegerLiteral 0x5608c1495490 <col:37> 'int' 100
|   |-IfStmt 0x5608c14955e0 <line:1324:3, line:1325:9>
|   | |-BinaryOperator 0x5608c1495588 <line:1324:7, col:20> 'int' '<'
|   | | |-ImplicitCastExpr 0x5608c1495570 <col:7, col:11> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x5608c1495520 <col:7, col:11> 'int' lvalue ->tm_mon 0x5608c1385bc8
|   | | |   `-ImplicitCastExpr 0x5608c1495508 <col:7> 'struct tm *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14954e8 <col:7> 'struct tm *' lvalue ParmVar 0x5608c148e058 'tm' 'struct tm *'
|   | | `-IntegerLiteral 0x5608c1495550 <col:20> 'int' 2
|   | `-UnaryOperator 0x5608c14955c8 <line:1325:5, col:9> 'int' postfix '--'
|   |   `-DeclRefExpr 0x5608c14955a8 <col:5> 'int' lvalue Var 0x5608c1495348 'year' 'int'
|   |-DeclStmt 0x5608c1495740 <line:1330:3, col:27>
|   | `-VarDecl 0x5608c1495618 <col:3, col:26> col:7 used mon 'int' cinit
|   |   `-BinaryOperator 0x5608c1495720 <col:13, col:26> 'int' '-'
|   |     |-ImplicitCastExpr 0x5608c1495708 <col:13, col:17> 'int' <LValueToRValue>
|   |     | `-MemberExpr 0x5608c14956b8 <col:13, col:17> 'int' lvalue ->tm_mon 0x5608c1385bc8
|   |     |   `-ImplicitCastExpr 0x5608c14956a0 <col:13> 'struct tm *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x5608c1495680 <col:13> 'struct tm *' lvalue ParmVar 0x5608c148e058 'tm' 'struct tm *'
|   |     `-IntegerLiteral 0x5608c14956e8 <col:26> 'int' 1
|   |-IfStmt 0x5608c1495840 <line:1331:3, line:1332:12>
|   | |-BinaryOperator 0x5608c14957b0 <line:1331:7, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x5608c1495798 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c1495758 <col:7> 'int' lvalue Var 0x5608c1495618 'mon' 'int'
|   | | `-IntegerLiteral 0x5608c1495778 <col:13> 'int' 1
|   | `-CompoundAssignOperator 0x5608c1495810 <line:1332:5, col:12> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x5608c14957d0 <col:5> 'int' lvalue Var 0x5608c1495618 'mon' 'int'
|   |   `-IntegerLiteral 0x5608c14957f0 <col:12> 'int' 12
|   |-DeclStmt 0x5608c1495f00 <line:1333:3, line:1334:128>
|   | `-VarDecl 0x5608c1495878 <line:1333:3, line:1334:127> line:1333:7 used wday 'int' cinit
|   |   `-BinaryOperator 0x5608c1495ee0 <line:1334:5, col:127> 'int' '%'
|   |     |-ParenExpr 0x5608c1495ea0 <col:5, col:123> 'int'
|   |     | `-BinaryOperator 0x5608c1495e80 <col:6, col:116> 'int' '-'
|   |     |   |-BinaryOperator 0x5608c1495de8 <col:6, col:108> 'int' '+'
|   |     |   | |-BinaryOperator 0x5608c1495c98 <col:6, col:80> 'int' '+'
|   |     |   | | |-BinaryOperator 0x5608c1495b48 <col:6, col:52> 'int' '+'
|   |     |   | | | |-BinaryOperator 0x5608c1495af0 <col:6, col:48> 'int' '+'
|   |     |   | | | | |-ImplicitCastExpr 0x5608c1495ad8 <col:6, col:10> 'int' <LValueToRValue>
|   |     |   | | | | | `-MemberExpr 0x5608c1495918 <col:6, col:10> 'int' lvalue ->tm_mday 0x5608c1385b60
|   |     |   | | | | |   `-ImplicitCastExpr 0x5608c1495900 <col:6> 'struct tm *' <LValueToRValue>
|   |     |   | | | | |     `-DeclRefExpr 0x5608c14958e0 <col:6> 'struct tm *' lvalue ParmVar 0x5608c148e058 'tm' 'struct tm *'
|   |     |   | | | | `-CStyleCastExpr 0x5608c1495ab0 <col:20, col:48> 'int' <FloatingToIntegral>
|   |     |   | | | |   `-CallExpr 0x5608c1495a70 <col:25, col:48> 'double'
|   |     |   | | | |     |-ImplicitCastExpr 0x5608c1495a58 <col:25> 'double (*)(double)' <FunctionToPointerDecay>
|   |     |   | | | |     | `-DeclRefExpr 0x5608c1495948 <col:25> 'double (double)' Function 0x5608c122c5c0 'floor' 'double (double)'
|   |     |   | | | |     `-ParenExpr 0x5608c1495a38 <col:31, col:47> 'double'
|   |     |   | | | |       `-BinaryOperator 0x5608c1495a18 <col:32, col:44> 'double' '-'
|   |     |   | | | |         |-BinaryOperator 0x5608c14959d8 <col:32, col:38> 'double' '*'
|   |     |   | | | |         | |-FloatingLiteral 0x5608c1495968 <col:32> 'double' 2.600000e+00
|   |     |   | | | |         | `-ImplicitCastExpr 0x5608c14959c0 <col:38> 'double' <IntegralToFloating>
|   |     |   | | | |         |   `-ImplicitCastExpr 0x5608c14959a8 <col:38> 'int' <LValueToRValue>
|   |     |   | | | |         |     `-DeclRefExpr 0x5608c1495988 <col:38> 'int' lvalue Var 0x5608c1495618 'mon' 'int'
|   |     |   | | | |         `-FloatingLiteral 0x5608c14959f8 <col:44> 'double' 2.000000e-01
|   |     |   | | | `-ImplicitCastExpr 0x5608c1495b30 <col:52> 'int' <LValueToRValue>
|   |     |   | | |   `-DeclRefExpr 0x5608c1495b10 <col:52> 'int' lvalue Var 0x5608c1495348 'year' 'int'
|   |     |   | | `-CStyleCastExpr 0x5608c1495c70 <col:59, col:80> 'int' <FloatingToIntegral>
|   |     |   | |   `-CallExpr 0x5608c1495c30 <col:64, col:80> 'double'
|   |     |   | |     |-ImplicitCastExpr 0x5608c1495c18 <col:64> 'double (*)(double)' <FunctionToPointerDecay>
|   |     |   | |     | `-DeclRefExpr 0x5608c1495b68 <col:64> 'double (double)' Function 0x5608c122c5c0 'floor' 'double (double)'
|   |     |   | |     `-BinaryOperator 0x5608c1495bf8 <col:70, col:77> 'double' '/'
|   |     |   | |       |-ImplicitCastExpr 0x5608c1495be0 <col:70> 'double' <IntegralToFloating>
|   |     |   | |       | `-ImplicitCastExpr 0x5608c1495bc8 <col:70> 'int' <LValueToRValue>
|   |     |   | |       |   `-DeclRefExpr 0x5608c1495b88 <col:70> 'int' lvalue Var 0x5608c1495348 'year' 'int'
|   |     |   | |       `-FloatingLiteral 0x5608c1495ba8 <col:77> 'double' 4.000000e+00
|   |     |   | `-CStyleCastExpr 0x5608c1495dc0 <col:84, col:108> 'int' <FloatingToIntegral>
|   |     |   |   `-CallExpr 0x5608c1495d80 <col:89, col:108> 'double'
|   |     |   |     |-ImplicitCastExpr 0x5608c1495d68 <col:89> 'double (*)(double)' <FunctionToPointerDecay>
|   |     |   |     | `-DeclRefExpr 0x5608c1495cb8 <col:89> 'double (double)' Function 0x5608c122c5c0 'floor' 'double (double)'
|   |     |   |     `-BinaryOperator 0x5608c1495d48 <col:95, col:105> 'double' '/'
|   |     |   |       |-ImplicitCastExpr 0x5608c1495d30 <col:95> 'double' <IntegralToFloating>
|   |     |   |       | `-ImplicitCastExpr 0x5608c1495d18 <col:95> 'int' <LValueToRValue>
|   |     |   |       |   `-DeclRefExpr 0x5608c1495cd8 <col:95> 'int' lvalue Var 0x5608c1495190 'century' 'int'
|   |     |   |       `-FloatingLiteral 0x5608c1495cf8 <col:105> 'double' 4.000000e+00
|   |     |   `-BinaryOperator 0x5608c1495e60 <col:112, col:116> 'int' '*'
|   |     |     |-IntegerLiteral 0x5608c1495e08 <col:112> 'int' 2
|   |     |     `-ImplicitCastExpr 0x5608c1495e48 <col:116> 'int' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5608c1495e28 <col:116> 'int' lvalue Var 0x5608c1495190 'century' 'int'
|   |     `-IntegerLiteral 0x5608c1495ec0 <col:127> 'int' 7
|   |-IfStmt 0x5608c1496000 <line:1335:3, line:1336:13>
|   | |-BinaryOperator 0x5608c1495f70 <line:1335:7, col:14> 'int' '<'
|   | | |-ImplicitCastExpr 0x5608c1495f58 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c1495f18 <col:7> 'int' lvalue Var 0x5608c1495878 'wday' 'int'
|   | | `-IntegerLiteral 0x5608c1495f38 <col:14> 'int' 0
|   | `-CompoundAssignOperator 0x5608c1495fd0 <line:1336:5, col:13> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x5608c1495f90 <col:5> 'int' lvalue Var 0x5608c1495878 'wday' 'int'
|   |   `-IntegerLiteral 0x5608c1495fb0 <col:13> 'int' 7
|   `-BinaryOperator 0x5608c14960c0 <line:1341:3, col:17> 'int' '='
|     |-MemberExpr 0x5608c1496058 <col:3, col:7> 'int' lvalue ->tm_wday 0x5608c1385c98
|     | `-ImplicitCastExpr 0x5608c1496040 <col:3> 'struct tm *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5608c1496020 <col:3> 'struct tm *' lvalue ParmVar 0x5608c148e058 'tm' 'struct tm *'
|     `-ImplicitCastExpr 0x5608c14960a8 <col:17> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1496088 <col:17> 'int' lvalue Var 0x5608c1495878 'wday' 'int'
|-FunctionDecl 0x5608c14961e8 <line:1347:1, line:1365:1> line:1347:13 used set_tm_yday 'void (struct tm *)' static
| |-ParmVarDecl 0x5608c1496158 <col:25, col:36> col:36 used tm 'struct tm *'
| `-CompoundStmt 0x5608c1497ba8 <col:40, line:1365:1>
|   |-DeclStmt 0x5608c1496758 <line:1348:3, col:81>
|   | `-VarDecl 0x5608c1496310 <col:3, col:80> col:20 used d 'const int [12]' static cinit
|   |   `-InitListExpr 0x5608c14965a8 <col:26, col:80> 'const int [12]'
|   |     |-IntegerLiteral 0x5608c1496378 <col:27> 'int' 0
|   |     |-IntegerLiteral 0x5608c1496398 <col:30> 'int' 31
|   |     |-IntegerLiteral 0x5608c14963b8 <col:34> 'int' 59
|   |     |-IntegerLiteral 0x5608c14963d8 <col:38> 'int' 90
|   |     |-IntegerLiteral 0x5608c14963f8 <col:42> 'int' 120
|   |     |-IntegerLiteral 0x5608c1496418 <col:47> 'int' 151
|   |     |-IntegerLiteral 0x5608c1496438 <col:52> 'int' 181
|   |     |-IntegerLiteral 0x5608c1496458 <col:57> 'int' 212
|   |     |-IntegerLiteral 0x5608c1496478 <col:62> 'int' 243
|   |     |-IntegerLiteral 0x5608c1496498 <col:67> 'int' 273
|   |     |-IntegerLiteral 0x5608c14964b8 <col:72> 'int' 304
|   |     `-IntegerLiteral 0x5608c14964d8 <col:77> 'int' 334
|   |-DeclStmt 0x5608c1496870 <line:1349:3, col:23>
|   | `-VarDecl 0x5608c1496788 <col:3, col:17> col:7 used mon 'int' cinit
|   |   `-ImplicitCastExpr 0x5608c1496858 <col:13, col:17> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x5608c1496828 <col:13, col:17> 'int' lvalue ->tm_mon 0x5608c1385bc8
|   |       `-ImplicitCastExpr 0x5608c1496810 <col:13> 'struct tm *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c14967f0 <col:13> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *'
|   |-DeclStmt 0x5608c14969c8 <line:1350:3, col:32>
|   | `-VarDecl 0x5608c14968a0 <col:3, col:25> col:7 used year 'int' cinit
|   |   `-BinaryOperator 0x5608c14969a8 <col:14, col:25> 'int' '+'
|   |     |-IntegerLiteral 0x5608c1496908 <col:14> 'int' 1900
|   |     `-ImplicitCastExpr 0x5608c1496990 <col:21, col:25> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x5608c1496960 <col:21, col:25> 'int' lvalue ->tm_year 0x5608c1385c30
|   |         `-ImplicitCastExpr 0x5608c1496948 <col:21> 'struct tm *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1496928 <col:21> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *'
|   |-DeclStmt 0x5608c1496a80 <line:1351:3, col:19>
|   | `-VarDecl 0x5608c14969f8 <col:3, col:18> col:7 used leap_day 'int' cinit
|   |   `-IntegerLiteral 0x5608c1496a60 <col:18> 'int' 0
|   |-IfStmt 0x5608c1496ea0 <line:1352:3, line:1354:16>
|   | |-BinaryOperator 0x5608c1496e20 <line:1352:7, line:1353:63> 'int' '&&'
|   | | |-BinaryOperator 0x5608c1496b38 <line:1352:7, col:20> 'int' '>'
|   | | | |-ImplicitCastExpr 0x5608c1496b20 <col:7, col:11> 'int' <LValueToRValue>
|   | | | | `-MemberExpr 0x5608c1496ad0 <col:7, col:11> 'int' lvalue ->tm_mon 0x5608c1385bc8
|   | | | |   `-ImplicitCastExpr 0x5608c1496ab8 <col:7> 'struct tm *' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x5608c1496a98 <col:7> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *'
|   | | | `-IntegerLiteral 0x5608c1496b00 <col:20> 'int' 1
|   | | `-ParenExpr 0x5608c1496e00 <line:1353:7, col:63> 'int'
|   | |   `-BinaryOperator 0x5608c1496de0 <col:8, col:62> 'int' '||'
|   | |     |-ParenExpr 0x5608c1496ce8 <col:8, col:41> 'int'
|   | |     | `-BinaryOperator 0x5608c1496cc8 <col:9, col:40> 'int' '&&'
|   | |     |   |-BinaryOperator 0x5608c1496bf0 <col:9, col:21> 'int' '=='
|   | |     |   | |-BinaryOperator 0x5608c1496bb0 <col:9, col:16> 'int' '%'
|   | |     |   | | |-ImplicitCastExpr 0x5608c1496b98 <col:9> 'int' <LValueToRValue>
|   | |     |   | | | `-DeclRefExpr 0x5608c1496b58 <col:9> 'int' lvalue Var 0x5608c14968a0 'year' 'int'
|   | |     |   | | `-IntegerLiteral 0x5608c1496b78 <col:16> 'int' 4
|   | |     |   | `-IntegerLiteral 0x5608c1496bd0 <col:21> 'int' 0
|   | |     |   `-BinaryOperator 0x5608c1496ca8 <col:26, col:40> 'int' '!='
|   | |     |     |-BinaryOperator 0x5608c1496c68 <col:26, col:33> 'int' '%'
|   | |     |     | |-ImplicitCastExpr 0x5608c1496c50 <col:26> 'int' <LValueToRValue>
|   | |     |     | | `-DeclRefExpr 0x5608c1496c10 <col:26> 'int' lvalue Var 0x5608c14968a0 'year' 'int'
|   | |     |     | `-IntegerLiteral 0x5608c1496c30 <col:33> 'int' 100
|   | |     |     `-IntegerLiteral 0x5608c1496c88 <col:40> 'int' 0
|   | |     `-ParenExpr 0x5608c1496dc0 <col:46, col:62> 'int'
|   | |       `-BinaryOperator 0x5608c1496da0 <col:47, col:61> 'int' '=='
|   | |         |-BinaryOperator 0x5608c1496d60 <col:47, col:54> 'int' '%'
|   | |         | |-ImplicitCastExpr 0x5608c1496d48 <col:47> 'int' <LValueToRValue>
|   | |         | | `-DeclRefExpr 0x5608c1496d08 <col:47> 'int' lvalue Var 0x5608c14968a0 'year' 'int'
|   | |         | `-IntegerLiteral 0x5608c1496d28 <col:54> 'int' 400
|   | |         `-IntegerLiteral 0x5608c1496d80 <col:61> 'int' 0
|   | `-BinaryOperator 0x5608c1496e80 <line:1354:5, col:16> 'int' '='
|   |   |-DeclRefExpr 0x5608c1496e40 <col:5> 'int' lvalue Var 0x5608c14969f8 'leap_day' 'int'
|   |   `-IntegerLiteral 0x5608c1496e60 <col:16> 'int' 1
|   |-IfStmt 0x5608c1496fc8 <line:1357:3, line:1358:12>
|   | |-BinaryOperator 0x5608c1496f18 <line:1357:7, col:13> 'int' '<'
|   | | |-ImplicitCastExpr 0x5608c1496f00 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c1496ec0 <col:7> 'int' lvalue Var 0x5608c1496788 'mon' 'int'
|   | | `-IntegerLiteral 0x5608c1496ee0 <col:13> 'int' 0
|   | `-BinaryOperator 0x5608c1496fa8 <line:1358:5, col:12> 'int' '='
|   |   |-DeclRefExpr 0x5608c1496f38 <col:5> 'int' lvalue Var 0x5608c1496788 'mon' 'int'
|   |   `-UnaryOperator 0x5608c1496f90 <col:11, col:12> 'int' prefix '-'
|   |     `-ImplicitCastExpr 0x5608c1496f78 <col:12> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1496f58 <col:12> 'int' lvalue Var 0x5608c1496788 'mon' 'int'
|   |-IfStmt 0x5608c14970d0 <line:1359:3, line:1360:12>
|   | |-BinaryOperator 0x5608c1497040 <line:1359:7, col:13> 'int' '>'
|   | | |-ImplicitCastExpr 0x5608c1497028 <col:7> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c1496fe8 <col:7> 'int' lvalue Var 0x5608c1496788 'mon' 'int'
|   | | `-IntegerLiteral 0x5608c1497008 <col:13> 'int' 11
|   | `-CompoundAssignOperator 0x5608c14970a0 <line:1360:5, col:12> 'int' '%=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x5608c1497060 <col:5> 'int' lvalue Var 0x5608c1496788 'mon' 'int'
|   |   `-IntegerLiteral 0x5608c1497080 <col:12> 'int' 12
|   |-DeclStmt 0x5608c1497350 <line:1362:3, col:49>
|   | `-VarDecl 0x5608c1497108 <col:3, col:48> col:7 used yday 'int' cinit
|   |   `-BinaryOperator 0x5608c1497330 <col:14, col:48> 'int' '-'
|   |     |-BinaryOperator 0x5608c14972f0 <col:14, col:38> 'int' '+'
|   |     | |-BinaryOperator 0x5608c1497250 <col:14, col:23> 'int' '+'
|   |     | | |-ImplicitCastExpr 0x5608c1497220 <col:14, col:19> 'int' <LValueToRValue>
|   |     | | | `-ArraySubscriptExpr 0x5608c14971e0 <col:14, col:19> 'const int' lvalue
|   |     | | |   |-ImplicitCastExpr 0x5608c14971b0 <col:14> 'const int *' <ArrayToPointerDecay>
|   |     | | |   | `-DeclRefExpr 0x5608c1497170 <col:14> 'const int [12]' lvalue Var 0x5608c1496310 'd' 'const int [12]'
|   |     | | |   `-ImplicitCastExpr 0x5608c14971c8 <col:16> 'int' <LValueToRValue>
|   |     | | |     `-DeclRefExpr 0x5608c1497190 <col:16> 'int' lvalue Var 0x5608c1496788 'mon' 'int'
|   |     | | `-ImplicitCastExpr 0x5608c1497238 <col:23> 'int' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x5608c1497200 <col:23> 'int' lvalue Var 0x5608c14969f8 'leap_day' 'int'
|   |     | `-ImplicitCastExpr 0x5608c14972d8 <col:34, col:38> 'int' <LValueToRValue>
|   |     |   `-MemberExpr 0x5608c14972a8 <col:34, col:38> 'int' lvalue ->tm_mday 0x5608c1385b60
|   |     |     `-ImplicitCastExpr 0x5608c1497290 <col:34> 'struct tm *' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x5608c1497270 <col:34> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *'
|   |     `-IntegerLiteral 0x5608c1497310 <col:48> 'int' 1
|   |-ParenExpr 0x5608c1497ac8 </usr/include/assert.h:105:3, line:110:7> 'void'
|   | `-BinaryOperator 0x5608c1497aa8 <line:105:4, line:110:6> 'void' ','
|   |   |-CStyleCastExpr 0x5608c1497600 <line:105:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x5608c14975d0 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x5608c14975b0 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x5608c1497580 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x5608c1497520 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x5608c1497500 <src/builtin.c:1363:10, col:48> 'int' '||'
|   |   |       |   |-BinaryOperator 0x5608c1497420 <col:10, col:22> 'int' '=='
|   |   |       |   | |-ImplicitCastExpr 0x5608c14973f0 <col:10> 'int' <LValueToRValue>
|   |   |       |   | | `-DeclRefExpr 0x5608c1497368 <col:10> 'int' lvalue Var 0x5608c1497108 'yday' 'int' non_odr_use_unevaluated
|   |   |       |   | `-ImplicitCastExpr 0x5608c1497408 <col:18, col:22> 'int' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x5608c14973c0 <col:18, col:22> 'int' lvalue ->tm_yday 0x5608c1385d00 non_odr_use_unevaluated
|   |   |       |   |     `-ImplicitCastExpr 0x5608c14973a8 <col:18> 'struct tm *' <LValueToRValue>
|   |   |       |   |       `-DeclRefExpr 0x5608c1497388 <col:18> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *' non_odr_use_unevaluated
|   |   |       |   `-BinaryOperator 0x5608c14974e0 <col:33, col:48> 'int' '=='
|   |   |       |     |-ImplicitCastExpr 0x5608c14974c8 <col:33, col:37> 'int' <LValueToRValue>
|   |   |       |     | `-MemberExpr 0x5608c1497478 <col:33, col:37> 'int' lvalue ->tm_yday 0x5608c1385d00 non_odr_use_unevaluated
|   |   |       |     |   `-ImplicitCastExpr 0x5608c1497460 <col:33> 'struct tm *' <LValueToRValue>
|   |   |       |     |     `-DeclRefExpr 0x5608c1497440 <col:33> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *' non_odr_use_unevaluated
|   |   |       |     `-IntegerLiteral 0x5608c14974a8 <col:48> 'int' 367
|   |   |       |-IntegerLiteral 0x5608c1497540 </usr/include/assert.h:105:28> 'int' 1
|   |   |       `-IntegerLiteral 0x5608c1497560 <col:32> 'int' 0
|   |   `-UnaryOperator 0x5608c1497a90 <col:36, line:110:6> 'void' prefix '__extension__' cannot overflow
|   |     `-StmtExpr 0x5608c1497a70 <line:105:50, line:110:6> 'void'
|   |       `-CompoundStmt 0x5608c1497a58 <line:105:51, line:110:5>
|   |         `-IfStmt 0x5608c1497a28 <line:106:7, line:109:68> has_else
|   |           |-BinaryOperator 0x5608c14977c0 <src/builtin.c:1363:10, col:48> 'int' '||'
|   |           | |-BinaryOperator 0x5608c14976e0 <col:10, col:22> 'int' '=='
|   |           | | |-ImplicitCastExpr 0x5608c14976b0 <col:10> 'int' <LValueToRValue>
|   |           | | | `-DeclRefExpr 0x5608c1497628 <col:10> 'int' lvalue Var 0x5608c1497108 'yday' 'int'
|   |           | | `-ImplicitCastExpr 0x5608c14976c8 <col:18, col:22> 'int' <LValueToRValue>
|   |           | |   `-MemberExpr 0x5608c1497680 <col:18, col:22> 'int' lvalue ->tm_yday 0x5608c1385d00
|   |           | |     `-ImplicitCastExpr 0x5608c1497668 <col:18> 'struct tm *' <LValueToRValue>
|   |           | |       `-DeclRefExpr 0x5608c1497648 <col:18> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *'
|   |           | `-BinaryOperator 0x5608c14977a0 <col:33, col:48> 'int' '=='
|   |           |   |-ImplicitCastExpr 0x5608c1497788 <col:33, col:37> 'int' <LValueToRValue>
|   |           |   | `-MemberExpr 0x5608c1497738 <col:33, col:37> 'int' lvalue ->tm_yday 0x5608c1385d00
|   |           |   |   `-ImplicitCastExpr 0x5608c1497720 <col:33> 'struct tm *' <LValueToRValue>
|   |           |   |     `-DeclRefExpr 0x5608c1497700 <col:33> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *'
|   |           |   `-IntegerLiteral 0x5608c1497768 <col:48> 'int' 367
|   |           |-NullStmt 0x5608c14977e0 </usr/include/assert.h:107:9>
|   |           `-CallExpr 0x5608c1497958 <line:109:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x5608c1497940 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x5608c14977e8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x5608c11c5d98 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x5608c14979b0 <<scratch space>:203:1> 'const char *' <NoOp>
|   |             | `-ImplicitCastExpr 0x5608c1497998 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x5608c1497808 <col:1> 'char [42]' lvalue "yday == tm->tm_yday || tm->tm_yday == 367"
|   |             |-ImplicitCastExpr 0x5608c14979e0 <line:204:1> 'const char *' <NoOp>
|   |             | `-ImplicitCastExpr 0x5608c14979c8 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x5608c1497850 <col:1> 'char [14]' lvalue "src/builtin.c"
|   |             |-ImplicitCastExpr 0x5608c14979f8 <line:205:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x5608c1497878 <col:1> 'int' 1363
|   |             `-ImplicitCastExpr 0x5608c1497a10 </usr/include/assert.h:126:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x5608c1497928 <col:30, col:44> 'const char [30]' lvalue prefix '__extension__' cannot overflow
|   |                 `-PredefinedExpr 0x5608c1497910 <col:44> 'const char [30]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x5608c14978d8 <col:44> 'const char [30]' lvalue "void set_tm_yday(struct tm *)"
|   `-BinaryOperator 0x5608c1497b88 <src/builtin.c:1364:3, col:17> 'int' '='
|     |-MemberExpr 0x5608c1497b20 <col:3, col:7> 'int' lvalue ->tm_yday 0x5608c1385d00
|     | `-ImplicitCastExpr 0x5608c1497b08 <col:3> 'struct tm *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5608c1497ae8 <col:3> 'struct tm *' lvalue ParmVar 0x5608c1496158 'tm' 'struct tm *'
|     `-ImplicitCastExpr 0x5608c1497b70 <col:17> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1497b50 <col:17> 'int' lvalue Var 0x5608c1497108 'yday' 'int'
|-FunctionDecl 0x5608c1497da8 <line:1386:1, line:1439:1> line:1386:11 used f_strptime 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c1497c18 <col:22, col:32> col:32 jq 'jq_state *'
| |-ParmVarDecl 0x5608c1497c90 <col:36, col:39> col:39 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1497d08 <col:42, col:45> col:45 used b 'jv':'jv'
| `-CompoundStmt 0x5608c1499eb8 <col:48, line:1439:1>
|   |-IfStmt 0x5608c1498270 <line:1387:3, line:1389:3>
|   | |-BinaryOperator 0x5608c1498070 <line:1387:7, col:61> 'int' '||'
|   | | |-BinaryOperator 0x5608c1497f48 <col:7, col:25> 'int' '!='
|   | | | |-ImplicitCastExpr 0x5608c1497f18 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | | `-CallExpr 0x5608c1497eb8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | | |   |-ImplicitCastExpr 0x5608c1497ea0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | |   | `-DeclRefExpr 0x5608c1497e60 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | |   `-ImplicitCastExpr 0x5608c1497ee0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | | |     `-DeclRefExpr 0x5608c1497e80 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c1497c90 'a' 'jv':'jv'
|   | | | `-ImplicitCastExpr 0x5608c1497f30 <col:25> 'unsigned int' <IntegralCast>
|   | | |   `-DeclRefExpr 0x5608c1497ef8 <col:25> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | | `-BinaryOperator 0x5608c1498050 <col:43, col:61> 'int' '!='
|   | |   |-ImplicitCastExpr 0x5608c1498020 <col:43, col:56> 'unsigned int' <IntegralCast>
|   | |   | `-CallExpr 0x5608c1497fc0 <col:43, col:56> 'jv_kind':'jv_kind'
|   | |   |   |-ImplicitCastExpr 0x5608c1497fa8 <col:43> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x5608c1497f68 <col:43> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | |   |   `-ImplicitCastExpr 0x5608c1497fe8 <col:55> 'jv':'jv' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x5608c1497f88 <col:55> 'jv':'jv' lvalue ParmVar 0x5608c1497d08 'b' 'jv':'jv'
|   | |   `-ImplicitCastExpr 0x5608c1498038 <col:61> 'unsigned int' <IntegralCast>
|   | |     `-DeclRefExpr 0x5608c1498000 <col:61> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   | `-CompoundStmt 0x5608c1498258 <col:77, line:1389:3>
|   |   `-ReturnStmt 0x5608c1498248 <line:1388:5, col:89>
|   |     `-CallExpr 0x5608c14981e0 <col:12, col:89> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14981c8 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1498090 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |       |-ImplicitCastExpr 0x5608c1498218 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14980b0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1497c90 'a' 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1498230 <col:26> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14980d0 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1497d08 'b' 'jv':'jv'
|   |       `-CallExpr 0x5608c1498170 <col:29, col:88> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1498158 <col:29> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14980f0 <col:29> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |         `-ImplicitCastExpr 0x5608c14981b0 <col:39> 'const char *' <NoOp>
|   |           `-ImplicitCastExpr 0x5608c1498198 <col:39> 'char *' <ArrayToPointerDecay>
|   |             `-StringLiteral 0x5608c1498110 <col:39> 'char [48]' lvalue "strptime/1 requires string inputs and arguments"
|   |-DeclStmt 0x5608c1498318 <line:1391:3, col:15>
|   | `-VarDecl 0x5608c14982b0 <col:3, col:13> col:13 used tm 'struct tm':'struct tm'
|   |-CallExpr 0x5608c1498420 <line:1392:3, col:28> 'void *'
|   | |-ImplicitCastExpr 0x5608c1498408 <col:3> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1498330 <col:3> 'void *(void *, int, unsigned long)' Function 0x5608c1368ab8 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x5608c1498458 <col:10, col:11> 'void *' <BitCast>
|   | | `-UnaryOperator 0x5608c1498370 <col:10, col:11> 'struct tm *' prefix '&' cannot overflow
|   | |   `-DeclRefExpr 0x5608c1498350 <col:11> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | |-IntegerLiteral 0x5608c1498388 <col:15> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x5608c14983e8 <col:18, col:27> 'unsigned long' sizeof
|   |   `-ParenExpr 0x5608c14983c8 <col:24, col:27> 'struct tm':'struct tm' lvalue
|   |     `-DeclRefExpr 0x5608c14983a8 <col:25> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm' non_odr_use_unevaluated
|   |-BinaryOperator 0x5608c14984e0 <line:1393:3, col:16> 'int' '='
|   | |-MemberExpr 0x5608c1498490 <col:3, col:6> 'int' lvalue .tm_wday 0x5608c1385c98
|   | | `-DeclRefExpr 0x5608c1498470 <col:3> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | `-IntegerLiteral 0x5608c14984c0 <col:16> 'int' 8
|   |-BinaryOperator 0x5608c1498570 <line:1394:3, col:16> 'int' '='
|   | |-MemberExpr 0x5608c1498520 <col:3, col:6> 'int' lvalue .tm_yday 0x5608c1385d00
|   | | `-DeclRefExpr 0x5608c1498500 <col:3> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | `-IntegerLiteral 0x5608c1498550 <col:16> 'int' 367
|   |-DeclStmt 0x5608c14986a8 <line:1395:3, col:41>
|   | `-VarDecl 0x5608c14985a8 <col:3, col:40> col:15 used input 'const char *' cinit
|   |   `-CallExpr 0x5608c1498668 <col:23, col:40> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c1498650 <col:23> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1498610 <col:23> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c1498690 <col:39> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1498630 <col:39> 'jv':'jv' lvalue ParmVar 0x5608c1497c90 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c14987d8 <line:1396:3, col:39>
|   | `-VarDecl 0x5608c14986d8 <col:3, col:38> col:15 used fmt 'const char *' cinit
|   |   `-CallExpr 0x5608c1498798 <col:21, col:38> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c1498780 <col:21> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1498740 <col:21> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c14987c0 <col:37> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c1498760 <col:37> 'jv':'jv' lvalue ParmVar 0x5608c1497d08 'b' 'jv':'jv'
|   |-DeclStmt 0x5608c1498a00 <line:1403:3, col:46>
|   | `-VarDecl 0x5608c1498808 <col:3, col:45> col:15 used end 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5608c14989e8 <col:21, col:45> 'const char *' <NoOp>
|   |     `-CallExpr 0x5608c1498980 <col:21, col:45> 'char *'
|   |       |-ImplicitCastExpr 0x5608c1498968 <col:21> 'char *(*)(const char *restrict, const char *restrict, struct tm *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1498870 <col:21> 'char *(const char *restrict, const char *restrict, struct tm *)' Function 0x5608c1387160 'strptime' 'char *(const char *restrict, const char *restrict, struct tm *)'
|   |       |-ImplicitCastExpr 0x5608c14989b8 <col:30> 'const char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1498890 <col:30> 'const char *' lvalue Var 0x5608c14985a8 'input' 'const char *'
|   |       |-ImplicitCastExpr 0x5608c14989d0 <col:37> 'const char *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c14988b0 <col:37> 'const char *' lvalue Var 0x5608c14986d8 'fmt' 'const char *'
|   |       `-UnaryOperator 0x5608c14988f0 <col:42, col:43> 'struct tm *' prefix '&' cannot overflow
|   |         `-DeclRefExpr 0x5608c14988d0 <col:43> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   |-IfStmt 0x5608c1499170 <line:1404:3, line:1406:3>
|   | |-BinaryOperator 0x5608c1498ef8 <line:1404:7, col:53> 'int' '||'
|   | | |-BinaryOperator 0x5608c1498ae8 <col:7, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'int' '=='
|   | | | |-ImplicitCastExpr 0x5608c1498ab8 <src/builtin.c:1404:7> 'const char *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5608c1498a18 <col:7> 'const char *' lvalue Var 0x5608c1498808 'end' 'const char *'
|   | | | `-ImplicitCastExpr 0x5608c1498ad0 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'const char *' <BitCast>
|   | | |   `-ParenExpr 0x5608c1498a98 <col:16, col:25> 'void *'
|   | | |     `-CStyleCastExpr 0x5608c1498a70 <col:17, col:24> 'void *' <NullToPointer>
|   | | |       `-IntegerLiteral 0x5608c1498a38 <col:24> 'int' 0
|   | | `-ParenExpr 0x5608c1498ed8 <src/builtin.c:1404:22, col:53> 'int'
|   | |   `-BinaryOperator 0x5608c1498eb8 <col:23, /usr/include/ctype.h:89:62> 'int' '&&'
|   | |     |-BinaryOperator 0x5608c1498ba0 <src/builtin.c:1404:23, col:31> 'int' '!='
|   | |     | |-ImplicitCastExpr 0x5608c1498b88 <col:23, col:24> 'int' <IntegralCast>
|   | |     | | `-ImplicitCastExpr 0x5608c1498b70 <col:23, col:24> 'char' <LValueToRValue>
|   | |     | |   `-UnaryOperator 0x5608c1498b40 <col:23, col:24> 'const char' lvalue prefix '*' cannot overflow
|   | |     | |     `-ImplicitCastExpr 0x5608c1498b28 <col:24> 'const char *' <LValueToRValue>
|   | |     | |       `-DeclRefExpr 0x5608c1498b08 <col:24> 'const char *' lvalue Var 0x5608c1498808 'end' 'const char *'
|   | |     | `-CharacterLiteral 0x5608c1498b58 <col:31> 'int' 0
|   | |     `-UnaryOperator 0x5608c1498ea0 <col:39, /usr/include/ctype.h:89:62> 'int' prefix '!' cannot overflow
|   | |       `-ParenExpr 0x5608c1498e80 <col:3, col:62> 'int'
|   | |         `-BinaryOperator 0x5608c1498e60 <col:4, line:197:36> 'int' '&'
|   | |           |-ImplicitCastExpr 0x5608c1498e30 <line:89:4, col:33> 'int' <IntegralCast>
|   | |           | `-ImplicitCastExpr 0x5608c1498e18 <col:4, col:33> 'unsigned short' <LValueToRValue>
|   | |           |   `-ArraySubscriptExpr 0x5608c1498d98 <col:4, col:33> 'const unsigned short' lvalue
|   | |           |     |-ImplicitCastExpr 0x5608c1498d80 <col:4, col:22> 'const unsigned short *' <LValueToRValue>
|   | |           |     | `-ParenExpr 0x5608c1498c58 <col:4, col:22> 'const unsigned short *' lvalue
|   | |           |     |   `-UnaryOperator 0x5608c1498c40 <col:5, col:21> 'const unsigned short *' lvalue prefix '*' cannot overflow
|   | |           |     |     `-CallExpr 0x5608c1498c20 <col:6, col:21> 'const unsigned short **'
|   | |           |     |       `-ImplicitCastExpr 0x5608c1498c08 <col:6> 'const unsigned short **(*)(void)' <FunctionToPointerDecay>
|   | |           |     |         `-DeclRefExpr 0x5608c1498bc0 <col:6> 'const unsigned short **(void)' Function 0x5608c11d0578 '__ctype_b_loc' 'const unsigned short **(void)'
|   | |           |     `-CStyleCastExpr 0x5608c1498d58 <col:24, col:32> 'int' <IntegralCast>
|   | |           |       `-ImplicitCastExpr 0x5608c1498d40 <col:30, col:32> 'char' <LValueToRValue> part_of_explicit_cast
|   | |           |         `-ParenExpr 0x5608c1498d20 <col:30, col:32> 'const char' lvalue
|   | |           |           `-ParenExpr 0x5608c1498cc8 <line:197:31, col:33> 'const char' lvalue
|   | |           |             `-UnaryOperator 0x5608c1498cb0 <src/builtin.c:1404:48, col:49> 'const char' lvalue prefix '*' cannot overflow
|   | |           |               `-ImplicitCastExpr 0x5608c1498c98 <col:49> 'const char *' <LValueToRValue>
|   | |           |                 `-DeclRefExpr 0x5608c1498c78 <col:49> 'const char *' lvalue Var 0x5608c1498808 'end' 'const char *'
|   | |           `-ImplicitCastExpr 0x5608c1498e48 </usr/include/ctype.h:89:37, line:197:36> 'int' <IntegralCast>
|   | |             `-CStyleCastExpr 0x5608c1498df0 <line:89:37, line:197:36> 'unsigned short' <IntegralCast>
|   | |               `-DeclRefExpr 0x5608c1498db8 <col:36> 'int' EnumConstant 0x5608c11cf090 '_ISspace' 'int'
|   | `-CompoundStmt 0x5608c1499158 <src/builtin.c:1404:56, line:1406:3>
|   |   `-ReturnStmt 0x5608c1499148 <line:1405:5, col:98>
|   |     `-CallExpr 0x5608c14990e0 <col:12, col:98> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14990c8 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1498f18 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |       |-ImplicitCastExpr 0x5608c1499118 <col:23> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1498f38 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c1497c90 'a' 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1499130 <col:26> 'jv':'jv' <LValueToRValue>
|   |       | `-DeclRefExpr 0x5608c1498f58 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c1497d08 'b' 'jv':'jv'
|   |       `-CallExpr 0x5608c1499030 <col:29, col:97> 'jv':'jv'
|   |         |-ImplicitCastExpr 0x5608c1499018 <col:29> 'jv (*)(const char *, ...)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c1498f78 <col:29> 'jv (const char *, ...)' Function 0x5608c13df640 'jv_string_fmt' 'jv (const char *, ...)'
|   |         |-ImplicitCastExpr 0x5608c1499080 <col:43> 'const char *' <NoOp>
|   |         | `-ImplicitCastExpr 0x5608c1499068 <col:43> 'char *' <ArrayToPointerDecay>
|   |         |   `-StringLiteral 0x5608c1498f98 <col:43> 'char [37]' lvalue "date \"%s\" does not match format \"%s\""
|   |         |-ImplicitCastExpr 0x5608c1499098 <col:87> 'const char *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x5608c1498fd8 <col:87> 'const char *' lvalue Var 0x5608c14985a8 'input' 'const char *'
|   |         `-ImplicitCastExpr 0x5608c14990b0 <col:94> 'const char *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5608c1498ff8 <col:94> 'const char *' lvalue Var 0x5608c14986d8 'fmt' 'const char *'
|   |-CallExpr 0x5608c14991f8 <line:1407:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14991e0 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14991a0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1499220 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14991c0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1497d08 'b' 'jv':'jv'
|   |-IfStmt 0x5608c1499628 <line:1429:3, line:1430:20>
|   | |-BinaryOperator 0x5608c1499518 <line:1429:7, col:76> 'int' '&&'
|   | | |-BinaryOperator 0x5608c1499450 <col:7, col:58> 'int' '&&'
|   | | | |-BinaryOperator 0x5608c1499388 <col:7, col:40> 'int' '&&'
|   | | | | |-BinaryOperator 0x5608c14992c0 <col:7, col:21> 'int' '=='
|   | | | | | |-ImplicitCastExpr 0x5608c14992a8 <col:7, col:10> 'int' <LValueToRValue>
|   | | | | | | `-MemberExpr 0x5608c1499258 <col:7, col:10> 'int' lvalue .tm_wday 0x5608c1385c98
|   | | | | | |   `-DeclRefExpr 0x5608c1499238 <col:7> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | | | | | `-IntegerLiteral 0x5608c1499288 <col:21> 'int' 8
|   | | | | `-BinaryOperator 0x5608c1499368 <col:26, col:40> 'int' '!='
|   | | | |   |-ImplicitCastExpr 0x5608c1499350 <col:26, col:29> 'int' <LValueToRValue>
|   | | | |   | `-MemberExpr 0x5608c1499300 <col:26, col:29> 'int' lvalue .tm_mday 0x5608c1385b60
|   | | | |   |   `-DeclRefExpr 0x5608c14992e0 <col:26> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | | | |   `-IntegerLiteral 0x5608c1499330 <col:40> 'int' 0
|   | | | `-BinaryOperator 0x5608c1499430 <col:45, col:58> 'int' '>='
|   | | |   |-ImplicitCastExpr 0x5608c1499418 <col:45, col:48> 'int' <LValueToRValue>
|   | | |   | `-MemberExpr 0x5608c14993c8 <col:45, col:48> 'int' lvalue .tm_mon 0x5608c1385bc8
|   | | |   |   `-DeclRefExpr 0x5608c14993a8 <col:45> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | | |   `-IntegerLiteral 0x5608c14993f8 <col:58> 'int' 0
|   | | `-BinaryOperator 0x5608c14994f8 <col:63, col:76> 'int' '<='
|   | |   |-ImplicitCastExpr 0x5608c14994e0 <col:63, col:66> 'int' <LValueToRValue>
|   | |   | `-MemberExpr 0x5608c1499490 <col:63, col:66> 'int' lvalue .tm_mon 0x5608c1385bc8
|   | |   |   `-DeclRefExpr 0x5608c1499470 <col:63> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | |   `-IntegerLiteral 0x5608c14994c0 <col:76> 'int' 11
|   | `-CallExpr 0x5608c1499600 <line:1430:5, col:20> 'void'
|   |   |-ImplicitCastExpr 0x5608c14995e8 <col:5> 'void (*)(struct tm *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5608c1499538 <col:5> 'void (struct tm *)' Function 0x5608c148e148 'set_tm_wday' 'void (struct tm *)'
|   |   `-UnaryOperator 0x5608c1499578 <col:17, col:18> 'struct tm *' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x5608c1499558 <col:18> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   |-IfStmt 0x5608c14999e0 <line:1431:3, line:1432:20>
|   | |-BinaryOperator 0x5608c1499928 <line:1431:7, col:78> 'int' '&&'
|   | | |-BinaryOperator 0x5608c1499860 <col:7, col:60> 'int' '&&'
|   | | | |-BinaryOperator 0x5608c1499798 <col:7, col:42> 'int' '&&'
|   | | | | |-BinaryOperator 0x5608c14996d0 <col:7, col:21> 'int' '=='
|   | | | | | |-ImplicitCastExpr 0x5608c14996b8 <col:7, col:10> 'int' <LValueToRValue>
|   | | | | | | `-MemberExpr 0x5608c1499668 <col:7, col:10> 'int' lvalue .tm_yday 0x5608c1385d00
|   | | | | | |   `-DeclRefExpr 0x5608c1499648 <col:7> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | | | | | `-IntegerLiteral 0x5608c1499698 <col:21> 'int' 367
|   | | | | `-BinaryOperator 0x5608c1499778 <col:28, col:42> 'int' '!='
|   | | | |   |-ImplicitCastExpr 0x5608c1499760 <col:28, col:31> 'int' <LValueToRValue>
|   | | | |   | `-MemberExpr 0x5608c1499710 <col:28, col:31> 'int' lvalue .tm_mday 0x5608c1385b60
|   | | | |   |   `-DeclRefExpr 0x5608c14996f0 <col:28> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | | | |   `-IntegerLiteral 0x5608c1499740 <col:42> 'int' 0
|   | | | `-BinaryOperator 0x5608c1499840 <col:47, col:60> 'int' '>='
|   | | |   |-ImplicitCastExpr 0x5608c1499828 <col:47, col:50> 'int' <LValueToRValue>
|   | | |   | `-MemberExpr 0x5608c14997d8 <col:47, col:50> 'int' lvalue .tm_mon 0x5608c1385bc8
|   | | |   |   `-DeclRefExpr 0x5608c14997b8 <col:47> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | | |   `-IntegerLiteral 0x5608c1499808 <col:60> 'int' 0
|   | | `-BinaryOperator 0x5608c1499908 <col:65, col:78> 'int' '<='
|   | |   |-ImplicitCastExpr 0x5608c14998f0 <col:65, col:68> 'int' <LValueToRValue>
|   | |   | `-MemberExpr 0x5608c14998a0 <col:65, col:68> 'int' lvalue .tm_mon 0x5608c1385bc8
|   | |   |   `-DeclRefExpr 0x5608c1499880 <col:65> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   | |   `-IntegerLiteral 0x5608c14998d0 <col:78> 'int' 11
|   | `-CallExpr 0x5608c14999b8 <line:1432:5, col:20> 'void'
|   |   |-ImplicitCastExpr 0x5608c14999a0 <col:5> 'void (*)(struct tm *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5608c1499948 <col:5> 'void (struct tm *)' Function 0x5608c14961e8 'set_tm_yday' 'void (struct tm *)'
|   |   `-UnaryOperator 0x5608c1499988 <col:17, col:18> 'struct tm *' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x5608c1499968 <col:18> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   |-DeclStmt 0x5608c1499b68 <line:1434:3, col:20>
|   | `-VarDecl 0x5608c1499a10 <col:3, col:19> col:6 used r 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c1499b40 <col:10, col:19> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1499b28 <col:10> 'jv (*)(struct tm *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1499a78 <col:10> 'jv (struct tm *)' Function 0x5608c148cfa8 'tm2jv' 'jv (struct tm *)'
|   |     `-UnaryOperator 0x5608c1499ab8 <col:16, col:17> 'struct tm *' prefix '&' cannot overflow
|   |       `-DeclRefExpr 0x5608c1499a98 <col:17> 'struct tm':'struct tm' lvalue Var 0x5608c14982b0 'tm' 'struct tm':'struct tm'
|   |-IfStmt 0x5608c1499db0 <line:1435:3, line:1436:42>
|   | |-BinaryOperator 0x5608c1499c18 <line:1435:7, col:15> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c1499c00 <col:7, col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5608c1499be8 <col:7, col:8> 'char' <LValueToRValue>
|   | | |   `-UnaryOperator 0x5608c1499bb8 <col:7, col:8> 'const char' lvalue prefix '*' cannot overflow
|   | | |     `-ImplicitCastExpr 0x5608c1499ba0 <col:8> 'const char *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c1499b80 <col:8> 'const char *' lvalue Var 0x5608c1498808 'end' 'const char *'
|   | | `-CharacterLiteral 0x5608c1499bd0 <col:15> 'int' 0
|   | `-BinaryOperator 0x5608c1499d90 <line:1436:5, col:42> 'jv':'jv' '='
|   |   |-DeclRefExpr 0x5608c1499c38 <col:5> 'jv':'jv' lvalue Var 0x5608c1499a10 'r' 'jv':'jv'
|   |   `-CallExpr 0x5608c1499d48 <col:9, col:42> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c1499d30 <col:9> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c1499c58 <col:9> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c1499d78 <col:25> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c1499c78 <col:25> 'jv':'jv' lvalue Var 0x5608c1499a10 'r' 'jv':'jv'
|   |     `-CallExpr 0x5608c1499cf0 <col:28, col:41> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c1499cd8 <col:28> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c1499c98 <col:28> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c1499d18 <col:38> 'const char *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c1499cb8 <col:38> 'const char *' lvalue Var 0x5608c1498808 'end' 'const char *'
|   |-CallExpr 0x5608c1499e28 <line:1437:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c1499e10 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c1499dd0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c1499e50 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c1499df0 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1497c90 'a' 'jv':'jv'
|   `-ReturnStmt 0x5608c1499ea0 <line:1438:3, col:10>
|     `-ImplicitCastExpr 0x5608c1499e88 <col:10> 'jv':'jv' <LValueToRValue>
|       `-DeclRefExpr 0x5608c1499e68 <col:10> 'jv':'jv' lvalue Var 0x5608c1499a10 'r' 'jv':'jv'
|-FunctionDecl 0x5608c149a100 <line:1452:1, line:1474:1> line:1452:12 used jv2tm 'int (jv, struct tm *)' static
| |-ParmVarDecl 0x5608c1499f58 <col:18, col:21> col:21 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c1499fe8 <col:24, col:35> col:35 used tm 'struct tm *'
| `-CompoundStmt 0x5608c149d6c8 <col:39, line:1474:1>
|   |-CallExpr 0x5608c149a2d0 <line:1453:3, col:28> 'void *'
|   | |-ImplicitCastExpr 0x5608c149a2b8 <col:3> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c149a1b0 <col:3> 'void *(void *, int, unsigned long)' Function 0x5608c1368ab8 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x5608c149a320 <col:10> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c149a308 <col:10> 'struct tm *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5608c149a1d0 <col:10> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | |-IntegerLiteral 0x5608c149a1f0 <col:14> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x5608c149a280 <col:17, col:27> 'unsigned long' sizeof
|   |   `-ParenExpr 0x5608c149a260 <col:23, col:27> 'struct tm':'struct tm' lvalue
|   |     `-UnaryOperator 0x5608c149a248 <col:24, col:25> 'struct tm':'struct tm' lvalue prefix '*' cannot overflow
|   |       `-ImplicitCastExpr 0x5608c149a230 <col:25> 'struct tm *' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c149a210 <col:25> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *' non_odr_use_unevaluated
|   |-DoStmt 0x5608c149a958 <line:1442:5, line:1450:15>
|   | |-CompoundStmt 0x5608c149a908 <line:1442:8, line:1450:5>
|   | | |-DeclStmt 0x5608c149a4f0 <line:1443:7, col:43>
|   | | | `-VarDecl 0x5608c149a348 <col:7, col:42> col:10 used n 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c149a4c0 <col:14, col:42> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c149a4a8 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149a3b0 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |     |-CallExpr 0x5608c149a428 <col:27, col:36> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c149a410 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c149a3d0 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c149a450 <line:1454:28> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c149a3f0 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |     `-ParenExpr 0x5608c149a488 <line:1443:39, col:41> 'int'
|   | | |       `-IntegerLiteral 0x5608c149a468 <line:1454:31> 'int' 0
|   | | |-IfStmt 0x5608c149a718 <line:1444:7, line:1447:7>
|   | | | |-BinaryOperator 0x5608c149a610 <line:1444:11, col:44> 'int' '!='
|   | | | | |-ImplicitCastExpr 0x5608c149a5e0 <col:11, col:24> 'unsigned int' <IntegralCast>
|   | | | | | `-CallExpr 0x5608c149a560 <col:11, col:24> 'jv_kind':'jv_kind'
|   | | | | |   |-ImplicitCastExpr 0x5608c149a548 <col:11> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c149a508 <col:11> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | | |   `-ImplicitCastExpr 0x5608c149a588 <col:23> 'jv':'jv' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x5608c149a528 <col:23> 'jv':'jv' lvalue Var 0x5608c149a348 'n' 'jv':'jv'
|   | | | | `-ImplicitCastExpr 0x5608c149a5f8 <col:29, col:44> 'unsigned int' <IntegralCast>
|   | | | |   `-ParenExpr 0x5608c149a5c0 <col:29, col:44> 'int'
|   | | | |     `-DeclRefExpr 0x5608c149a5a0 <col:30> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | | | `-CompoundStmt 0x5608c149a6f8 <col:47, line:1447:7>
|   | | |   |-CallExpr 0x5608c149a688 <line:1445:9, col:18> 'void'
|   | | |   | |-ImplicitCastExpr 0x5608c149a670 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x5608c149a630 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |   | `-ImplicitCastExpr 0x5608c149a6b0 <line:1454:28> 'jv':'jv' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x5608c149a650 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |   `-ReturnStmt 0x5608c149a6e8 <line:1446:9, col:16>
|   | | |     `-IntegerLiteral 0x5608c149a6c8 <col:16> 'int' 0
|   | | |-BinaryOperator 0x5608c149a850 <line:1454:15, line:1448:28> 'int' '='
|   | | | |-MemberExpr 0x5608c149a770 <line:1454:15, col:19> 'int' lvalue ->tm_year 0x5608c1385c30
|   | | | | `-ImplicitCastExpr 0x5608c149a758 <col:15> 'struct tm *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x5608c149a738 <col:15> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | | | `-ImplicitCastExpr 0x5608c149a838 <line:1448:11, col:28> 'int' <FloatingToIntegral>
|   | | |   `-CallExpr 0x5608c149a7f8 <col:11, col:28> 'double'
|   | | |     |-ImplicitCastExpr 0x5608c149a7e0 <col:11> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149a7a0 <col:11> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |     `-ImplicitCastExpr 0x5608c149a820 <col:27> 'jv':'jv' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c149a7c0 <col:27> 'jv':'jv' lvalue Var 0x5608c149a348 'n' 'jv':'jv'
|   | | `-CallExpr 0x5608c149a8c8 <line:1449:7, col:16> 'void'
|   | |   |-ImplicitCastExpr 0x5608c149a8b0 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149a870 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c149a8f0 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c149a890 <col:15> 'jv':'jv' lvalue Var 0x5608c149a348 'n' 'jv':'jv'
|   | `-IntegerLiteral 0x5608c149a938 <line:1450:14> 'int' 0
|   |-CompoundAssignOperator 0x5608c149aa00 <line:1455:3, col:18> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-MemberExpr 0x5608c149a9b0 <col:3, col:7> 'int' lvalue ->tm_year 0x5608c1385c30
|   | | `-ImplicitCastExpr 0x5608c149a998 <col:3> 'struct tm *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5608c149a978 <col:3> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | `-IntegerLiteral 0x5608c149a9e0 <col:18> 'int' 1900
|   |-DoStmt 0x5608c149b050 <line:1442:5, line:1450:15>
|   | |-CompoundStmt 0x5608c149b000 <line:1442:8, line:1450:5>
|   | | |-DeclStmt 0x5608c149abe8 <line:1443:7, col:43>
|   | | | `-VarDecl 0x5608c149aa40 <col:7, col:42> col:10 used n 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c149abb8 <col:14, col:42> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c149aba0 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149aaa8 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |     |-CallExpr 0x5608c149ab20 <col:27, col:36> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c149ab08 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c149aac8 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c149ab48 <line:1456:28> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c149aae8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |     `-ParenExpr 0x5608c149ab80 <line:1443:39, col:41> 'int'
|   | | |       `-IntegerLiteral 0x5608c149ab60 <line:1456:31> 'int' 1
|   | | |-IfStmt 0x5608c149ae10 <line:1444:7, line:1447:7>
|   | | | |-BinaryOperator 0x5608c149ad08 <line:1444:11, col:44> 'int' '!='
|   | | | | |-ImplicitCastExpr 0x5608c149acd8 <col:11, col:24> 'unsigned int' <IntegralCast>
|   | | | | | `-CallExpr 0x5608c149ac58 <col:11, col:24> 'jv_kind':'jv_kind'
|   | | | | |   |-ImplicitCastExpr 0x5608c149ac40 <col:11> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c149ac00 <col:11> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | | |   `-ImplicitCastExpr 0x5608c149ac80 <col:23> 'jv':'jv' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x5608c149ac20 <col:23> 'jv':'jv' lvalue Var 0x5608c149aa40 'n' 'jv':'jv'
|   | | | | `-ImplicitCastExpr 0x5608c149acf0 <col:29, col:44> 'unsigned int' <IntegralCast>
|   | | | |   `-ParenExpr 0x5608c149acb8 <col:29, col:44> 'int'
|   | | | |     `-DeclRefExpr 0x5608c149ac98 <col:30> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | | | `-CompoundStmt 0x5608c149adf0 <col:47, line:1447:7>
|   | | |   |-CallExpr 0x5608c149ad80 <line:1445:9, col:18> 'void'
|   | | |   | |-ImplicitCastExpr 0x5608c149ad68 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x5608c149ad28 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |   | `-ImplicitCastExpr 0x5608c149ada8 <line:1456:28> 'jv':'jv' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x5608c149ad48 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |   `-ReturnStmt 0x5608c149ade0 <line:1446:9, col:16>
|   | | |     `-IntegerLiteral 0x5608c149adc0 <col:16> 'int' 0
|   | | |-BinaryOperator 0x5608c149af48 <line:1456:15, line:1448:28> 'int' '='
|   | | | |-MemberExpr 0x5608c149ae68 <line:1456:15, col:19> 'int' lvalue ->tm_mon 0x5608c1385bc8
|   | | | | `-ImplicitCastExpr 0x5608c149ae50 <col:15> 'struct tm *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x5608c149ae30 <col:15> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | | | `-ImplicitCastExpr 0x5608c149af30 <line:1448:11, col:28> 'int' <FloatingToIntegral>
|   | | |   `-CallExpr 0x5608c149aef0 <col:11, col:28> 'double'
|   | | |     |-ImplicitCastExpr 0x5608c149aed8 <col:11> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149ae98 <col:11> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |     `-ImplicitCastExpr 0x5608c149af18 <col:27> 'jv':'jv' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c149aeb8 <col:27> 'jv':'jv' lvalue Var 0x5608c149aa40 'n' 'jv':'jv'
|   | | `-CallExpr 0x5608c149afc0 <line:1449:7, col:16> 'void'
|   | |   |-ImplicitCastExpr 0x5608c149afa8 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149af68 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c149afe8 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c149af88 <col:15> 'jv':'jv' lvalue Var 0x5608c149aa40 'n' 'jv':'jv'
|   | `-IntegerLiteral 0x5608c149b030 <line:1450:14> 'int' 0
|   |-DoStmt 0x5608c149b690 <line:1442:5, line:1450:15>
|   | |-CompoundStmt 0x5608c149b640 <line:1442:8, line:1450:5>
|   | | |-DeclStmt 0x5608c149b228 <line:1443:7, col:43>
|   | | | `-VarDecl 0x5608c149b080 <col:7, col:42> col:10 used n 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c149b1f8 <col:14, col:42> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c149b1e0 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149b0e8 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |     |-CallExpr 0x5608c149b160 <col:27, col:36> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c149b148 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c149b108 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c149b188 <line:1457:28> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c149b128 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |     `-ParenExpr 0x5608c149b1c0 <line:1443:39, col:41> 'int'
|   | | |       `-IntegerLiteral 0x5608c149b1a0 <line:1457:31> 'int' 2
|   | | |-IfStmt 0x5608c149b450 <line:1444:7, line:1447:7>
|   | | | |-BinaryOperator 0x5608c149b348 <line:1444:11, col:44> 'int' '!='
|   | | | | |-ImplicitCastExpr 0x5608c149b318 <col:11, col:24> 'unsigned int' <IntegralCast>
|   | | | | | `-CallExpr 0x5608c149b298 <col:11, col:24> 'jv_kind':'jv_kind'
|   | | | | |   |-ImplicitCastExpr 0x5608c149b280 <col:11> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c149b240 <col:11> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | | |   `-ImplicitCastExpr 0x5608c149b2c0 <col:23> 'jv':'jv' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x5608c149b260 <col:23> 'jv':'jv' lvalue Var 0x5608c149b080 'n' 'jv':'jv'
|   | | | | `-ImplicitCastExpr 0x5608c149b330 <col:29, col:44> 'unsigned int' <IntegralCast>
|   | | | |   `-ParenExpr 0x5608c149b2f8 <col:29, col:44> 'int'
|   | | | |     `-DeclRefExpr 0x5608c149b2d8 <col:30> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | | | `-CompoundStmt 0x5608c149b430 <col:47, line:1447:7>
|   | | |   |-CallExpr 0x5608c149b3c0 <line:1445:9, col:18> 'void'
|   | | |   | |-ImplicitCastExpr 0x5608c149b3a8 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x5608c149b368 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |   | `-ImplicitCastExpr 0x5608c149b3e8 <line:1457:28> 'jv':'jv' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x5608c149b388 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |   `-ReturnStmt 0x5608c149b420 <line:1446:9, col:16>
|   | | |     `-IntegerLiteral 0x5608c149b400 <col:16> 'int' 0
|   | | |-BinaryOperator 0x5608c149b588 <line:1457:15, line:1448:28> 'int' '='
|   | | | |-MemberExpr 0x5608c149b4a8 <line:1457:15, col:19> 'int' lvalue ->tm_mday 0x5608c1385b60
|   | | | | `-ImplicitCastExpr 0x5608c149b490 <col:15> 'struct tm *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x5608c149b470 <col:15> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | | | `-ImplicitCastExpr 0x5608c149b570 <line:1448:11, col:28> 'int' <FloatingToIntegral>
|   | | |   `-CallExpr 0x5608c149b530 <col:11, col:28> 'double'
|   | | |     |-ImplicitCastExpr 0x5608c149b518 <col:11> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149b4d8 <col:11> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |     `-ImplicitCastExpr 0x5608c149b558 <col:27> 'jv':'jv' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c149b4f8 <col:27> 'jv':'jv' lvalue Var 0x5608c149b080 'n' 'jv':'jv'
|   | | `-CallExpr 0x5608c149b600 <line:1449:7, col:16> 'void'
|   | |   |-ImplicitCastExpr 0x5608c149b5e8 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149b5a8 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c149b628 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c149b5c8 <col:15> 'jv':'jv' lvalue Var 0x5608c149b080 'n' 'jv':'jv'
|   | `-IntegerLiteral 0x5608c149b670 <line:1450:14> 'int' 0
|   |-DoStmt 0x5608c149bcd0 <line:1442:5, line:1450:15>
|   | |-CompoundStmt 0x5608c149bc80 <line:1442:8, line:1450:5>
|   | | |-DeclStmt 0x5608c149b868 <line:1443:7, col:43>
|   | | | `-VarDecl 0x5608c149b6c0 <col:7, col:42> col:10 used n 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c149b838 <col:14, col:42> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c149b820 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149b728 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |     |-CallExpr 0x5608c149b7a0 <col:27, col:36> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c149b788 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c149b748 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c149b7c8 <line:1458:28> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c149b768 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |     `-ParenExpr 0x5608c149b800 <line:1443:39, col:41> 'int'
|   | | |       `-IntegerLiteral 0x5608c149b7e0 <line:1458:31> 'int' 3
|   | | |-IfStmt 0x5608c149ba90 <line:1444:7, line:1447:7>
|   | | | |-BinaryOperator 0x5608c149b988 <line:1444:11, col:44> 'int' '!='
|   | | | | |-ImplicitCastExpr 0x5608c149b958 <col:11, col:24> 'unsigned int' <IntegralCast>
|   | | | | | `-CallExpr 0x5608c149b8d8 <col:11, col:24> 'jv_kind':'jv_kind'
|   | | | | |   |-ImplicitCastExpr 0x5608c149b8c0 <col:11> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c149b880 <col:11> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | | |   `-ImplicitCastExpr 0x5608c149b900 <col:23> 'jv':'jv' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x5608c149b8a0 <col:23> 'jv':'jv' lvalue Var 0x5608c149b6c0 'n' 'jv':'jv'
|   | | | | `-ImplicitCastExpr 0x5608c149b970 <col:29, col:44> 'unsigned int' <IntegralCast>
|   | | | |   `-ParenExpr 0x5608c149b938 <col:29, col:44> 'int'
|   | | | |     `-DeclRefExpr 0x5608c149b918 <col:30> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | | | `-CompoundStmt 0x5608c149ba70 <col:47, line:1447:7>
|   | | |   |-CallExpr 0x5608c149ba00 <line:1445:9, col:18> 'void'
|   | | |   | |-ImplicitCastExpr 0x5608c149b9e8 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x5608c149b9a8 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |   | `-ImplicitCastExpr 0x5608c149ba28 <line:1458:28> 'jv':'jv' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x5608c149b9c8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |   `-ReturnStmt 0x5608c149ba60 <line:1446:9, col:16>
|   | | |     `-IntegerLiteral 0x5608c149ba40 <col:16> 'int' 0
|   | | |-BinaryOperator 0x5608c149bbc8 <line:1458:15, line:1448:28> 'int' '='
|   | | | |-MemberExpr 0x5608c149bae8 <line:1458:15, col:19> 'int' lvalue ->tm_hour 0x5608c1385af8
|   | | | | `-ImplicitCastExpr 0x5608c149bad0 <col:15> 'struct tm *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x5608c149bab0 <col:15> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | | | `-ImplicitCastExpr 0x5608c149bbb0 <line:1448:11, col:28> 'int' <FloatingToIntegral>
|   | | |   `-CallExpr 0x5608c149bb70 <col:11, col:28> 'double'
|   | | |     |-ImplicitCastExpr 0x5608c149bb58 <col:11> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149bb18 <col:11> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |     `-ImplicitCastExpr 0x5608c149bb98 <col:27> 'jv':'jv' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c149bb38 <col:27> 'jv':'jv' lvalue Var 0x5608c149b6c0 'n' 'jv':'jv'
|   | | `-CallExpr 0x5608c149bc40 <line:1449:7, col:16> 'void'
|   | |   |-ImplicitCastExpr 0x5608c149bc28 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149bbe8 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c149bc68 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c149bc08 <col:15> 'jv':'jv' lvalue Var 0x5608c149b6c0 'n' 'jv':'jv'
|   | `-IntegerLiteral 0x5608c149bcb0 <line:1450:14> 'int' 0
|   |-DoStmt 0x5608c149c310 <line:1442:5, line:1450:15>
|   | |-CompoundStmt 0x5608c149c2c0 <line:1442:8, line:1450:5>
|   | | |-DeclStmt 0x5608c149bea8 <line:1443:7, col:43>
|   | | | `-VarDecl 0x5608c149bd00 <col:7, col:42> col:10 used n 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c149be78 <col:14, col:42> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c149be60 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149bd68 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |     |-CallExpr 0x5608c149bde0 <col:27, col:36> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c149bdc8 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c149bd88 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c149be08 <line:1459:28> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c149bda8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |     `-ParenExpr 0x5608c149be40 <line:1443:39, col:41> 'int'
|   | | |       `-IntegerLiteral 0x5608c149be20 <line:1459:31> 'int' 4
|   | | |-IfStmt 0x5608c149c0d0 <line:1444:7, line:1447:7>
|   | | | |-BinaryOperator 0x5608c149bfc8 <line:1444:11, col:44> 'int' '!='
|   | | | | |-ImplicitCastExpr 0x5608c149bf98 <col:11, col:24> 'unsigned int' <IntegralCast>
|   | | | | | `-CallExpr 0x5608c149bf18 <col:11, col:24> 'jv_kind':'jv_kind'
|   | | | | |   |-ImplicitCastExpr 0x5608c149bf00 <col:11> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c149bec0 <col:11> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | | |   `-ImplicitCastExpr 0x5608c149bf40 <col:23> 'jv':'jv' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x5608c149bee0 <col:23> 'jv':'jv' lvalue Var 0x5608c149bd00 'n' 'jv':'jv'
|   | | | | `-ImplicitCastExpr 0x5608c149bfb0 <col:29, col:44> 'unsigned int' <IntegralCast>
|   | | | |   `-ParenExpr 0x5608c149bf78 <col:29, col:44> 'int'
|   | | | |     `-DeclRefExpr 0x5608c149bf58 <col:30> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | | | `-CompoundStmt 0x5608c149c0b0 <col:47, line:1447:7>
|   | | |   |-CallExpr 0x5608c149c040 <line:1445:9, col:18> 'void'
|   | | |   | |-ImplicitCastExpr 0x5608c149c028 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x5608c149bfe8 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |   | `-ImplicitCastExpr 0x5608c149c068 <line:1459:28> 'jv':'jv' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x5608c149c008 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |   `-ReturnStmt 0x5608c149c0a0 <line:1446:9, col:16>
|   | | |     `-IntegerLiteral 0x5608c149c080 <col:16> 'int' 0
|   | | |-BinaryOperator 0x5608c149c208 <line:1459:15, line:1448:28> 'int' '='
|   | | | |-MemberExpr 0x5608c149c128 <line:1459:15, col:19> 'int' lvalue ->tm_min 0x5608c1385a90
|   | | | | `-ImplicitCastExpr 0x5608c149c110 <col:15> 'struct tm *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x5608c149c0f0 <col:15> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | | | `-ImplicitCastExpr 0x5608c149c1f0 <line:1448:11, col:28> 'int' <FloatingToIntegral>
|   | | |   `-CallExpr 0x5608c149c1b0 <col:11, col:28> 'double'
|   | | |     |-ImplicitCastExpr 0x5608c149c198 <col:11> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149c158 <col:11> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |     `-ImplicitCastExpr 0x5608c149c1d8 <col:27> 'jv':'jv' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c149c178 <col:27> 'jv':'jv' lvalue Var 0x5608c149bd00 'n' 'jv':'jv'
|   | | `-CallExpr 0x5608c149c280 <line:1449:7, col:16> 'void'
|   | |   |-ImplicitCastExpr 0x5608c149c268 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149c228 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c149c2a8 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c149c248 <col:15> 'jv':'jv' lvalue Var 0x5608c149bd00 'n' 'jv':'jv'
|   | `-IntegerLiteral 0x5608c149c2f0 <line:1450:14> 'int' 0
|   |-DoStmt 0x5608c149c950 <line:1442:5, line:1450:15>
|   | |-CompoundStmt 0x5608c149c900 <line:1442:8, line:1450:5>
|   | | |-DeclStmt 0x5608c149c4e8 <line:1443:7, col:43>
|   | | | `-VarDecl 0x5608c149c340 <col:7, col:42> col:10 used n 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c149c4b8 <col:14, col:42> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c149c4a0 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149c3a8 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |     |-CallExpr 0x5608c149c420 <col:27, col:36> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c149c408 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c149c3c8 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c149c448 <line:1460:28> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c149c3e8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |     `-ParenExpr 0x5608c149c480 <line:1443:39, col:41> 'int'
|   | | |       `-IntegerLiteral 0x5608c149c460 <line:1460:31> 'int' 5
|   | | |-IfStmt 0x5608c149c710 <line:1444:7, line:1447:7>
|   | | | |-BinaryOperator 0x5608c149c608 <line:1444:11, col:44> 'int' '!='
|   | | | | |-ImplicitCastExpr 0x5608c149c5d8 <col:11, col:24> 'unsigned int' <IntegralCast>
|   | | | | | `-CallExpr 0x5608c149c558 <col:11, col:24> 'jv_kind':'jv_kind'
|   | | | | |   |-ImplicitCastExpr 0x5608c149c540 <col:11> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c149c500 <col:11> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | | |   `-ImplicitCastExpr 0x5608c149c580 <col:23> 'jv':'jv' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x5608c149c520 <col:23> 'jv':'jv' lvalue Var 0x5608c149c340 'n' 'jv':'jv'
|   | | | | `-ImplicitCastExpr 0x5608c149c5f0 <col:29, col:44> 'unsigned int' <IntegralCast>
|   | | | |   `-ParenExpr 0x5608c149c5b8 <col:29, col:44> 'int'
|   | | | |     `-DeclRefExpr 0x5608c149c598 <col:30> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | | | `-CompoundStmt 0x5608c149c6f0 <col:47, line:1447:7>
|   | | |   |-CallExpr 0x5608c149c680 <line:1445:9, col:18> 'void'
|   | | |   | |-ImplicitCastExpr 0x5608c149c668 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x5608c149c628 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |   | `-ImplicitCastExpr 0x5608c149c6a8 <line:1460:28> 'jv':'jv' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x5608c149c648 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |   `-ReturnStmt 0x5608c149c6e0 <line:1446:9, col:16>
|   | | |     `-IntegerLiteral 0x5608c149c6c0 <col:16> 'int' 0
|   | | |-BinaryOperator 0x5608c149c848 <line:1460:15, line:1448:28> 'int' '='
|   | | | |-MemberExpr 0x5608c149c768 <line:1460:15, col:19> 'int' lvalue ->tm_sec 0x5608c1385a28
|   | | | | `-ImplicitCastExpr 0x5608c149c750 <col:15> 'struct tm *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x5608c149c730 <col:15> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | | | `-ImplicitCastExpr 0x5608c149c830 <line:1448:11, col:28> 'int' <FloatingToIntegral>
|   | | |   `-CallExpr 0x5608c149c7f0 <col:11, col:28> 'double'
|   | | |     |-ImplicitCastExpr 0x5608c149c7d8 <col:11> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149c798 <col:11> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |     `-ImplicitCastExpr 0x5608c149c818 <col:27> 'jv':'jv' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c149c7b8 <col:27> 'jv':'jv' lvalue Var 0x5608c149c340 'n' 'jv':'jv'
|   | | `-CallExpr 0x5608c149c8c0 <line:1449:7, col:16> 'void'
|   | |   |-ImplicitCastExpr 0x5608c149c8a8 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149c868 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c149c8e8 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c149c888 <col:15> 'jv':'jv' lvalue Var 0x5608c149c340 'n' 'jv':'jv'
|   | `-IntegerLiteral 0x5608c149c930 <line:1450:14> 'int' 0
|   |-DoStmt 0x5608c149cf90 <line:1442:5, line:1450:15>
|   | |-CompoundStmt 0x5608c149cf40 <line:1442:8, line:1450:5>
|   | | |-DeclStmt 0x5608c149cb28 <line:1443:7, col:43>
|   | | | `-VarDecl 0x5608c149c980 <col:7, col:42> col:10 used n 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c149caf8 <col:14, col:42> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c149cae0 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149c9e8 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |     |-CallExpr 0x5608c149ca60 <col:27, col:36> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c149ca48 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c149ca08 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c149ca88 <line:1461:28> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c149ca28 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |     `-ParenExpr 0x5608c149cac0 <line:1443:39, col:41> 'int'
|   | | |       `-IntegerLiteral 0x5608c149caa0 <line:1461:31> 'int' 6
|   | | |-IfStmt 0x5608c149cd50 <line:1444:7, line:1447:7>
|   | | | |-BinaryOperator 0x5608c149cc48 <line:1444:11, col:44> 'int' '!='
|   | | | | |-ImplicitCastExpr 0x5608c149cc18 <col:11, col:24> 'unsigned int' <IntegralCast>
|   | | | | | `-CallExpr 0x5608c149cb98 <col:11, col:24> 'jv_kind':'jv_kind'
|   | | | | |   |-ImplicitCastExpr 0x5608c149cb80 <col:11> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c149cb40 <col:11> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | | |   `-ImplicitCastExpr 0x5608c149cbc0 <col:23> 'jv':'jv' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x5608c149cb60 <col:23> 'jv':'jv' lvalue Var 0x5608c149c980 'n' 'jv':'jv'
|   | | | | `-ImplicitCastExpr 0x5608c149cc30 <col:29, col:44> 'unsigned int' <IntegralCast>
|   | | | |   `-ParenExpr 0x5608c149cbf8 <col:29, col:44> 'int'
|   | | | |     `-DeclRefExpr 0x5608c149cbd8 <col:30> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | | | `-CompoundStmt 0x5608c149cd30 <col:47, line:1447:7>
|   | | |   |-CallExpr 0x5608c149ccc0 <line:1445:9, col:18> 'void'
|   | | |   | |-ImplicitCastExpr 0x5608c149cca8 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x5608c149cc68 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |   | `-ImplicitCastExpr 0x5608c149cce8 <line:1461:28> 'jv':'jv' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x5608c149cc88 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |   `-ReturnStmt 0x5608c149cd20 <line:1446:9, col:16>
|   | | |     `-IntegerLiteral 0x5608c149cd00 <col:16> 'int' 0
|   | | |-BinaryOperator 0x5608c149ce88 <line:1461:15, line:1448:28> 'int' '='
|   | | | |-MemberExpr 0x5608c149cda8 <line:1461:15, col:19> 'int' lvalue ->tm_wday 0x5608c1385c98
|   | | | | `-ImplicitCastExpr 0x5608c149cd90 <col:15> 'struct tm *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x5608c149cd70 <col:15> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | | | `-ImplicitCastExpr 0x5608c149ce70 <line:1448:11, col:28> 'int' <FloatingToIntegral>
|   | | |   `-CallExpr 0x5608c149ce30 <col:11, col:28> 'double'
|   | | |     |-ImplicitCastExpr 0x5608c149ce18 <col:11> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149cdd8 <col:11> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |     `-ImplicitCastExpr 0x5608c149ce58 <col:27> 'jv':'jv' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c149cdf8 <col:27> 'jv':'jv' lvalue Var 0x5608c149c980 'n' 'jv':'jv'
|   | | `-CallExpr 0x5608c149cf00 <line:1449:7, col:16> 'void'
|   | |   |-ImplicitCastExpr 0x5608c149cee8 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149cea8 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c149cf28 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c149cec8 <col:15> 'jv':'jv' lvalue Var 0x5608c149c980 'n' 'jv':'jv'
|   | `-IntegerLiteral 0x5608c149cf70 <line:1450:14> 'int' 0
|   |-DoStmt 0x5608c149d5e0 <line:1442:5, line:1450:15>
|   | |-CompoundStmt 0x5608c149d590 <line:1442:8, line:1450:5>
|   | | |-DeclStmt 0x5608c149d168 <line:1443:7, col:43>
|   | | | `-VarDecl 0x5608c149cfc0 <col:7, col:42> col:10 used n 'jv':'jv' cinit
|   | | |   `-CallExpr 0x5608c149d138 <col:14, col:42> 'jv':'jv'
|   | | |     |-ImplicitCastExpr 0x5608c149d120 <col:14> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149d028 <col:14> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|   | | |     |-CallExpr 0x5608c149d0a0 <col:27, col:36> 'jv':'jv'
|   | | |     | |-ImplicitCastExpr 0x5608c149d088 <col:27> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |     | | `-DeclRefExpr 0x5608c149d048 <col:27> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |     | `-ImplicitCastExpr 0x5608c149d0c8 <line:1462:28> 'jv':'jv' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x5608c149d068 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |     `-ParenExpr 0x5608c149d100 <line:1443:39, col:41> 'int'
|   | | |       `-IntegerLiteral 0x5608c149d0e0 <line:1462:31> 'int' 7
|   | | |-IfStmt 0x5608c149d3a0 <line:1444:7, line:1447:7>
|   | | | |-BinaryOperator 0x5608c149d298 <line:1444:11, col:44> 'int' '!='
|   | | | | |-ImplicitCastExpr 0x5608c149d268 <col:11, col:24> 'unsigned int' <IntegralCast>
|   | | | | | `-CallExpr 0x5608c149d1e8 <col:11, col:24> 'jv_kind':'jv_kind'
|   | | | | |   |-ImplicitCastExpr 0x5608c149d1d0 <col:11> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | | | |   | `-DeclRefExpr 0x5608c149d180 <col:11> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | | | |   `-ImplicitCastExpr 0x5608c149d210 <col:23> 'jv':'jv' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x5608c149d1b0 <col:23> 'jv':'jv' lvalue Var 0x5608c149cfc0 'n' 'jv':'jv'
|   | | | | `-ImplicitCastExpr 0x5608c149d280 <col:29, col:44> 'unsigned int' <IntegralCast>
|   | | | |   `-ParenExpr 0x5608c149d248 <col:29, col:44> 'int'
|   | | | |     `-DeclRefExpr 0x5608c149d228 <col:30> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | | | `-CompoundStmt 0x5608c149d380 <col:47, line:1447:7>
|   | | |   |-CallExpr 0x5608c149d310 <line:1445:9, col:18> 'void'
|   | | |   | |-ImplicitCastExpr 0x5608c149d2f8 <col:9> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | |   | | `-DeclRefExpr 0x5608c149d2b8 <col:9> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | | |   | `-ImplicitCastExpr 0x5608c149d338 <line:1462:28> 'jv':'jv' <LValueToRValue>
|   | | |   |   `-DeclRefExpr 0x5608c149d2d8 <col:28> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   | | |   `-ReturnStmt 0x5608c149d370 <line:1446:9, col:16>
|   | | |     `-IntegerLiteral 0x5608c149d350 <col:16> 'int' 0
|   | | |-BinaryOperator 0x5608c149d4d8 <line:1462:15, line:1448:28> 'int' '='
|   | | | |-MemberExpr 0x5608c149d3f8 <line:1462:15, col:19> 'int' lvalue ->tm_yday 0x5608c1385d00
|   | | | | `-ImplicitCastExpr 0x5608c149d3e0 <col:15> 'struct tm *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x5608c149d3c0 <col:15> 'struct tm *' lvalue ParmVar 0x5608c1499fe8 'tm' 'struct tm *'
|   | | | `-ImplicitCastExpr 0x5608c149d4c0 <line:1448:11, col:28> 'int' <FloatingToIntegral>
|   | | |   `-CallExpr 0x5608c149d480 <col:11, col:28> 'double'
|   | | |     |-ImplicitCastExpr 0x5608c149d468 <col:11> 'double (*)(jv)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x5608c149d428 <col:11> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   | | |     `-ImplicitCastExpr 0x5608c149d4a8 <col:27> 'jv':'jv' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x5608c149d448 <col:27> 'jv':'jv' lvalue Var 0x5608c149cfc0 'n' 'jv':'jv'
|   | | `-CallExpr 0x5608c149d550 <line:1449:7, col:16> 'void'
|   | |   |-ImplicitCastExpr 0x5608c149d538 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149d4f8 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |   `-ImplicitCastExpr 0x5608c149d578 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c149d518 <col:15> 'jv':'jv' lvalue Var 0x5608c149cfc0 'n' 'jv':'jv'
|   | `-IntegerLiteral 0x5608c149d5c0 <line:1450:14> 'int' 0
|   |-CallExpr 0x5608c149d658 <line:1463:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c149d640 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c149d600 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c149d680 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c149d620 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c1499f58 'a' 'jv':'jv'
|   `-ReturnStmt 0x5608c149d6b8 <line:1473:3, col:10>
|     `-IntegerLiteral 0x5608c149d698 <col:10> 'int' 1
|-FunctionDecl 0x5608c149d858 <line:1478:1, line:1492:1> line:1478:11 used f_mktime 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c149d748 <col:20, col:30> col:30 jq 'jq_state *'
| |-ParmVarDecl 0x5608c149d7c0 <col:34, col:37> col:37 used a 'jv':'jv'
| `-CompoundStmt 0x5608c149e830 <col:40, line:1492:1>
|   |-IfStmt 0x5608c149db88 <line:1479:3, line:1480:66>
|   | |-BinaryOperator 0x5608c149d9f0 <line:1479:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c149d9c0 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c149d960 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c149d948 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c149d908 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c149d988 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c149d928 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c149d7c0 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c149d9d8 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c149d9a0 <col:25> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|   | `-ReturnStmt 0x5608c149db78 <line:1480:5, col:66>
|   |   `-CallExpr 0x5608c149db30 <col:12, col:66> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c149db18 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149da10 <col:12> 'jv (jv, jv)' Function 0x5608c1419b18 'ret_error' 'jv (jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c149db60 <col:22> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c149da30 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c149d7c0 'a' 'jv':'jv'
|   |     `-CallExpr 0x5608c149dac0 <col:25, col:65> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c149daa8 <col:25> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c149da50 <col:25> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c149db00 <col:35> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c149dae8 <col:35> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c149da70 <col:35> 'char [29]' lvalue "mktime requires array inputs"
|   |-IfStmt 0x5608c149de98 <line:1481:3, line:1482:76>
|   | |-BinaryOperator 0x5608c149dcc0 <line:1481:7, col:37> 'int' '<'
|   | | |-CallExpr 0x5608c149dc78 <col:7, col:33> 'int'
|   | | | |-ImplicitCastExpr 0x5608c149dc60 <col:7> 'int (*)(jv)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5608c149dba8 <col:7> 'int (jv)' Function 0x5608c13dc1e8 'jv_array_length' 'int (jv)'
|   | | | `-CallExpr 0x5608c149dc20 <col:23, col:32> 'jv':'jv'
|   | | |   |-ImplicitCastExpr 0x5608c149dc08 <col:23> 'jv (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c149dbc8 <col:23> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c149dc48 <col:31> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c149dbe8 <col:31> 'jv':'jv' lvalue ParmVar 0x5608c149d7c0 'a' 'jv':'jv'
|   | | `-IntegerLiteral 0x5608c149dca0 <col:37> 'int' 6
|   | `-ReturnStmt 0x5608c149de88 <line:1482:5, col:76>
|   |   `-CallExpr 0x5608c149de40 <col:12, col:76> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c149de28 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149dce0 <col:12> 'jv (jv, jv)' Function 0x5608c1419b18 'ret_error' 'jv (jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c149de70 <col:22> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c149dd00 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c149d7c0 'a' 'jv':'jv'
|   |     `-CallExpr 0x5608c149ddd0 <col:25, col:75> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c149ddb8 <col:25> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c149dd20 <col:25> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c149de10 <col:35> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c149ddf8 <col:35> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c149dd78 <col:35> 'char [39]' lvalue "mktime requires parsed datetime inputs"
|   |-DeclStmt 0x5608c149df40 <line:1483:3, col:15>
|   | `-VarDecl 0x5608c149ded8 <col:3, col:13> col:13 used tm 'struct tm':'struct tm'
|   |-IfStmt 0x5608c149e1e0 <line:1484:3, line:1485:83>
|   | |-UnaryOperator 0x5608c149e088 <line:1484:7, col:20> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x5608c149e040 <col:8, col:20> 'int'
|   | |   |-ImplicitCastExpr 0x5608c149e028 <col:8> 'int (*)(jv, struct tm *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c149df58 <col:8> 'int (jv, struct tm *)' Function 0x5608c149a100 'jv2tm' 'int (jv, struct tm *)'
|   | |   |-ImplicitCastExpr 0x5608c149e070 <col:14> 'jv':'jv' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5608c149df78 <col:14> 'jv':'jv' lvalue ParmVar 0x5608c149d7c0 'a' 'jv':'jv'
|   | |   `-UnaryOperator 0x5608c149dfb8 <col:17, col:18> 'struct tm *' prefix '&' cannot overflow
|   | |     `-DeclRefExpr 0x5608c149df98 <col:18> 'struct tm':'struct tm' lvalue Var 0x5608c149ded8 'tm' 'struct tm':'struct tm'
|   | `-ReturnStmt 0x5608c149e1d0 <line:1485:5, col:83>
|   |   `-CallExpr 0x5608c149e1a8 <col:12, col:83> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c149e190 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149e0a0 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c149e138 <col:32, col:82> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c149e120 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c149e0c0 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c149e178 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c149e160 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c149e0e0 <col:42> 'char [39]' lvalue "mktime requires parsed datetime inputs"
|   |-DeclStmt 0x5608c149e310 <line:1486:3, col:28>
|   | `-VarDecl 0x5608c149e210 <col:3, col:27> col:10 used t 'time_t':'long' cinit
|   |   `-CallExpr 0x5608c149e2e8 <col:14, col:27> 'time_t':'long'
|   |     |-ImplicitCastExpr 0x5608c149e2d0 <col:14> 'time_t (*)(struct tm *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149e278 <col:14> 'time_t (struct tm *)' Function 0x5608c148ddc8 'my_mktime' 'time_t (struct tm *)'
|   |     `-UnaryOperator 0x5608c149e2b8 <col:24, col:25> 'struct tm *' prefix '&' cannot overflow
|   |       `-DeclRefExpr 0x5608c149e298 <col:25> 'struct tm':'struct tm' lvalue Var 0x5608c149ded8 'tm' 'struct tm':'struct tm'
|   |-IfStmt 0x5608c149e528 <line:1487:3, line:1488:74>
|   | |-BinaryOperator 0x5608c149e3d0 <line:1487:7, col:21> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c149e3b8 <col:7> 'time_t':'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c149e328 <col:7> 'time_t':'long' lvalue Var 0x5608c149e210 't' 'time_t':'long'
|   | | `-CStyleCastExpr 0x5608c149e390 <col:12, col:21> 'time_t':'long' <IntegralCast>
|   | |   `-UnaryOperator 0x5608c149e368 <col:20, col:21> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x5608c149e348 <col:21> 'int' 1
|   | `-ReturnStmt 0x5608c149e518 <line:1488:5, col:74>
|   |   `-CallExpr 0x5608c149e4f0 <col:12, col:74> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c149e4d8 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149e3f0 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c149e480 <col:32, col:73> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c149e468 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c149e410 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c149e4c0 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c149e4a8 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c149e430 <col:42> 'char [30]' lvalue "invalid gmtime representation"
|   |-IfStmt 0x5608c149e750 <line:1489:3, line:1490:82>
|   | |-BinaryOperator 0x5608c149e5f0 <line:1489:7, col:21> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c149e5d8 <col:7> 'time_t':'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c149e548 <col:7> 'time_t':'long' lvalue Var 0x5608c149e210 't' 'time_t':'long'
|   | | `-CStyleCastExpr 0x5608c149e5b0 <col:12, col:21> 'time_t':'long' <IntegralCast>
|   | |   `-UnaryOperator 0x5608c149e588 <col:20, col:21> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x5608c149e568 <col:21> 'int' 2
|   | `-ReturnStmt 0x5608c149e740 <line:1490:5, col:82>
|   |   `-CallExpr 0x5608c149e718 <col:12, col:82> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c149e700 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149e610 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c149e6a8 <col:32, col:81> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c149e690 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c149e630 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c149e6e8 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c149e6d0 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c149e650 <col:42> 'char [38]' lvalue "mktime not supported on this platform"
|   `-ReturnStmt 0x5608c149e820 <line:1491:3, col:21>
|     `-CallExpr 0x5608c149e7c8 <col:10, col:21> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c149e7b0 <col:10> 'jv (*)(double)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c149e770 <col:10> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|       `-ImplicitCastExpr 0x5608c149e808 <col:20> 'double' <IntegralToFloating>
|         `-ImplicitCastExpr 0x5608c149e7f0 <col:20> 'time_t':'long' <LValueToRValue>
|           `-DeclRefExpr 0x5608c149e790 <col:20> 'time_t':'long' lvalue Var 0x5608c149e210 't' 'time_t':'long'
|-FunctionDecl 0x5608c149e9a0 <line:1495:1, line:1508:1> line:1495:11 used f_gmtime 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c149e890 <col:20, col:30> col:30 jq 'jq_state *'
| |-ParmVarDecl 0x5608c149e908 <col:34, col:37> col:37 used a 'jv':'jv'
| `-CompoundStmt 0x5608c149fb50 <col:40, line:1508:1>
|   |-IfStmt 0x5608c149ed10 <line:1496:3, line:1497:70>
|   | |-BinaryOperator 0x5608c149eb38 <line:1496:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c149eb08 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c149eaa8 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c149ea90 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c149ea50 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c149ead0 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c149ea70 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c149e908 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c149eb20 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c149eae8 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-ReturnStmt 0x5608c149ed00 <line:1497:5, col:70>
|   |   `-CallExpr 0x5608c149ecb8 <col:12, col:70> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c149eca0 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149eb58 <col:12> 'jv (jv, jv)' Function 0x5608c1419b18 'ret_error' 'jv (jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c149ece8 <col:22> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c149eb78 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c149e908 'a' 'jv':'jv'
|   |     `-CallExpr 0x5608c149ec48 <col:25, col:69> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c149ec30 <col:25> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c149eb98 <col:25> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c149ec88 <col:35> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c149ec70 <col:35> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c149ebf8 <col:35> 'char [33]' lvalue "gmtime() requires numeric inputs"
|   |-DeclStmt 0x5608c149ee60 <line:1498:3, col:21>
|   | |-VarDecl 0x5608c149ed50 <col:3, col:13> col:13 used tm 'struct tm':'struct tm'
|   | `-VarDecl 0x5608c149ede0 <col:3, col:18> col:18 used tmp 'struct tm *'
|   |-CallExpr 0x5608c149ef68 <line:1499:3, col:28> 'void *'
|   | |-ImplicitCastExpr 0x5608c149ef50 <col:3> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c149ee78 <col:3> 'void *(void *, int, unsigned long)' Function 0x5608c1368ab8 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x5608c149efa0 <col:10, col:11> 'void *' <BitCast>
|   | | `-UnaryOperator 0x5608c149eeb8 <col:10, col:11> 'struct tm *' prefix '&' cannot overflow
|   | |   `-DeclRefExpr 0x5608c149ee98 <col:11> 'struct tm':'struct tm' lvalue Var 0x5608c149ed50 'tm' 'struct tm':'struct tm'
|   | |-IntegerLiteral 0x5608c149eed0 <col:15> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x5608c149ef30 <col:18, col:27> 'unsigned long' sizeof
|   |   `-ParenExpr 0x5608c149ef10 <col:24, col:27> 'struct tm':'struct tm' lvalue
|   |     `-DeclRefExpr 0x5608c149eef0 <col:25> 'struct tm':'struct tm' lvalue Var 0x5608c149ed50 'tm' 'struct tm':'struct tm' non_odr_use_unevaluated
|   |-DeclStmt 0x5608c149f0d0 <line:1500:3, col:36>
|   | `-VarDecl 0x5608c149efd0 <col:3, col:35> col:10 used fsecs 'double' cinit
|   |   `-CallExpr 0x5608c149f090 <col:18, col:35> 'double'
|   |     |-ImplicitCastExpr 0x5608c149f078 <col:18> 'double (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149f038 <col:18> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |     `-ImplicitCastExpr 0x5608c149f0b8 <col:34> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c149f058 <col:34> 'jv':'jv' lvalue ParmVar 0x5608c149e908 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c149f1b0 <line:1501:3, col:22>
|   | `-VarDecl 0x5608c149f0f8 <col:3, col:17> col:10 used secs 'time_t':'long' cinit
|   |   `-ImplicitCastExpr 0x5608c149f198 <col:17> 'time_t':'long' <FloatingToIntegral>
|   |     `-ImplicitCastExpr 0x5608c149f180 <col:17> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c149f160 <col:17> 'double' lvalue Var 0x5608c149efd0 'fsecs' 'double'
|   |-CallExpr 0x5608c149f220 <line:1502:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c149f208 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c149f1c8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c149f248 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c149f1e8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c149e908 'a' 'jv':'jv'
|   |-BinaryOperator 0x5608c149f3c8 <line:1503:3, col:28> 'struct tm *' '='
|   | |-DeclRefExpr 0x5608c149f260 <col:3> 'struct tm *' lvalue Var 0x5608c149ede0 'tmp' 'struct tm *'
|   | `-CallExpr 0x5608c149f380 <col:9, col:28> 'struct tm *'
|   |   |-ImplicitCastExpr 0x5608c149f368 <col:9> 'struct tm *(*)(const time_t *restrict, struct tm *restrict)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5608c149f280 <col:9> 'struct tm *(const time_t *restrict, struct tm *restrict)' Function 0x5608c1393970 'gmtime_r' 'struct tm *(const time_t *restrict, struct tm *restrict)'
|   |   |-ImplicitCastExpr 0x5608c149f3b0 <col:18, col:19> 'const time_t *' <NoOp>
|   |   | `-UnaryOperator 0x5608c149f2c0 <col:18, col:19> 'time_t *' prefix '&' cannot overflow
|   |   |   `-DeclRefExpr 0x5608c149f2a0 <col:19> 'time_t':'long' lvalue Var 0x5608c149f0f8 'secs' 'time_t':'long'
|   |   `-UnaryOperator 0x5608c149f2f8 <col:25, col:26> 'struct tm *' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x5608c149f2d8 <col:26> 'struct tm':'struct tm' lvalue Var 0x5608c149ed50 'tm' 'struct tm':'struct tm'
|   |-IfStmt 0x5608c149f670 <line:1504:3, line:1505:103>
|   | |-BinaryOperator 0x5608c149f4b8 <line:1504:7, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c149f488 <src/builtin.c:1504:7> 'struct tm *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c149f3e8 <col:7> 'struct tm *' lvalue Var 0x5608c149ede0 'tmp' 'struct tm *'
|   | | `-ImplicitCastExpr 0x5608c149f4a0 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'struct tm *' <BitCast>
|   | |   `-ParenExpr 0x5608c149f468 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x5608c149f440 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5608c149f408 <col:24> 'int' 0
|   | `-ReturnStmt 0x5608c149f660 <src/builtin.c:1505:5, col:103>
|   |   `-CallExpr 0x5608c149f638 <col:12, col:103> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c149f620 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149f4d8 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c149f5c8 <col:32, col:102> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c149f5b0 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c149f4f8 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c149f608 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c149f5f0 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c149f558 <col:42> 'char [59]' lvalue "error converting number of seconds since epoch to datetime"
|   |-BinaryOperator 0x5608c149f748 <line:1506:3, col:16> 'jv':'jv' '='
|   | |-DeclRefExpr 0x5608c149f690 <col:3> 'jv':'jv' lvalue ParmVar 0x5608c149e908 'a' 'jv':'jv'
|   | `-CallExpr 0x5608c149f708 <col:7, col:16> 'jv':'jv'
|   |   |-ImplicitCastExpr 0x5608c149f6f0 <col:7> 'jv (*)(struct tm *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5608c149f6b0 <col:7> 'jv (struct tm *)' Function 0x5608c148cfa8 'tm2jv' 'jv (struct tm *)'
|   |   `-ImplicitCastExpr 0x5608c149f730 <col:13> 'struct tm *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5608c149f6d0 <col:13> 'struct tm *' lvalue Var 0x5608c149ede0 'tmp' 'struct tm *'
|   `-ReturnStmt 0x5608c149fb40 <line:1507:3, col:109>
|     `-CallExpr 0x5608c149faf0 <col:10, col:109> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c149fad8 <col:10> 'jv (*)(jv, int, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c149f768 <col:10> 'jv (jv, int, jv)' Function 0x5608c13dc718 'jv_array_set' 'jv (jv, int, jv)'
|       |-ImplicitCastExpr 0x5608c149fb28 <col:23> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c149f788 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c149e908 'a' 'jv':'jv'
|       |-IntegerLiteral 0x5608c149f7a8 <col:26> 'int' 5
|       `-CallExpr 0x5608c149fab0 <col:29, col:108> 'jv':'jv'
|         |-ImplicitCastExpr 0x5608c149fa98 <col:29> 'jv (*)(double)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c149f7c8 <col:29> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         `-BinaryOperator 0x5608c149fa78 <col:39, col:107> 'double' '+'
|           |-CallExpr 0x5608c149f940 <col:39, col:82> 'double'
|           | |-ImplicitCastExpr 0x5608c149f928 <col:39> 'double (*)(jv)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5608c149f7e8 <col:39> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|           | `-CallExpr 0x5608c149f8f8 <col:55, col:81> 'jv':'jv'
|           |   |-ImplicitCastExpr 0x5608c149f8e0 <col:55> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|           |   | `-DeclRefExpr 0x5608c149f808 <col:55> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|           |   |-CallExpr 0x5608c149f880 <col:68, col:77> 'jv':'jv'
|           |   | |-ImplicitCastExpr 0x5608c149f868 <col:68> 'jv (*)(jv)' <FunctionToPointerDecay>
|           |   | | `-DeclRefExpr 0x5608c149f828 <col:68> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|           |   | `-ImplicitCastExpr 0x5608c149f8a8 <col:76> 'jv':'jv' <LValueToRValue>
|           |   |   `-DeclRefExpr 0x5608c149f848 <col:76> 'jv':'jv' lvalue ParmVar 0x5608c149e908 'a' 'jv':'jv'
|           |   `-IntegerLiteral 0x5608c149f8c0 <col:80> 'int' 5
|           `-ParenExpr 0x5608c149fa58 <col:86, col:107> 'double'
|             `-BinaryOperator 0x5608c149fa38 <col:87, col:106> 'double' '-'
|               |-ImplicitCastExpr 0x5608c149fa20 <col:87> 'double' <LValueToRValue>
|               | `-DeclRefExpr 0x5608c149f968 <col:87> 'double' lvalue Var 0x5608c149efd0 'fsecs' 'double'
|               `-CallExpr 0x5608c149f9e0 <col:95, col:106> 'double'
|                 |-ImplicitCastExpr 0x5608c149f9c8 <col:95> 'double (*)(double)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5608c149f988 <col:95> 'double (double)' Function 0x5608c122c5c0 'floor' 'double (double)'
|                 `-ImplicitCastExpr 0x5608c149fa08 <col:101> 'double' <LValueToRValue>
|                   `-DeclRefExpr 0x5608c149f9a8 <col:101> 'double' lvalue Var 0x5608c149efd0 'fsecs' 'double'
|-FunctionDecl 0x5608c149fd00 <line:1532:1, line:1545:1> line:1532:11 used f_localtime 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c149fbf0 <col:23, col:33> col:33 jq 'jq_state *'
| |-ParmVarDecl 0x5608c149fc68 <col:37, col:40> col:40 used a 'jv':'jv'
| `-CompoundStmt 0x5608c14a0de0 <col:43, line:1545:1>
|   |-IfStmt 0x5608c14a0038 <line:1533:3, line:1534:73>
|   | |-BinaryOperator 0x5608c149fe98 <line:1533:7, col:25> 'int' '!='
|   | | |-ImplicitCastExpr 0x5608c149fe68 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c149fe08 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c149fdf0 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c149fdb0 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c149fe30 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c149fdd0 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c149fc68 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c149fe80 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c149fe48 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | `-ReturnStmt 0x5608c14a0028 <line:1534:5, col:73>
|   |   `-CallExpr 0x5608c149ffe0 <col:12, col:73> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c149ffc8 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c149feb8 <col:12> 'jv (jv, jv)' Function 0x5608c1419b18 'ret_error' 'jv (jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c14a0010 <col:22> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c149fed8 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c149fc68 'a' 'jv':'jv'
|   |     `-CallExpr 0x5608c149ff70 <col:25, col:72> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c149ff58 <col:25> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c149fef8 <col:25> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c149ffb0 <col:35> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c149ff98 <col:35> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c149ff18 <col:35> 'char [36]' lvalue "localtime() requires numeric inputs"
|   |-DeclStmt 0x5608c14a0188 <line:1535:3, col:21>
|   | |-VarDecl 0x5608c14a0078 <col:3, col:13> col:13 used tm 'struct tm':'struct tm'
|   | `-VarDecl 0x5608c14a0108 <col:3, col:18> col:18 used tmp 'struct tm *'
|   |-CallExpr 0x5608c14a0290 <line:1536:3, col:28> 'void *'
|   | |-ImplicitCastExpr 0x5608c14a0278 <col:3> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14a01a0 <col:3> 'void *(void *, int, unsigned long)' Function 0x5608c1368ab8 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x5608c14a02c8 <col:10, col:11> 'void *' <BitCast>
|   | | `-UnaryOperator 0x5608c14a01e0 <col:10, col:11> 'struct tm *' prefix '&' cannot overflow
|   | |   `-DeclRefExpr 0x5608c14a01c0 <col:11> 'struct tm':'struct tm' lvalue Var 0x5608c14a0078 'tm' 'struct tm':'struct tm'
|   | |-IntegerLiteral 0x5608c14a01f8 <col:15> 'int' 0
|   | `-UnaryExprOrTypeTraitExpr 0x5608c14a0258 <col:18, col:27> 'unsigned long' sizeof
|   |   `-ParenExpr 0x5608c14a0238 <col:24, col:27> 'struct tm':'struct tm' lvalue
|   |     `-DeclRefExpr 0x5608c14a0218 <col:25> 'struct tm':'struct tm' lvalue Var 0x5608c14a0078 'tm' 'struct tm':'struct tm' non_odr_use_unevaluated
|   |-DeclStmt 0x5608c14a03f8 <line:1537:3, col:36>
|   | `-VarDecl 0x5608c14a02f8 <col:3, col:35> col:10 used fsecs 'double' cinit
|   |   `-CallExpr 0x5608c14a03b8 <col:18, col:35> 'double'
|   |     |-ImplicitCastExpr 0x5608c14a03a0 <col:18> 'double (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a0360 <col:18> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|   |     `-ImplicitCastExpr 0x5608c14a03e0 <col:34> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14a0380 <col:34> 'jv':'jv' lvalue ParmVar 0x5608c149fc68 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c14a04d8 <line:1538:3, col:22>
|   | `-VarDecl 0x5608c14a0420 <col:3, col:17> col:10 used secs 'time_t':'long' cinit
|   |   `-ImplicitCastExpr 0x5608c14a04c0 <col:17> 'time_t':'long' <FloatingToIntegral>
|   |     `-ImplicitCastExpr 0x5608c14a04a8 <col:17> 'double' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14a0488 <col:17> 'double' lvalue Var 0x5608c14a02f8 'fsecs' 'double'
|   |-CallExpr 0x5608c14a0548 <line:1539:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14a0530 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14a04f0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14a0570 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14a0510 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c149fc68 'a' 'jv':'jv'
|   |-BinaryOperator 0x5608c14a0698 <line:1540:3, col:31> 'struct tm *' '='
|   | |-DeclRefExpr 0x5608c14a0588 <col:3> 'struct tm *' lvalue Var 0x5608c14a0108 'tmp' 'struct tm *'
|   | `-CallExpr 0x5608c14a0650 <col:9, col:31> 'struct tm *'
|   |   |-ImplicitCastExpr 0x5608c14a0638 <col:9> 'struct tm *(*)(const time_t *restrict, struct tm *restrict)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5608c14a05a8 <col:9> 'struct tm *(const time_t *restrict, struct tm *restrict)' Function 0x5608c1393bc8 'localtime_r' 'struct tm *(const time_t *restrict, struct tm *restrict)'
|   |   |-ImplicitCastExpr 0x5608c14a0680 <col:21, col:22> 'const time_t *' <NoOp>
|   |   | `-UnaryOperator 0x5608c14a05e8 <col:21, col:22> 'time_t *' prefix '&' cannot overflow
|   |   |   `-DeclRefExpr 0x5608c14a05c8 <col:22> 'time_t':'long' lvalue Var 0x5608c14a0420 'secs' 'time_t':'long'
|   |   `-UnaryOperator 0x5608c14a0620 <col:28, col:29> 'struct tm *' prefix '&' cannot overflow
|   |     `-DeclRefExpr 0x5608c14a0600 <col:29> 'struct tm':'struct tm' lvalue Var 0x5608c14a0078 'tm' 'struct tm':'struct tm'
|   |-IfStmt 0x5608c14a0900 <line:1541:3, line:1542:103>
|   | |-BinaryOperator 0x5608c14a0788 <line:1541:7, /usr/lib/clang/13.0.1/include/stddef.h:89:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c14a0758 <src/builtin.c:1541:7> 'struct tm *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5608c14a06b8 <col:7> 'struct tm *' lvalue Var 0x5608c14a0108 'tmp' 'struct tm *'
|   | | `-ImplicitCastExpr 0x5608c14a0770 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'struct tm *' <BitCast>
|   | |   `-ParenExpr 0x5608c14a0738 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x5608c14a0710 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x5608c14a06d8 <col:24> 'int' 0
|   | `-ReturnStmt 0x5608c14a08f0 <src/builtin.c:1542:5, col:103>
|   |   `-CallExpr 0x5608c14a08c8 <col:12, col:103> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14a08b0 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a07a8 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c14a0858 <col:32, col:102> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14a0840 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14a07c8 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c14a0898 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14a0880 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14a07e8 <col:42> 'char [59]' lvalue "error converting number of seconds since epoch to datetime"
|   |-BinaryOperator 0x5608c14a09d8 <line:1543:3, col:16> 'jv':'jv' '='
|   | |-DeclRefExpr 0x5608c14a0920 <col:3> 'jv':'jv' lvalue ParmVar 0x5608c149fc68 'a' 'jv':'jv'
|   | `-CallExpr 0x5608c14a0998 <col:7, col:16> 'jv':'jv'
|   |   |-ImplicitCastExpr 0x5608c14a0980 <col:7> 'jv (*)(struct tm *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5608c14a0940 <col:7> 'jv (struct tm *)' Function 0x5608c148cfa8 'tm2jv' 'jv (struct tm *)'
|   |   `-ImplicitCastExpr 0x5608c14a09c0 <col:13> 'struct tm *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5608c14a0960 <col:13> 'struct tm *' lvalue Var 0x5608c14a0108 'tmp' 'struct tm *'
|   `-ReturnStmt 0x5608c14a0dd0 <line:1544:3, col:109>
|     `-CallExpr 0x5608c14a0d80 <col:10, col:109> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14a0d68 <col:10> 'jv (*)(jv, int, jv)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14a09f8 <col:10> 'jv (jv, int, jv)' Function 0x5608c13dc718 'jv_array_set' 'jv (jv, int, jv)'
|       |-ImplicitCastExpr 0x5608c14a0db8 <col:23> 'jv':'jv' <LValueToRValue>
|       | `-DeclRefExpr 0x5608c14a0a18 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c149fc68 'a' 'jv':'jv'
|       |-IntegerLiteral 0x5608c14a0a38 <col:26> 'int' 5
|       `-CallExpr 0x5608c14a0d40 <col:29, col:108> 'jv':'jv'
|         |-ImplicitCastExpr 0x5608c14a0d28 <col:29> 'jv (*)(double)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c14a0a58 <col:29> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|         `-BinaryOperator 0x5608c14a0d08 <col:39, col:107> 'double' '+'
|           |-CallExpr 0x5608c14a0bd0 <col:39, col:82> 'double'
|           | |-ImplicitCastExpr 0x5608c14a0bb8 <col:39> 'double (*)(jv)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x5608c14a0a78 <col:39> 'double (jv)' Function 0x5608c13db9c0 'jv_number_value' 'double (jv)'
|           | `-CallExpr 0x5608c14a0b88 <col:55, col:81> 'jv':'jv'
|           |   |-ImplicitCastExpr 0x5608c14a0b70 <col:55> 'jv (*)(jv, int)' <FunctionToPointerDecay>
|           |   | `-DeclRefExpr 0x5608c14a0a98 <col:55> 'jv (jv, int)' Function 0x5608c13dc438 'jv_array_get' 'jv (jv, int)'
|           |   |-CallExpr 0x5608c14a0b10 <col:68, col:77> 'jv':'jv'
|           |   | |-ImplicitCastExpr 0x5608c14a0af8 <col:68> 'jv (*)(jv)' <FunctionToPointerDecay>
|           |   | | `-DeclRefExpr 0x5608c14a0ab8 <col:68> 'jv (jv)' Function 0x5608c13d1b98 'jv_copy' 'jv (jv)'
|           |   | `-ImplicitCastExpr 0x5608c14a0b38 <col:76> 'jv':'jv' <LValueToRValue>
|           |   |   `-DeclRefExpr 0x5608c14a0ad8 <col:76> 'jv':'jv' lvalue ParmVar 0x5608c149fc68 'a' 'jv':'jv'
|           |   `-IntegerLiteral 0x5608c14a0b50 <col:80> 'int' 5
|           `-ParenExpr 0x5608c14a0ce8 <col:86, col:107> 'double'
|             `-BinaryOperator 0x5608c14a0cc8 <col:87, col:106> 'double' '-'
|               |-ImplicitCastExpr 0x5608c14a0cb0 <col:87> 'double' <LValueToRValue>
|               | `-DeclRefExpr 0x5608c14a0bf8 <col:87> 'double' lvalue Var 0x5608c14a02f8 'fsecs' 'double'
|               `-CallExpr 0x5608c14a0c70 <col:95, col:106> 'double'
|                 |-ImplicitCastExpr 0x5608c14a0c58 <col:95> 'double (*)(double)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5608c14a0c18 <col:95> 'double (double)' Function 0x5608c122c5c0 'floor' 'double (double)'
|                 `-ImplicitCastExpr 0x5608c14a0c98 <col:101> 'double' <LValueToRValue>
|                   `-DeclRefExpr 0x5608c14a0c38 <col:101> 'double' lvalue Var 0x5608c14a02f8 'fsecs' 'double'
|-FunctionDecl 0x5608c14a1010 <line:1569:1, line:1594:1> line:1569:11 used f_strftime 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c14a0e80 <col:22, col:32> col:32 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c14a0ef8 <col:36, col:39> col:39 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14a0f70 <col:42, col:45> col:45 used b 'jv':'jv'
| `-CompoundStmt 0x5608c14a2ad0 <col:48, line:1594:1>
|   |-IfStmt 0x5608c14a1b38 <line:1570:3, line:1580:3> has_else
|   | |-BinaryOperator 0x5608c14a11c0 <line:1570:7, col:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c14a1180 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14a1120 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14a1108 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14a10c8 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14a1148 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14a10e8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14a1198 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14a1160 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | |-CompoundStmt 0x5608c14a14c8 <col:41, line:1576:3>
|   | | |-BinaryOperator 0x5608c14a12d8 <line:1571:5, col:23> 'jv':'jv' '='
|   | | | |-DeclRefExpr 0x5608c14a11e0 <col:5> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   | | | `-CallExpr 0x5608c14a1278 <col:9, col:23> 'jv':'jv'
|   | | |   |-ImplicitCastExpr 0x5608c14a1260 <col:9> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14a1200 <col:9> 'jv (jq_state *, jv)' Function 0x5608c149e9a0 'f_gmtime' 'jv (jq_state *, jv)'
|   | | |   |-ImplicitCastExpr 0x5608c14a12a8 <col:18> 'jq_state *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x5608c14a1220 <col:18> 'jq_state *' lvalue ParmVar 0x5608c14a0e80 'jq' 'jq_state *'
|   | | |   `-ImplicitCastExpr 0x5608c14a12c0 <col:22> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14a1240 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   | | `-IfStmt 0x5608c14a14a8 <line:1572:5, line:1575:5>
|   | |   |-UnaryOperator 0x5608c14a1390 <line:1572:9, col:23> 'int' prefix '!' cannot overflow
|   | |   | `-CallExpr 0x5608c14a1350 <col:10, col:23> 'int'
|   | |   |   |-ImplicitCastExpr 0x5608c14a1338 <col:10> 'int (*)(jv)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x5608c14a12f8 <col:10> 'int (jv)' Function 0x5608c13d1860 'jv_is_valid' 'int (jv)'
|   | |   |   `-ImplicitCastExpr 0x5608c14a1378 <col:22> 'jv':'jv' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x5608c14a1318 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   | |   `-CompoundStmt 0x5608c14a1488 <col:26, line:1575:5>
|   | |     |-CallExpr 0x5608c14a1400 <line:1573:7, col:16> 'void'
|   | |     | |-ImplicitCastExpr 0x5608c14a13e8 <col:7> 'void (*)(jv)' <FunctionToPointerDecay>
|   | |     | | `-DeclRefExpr 0x5608c14a13a8 <col:7> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | |     | `-ImplicitCastExpr 0x5608c14a1428 <col:15> 'jv':'jv' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x5608c14a13c8 <col:15> 'jv':'jv' lvalue ParmVar 0x5608c14a0f70 'b' 'jv':'jv'
|   | |     `-ReturnStmt 0x5608c14a1478 <line:1574:7, col:14>
|   | |       `-ImplicitCastExpr 0x5608c14a1460 <col:14> 'jv':'jv' <LValueToRValue>
|   | |         `-DeclRefExpr 0x5608c14a1440 <col:14> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   | `-IfStmt 0x5608c14a1b08 <line:1576:10, line:1580:3> has_else
|   |   |-BinaryOperator 0x5608c14a15d0 <line:1576:14, col:32> 'int' '!='
|   |   | |-ImplicitCastExpr 0x5608c14a15a0 <col:14, col:27> 'unsigned int' <IntegralCast>
|   |   | | `-CallExpr 0x5608c14a1540 <col:14, col:27> 'jv_kind':'jv_kind'
|   |   | |   |-ImplicitCastExpr 0x5608c14a1528 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x5608c14a14e8 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |   | |   `-ImplicitCastExpr 0x5608c14a1568 <col:26> 'jv':'jv' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x5608c14a1508 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   |   | `-ImplicitCastExpr 0x5608c14a15b8 <col:32> 'unsigned int' <IntegralCast>
|   |   |   `-DeclRefExpr 0x5608c14a1580 <col:32> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|   |   |-CompoundStmt 0x5608c14a17f0 <col:47, line:1578:3>
|   |   | `-ReturnStmt 0x5608c14a17e0 <line:1577:5, col:84>
|   |   |   `-CallExpr 0x5608c14a1778 <col:12, col:84> 'jv':'jv'
|   |   |     |-ImplicitCastExpr 0x5608c14a1760 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x5608c14a15f0 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |   |     |-ImplicitCastExpr 0x5608c14a17b0 <col:23> 'jv':'jv' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5608c14a1610 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   |   |     |-ImplicitCastExpr 0x5608c14a17c8 <col:26> 'jv':'jv' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5608c14a1630 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14a0f70 'b' 'jv':'jv'
|   |   |     `-CallExpr 0x5608c14a1708 <col:29, col:83> 'jv':'jv'
|   |   |       |-ImplicitCastExpr 0x5608c14a16f0 <col:29> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5608c14a1650 <col:29> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |   |       `-ImplicitCastExpr 0x5608c14a1748 <col:39> 'const char *' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5608c14a1730 <col:39> 'char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x5608c14a16a8 <col:39> 'char [43]' lvalue "strftime/1 requires parsed datetime inputs"
|   |   `-IfStmt 0x5608c14a1ae8 <line:1578:10, line:1580:3>
|   |     |-BinaryOperator 0x5608c14a18f0 <line:1578:14, col:32> 'int' '!='
|   |     | |-ImplicitCastExpr 0x5608c14a18c0 <col:14, col:27> 'unsigned int' <IntegralCast>
|   |     | | `-CallExpr 0x5608c14a1860 <col:14, col:27> 'jv_kind':'jv_kind'
|   |     | |   |-ImplicitCastExpr 0x5608c14a1848 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x5608c14a1808 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     | |   `-ImplicitCastExpr 0x5608c14a1888 <col:26> 'jv':'jv' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5608c14a1828 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14a0f70 'b' 'jv':'jv'
|   |     | `-ImplicitCastExpr 0x5608c14a18d8 <col:32> 'unsigned int' <IntegralCast>
|   |     |   `-DeclRefExpr 0x5608c14a18a0 <col:32> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   |     `-CompoundStmt 0x5608c14a1ad0 <col:48, line:1580:3>
|   |       `-ReturnStmt 0x5608c14a1ac0 <line:1579:5, col:77>
|   |         `-CallExpr 0x5608c14a1a58 <col:12, col:77> 'jv':'jv'
|   |           |-ImplicitCastExpr 0x5608c14a1a40 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c14a1910 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |           |-ImplicitCastExpr 0x5608c14a1a90 <col:23> 'jv':'jv' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5608c14a1930 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   |           |-ImplicitCastExpr 0x5608c14a1aa8 <col:26> 'jv':'jv' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5608c14a1950 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14a0f70 'b' 'jv':'jv'
|   |           `-CallExpr 0x5608c14a19e8 <col:29, col:76> 'jv':'jv'
|   |             |-ImplicitCastExpr 0x5608c14a19d0 <col:29> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x5608c14a1970 <col:29> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |             `-ImplicitCastExpr 0x5608c14a1a28 <col:39> 'const char *' <NoOp>
|   |               `-ImplicitCastExpr 0x5608c14a1a10 <col:39> 'char *' <ArrayToPointerDecay>
|   |                 `-StringLiteral 0x5608c14a1990 <col:39> 'char [36]' lvalue "strftime/1 requires a string format"
|   |-DeclStmt 0x5608c14a1bf0 <line:1581:3, col:15>
|   | `-VarDecl 0x5608c14a1b88 <col:3, col:13> col:13 used tm 'struct tm':'struct tm'
|   |-IfStmt 0x5608c14a1e80 <line:1582:3, line:1583:80>
|   | |-UnaryOperator 0x5608c14a1ce0 <line:1582:7, col:20> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x5608c14a1c98 <col:8, col:20> 'int'
|   | |   |-ImplicitCastExpr 0x5608c14a1c80 <col:8> 'int (*)(jv, struct tm *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c14a1c08 <col:8> 'int (jv, struct tm *)' Function 0x5608c149a100 'jv2tm' 'int (jv, struct tm *)'
|   | |   |-ImplicitCastExpr 0x5608c14a1cc8 <col:14> 'jv':'jv' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5608c14a1c28 <col:14> 'jv':'jv' lvalue ParmVar 0x5608c14a0ef8 'a' 'jv':'jv'
|   | |   `-UnaryOperator 0x5608c14a1c68 <col:17, col:18> 'struct tm *' prefix '&' cannot overflow
|   | |     `-DeclRefExpr 0x5608c14a1c48 <col:18> 'struct tm':'struct tm' lvalue Var 0x5608c14a1b88 'tm' 'struct tm':'struct tm'
|   | `-ReturnStmt 0x5608c14a1e70 <line:1583:5, col:80>
|   |   `-CallExpr 0x5608c14a1e28 <col:12, col:80> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14a1e10 <col:12> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a1cf8 <col:12> 'jv (jv, jv)' Function 0x5608c1419b18 'ret_error' 'jv (jv, jv)'
|   |     |-ImplicitCastExpr 0x5608c14a1e58 <col:22> 'jv':'jv' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14a1d18 <col:22> 'jv':'jv' lvalue ParmVar 0x5608c14a0f70 'b' 'jv':'jv'
|   |     `-CallExpr 0x5608c14a1db8 <col:25, col:79> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14a1da0 <col:25> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14a1d38 <col:25> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c14a1df8 <col:35> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14a1de0 <col:35> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14a1d58 <col:35> 'char [43]' lvalue "strftime/1 requires parsed datetime inputs"
|   |-DeclStmt 0x5608c14a1fb8 <line:1585:3, col:39>
|   | `-VarDecl 0x5608c14a1eb8 <col:3, col:38> col:15 used fmt 'const char *' cinit
|   |   `-CallExpr 0x5608c14a1f78 <col:21, col:38> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c14a1f60 <col:21> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a1f20 <col:21> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c14a1fa0 <col:37> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14a1f40 <col:37> 'jv':'jv' lvalue ParmVar 0x5608c14a0f70 'b' 'jv':'jv'
|   |-DeclStmt 0x5608c14a2150 <line:1586:3, col:37>
|   | `-VarDecl 0x5608c14a1fe0 <col:3, col:34> col:10 used alloced 'size_t':'unsigned long' cinit
|   |   `-BinaryOperator 0x5608c14a2130 <col:20, col:34> 'unsigned long' '+'
|   |     |-CallExpr 0x5608c14a20b8 <col:20, col:30> 'unsigned long'
|   |     | |-ImplicitCastExpr 0x5608c14a20a0 <col:20> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c14a2048 <col:20> 'unsigned long (const char *)' Function 0x5608c13745e0 'strlen' 'unsigned long (const char *)'
|   |     | `-ImplicitCastExpr 0x5608c14a20e0 <col:27> 'const char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c14a2068 <col:27> 'const char *' lvalue Var 0x5608c14a1eb8 'fmt' 'const char *'
|   |     `-ImplicitCastExpr 0x5608c14a2118 <col:34> 'unsigned long' <IntegralCast>
|   |       `-IntegerLiteral 0x5608c14a20f8 <col:34> 'int' 100
|   |-DeclStmt 0x5608c14a2468 <line:1587:3, col:30>
|   | `-VarDecl 0x5608c14a2180 <col:3, /usr/include/alloca.h:35:45> src/builtin.c:1587:9 used buf 'char *' cinit
|   |   `-ImplicitCastExpr 0x5608c14a2450 </usr/include/alloca.h:35:23, col:45> 'char *' <BitCast>
|   |     `-CallExpr 0x5608c14a2410 <col:23, col:45> 'void *'
|   |       |-ImplicitCastExpr 0x5608c14a23f8 <col:23> 'void *(*)(unsigned long)' <BuiltinFnToFnPtr>
|   |       | `-DeclRefExpr 0x5608c14a2378 <col:23> '<builtin fn type>' Function 0x5608c14a21e8 '__builtin_alloca' 'void *(unsigned long)'
|   |       `-ImplicitCastExpr 0x5608c14a2438 <src/builtin.c:1587:22> 'size_t':'unsigned long' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c14a2398 <col:22> 'size_t':'unsigned long' lvalue Var 0x5608c14a1fe0 'alloced' 'size_t':'unsigned long'
|   |-DeclStmt 0x5608c14a26c0 <line:1588:3, col:46>
|   | `-VarDecl 0x5608c14a2490 <col:3, col:45> col:10 used n 'size_t':'unsigned long' cinit
|   |   `-CallExpr 0x5608c14a2620 <col:14, col:45> 'size_t':'unsigned long'
|   |     |-ImplicitCastExpr 0x5608c14a2608 <col:14> 'size_t (*)(char *restrict, size_t, const char *restrict, const struct tm *restrict)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a24f8 <col:14> 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' Function 0x5608c1386df8 'strftime' 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)'
|   |     |-ImplicitCastExpr 0x5608c14a2660 <col:23> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14a2518 <col:23> 'char *' lvalue Var 0x5608c14a2180 'buf' 'char *'
|   |     |-ImplicitCastExpr 0x5608c14a2678 <col:28> 'size_t':'unsigned long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14a2538 <col:28> 'size_t':'unsigned long' lvalue Var 0x5608c14a1fe0 'alloced' 'size_t':'unsigned long'
|   |     |-ImplicitCastExpr 0x5608c14a2690 <col:37> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14a2558 <col:37> 'const char *' lvalue Var 0x5608c14a1eb8 'fmt' 'const char *'
|   |     `-ImplicitCastExpr 0x5608c14a26a8 <col:42, col:43> 'const struct tm *' <NoOp>
|   |       `-UnaryOperator 0x5608c14a2598 <col:42, col:43> 'struct tm *' prefix '&' cannot overflow
|   |         `-DeclRefExpr 0x5608c14a2578 <col:43> 'struct tm':'struct tm' lvalue Var 0x5608c14a1b88 'tm' 'struct tm':'struct tm'
|   |-CallExpr 0x5608c14a2730 <line:1589:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14a2718 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14a26d8 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14a2758 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14a26f8 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14a0f70 'b' 'jv':'jv'
|   |-IfStmt 0x5608c14a29f0 <line:1591:3, line:1592:79>
|   | |-BinaryOperator 0x5608c14a2890 <line:1591:7, col:21> 'int' '||'
|   | | |-BinaryOperator 0x5608c14a27e0 <col:7, col:12> 'int' '=='
|   | | | |-ImplicitCastExpr 0x5608c14a27b0 <col:7> 'size_t':'unsigned long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5608c14a2770 <col:7> 'size_t':'unsigned long' lvalue Var 0x5608c14a2490 'n' 'size_t':'unsigned long'
|   | | | `-ImplicitCastExpr 0x5608c14a27c8 <col:12> 'unsigned long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x5608c14a2790 <col:12> 'int' 0
|   | | `-BinaryOperator 0x5608c14a2870 <col:17, col:21> 'int' '>'
|   | |   |-ImplicitCastExpr 0x5608c14a2840 <col:17> 'size_t':'unsigned long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5608c14a2800 <col:17> 'size_t':'unsigned long' lvalue Var 0x5608c14a2490 'n' 'size_t':'unsigned long'
|   | |   `-ImplicitCastExpr 0x5608c14a2858 <col:21> 'size_t':'unsigned long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c14a2820 <col:21> 'size_t':'unsigned long' lvalue Var 0x5608c14a1fe0 'alloced' 'size_t':'unsigned long'
|   | `-ReturnStmt 0x5608c14a29e0 <line:1592:5, col:79>
|   |   `-CallExpr 0x5608c14a29b8 <col:12, col:79> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14a29a0 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a28b0 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c14a2948 <col:32, col:78> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14a2930 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14a28d0 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c14a2988 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14a2970 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14a28f0 <col:42> 'char [35]' lvalue "strftime/1: unknown system failure"
|   `-ReturnStmt 0x5608c14a2ac0 <line:1593:3, col:23>
|     `-CallExpr 0x5608c14a2a68 <col:10, col:23> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14a2a50 <col:10> 'jv (*)(const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14a2a10 <col:10> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|       `-ImplicitCastExpr 0x5608c14a2aa8 <col:20> 'const char *' <NoOp>
|         `-ImplicitCastExpr 0x5608c14a2a90 <col:20> 'char *' <LValueToRValue>
|           `-DeclRefExpr 0x5608c14a2a30 <col:20> 'char *' lvalue Var 0x5608c14a2180 'buf' 'char *'
|-FunctionDecl 0x5608c14a21e8 </usr/include/alloca.h:35:23> col:23 implicit used __builtin_alloca 'void *(unsigned long)' extern
| |-ParmVarDecl 0x5608c14a22e0 <<invalid sloc>> <invalid sloc> 'unsigned long'
| |-BuiltinAttr 0x5608c14a2288 <<invalid sloc>> Implicit 495
| `-NoThrowAttr 0x5608c14a2350 <col:23> Implicit
|-FunctionDecl 0x5608c14a2cd0 <src/builtin.c:1604:1, line:1624:1> line:1604:11 used f_strflocaltime 'jv (jq_state *, jv, jv)' static
| |-ParmVarDecl 0x5608c14a2b40 <col:27, col:37> col:37 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c14a2bb8 <col:41, col:44> col:44 used a 'jv':'jv'
| |-ParmVarDecl 0x5608c14a2c30 <col:47, col:50> col:50 used b 'jv':'jv'
| `-CompoundStmt 0x5608c14a4320 <col:53, line:1624:1>
|   |-IfStmt 0x5608c14a35d8 <line:1605:3, line:1611:3> has_else
|   | |-BinaryOperator 0x5608c14a2e70 <line:1605:7, col:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x5608c14a2e40 <col:7, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CallExpr 0x5608c14a2de0 <col:7, col:20> 'jv_kind':'jv_kind'
|   | | |   |-ImplicitCastExpr 0x5608c14a2dc8 <col:7> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x5608c14a2d88 <col:7> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   | | |   `-ImplicitCastExpr 0x5608c14a2e08 <col:19> 'jv':'jv' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x5608c14a2da8 <col:19> 'jv':'jv' lvalue ParmVar 0x5608c14a2bb8 'a' 'jv':'jv'
|   | | `-ImplicitCastExpr 0x5608c14a2e58 <col:25> 'unsigned int' <IntegralCast>
|   | |   `-DeclRefExpr 0x5608c14a2e20 <col:25> 'int' EnumConstant 0x5608c13d0b30 'JV_KIND_NUMBER' 'int'
|   | |-CompoundStmt 0x5608c14a2fa8 <col:41, line:1607:3>
|   | | `-BinaryOperator 0x5608c14a2f88 <line:1606:5, col:26> 'jv':'jv' '='
|   | |   |-DeclRefExpr 0x5608c14a2e90 <col:5> 'jv':'jv' lvalue ParmVar 0x5608c14a2bb8 'a' 'jv':'jv'
|   | |   `-CallExpr 0x5608c14a2f28 <col:9, col:26> 'jv':'jv'
|   | |     |-ImplicitCastExpr 0x5608c14a2f10 <col:9> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x5608c14a2eb0 <col:9> 'jv (jq_state *, jv)' Function 0x5608c149fd00 'f_localtime' 'jv (jq_state *, jv)'
|   | |     |-ImplicitCastExpr 0x5608c14a2f58 <col:21> 'jq_state *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x5608c14a2ed0 <col:21> 'jq_state *' lvalue ParmVar 0x5608c14a2b40 'jq' 'jq_state *'
|   | |     `-ImplicitCastExpr 0x5608c14a2f70 <col:25> 'jv':'jv' <LValueToRValue>
|   | |       `-DeclRefExpr 0x5608c14a2ef0 <col:25> 'jv':'jv' lvalue ParmVar 0x5608c14a2bb8 'a' 'jv':'jv'
|   | `-IfStmt 0x5608c14a35a8 <line:1607:10, line:1611:3> has_else
|   |   |-BinaryOperator 0x5608c14a30a8 <line:1607:14, col:32> 'int' '!='
|   |   | |-ImplicitCastExpr 0x5608c14a3078 <col:14, col:27> 'unsigned int' <IntegralCast>
|   |   | | `-CallExpr 0x5608c14a3018 <col:14, col:27> 'jv_kind':'jv_kind'
|   |   | |   |-ImplicitCastExpr 0x5608c14a3000 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x5608c14a2fc0 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |   | |   `-ImplicitCastExpr 0x5608c14a3040 <col:26> 'jv':'jv' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x5608c14a2fe0 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14a2bb8 'a' 'jv':'jv'
|   |   | `-ImplicitCastExpr 0x5608c14a3090 <col:32> 'unsigned int' <IntegralCast>
|   |   |   `-DeclRefExpr 0x5608c14a3058 <col:32> 'int' EnumConstant 0x5608c13d0bd0 'JV_KIND_ARRAY' 'int'
|   |   |-CompoundStmt 0x5608c14a3290 <col:47, line:1609:3>
|   |   | `-ReturnStmt 0x5608c14a3280 <line:1608:5, col:89>
|   |   |   `-CallExpr 0x5608c14a3218 <col:12, col:89> 'jv':'jv'
|   |   |     |-ImplicitCastExpr 0x5608c14a3200 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x5608c14a30c8 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |   |     |-ImplicitCastExpr 0x5608c14a3250 <col:23> 'jv':'jv' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5608c14a30e8 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14a2bb8 'a' 'jv':'jv'
|   |   |     |-ImplicitCastExpr 0x5608c14a3268 <col:26> 'jv':'jv' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5608c14a3108 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14a2c30 'b' 'jv':'jv'
|   |   |     `-CallExpr 0x5608c14a31a8 <col:29, col:88> 'jv':'jv'
|   |   |       |-ImplicitCastExpr 0x5608c14a3190 <col:29> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x5608c14a3128 <col:29> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |   |       `-ImplicitCastExpr 0x5608c14a31e8 <col:39> 'const char *' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5608c14a31d0 <col:39> 'char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x5608c14a3148 <col:39> 'char [48]' lvalue "strflocaltime/1 requires parsed datetime inputs"
|   |   `-IfStmt 0x5608c14a3588 <line:1609:10, line:1611:3>
|   |     |-BinaryOperator 0x5608c14a3390 <line:1609:14, col:32> 'int' '!='
|   |     | |-ImplicitCastExpr 0x5608c14a3360 <col:14, col:27> 'unsigned int' <IntegralCast>
|   |     | | `-CallExpr 0x5608c14a3300 <col:14, col:27> 'jv_kind':'jv_kind'
|   |     | |   |-ImplicitCastExpr 0x5608c14a32e8 <col:14> 'jv_kind (*)(jv)' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x5608c14a32a8 <col:14> 'jv_kind (jv)' Function 0x5608c13d14f8 'jv_get_kind' 'jv_kind (jv)'
|   |     | |   `-ImplicitCastExpr 0x5608c14a3328 <col:26> 'jv':'jv' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x5608c14a32c8 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14a2c30 'b' 'jv':'jv'
|   |     | `-ImplicitCastExpr 0x5608c14a3378 <col:32> 'unsigned int' <IntegralCast>
|   |     |   `-DeclRefExpr 0x5608c14a3340 <col:32> 'int' EnumConstant 0x5608c13d0b80 'JV_KIND_STRING' 'int'
|   |     `-CompoundStmt 0x5608c14a3570 <col:48, line:1611:3>
|   |       `-ReturnStmt 0x5608c14a3560 <line:1610:5, col:82>
|   |         `-CallExpr 0x5608c14a34f8 <col:12, col:82> 'jv':'jv'
|   |           |-ImplicitCastExpr 0x5608c14a34e0 <col:12> 'jv (*)(jv, jv, jv)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c14a33b0 <col:12> 'jv (jv, jv, jv)' Function 0x5608c1419ec8 'ret_error2' 'jv (jv, jv, jv)'
|   |           |-ImplicitCastExpr 0x5608c14a3530 <col:23> 'jv':'jv' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5608c14a33d0 <col:23> 'jv':'jv' lvalue ParmVar 0x5608c14a2bb8 'a' 'jv':'jv'
|   |           |-ImplicitCastExpr 0x5608c14a3548 <col:26> 'jv':'jv' <LValueToRValue>
|   |           | `-DeclRefExpr 0x5608c14a33f0 <col:26> 'jv':'jv' lvalue ParmVar 0x5608c14a2c30 'b' 'jv':'jv'
|   |           `-CallExpr 0x5608c14a3488 <col:29, col:81> 'jv':'jv'
|   |             |-ImplicitCastExpr 0x5608c14a3470 <col:29> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x5608c14a3410 <col:29> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |             `-ImplicitCastExpr 0x5608c14a34c8 <col:39> 'const char *' <NoOp>
|   |               `-ImplicitCastExpr 0x5608c14a34b0 <col:39> 'char *' <ArrayToPointerDecay>
|   |                 `-StringLiteral 0x5608c14a3430 <col:39> 'char [41]' lvalue "strflocaltime/1 requires a string format"
|   |-DeclStmt 0x5608c14a3690 <line:1612:3, col:15>
|   | `-VarDecl 0x5608c14a3628 <col:3, col:13> col:13 used tm 'struct tm':'struct tm'
|   |-IfStmt 0x5608c14a38e0 <line:1613:3, line:1614:92>
|   | |-UnaryOperator 0x5608c14a3780 <line:1613:7, col:20> 'int' prefix '!' cannot overflow
|   | | `-CallExpr 0x5608c14a3738 <col:8, col:20> 'int'
|   | |   |-ImplicitCastExpr 0x5608c14a3720 <col:8> 'int (*)(jv, struct tm *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x5608c14a36a8 <col:8> 'int (jv, struct tm *)' Function 0x5608c149a100 'jv2tm' 'int (jv, struct tm *)'
|   | |   |-ImplicitCastExpr 0x5608c14a3768 <col:14> 'jv':'jv' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5608c14a36c8 <col:14> 'jv':'jv' lvalue ParmVar 0x5608c14a2bb8 'a' 'jv':'jv'
|   | |   `-UnaryOperator 0x5608c14a3708 <col:17, col:18> 'struct tm *' prefix '&' cannot overflow
|   | |     `-DeclRefExpr 0x5608c14a36e8 <col:18> 'struct tm':'struct tm' lvalue Var 0x5608c14a3628 'tm' 'struct tm':'struct tm'
|   | `-ReturnStmt 0x5608c14a38d0 <line:1614:5, col:92>
|   |   `-CallExpr 0x5608c14a38a8 <col:12, col:92> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14a3890 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a3798 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c14a3838 <col:32, col:91> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14a3820 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14a37b8 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c14a3878 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14a3860 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14a37d8 <col:42> 'char [48]' lvalue "strflocaltime/1 requires parsed datetime inputs"
|   |-DeclStmt 0x5608c14a3a18 <line:1615:3, col:39>
|   | `-VarDecl 0x5608c14a3918 <col:3, col:38> col:15 used fmt 'const char *' cinit
|   |   `-CallExpr 0x5608c14a39d8 <col:21, col:38> 'const char *'
|   |     |-ImplicitCastExpr 0x5608c14a39c0 <col:21> 'const char *(*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a3980 <col:21> 'const char *(jv)' Function 0x5608c13deac0 'jv_string_value' 'const char *(jv)'
|   |     `-ImplicitCastExpr 0x5608c14a3a00 <col:37> 'jv':'jv' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14a39a0 <col:37> 'jv':'jv' lvalue ParmVar 0x5608c14a2c30 'b' 'jv':'jv'
|   |-DeclStmt 0x5608c14a3bb0 <line:1616:3, col:37>
|   | `-VarDecl 0x5608c14a3a40 <col:3, col:34> col:10 used alloced 'size_t':'unsigned long' cinit
|   |   `-BinaryOperator 0x5608c14a3b90 <col:20, col:34> 'unsigned long' '+'
|   |     |-CallExpr 0x5608c14a3b18 <col:20, col:30> 'unsigned long'
|   |     | |-ImplicitCastExpr 0x5608c14a3b00 <col:20> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c14a3aa8 <col:20> 'unsigned long (const char *)' Function 0x5608c13745e0 'strlen' 'unsigned long (const char *)'
|   |     | `-ImplicitCastExpr 0x5608c14a3b40 <col:27> 'const char *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x5608c14a3ac8 <col:27> 'const char *' lvalue Var 0x5608c14a3918 'fmt' 'const char *'
|   |     `-ImplicitCastExpr 0x5608c14a3b78 <col:34> 'unsigned long' <IntegralCast>
|   |       `-IntegerLiteral 0x5608c14a3b58 <col:34> 'int' 100
|   |-DeclStmt 0x5608c14a3d10 <line:1617:3, col:30>
|   | `-VarDecl 0x5608c14a3be0 <col:3, /usr/include/alloca.h:35:45> src/builtin.c:1617:9 used buf 'char *' cinit
|   |   `-ImplicitCastExpr 0x5608c14a3cf8 </usr/include/alloca.h:35:23, col:45> 'char *' <BitCast>
|   |     `-CallExpr 0x5608c14a3cb8 <col:23, col:45> 'void *'
|   |       |-ImplicitCastExpr 0x5608c14a3ca0 <col:23> 'void *(*)(unsigned long)' <BuiltinFnToFnPtr>
|   |       | `-DeclRefExpr 0x5608c14a3c48 <col:23> '<builtin fn type>' Function 0x5608c14a21e8 '__builtin_alloca' 'void *(unsigned long)'
|   |       `-ImplicitCastExpr 0x5608c14a3ce0 <src/builtin.c:1617:22> 'size_t':'unsigned long' <LValueToRValue>
|   |         `-DeclRefExpr 0x5608c14a3c68 <col:22> 'size_t':'unsigned long' lvalue Var 0x5608c14a3a40 'alloced' 'size_t':'unsigned long'
|   |-DeclStmt 0x5608c14a3f10 <line:1618:3, col:46>
|   | `-VarDecl 0x5608c14a3d38 <col:3, col:45> col:10 used n 'size_t':'unsigned long' cinit
|   |   `-CallExpr 0x5608c14a3e70 <col:14, col:45> 'size_t':'unsigned long'
|   |     |-ImplicitCastExpr 0x5608c14a3e58 <col:14> 'size_t (*)(char *restrict, size_t, const char *restrict, const struct tm *restrict)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a3da0 <col:14> 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)' Function 0x5608c1386df8 'strftime' 'size_t (char *restrict, size_t, const char *restrict, const struct tm *restrict)'
|   |     |-ImplicitCastExpr 0x5608c14a3eb0 <col:23> 'char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14a3dc0 <col:23> 'char *' lvalue Var 0x5608c14a3be0 'buf' 'char *'
|   |     |-ImplicitCastExpr 0x5608c14a3ec8 <col:28> 'size_t':'unsigned long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14a3de0 <col:28> 'size_t':'unsigned long' lvalue Var 0x5608c14a3a40 'alloced' 'size_t':'unsigned long'
|   |     |-ImplicitCastExpr 0x5608c14a3ee0 <col:37> 'const char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5608c14a3e00 <col:37> 'const char *' lvalue Var 0x5608c14a3918 'fmt' 'const char *'
|   |     `-ImplicitCastExpr 0x5608c14a3ef8 <col:42, col:43> 'const struct tm *' <NoOp>
|   |       `-UnaryOperator 0x5608c14a3e40 <col:42, col:43> 'struct tm *' prefix '&' cannot overflow
|   |         `-DeclRefExpr 0x5608c14a3e20 <col:43> 'struct tm':'struct tm' lvalue Var 0x5608c14a3628 'tm' 'struct tm':'struct tm'
|   |-CallExpr 0x5608c14a3f80 <line:1619:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14a3f68 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14a3f28 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14a3fa8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14a3f48 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14a2c30 'b' 'jv':'jv'
|   |-IfStmt 0x5608c14a4240 <line:1621:3, line:1622:84>
|   | |-BinaryOperator 0x5608c14a40e0 <line:1621:7, col:21> 'int' '||'
|   | | |-BinaryOperator 0x5608c14a4030 <col:7, col:12> 'int' '=='
|   | | | |-ImplicitCastExpr 0x5608c14a4000 <col:7> 'size_t':'unsigned long' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x5608c14a3fc0 <col:7> 'size_t':'unsigned long' lvalue Var 0x5608c14a3d38 'n' 'size_t':'unsigned long'
|   | | | `-ImplicitCastExpr 0x5608c14a4018 <col:12> 'unsigned long' <IntegralCast>
|   | | |   `-IntegerLiteral 0x5608c14a3fe0 <col:12> 'int' 0
|   | | `-BinaryOperator 0x5608c14a40c0 <col:17, col:21> 'int' '>'
|   | |   |-ImplicitCastExpr 0x5608c14a4090 <col:17> 'size_t':'unsigned long' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x5608c14a4050 <col:17> 'size_t':'unsigned long' lvalue Var 0x5608c14a3d38 'n' 'size_t':'unsigned long'
|   | |   `-ImplicitCastExpr 0x5608c14a40a8 <col:21> 'size_t':'unsigned long' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5608c14a4070 <col:21> 'size_t':'unsigned long' lvalue Var 0x5608c14a3a40 'alloced' 'size_t':'unsigned long'
|   | `-ReturnStmt 0x5608c14a4230 <line:1622:5, col:84>
|   |   `-CallExpr 0x5608c14a4208 <col:12, col:84> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14a41f0 <col:12> 'jv (*)(jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a4100 <col:12> 'jv (jv)' Function 0x5608c13dacb8 'jv_invalid_with_msg' 'jv (jv)'
|   |     `-CallExpr 0x5608c14a4198 <col:32, col:83> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14a4180 <col:32> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14a4120 <col:32> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c14a41d8 <col:42> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14a41c0 <col:42> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14a4140 <col:42> 'char [40]' lvalue "strflocaltime/1: unknown system failure"
|   `-ReturnStmt 0x5608c14a4310 <line:1623:3, col:23>
|     `-CallExpr 0x5608c14a42b8 <col:10, col:23> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14a42a0 <col:10> 'jv (*)(const char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14a4260 <col:10> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|       `-ImplicitCastExpr 0x5608c14a42f8 <col:20> 'const char *' <NoOp>
|         `-ImplicitCastExpr 0x5608c14a42e0 <col:20> 'char *' <LValueToRValue>
|           `-DeclRefExpr 0x5608c14a4280 <col:20> 'char *' lvalue Var 0x5608c14a3be0 'buf' 'char *'
|-FunctionDecl 0x5608c14a44a0 <line:1634:1, line:1640:1> line:1634:11 used f_now 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14a4390 <col:17, col:27> col:27 jq 'jq_state *'
| |-ParmVarDecl 0x5608c14a4408 <col:31, col:34> col:34 used a 'jv':'jv'
| `-CompoundStmt 0x5608c14a4c28 <col:37, line:1640:1>
|   |-CallExpr 0x5608c14a45a8 <line:1635:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14a4590 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14a4550 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14a45d0 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14a4570 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14a4408 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c14a4670 <line:1636:3, col:20>
|   | `-VarDecl 0x5608c14a4608 <col:3, col:18> col:18 used tv 'struct timeval':'struct timeval'
|   |-IfStmt 0x5608c14a4a38 <line:1637:3, line:1638:32>
|   | |-BinaryOperator 0x5608c14a4838 <line:1637:7, col:35> 'int' '=='
|   | | |-CallExpr 0x5608c14a47d0 <col:7, col:29> 'int'
|   | | | |-ImplicitCastExpr 0x5608c14a47b8 <col:7> 'int (*)(struct timeval *restrict, void *restrict)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x5608c14a4688 <col:7> 'int (struct timeval *restrict, void *restrict)' Function 0x5608c1150bb0 'gettimeofday' 'int (struct timeval *restrict, void *restrict)'
|   | | | |-UnaryOperator 0x5608c14a46c8 <col:20, col:21> 'struct timeval *' prefix '&' cannot overflow
|   | | | | `-DeclRefExpr 0x5608c14a46a8 <col:21> 'struct timeval':'struct timeval' lvalue Var 0x5608c14a4608 'tv' 'struct timeval':'struct timeval'
|   | | | `-ParenExpr 0x5608c14a4740 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'void *'
|   | | |   `-CStyleCastExpr 0x5608c14a4718 <col:17, col:24> 'void *' <NullToPointer>
|   | | |     `-IntegerLiteral 0x5608c14a46e0 <col:24> 'int' 0
|   | | `-UnaryOperator 0x5608c14a4820 <src/builtin.c:1637:34, col:35> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x5608c14a4800 <col:35> 'int' 1
|   | `-ReturnStmt 0x5608c14a4a28 <line:1638:5, col:32>
|   |   `-CallExpr 0x5608c14a49e8 <col:12, col:32> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14a49d0 <col:12> 'jv (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a4858 <col:12> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|   |     `-ImplicitCastExpr 0x5608c14a4a10 <col:22, col:31> 'double' <IntegralToFloating>
|   |       `-CallExpr 0x5608c14a4990 <col:22, col:31> 'time_t':'long'
|   |         |-ImplicitCastExpr 0x5608c14a4978 <col:22> 'time_t (*)(time_t *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x5608c14a4878 <col:22> 'time_t (time_t *)' Function 0x5608c1386438 'time' 'time_t (time_t *)'
|   |         `-ImplicitCastExpr 0x5608c14a49b8 </usr/lib/clang/13.0.1/include/stddef.h:89:16, col:25> 'time_t *' <NullToPointer>
|   |           `-ParenExpr 0x5608c14a48f8 <col:16, col:25> 'void *'
|   |             `-CStyleCastExpr 0x5608c14a48d0 <col:17, col:24> 'void *' <NullToPointer>
|   |               `-IntegerLiteral 0x5608c14a4898 <col:24> 'int' 0
|   `-ReturnStmt 0x5608c14a4c18 <src/builtin.c:1639:3, col:54>
|     `-CallExpr 0x5608c14a4bf0 <col:10, col:54> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14a4bd8 <col:10> 'jv (*)(double)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14a4a58 <col:10> 'jv (double)' Function 0x5608c13db658 'jv_number' 'jv (double)'
|       `-BinaryOperator 0x5608c14a4bb8 <col:20, col:45> 'double' '+'
|         |-ImplicitCastExpr 0x5608c14a4ba0 <col:20, col:23> 'double' <IntegralToFloating>
|         | `-ImplicitCastExpr 0x5608c14a4b88 <col:20, col:23> '__time_t':'long' <LValueToRValue>
|         |   `-MemberExpr 0x5608c14a4a98 <col:20, col:23> '__time_t':'long' lvalue .tv_sec 0x5608c1143530
|         |     `-DeclRefExpr 0x5608c14a4a78 <col:20> 'struct timeval':'struct timeval' lvalue Var 0x5608c14a4608 'tv' 'struct timeval':'struct timeval'
|         `-BinaryOperator 0x5608c14a4b68 <col:32, col:45> 'double' '/'
|           |-ImplicitCastExpr 0x5608c14a4b50 <col:32, col:35> 'double' <IntegralToFloating>
|           | `-ImplicitCastExpr 0x5608c14a4b38 <col:32, col:35> '__suseconds_t':'long' <LValueToRValue>
|           |   `-MemberExpr 0x5608c14a4ae8 <col:32, col:35> '__suseconds_t':'long' lvalue .tv_usec 0x5608c11435b0
|           |     `-DeclRefExpr 0x5608c14a4ac8 <col:32> 'struct timeval':'struct timeval' lvalue Var 0x5608c14a4608 'tv' 'struct timeval':'struct timeval'
|           `-FloatingLiteral 0x5608c14a4b18 <col:45> 'double' 1.000000e+06
|-FunctionDecl 0x5608c14a4d78 <line:1648:1, line:1656:1> line:1648:11 used f_current_filename 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14a4c68 <col:30, col:40> col:40 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c14a4ce0 <col:44, col:47> col:47 used a 'jv':'jv'
| `-CompoundStmt 0x5608c14a5470 <col:50, line:1656:1>
|   |-CallExpr 0x5608c14a4e80 <line:1649:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14a4e68 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14a4e28 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14a4ea8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14a4e48 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14a4ce0 'a' 'jv':'jv'
|   |-DeclStmt 0x5608c14a4fd0 <line:1651:3, col:48>
|   | `-VarDecl 0x5608c14a4ed0 <col:3, col:47> col:6 used r 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14a4f90 <col:10, col:47> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14a4f78 <col:10> 'jv (*)(jq_state *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14a4f38 <col:10> 'jv (jq_state *)' Function 0x5608c13fbfb0 'jq_util_input_get_current_filename' 'jv (jq_state *)'
|   |     `-ImplicitCastExpr 0x5608c14a4fb8 <col:45> 'jq_state *' <LValueToRValue>
|   |       `-DeclRefExpr 0x5608c14a4f58 <col:45> 'jq_state *' lvalue ParmVar 0x5608c14a4c68 'jq' 'jq_state *'
|   |-IfStmt 0x5608c14a50d0 <line:1652:3, line:1653:12>
|   | |-CallExpr 0x5608c14a5040 <line:1652:7, col:20> 'int'
|   | | |-ImplicitCastExpr 0x5608c14a5028 <col:7> 'int (*)(jv)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x5608c14a4fe8 <col:7> 'int (jv)' Function 0x5608c13d1860 'jv_is_valid' 'int (jv)'
|   | | `-ImplicitCastExpr 0x5608c14a5068 <col:19> 'jv':'jv' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5608c14a5008 <col:19> 'jv':'jv' lvalue Var 0x5608c14a4ed0 'r' 'jv':'jv'
|   | `-ReturnStmt 0x5608c14a50b8 <line:1653:5, col:12>
|   |   `-ImplicitCastExpr 0x5608c14a50a0 <col:12> 'jv':'jv' <LValueToRValue>
|   |     `-DeclRefExpr 0x5608c14a5080 <col:12> 'jv':'jv' lvalue Var 0x5608c14a4ed0 'r' 'jv':'jv'
|   |-CallExpr 0x5608c14a5148 <line:1654:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14a5130 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14a50f0 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14a5170 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14a5110 <col:11> 'jv':'jv' lvalue Var 0x5608c14a4ed0 'r' 'jv':'jv'
|   `-ReturnStmt 0x5608c14a5460 <line:1655:3, col:18>
|     `-CallExpr 0x5608c14a5440 <col:10, col:18> 'jv':'jv'
|       `-ImplicitCastExpr 0x5608c14a51a8 <col:10> 'jv (*)(void)' <FunctionToPointerDecay>
|         `-DeclRefExpr 0x5608c14a5188 <col:10> 'jv (void)' Function 0x5608c13db090 'jv_null' 'jv (void)'
|-FunctionDecl 0x5608c14a55c8 <line:1657:1, line:1660:1> line:1657:11 used f_current_line 'jv (jq_state *, jv)' static
| |-ParmVarDecl 0x5608c14a54b8 <col:26, col:36> col:36 used jq 'jq_state *'
| |-ParmVarDecl 0x5608c14a5530 <col:40, col:43> col:43 used a 'jv':'jv'
| `-CompoundStmt 0x5608c14a57b8 <col:46, line:1660:1>
|   |-CallExpr 0x5608c14a56d0 <line:1658:3, col:12> 'void'
|   | |-ImplicitCastExpr 0x5608c14a56b8 <col:3> 'void (*)(jv)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5608c14a5678 <col:3> 'void (jv)' Function 0x5608c13d1d48 'jv_free' 'void (jv)'
|   | `-ImplicitCastExpr 0x5608c14a56f8 <col:11> 'jv':'jv' <LValueToRValue>
|   |   `-DeclRefExpr 0x5608c14a5698 <col:11> 'jv':'jv' lvalue ParmVar 0x5608c14a5530 'a' 'jv':'jv'
|   `-ReturnStmt 0x5608c14a57a8 <line:1659:3, col:43>
|     `-CallExpr 0x5608c14a5768 <col:10, col:43> 'jv':'jv'
|       |-ImplicitCastExpr 0x5608c14a5750 <col:10> 'jv (*)(jq_state *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5608c14a5710 <col:10> 'jv (jq_state *)' Function 0x5608c13fd170 'jq_util_input_get_current_line' 'jv (jq_state *)'
|       `-ImplicitCastExpr 0x5608c14a5790 <col:41> 'jq_state *' <LValueToRValue>
|         `-DeclRefExpr 0x5608c14a5730 <col:41> 'jq_state *' lvalue ParmVar 0x5608c14a54b8 'jq' 'jq_state *'
|-VarDecl 0x5608c14a5868 <line:1674:1, line:1753:1> line:1674:31 used function_list 'const struct cfunction [129]' static cinit
| `-InitListExpr 0x5608c14aec08 <col:49, line:1753:1> 'const struct cfunction [129]'
|   |-InitListExpr 0x5608c14aec58 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a5918 <col:4, <scratch space>:207:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a5900 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a58d0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c141bea0 'f_acos' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14aecc8 <line:206:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14aecb0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a5940 <col:1> 'char [5]' lvalue "acos"
|   | `-IntegerLiteral 0x5608c14a5960 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14aecf8 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a5a20 <col:4, <scratch space>:209:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a5a08 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a59d8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c141c638 'f_acosh' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14aed68 <line:208:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14aed50 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a5a48 <col:1> 'char [6]' lvalue "acosh"
|   | `-IntegerLiteral 0x5608c14a5a68 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14aeda0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a5b28 <col:4, <scratch space>:211:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a5b10 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a5ae0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1420be0 'f_asin' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14aee10 <line:210:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14aedf8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a5b50 <col:1> 'char [5]' lvalue "asin"
|   | `-IntegerLiteral 0x5608c14a5b70 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14aee58 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a5c30 <col:4, <scratch space>:213:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a5c18 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a5be8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c14212f8 'f_asinh' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14aeec8 <line:212:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14aeeb0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a5c58 <col:1> 'char [6]' lvalue "asinh"
|   | `-IntegerLiteral 0x5608c14a5c78 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14aeef0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a5d38 <col:4, <scratch space>:215:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a5d20 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a5cf0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1421a10 'f_atan' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14aef60 <line:214:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14aef48 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a5d60 <col:1> 'char [5]' lvalue "atan"
|   | `-IntegerLiteral 0x5608c14a5d80 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14aefc8 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a5e40 <col:4, <scratch space>:217:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a5e28 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a5df8 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1422228 'f_atan2' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14af038 <line:216:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af020 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a5e68 <col:1> 'char [6]' lvalue "atan2"
|   | `-IntegerLiteral 0x5608c14a5e88 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14af060 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a5f48 <col:4, <scratch space>:219:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a5f30 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a5f00 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1424180 'f_atanh' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af0d0 <line:218:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af0b8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a5f70 <col:1> 'char [6]' lvalue "atanh"
|   | `-IntegerLiteral 0x5608c14a5f90 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af0f8 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6050 <col:4, <scratch space>:221:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6038 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6008 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1424898 'f_cbrt' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af168 <line:220:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af150 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6078 <col:1> 'char [5]' lvalue "cbrt"
|   | `-IntegerLiteral 0x5608c14a6098 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af190 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6158 <col:4, <scratch space>:223:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6140 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6110 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1424fb0 'f_cos' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af200 <line:222:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af1e8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6180 <col:1> 'char [4]' lvalue "cos"
|   | `-IntegerLiteral 0x5608c14a61a0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af2a8 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6260 <col:4, <scratch space>:225:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6248 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6218 <col:1> 'jv (jq_state *, jv)' Function 0x5608c14256c8 'f_cosh' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af318 <line:224:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af300 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6288 <col:1> 'char [5]' lvalue "cosh"
|   | `-IntegerLiteral 0x5608c14a62a8 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af340 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6368 <col:4, <scratch space>:227:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6350 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6320 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1425df8 'f_exp' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af3b0 <line:226:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af398 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6390 <col:1> 'char [4]' lvalue "exp"
|   | `-IntegerLiteral 0x5608c14a63b0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af3d8 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6470 <col:4, <scratch space>:229:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6458 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6428 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1426510 'f_exp2' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af448 <line:228:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af430 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6498 <col:1> 'char [5]' lvalue "exp2"
|   | `-IntegerLiteral 0x5608c14a64b8 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af470 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6578 <col:4, <scratch space>:231:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6560 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6530 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1426c28 'f_floor' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af4e0 <line:230:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af4c8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a65a0 <col:1> 'char [6]' lvalue "floor"
|   | `-IntegerLiteral 0x5608c14a65c0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af508 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6680 <col:4, <scratch space>:233:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6668 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6638 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1427440 'f_hypot' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14af578 <line:232:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af560 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a66a8 <col:1> 'char [6]' lvalue "hypot"
|   | `-IntegerLiteral 0x5608c14a66c8 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14af5a0 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6788 <col:4, <scratch space>:235:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6770 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6740 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1429108 'f_j0' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af610 <line:234:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af5f8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a67b0 <col:1> 'char [3]' lvalue "j0"
|   | `-IntegerLiteral 0x5608c14a67d0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af638 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6890 <col:4, <scratch space>:237:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6878 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6848 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1429820 'f_j1' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af6a8 <line:236:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af690 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a68b8 <col:1> 'char [3]' lvalue "j1"
|   | `-IntegerLiteral 0x5608c14a68d8 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af6d0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6998 <col:4, <scratch space>:239:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6980 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6950 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1429f38 'f_log' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af740 <line:238:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af728 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a69c0 <col:1> 'char [4]' lvalue "log"
|   | `-IntegerLiteral 0x5608c14a69e0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af868 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6aa0 <col:4, <scratch space>:241:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6a88 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6a58 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142a650 'f_log10' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af8d8 <line:240:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af8c0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6ac8 <col:1> 'char [6]' lvalue "log10"
|   | `-IntegerLiteral 0x5608c14a6ae8 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af900 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6ba8 <col:4, <scratch space>:243:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6b90 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6b60 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142ad88 'f_log2' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14af970 <line:242:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af958 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6bd0 <col:1> 'char [5]' lvalue "log2"
|   | `-IntegerLiteral 0x5608c14a6bf0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14af998 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6cb0 <col:4, <scratch space>:245:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6c98 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6c68 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c142b5a0 'f_pow' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14afa08 <line:244:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14af9f0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6cd8 <col:1> 'char [4]' lvalue "pow"
|   | `-IntegerLiteral 0x5608c14a6cf8 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14afa30 <col:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6db8 <col:4, <scratch space>:247:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6da0 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6d70 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c142c338 'f_remainder' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14afaa0 <line:246:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14afa88 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6e18 <col:1> 'char [10]' lvalue "remainder"
|   | `-IntegerLiteral 0x5608c14a6e40 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14afac8 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a6f00 <col:4, <scratch space>:249:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6ee8 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6eb8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142d010 'f_sin' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14afb38 <line:248:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14afb20 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a6f28 <col:1> 'char [4]' lvalue "sin"
|   | `-IntegerLiteral 0x5608c14a6f48 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14afb60 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7008 <col:4, <scratch space>:251:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a6ff0 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a6fc0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142d728 'f_sinh' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14afbd0 <line:250:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14afbb8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7030 <col:1> 'char [5]' lvalue "sinh"
|   | `-IntegerLiteral 0x5608c14a7050 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14afbf8 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7110 <col:4, <scratch space>:253:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a70f8 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a70c8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142de40 'f_sqrt' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14afc68 <line:252:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14afc50 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7138 <col:1> 'char [5]' lvalue "sqrt"
|   | `-IntegerLiteral 0x5608c14a7158 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14afc90 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7218 <col:4, <scratch space>:255:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7200 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a71d0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142e558 'f_tan' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14afd00 <line:254:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14afce8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7240 <col:1> 'char [4]' lvalue "tan"
|   | `-IntegerLiteral 0x5608c14a7260 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14afd28 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7320 <col:4, <scratch space>:257:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7308 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a72d8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142eca0 'f_tanh' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14afd98 <line:256:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14afd80 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7348 <col:1> 'char [5]' lvalue "tanh"
|   | `-IntegerLiteral 0x5608c14a7368 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14afdc0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7428 <col:4, <scratch space>:259:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7410 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a73e0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142f3b8 'f_tgamma' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14afe30 <line:258:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14afe18 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7450 <col:1> 'char [7]' lvalue "tgamma"
|   | `-IntegerLiteral 0x5608c14a7470 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14afe58 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7530 <col:4, <scratch space>:261:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7518 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a74e8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c142fad0 'f_y0' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14afec8 <line:260:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14afeb0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7558 <col:1> 'char [3]' lvalue "y0"
|   | `-IntegerLiteral 0x5608c14a7578 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14afef0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7638 <col:4, <scratch space>:263:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7620 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a75f0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c14301e8 'f_y1' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14aff60 <line:262:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14aff48 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7660 <col:1> 'char [3]' lvalue "y1"
|   | `-IntegerLiteral 0x5608c14a7680 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14aff88 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7740 <col:4, <scratch space>:265:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7728 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a76f8 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1430a00 'f_jn' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14afff8 <line:264:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14affe0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7768 <col:1> 'char [3]' lvalue "jn"
|   | `-IntegerLiteral 0x5608c14a7788 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b0020 <col:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7848 <col:4, <scratch space>:267:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7830 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a7800 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c14317e8 'f_yn' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0090 <line:266:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0078 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7870 <col:1> 'char [3]' lvalue "yn"
|   | `-IntegerLiteral 0x5608c14a7890 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b00b8 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7950 <col:4, <scratch space>:269:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7938 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a7908 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1432498 'f_ceil' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0128 <line:268:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0110 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7978 <col:1> 'char [5]' lvalue "ceil"
|   | `-IntegerLiteral 0x5608c14a7998 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0150 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7a58 <col:4, <scratch space>:271:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7a40 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a7a10 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1432cf0 'f_copysign' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b01c0 <line:270:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b01a8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7a80 <col:1> 'char [9]' lvalue "copysign"
|   | `-IntegerLiteral 0x5608c14a7aa0 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b03e8 <col:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7b60 <col:4, <scratch space>:273:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7b48 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a7b18 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1433a88 'f_drem' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0458 <line:272:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0440 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7b88 <col:1> 'char [5]' lvalue "drem"
|   | `-IntegerLiteral 0x5608c14a7ba8 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b0480 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7c68 <col:4, <scratch space>:275:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7c50 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a7c20 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1434720 'f_erf' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b04f0 <line:274:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b04d8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7c90 <col:1> 'char [4]' lvalue "erf"
|   | `-IntegerLiteral 0x5608c14a7cb0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0518 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7d70 <col:4, <scratch space>:277:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7d58 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a7d28 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1434e58 'f_erfc' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0588 <line:276:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0570 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7d98 <col:1> 'char [5]' lvalue "erfc"
|   | `-IntegerLiteral 0x5608c14a7db8 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b05b0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7e78 <col:4, <scratch space>:279:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7e60 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a7e30 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1435570 'f_exp10' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0620 <line:278:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0608 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7ea0 <col:1> 'char [6]' lvalue "exp10"
|   | `-IntegerLiteral 0x5608c14a7ec0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0648 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a7f80 <col:4, <scratch space>:281:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a7f68 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a7f38 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1435c88 'f_expm1' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b06b8 <line:280:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b06a0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a7fa8 <col:1> 'char [6]' lvalue "expm1"
|   | `-IntegerLiteral 0x5608c14a7fc8 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b06e0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8088 <col:4, <scratch space>:283:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8070 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a8040 <col:1> 'jv (jq_state *, jv)' Function 0x5608c14363a0 'f_fabs' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0750 <line:282:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0738 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a80b0 <col:1> 'char [5]' lvalue "fabs"
|   | `-IntegerLiteral 0x5608c14a80d0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0778 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8190 <col:4, <scratch space>:285:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8178 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a8148 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1436c20 'f_fdim' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b07e8 <line:284:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b07d0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a81b8 <col:1> 'char [5]' lvalue "fdim"
|   | `-IntegerLiteral 0x5608c14a81d8 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b0810 <line:1671:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a82f0 <col:4, <scratch space>:287:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a82d8 <col:1> 'jv (*)(jq_state *, jv, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a8250 <col:1> 'jv (jq_state *, jv, jv, jv, jv)' Function 0x5608c1437ad8 'f_fma' 'jv (jq_state *, jv, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0880 <line:286:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0868 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8318 <col:1> 'char [4]' lvalue "fma"
|   | `-IntegerLiteral 0x5608c14a8338 <src/builtin.c:1671:38> 'int' 4
|   |-InitListExpr 0x5608c14b08a8 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a83f8 <col:4, <scratch space>:289:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a83e0 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a83b0 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c143c058 'f_fmax' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0918 <line:288:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0900 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8420 <col:1> 'char [5]' lvalue "fmax"
|   | `-IntegerLiteral 0x5608c14a8440 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b0940 <col:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8500 <col:4, <scratch space>:291:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a84e8 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a84b8 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c143cdf0 'f_fmin' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b09b0 <line:290:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0998 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8528 <col:1> 'char [5]' lvalue "fmin"
|   | `-IntegerLiteral 0x5608c14a8548 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b09d8 <col:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8608 <col:4, <scratch space>:293:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a85f0 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a85c0 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c143db88 'f_fmod' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0a48 <line:292:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0a30 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8630 <col:1> 'char [5]' lvalue "fmod"
|   | `-IntegerLiteral 0x5608c14a8650 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b0a70 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8710 <col:4, <scratch space>:295:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a86f8 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a86c8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c143e830 'f_gamma' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0ae0 <line:294:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0ac8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8738 <col:1> 'char [6]' lvalue "gamma"
|   | `-IntegerLiteral 0x5608c14a8758 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0b08 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8818 <col:4, <scratch space>:297:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8800 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a87d0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c143ef48 'f_lgamma' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0b78 <line:296:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0b60 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8840 <col:1> 'char [7]' lvalue "lgamma"
|   | `-IntegerLiteral 0x5608c14a8860 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0ba0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8920 <col:4, <scratch space>:299:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8908 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a88d8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c143f660 'f_log1p' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0c10 <line:298:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0bf8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8948 <col:1> 'char [6]' lvalue "log1p"
|   | `-IntegerLiteral 0x5608c14a8968 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0c38 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8a28 <col:4, <scratch space>:301:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8a10 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a89e0 <col:1> 'jv (jq_state *, jv)' Function 0x5608c143fdd0 'f_logb' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0ca8 <line:300:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0c90 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8a50 <col:1> 'char [5]' lvalue "logb"
|   | `-IntegerLiteral 0x5608c14a8a70 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0cd0 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8b30 <col:4, <scratch space>:303:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8b18 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a8ae8 <col:1> 'jv (jq_state *, jv)' Function 0x5608c14404e8 'f_nearbyint' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0d40 <line:302:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0d28 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8b58 <col:1> 'char [10]' lvalue "nearbyint"
|   | `-IntegerLiteral 0x5608c14a8b80 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0d68 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8c40 <col:4, <scratch space>:305:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8c28 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a8bf8 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1440d00 'f_nextafter' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0dd8 <line:304:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0dc0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8c68 <col:1> 'char [10]' lvalue "nextafter"
|   | `-IntegerLiteral 0x5608c14a8c90 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b0e00 <col:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8d50 <col:4, <scratch space>:307:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8d38 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a8d08 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1441a98 'f_nexttoward' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0e70 <line:306:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0e58 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8d78 <col:1> 'char [11]' lvalue "nexttoward"
|   | `-IntegerLiteral 0x5608c14a8da0 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b0e98 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8e60 <col:4, <scratch space>:309:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8e48 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a8e18 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1442788 'f_rint' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0f08 <line:308:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0ef0 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8e88 <col:1> 'char [5]' lvalue "rint"
|   | `-IntegerLiteral 0x5608c14a8ea8 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0f30 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a8f68 <col:4, <scratch space>:311:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a8f50 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a8f20 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1442ea0 'f_round' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b0fa0 <line:310:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b0f88 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a8f90 <col:1> 'char [6]' lvalue "round"
|   | `-IntegerLiteral 0x5608c14a8fb0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b0fc8 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9070 <col:4, <scratch space>:313:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9058 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9028 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c14436b8 'f_scalb' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1038 <line:312:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1020 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a9098 <col:1> 'char [6]' lvalue "scalb"
|   | `-IntegerLiteral 0x5608c14a90b8 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b1060 <col:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9178 <col:4, <scratch space>:315:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9160 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9130 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1444450 'f_scalbln' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b10d0 <line:314:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b10b8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a91a0 <col:1> 'char [8]' lvalue "scalbln"
|   | `-IntegerLiteral 0x5608c14a91c0 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b10f8 <line:1663:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9280 <col:4, <scratch space>:317:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9268 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9238 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1445128 'f_significand' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1168 <line:316:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1150 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a92a8 <col:1> 'char [12]' lvalue "significand"
|   | `-IntegerLiteral 0x5608c14a92d0 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b1190 <col:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9390 <col:4, <scratch space>:319:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9378 <col:1> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9348 <col:1> 'jv (jq_state *, jv)' Function 0x5608c1445840 'f_trunc' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1200 <line:318:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b11e8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a93b8 <col:1> 'char [6]' lvalue "trunc"
|   | `-IntegerLiteral 0x5608c14a93d8 <src/builtin.c:1663:39> 'int' 1
|   |-InitListExpr 0x5608c14b1228 <line:1667:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a94b0 <col:4, <scratch space>:321:1> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9498 <col:1> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9468 <col:1> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1446070 'f_ldexp' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1298 <line:320:1> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1280 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a94d8 <col:1> 'char [6]' lvalue "ldexp"
|   | `-IntegerLiteral 0x5608c14a94f8 <src/builtin.c:1667:38> 'int' 3
|   |-InitListExpr 0x5608c14b12c0 <line:1677:3, col:37> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a95b8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a95a0 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9570 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1446d48 'f_frexp' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1330 <col:27> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1318 <col:27> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a95e0 <col:27> 'char [6]' lvalue "frexp"
|   | `-IntegerLiteral 0x5608c14a9600 <col:36> 'int' 1
|   |-InitListExpr 0x5608c14b1358 <line:1680:3, col:35> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a96c0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a96a8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9678 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14478b8 'f_modf' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b13c8 <col:26> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b13b0 <col:26> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a96e8 <col:26> 'char [5]' lvalue "modf"
|   | `-IntegerLiteral 0x5608c14a9708 <col:34> 'int' 1
|   |-InitListExpr 0x5608c14b13f0 <line:1683:3, col:43> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a97c8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a97b0 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9780 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14482b8 'f_lgamma_r' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1470 <col:30> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1448 <col:30> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a97f0 <col:30> 'char [9]' lvalue "lgamma_r"
|   | `-IntegerLiteral 0x5608c14a9810 <col:42> 'int' 1
|   |-InitListExpr 0x5608c14b1498 <line:1685:3, col:37> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a98d0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a98b8 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9888 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c141a438 'f_plus' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1508 <col:27> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b14f0 <col:27> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a98f8 <col:27> 'char [6]' lvalue "_plus"
|   | `-IntegerLiteral 0x5608c14a9918 <col:36> 'int' 3
|   |-InitListExpr 0x5608c14b1530 <line:1686:3, col:41> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a99d8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a99c0 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9990 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1448ca0 'f_negate' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b15a0 <col:29> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1588 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a9a00 <col:29> 'char [8]' lvalue "_negate"
|   | `-IntegerLiteral 0x5608c14a9a20 <col:40> 'int' 1
|   |-InitListExpr 0x5608c14b15c8 <line:1687:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9ae0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9ac8 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9a98 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c144d1c0 'f_minus' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1638 <col:28> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1620 <col:28> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a9b08 <col:28> 'char [7]' lvalue "_minus"
|   | `-IntegerLiteral 0x5608c14a9b28 <col:38> 'int' 3
|   |-InitListExpr 0x5608c14b1660 <line:1688:3, col:45> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9be8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9bd0 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9ba0 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c144f7e0 'f_multiply' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b16d0 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b16b8 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a9c10 <col:31> 'char [10]' lvalue "_multiply"
|   | `-IntegerLiteral 0x5608c14a9c38 <col:44> 'int' 3
|   |-InitListExpr 0x5608c14b1af8 <line:1689:3, col:41> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9cf8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9ce0 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9cb0 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1451998 'f_divide' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1b68 <col:29> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1b50 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a9d20 <col:29> 'char [8]' lvalue "_divide"
|   | `-IntegerLiteral 0x5608c14a9d40 <col:40> 'int' 3
|   |-InitListExpr 0x5608c14b1b90 <line:1690:3, col:35> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9e00 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9de8 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9db8 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1452b00 'f_mod' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1c00 <col:26> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1be8 <col:26> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a9e28 <col:26> 'char [5]' lvalue "_mod"
|   | `-IntegerLiteral 0x5608c14a9e48 <col:34> 'int' 3
|   |-InitListExpr 0x5608c14b1c28 <line:1691:3, col:38> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14a9f08 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9ef0 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9ec0 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1456a98 'f_dump' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1c98 <col:27> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1c80 <col:27> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14a9f30 <col:27> 'char [7]' lvalue "tojson"
|   | `-IntegerLiteral 0x5608c14a9f50 <col:37> 'int' 1
|   |-InitListExpr 0x5608c14b1cc0 <line:1692:3, col:46> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa010 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14a9ff8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14a9fc8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1456d50 'f_json_parse' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1d30 <col:33> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1d18 <col:33> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa038 <col:33> 'char [9]' lvalue "fromjson"
|   | `-IntegerLiteral 0x5608c14aa058 <col:45> 'int' 1
|   |-InitListExpr 0x5608c14b1d58 <line:1693:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa118 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa100 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa0d0 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1457540 'f_tonumber' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1dc8 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1db0 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa140 <col:31> 'char [9]' lvalue "tonumber"
|   | `-IntegerLiteral 0x5608c14aa160 <col:43> 'int' 1
|   |-InitListExpr 0x5608c14b1df0 <line:1694:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa220 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa208 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa1d8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1459140 'f_tostring' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1e60 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1e48 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa248 <col:31> 'char [9]' lvalue "tostring"
|   | `-IntegerLiteral 0x5608c14aa268 <col:43> 'int' 1
|   |-InitListExpr 0x5608c14b1e88 <line:1695:3, col:36> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa328 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa310 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa2e0 <col:19> 'jv (jq_state *, jv)' Function 0x5608c146c570 'f_keys' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1ef8 <col:27> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1ee0 <col:27> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa350 <col:27> 'char [5]' lvalue "keys"
|   | `-IntegerLiteral 0x5608c14aa370 <col:35> 'int' 1
|   |-InitListExpr 0x5608c14b1f20 <line:1696:3, col:54> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa430 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa418 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa3e8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c146cbd0 'f_keys_unsorted' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b1f90 <col:36> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b1f78 <col:36> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa458 <col:36> 'char [14]' lvalue "keys_unsorted"
|   | `-IntegerLiteral 0x5608c14aa480 <col:53> 'int' 1
|   |-InitListExpr 0x5608c14b1fb8 <line:1697:3, col:48> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa540 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa528 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa4f8 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c14494b8 'f_startswith' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2028 <col:33> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2010 <col:33> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa568 <col:33> 'char [11]' lvalue "startswith"
|   | `-IntegerLiteral 0x5608c14aa590 <col:47> 'int' 2
|   |-InitListExpr 0x5608c14b2050 <line:1698:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa650 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa638 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa608 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c144a708 'f_endswith' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b20c0 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b20a8 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa678 <col:31> 'char [9]' lvalue "endswith"
|   | `-IntegerLiteral 0x5608c14aa698 <col:43> 'int' 2
|   |-InitListExpr 0x5608c14b20e8 <line:1699:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa758 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa740 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa710 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c144ba60 'f_ltrimstr' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2158 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2140 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa780 <col:31> 'char [9]' lvalue "ltrimstr"
|   | `-IntegerLiteral 0x5608c14aa7a0 <col:43> 'int' 2
|   |-InitListExpr 0x5608c14b2180 <line:1700:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa860 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa848 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa818 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c144c6c8 'f_rtrimstr' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b21f0 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b21d8 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa888 <col:31> 'char [9]' lvalue "rtrimstr"
|   | `-IntegerLiteral 0x5608c14aa8a8 <col:43> 'int' 2
|   |-InitListExpr 0x5608c14b2218 <line:1701:3, col:45> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aa968 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aa950 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aa920 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c1488990 'f_string_split' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2288 <col:35> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2270 <col:35> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aa990 <col:35> 'char [6]' lvalue "split"
|   | `-IntegerLiteral 0x5608c14aa9b0 <col:44> 'int' 2
|   |-InitListExpr 0x5608c14b22b0 <line:1702:3, col:49> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aaa70 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aaa58 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aaa28 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14890e0 'f_string_explode' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2320 <col:37> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2308 <col:37> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aaa98 <col:37> 'char [8]' lvalue "explode"
|   | `-IntegerLiteral 0x5608c14aaab8 <col:48> 'int' 1
|   |-InitListExpr 0x5608c14b2348 <line:1703:3, col:49> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aab78 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aab60 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aab30 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14899c8 'f_string_implode' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b23b8 <col:37> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b23a0 <col:37> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aaba0 <col:37> 'char [8]' lvalue "implode"
|   | `-IntegerLiteral 0x5608c14aabc0 <col:48> 'int' 1
|   |-InitListExpr 0x5608c14b23e0 <line:1704:3, col:53> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aac80 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aac68 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aac38 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c14896f0 'f_string_indexes' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2450 <col:37> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2438 <col:37> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aaca8 <col:37> 'char [12]' lvalue "_strindices"
|   | `-IntegerLiteral 0x5608c14aacd0 <col:52> 'int' 2
|   |-InitListExpr 0x5608c14b2478 <line:1705:3, col:42> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aad90 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aad78 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aad48 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c148a018 'f_setpath' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b24e8 <col:30> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b24d0 <col:30> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aadb8 <col:30> 'char [8]' lvalue "setpath"
|   | `-IntegerLiteral 0x5608c14aadd8 <col:41> 'int' 3
|   |-InitListExpr 0x5608c14b2510 <line:1706:3, col:42> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aae98 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aae80 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aae50 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c148a6b8 'f_getpath' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2580 <col:30> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2568 <col:30> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aaec0 <col:30> 'char [8]' lvalue "getpath"
|   | `-IntegerLiteral 0x5608c14aaee0 <col:41> 'int' 2
|   |-InitListExpr 0x5608c14b25a8 <line:1707:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aafa0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14aaf88 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aaf58 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c148ac50 'f_delpaths' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2618 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2600 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aafc8 <col:31> 'char [9]' lvalue "delpaths"
|   | `-IntegerLiteral 0x5608c14aafe8 <col:43> 'int' 2
|   |-InitListExpr 0x5608c14b2640 <line:1708:3, col:34> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab0a8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab090 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab060 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c148afa8 'f_has' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b26b0 <col:26> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2698 <col:26> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab0d0 <col:26> 'char [4]' lvalue "has"
|   | `-IntegerLiteral 0x5608c14ab0f0 <col:33> 'int' 2
|   |-InitListExpr 0x5608c14b26d8 <line:1709:3, col:39> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab1b0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab198 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab168 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1453a48 'f_equal' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2748 <col:28> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2730 <col:28> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab1d8 <col:28> 'char [7]' lvalue "_equal"
|   | `-IntegerLiteral 0x5608c14ab1f8 <col:38> 'int' 3
|   |-InitListExpr 0x5608c14b2770 <line:1710:3, col:45> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab2b8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab2a0 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab270 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1453f28 'f_notequal' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b27e0 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b27c8 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab2e0 <col:31> 'char [10]' lvalue "_notequal"
|   | `-IntegerLiteral 0x5608c14ab308 <col:44> 'int' 3
|   |-InitListExpr 0x5608c14b2808 <line:1711:3, col:37> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab3c8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab3b0 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab380 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1455268 'f_less' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2878 <col:27> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2860 <col:27> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab3f0 <col:27> 'char [6]' lvalue "_less"
|   | `-IntegerLiteral 0x5608c14ab410 <col:36> 'int' 3
|   |-InitListExpr 0x5608c14b28a0 <line:1712:3, col:43> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab4d0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab4b8 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab488 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1455728 'f_greater' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2910 <col:30> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b28f8 <col:30> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab4f8 <col:30> 'char [9]' lvalue "_greater"
|   | `-IntegerLiteral 0x5608c14ab518 <col:42> 'int' 3
|   |-InitListExpr 0x5608c14b2938 <line:1713:3, col:41> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab5d8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab5c0 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab590 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1455b88 'f_lesseq' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b29a8 <col:29> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2990 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab600 <col:29> 'char [8]' lvalue "_lesseq"
|   | `-IntegerLiteral 0x5608c14ab620 <col:40> 'int' 3
|   |-InitListExpr 0x5608c14b29d0 <line:1714:3, col:47> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab6e0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab6c8 <col:19> 'jv (*)(jq_state *, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab698 <col:19> 'jv (jq_state *, jv, jv, jv)' Function 0x5608c1456008 'f_greatereq' 'jv (jq_state *, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2a40 <col:32> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2a28 <col:32> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab708 <col:32> 'char [11]' lvalue "_greatereq"
|   | `-IntegerLiteral 0x5608c14ab730 <col:46> 'int' 3
|   |-InitListExpr 0x5608c14b2a68 <line:1715:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab7f0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab7d8 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab7a8 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c14563e8 'f_contains' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2ad8 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2ac0 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab818 <col:31> 'char [9]' lvalue "contains"
|   | `-IntegerLiteral 0x5608c14ab838 <col:43> 'int' 2
|   |-InitListExpr 0x5608c14b2b00 <line:1716:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ab8f8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab8e0 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab8b0 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1457fe8 'f_length' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2b70 <col:29> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2b58 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ab920 <col:29> 'char [7]' lvalue "length"
|   | `-IntegerLiteral 0x5608c14ab940 <col:39> 'int' 1
|   |-InitListExpr 0x5608c14b2b98 <line:1717:3, col:56> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14aba00 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ab9e8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ab9b8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14595a8 'f_utf8bytelength' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2c08 <col:37> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2bf0 <col:37> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aba28 <col:37> 'char [15]' lvalue "utf8bytelength"
|   | `-IntegerLiteral 0x5608c14aba50 <col:55> 'int' 1
|   |-InitListExpr 0x5608c14b2c30 <line:1718:3, col:36> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14abb10 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14abaf8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14abac8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1483190 'f_type' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2ca0 <col:27> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2c88 <col:27> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14abb38 <col:27> 'char [5]' lvalue "type"
|   | `-IntegerLiteral 0x5608c14abb58 <col:35> 'int' 1
|   |-InitListExpr 0x5608c14b2cc8 <line:1719:3, col:48> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14abc18 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14abc00 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14abbd0 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1483658 'f_isinfinite' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2d38 <col:33> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2d20 <col:33> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14abc40 <col:33> 'char [11]' lvalue "isinfinite"
|   | `-IntegerLiteral 0x5608c14abc68 <col:47> 'int' 1
|   |-InitListExpr 0x5608c14b2d60 <line:1720:3, col:38> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14abd28 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14abd10 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14abce0 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1484008 'f_isnan' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2dd0 <col:28> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2db8 <col:28> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14abd50 <col:28> 'char [6]' lvalue "isnan"
|   | `-IntegerLiteral 0x5608c14abd70 <col:37> 'int' 1
|   |-InitListExpr 0x5608c14b2df8 <line:1721:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14abe30 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14abe18 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14abde8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14849b8 'f_isnormal' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2e68 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2e50 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14abe58 <col:31> 'char [9]' lvalue "isnormal"
|   | `-IntegerLiteral 0x5608c14abe78 <col:43> 'int' 1
|   |-InitListExpr 0x5608c14b2e90 <line:1722:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14abf38 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14abf20 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14abef0 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1485368 'f_infinite' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2f00 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2ee8 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14abf60 <col:31> 'char [9]' lvalue "infinite"
|   | `-IntegerLiteral 0x5608c14abf80 <col:43> 'int' 1
|   |-InitListExpr 0x5608c14b2f28 <line:1723:3, col:34> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac040 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac028 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14abff8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1485888 'f_nan' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b2f98 <col:26> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b2f80 <col:26> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac068 <col:26> 'char [4]' lvalue "nan"
|   | `-IntegerLiteral 0x5608c14ac088 <col:33> 'int' 1
|   |-InitListExpr 0x5608c14b2fc0 <line:1724:3, col:36> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac148 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac130 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac100 <col:19> 'jv (jq_state *, jv)' Function 0x5608c146d1f8 'f_sort' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3030 <col:27> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3018 <col:27> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac170 <col:27> 'char [5]' lvalue "sort"
|   | `-IntegerLiteral 0x5608c14ac190 <col:35> 'int' 1
|   |-InitListExpr 0x5608c14b3058 <line:1725:3, col:53> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac250 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac238 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac208 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c146d830 'f_sort_by_impl' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b30c8 <col:35> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b30b0 <col:35> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac278 <col:35> 'char [14]' lvalue "_sort_by_impl"
|   | `-IntegerLiteral 0x5608c14ac2a0 <col:52> 'int' 2
|   |-InitListExpr 0x5608c14b30f0 <line:1726:3, col:55> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac360 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac348 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac318 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c146e6d8 'f_group_by_impl' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3160 <col:36> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3148 <col:36> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac388 <col:36> 'char [15]' lvalue "_group_by_impl"
|   | `-IntegerLiteral 0x5608c14ac3b0 <col:54> 'int' 2
|   |-InitListExpr 0x5608c14b3188 <line:1727:3, col:34> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac470 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac458 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac428 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1482388 'f_min' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b31f8 <col:26> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b31e0 <col:26> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac498 <col:26> 'char [4]' lvalue "min"
|   | `-IntegerLiteral 0x5608c14ac4b8 <col:33> 'int' 1
|   |-InitListExpr 0x5608c14b3220 <line:1728:3, col:34> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac578 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac560 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac530 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1482738 'f_max' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3290 <col:26> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3278 <col:26> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac5a0 <col:26> 'char [4]' lvalue "max"
|   | `-IntegerLiteral 0x5608c14ac5c0 <col:33> 'int' 1
|   |-InitListExpr 0x5608c14b32b8 <line:1729:3, col:51> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac680 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac668 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac638 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c1482b10 'f_min_by_impl' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3328 <col:34> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3310 <col:34> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac6e8 <col:34> 'char [13]' lvalue "_min_by_impl"
|   | `-IntegerLiteral 0x5608c14ac710 <col:50> 'int' 2
|   |-InitListExpr 0x5608c14b3350 <line:1730:3, col:51> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac7d0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac7b8 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac788 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c1482e90 'f_max_by_impl' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b33c0 <col:34> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b33a8 <col:34> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac7f8 <col:34> 'char [13]' lvalue "_max_by_impl"
|   | `-IntegerLiteral 0x5608c14ac820 <col:50> 'int' 2
|   |-InitListExpr 0x5608c14b33e8 <line:1731:3, col:38> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac8e0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac8c8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac898 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1485e60 'f_error' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3458 <col:28> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3440 <col:28> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ac908 <col:28> 'char [6]' lvalue "error"
|   | `-IntegerLiteral 0x5608c14ac928 <col:37> 'int' 1
|   |-InitListExpr 0x5608c14b3480 <line:1732:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ac9e8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ac9d0 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ac9a0 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c1460728 'f_format' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b34f0 <col:29> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b34d8 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14aca10 <col:29> 'char [7]' lvalue "format"
|   | `-IntegerLiteral 0x5608c14aca30 <col:39> 'int' 2
|   |-InitListExpr 0x5608c14b3518 <line:1733:3, col:34> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14acaf0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14acad8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14acaa8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1486210 'f_env' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3588 <col:26> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3570 <col:26> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14acb18 <col:26> 'char [4]' lvalue "env"
|   | `-IntegerLiteral 0x5608c14acb38 <col:33> 'int' 1
|   |-InitListExpr 0x5608c14b35b0 <line:1734:3, col:36> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14acbf8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14acbe0 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14acbb0 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1487388 'f_halt' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3620 <col:27> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3608 <col:27> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14acc20 <col:27> 'char [5]' lvalue "halt"
|   | `-IntegerLiteral 0x5608c14acc40 <col:35> 'int' 1
|   |-InitListExpr 0x5608c14b3648 <line:1735:3, col:48> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14acd00 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14acce8 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14accb8 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c14878b0 'f_halt_error' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b36b8 <col:33> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b36a0 <col:33> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14acd28 <col:33> 'char [11]' lvalue "halt_error"
|   | `-IntegerLiteral 0x5608c14acd50 <col:47> 'int' 2
|   |-InitListExpr 0x5608c14b36e0 <line:1736:3, col:58> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ace10 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14acdf8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14acdc8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c1487f28 'f_get_search_list' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3750 <col:38> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3738 <col:38> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ace38 <col:38> 'char [16]' lvalue "get_search_list"
|   | `-IntegerLiteral 0x5608c14ace60 <col:57> 'int' 1
|   |-InitListExpr 0x5608c14b3778 <line:1737:3, col:58> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14acf20 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14acf08 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14aced8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14882b0 'f_get_prog_origin' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b37e8 <col:38> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b37d0 <col:38> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14acf48 <col:38> 'char [16]' lvalue "get_prog_origin"
|   | `-IntegerLiteral 0x5608c14acf70 <col:57> 'int' 1
|   |-InitListExpr 0x5608c14b3810 <line:1738:3, col:54> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad030 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad018 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14acfe8 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14885e0 'f_get_jq_origin' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3880 <col:36> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3868 <col:36> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad058 <col:36> 'char [14]' lvalue "get_jq_origin"
|   | `-IntegerLiteral 0x5608c14ad080 <col:53> 'int' 1
|   |-InitListExpr 0x5608c14b38a8 <line:1739:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad140 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad128 <col:19> 'jv (*)(jq_state *, jv, jv, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad0f8 <col:19> 'jv (jq_state *, jv, jv, jv, jv)' Function 0x5608c1470410 'f_match' 'jv (jq_state *, jv, jv, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3918 <col:28> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3900 <col:28> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad168 <col:28> 'char [12]' lvalue "_match_impl"
|   | `-IntegerLiteral 0x5608c14ad190 <col:43> 'int' 4
|   |-InitListExpr 0x5608c14b3940 <line:1740:3, col:48> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad250 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad238 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad208 <col:19> 'jv (jq_state *, jv)' Function 0x5608c148b280 'f_modulemeta' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b39b0 <col:33> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3998 <col:33> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad278 <col:33> 'char [11]' lvalue "modulemeta"
|   | `-IntegerLiteral 0x5608c14ad2a0 <col:47> 'int' 1
|   |-InitListExpr 0x5608c14b39d8 <line:1741:3, col:38> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad360 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad348 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad318 <col:19> 'jv (jq_state *, jv)' Function 0x5608c148b820 'f_input' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3a48 <col:28> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3a30 <col:28> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad388 <col:28> 'char [6]' lvalue "input"
|   | `-IntegerLiteral 0x5608c14ad3a8 <col:37> 'int' 1
|   |-InitListExpr 0x5608c14b3a70 <line:1742:3, col:38> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad478 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad460 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad420 <col:19> 'jv (jq_state *, jv)' Function 0x5608c148c480 'f_debug' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3ae0 <col:28> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3ac8 <col:28> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad4a0 <col:28> 'char [6]' lvalue "debug"
|   | `-IntegerLiteral 0x5608c14ad4c0 <col:37> 'int' 1
|   |-InitListExpr 0x5608c14b3b08 <line:1743:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad580 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad568 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad538 <col:19> 'jv (jq_state *, jv)' Function 0x5608c148cbb8 'f_stderr' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3b78 <col:29> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3b60 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad5a8 <col:29> 'char [7]' lvalue "stderr"
|   | `-IntegerLiteral 0x5608c14ad5c8 <col:39> 'int' 1
|   |-InitListExpr 0x5608c14b3ba0 <line:1744:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad688 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad670 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad640 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c1497da8 'f_strptime' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3c10 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3bf8 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad6b0 <col:31> 'char [9]' lvalue "strptime"
|   | `-IntegerLiteral 0x5608c14ad6d0 <col:43> 'int' 2
|   |-InitListExpr 0x5608c14b3c38 <line:1745:3, col:44> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad790 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad778 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad748 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c14a1010 'f_strftime' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3ca8 <col:31> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3c90 <col:31> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad7b8 <col:31> 'char [9]' lvalue "strftime"
|   | `-IntegerLiteral 0x5608c14ad7d8 <col:43> 'int' 2
|   |-InitListExpr 0x5608c14b3cd0 <line:1746:3, col:54> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad898 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad880 <col:19> 'jv (*)(jq_state *, jv, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad850 <col:19> 'jv (jq_state *, jv, jv)' Function 0x5608c14a2cd0 'f_strflocaltime' 'jv (jq_state *, jv, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3d40 <col:36> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3d28 <col:36> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad8c0 <col:36> 'char [14]' lvalue "strflocaltime"
|   | `-IntegerLiteral 0x5608c14ad8e8 <col:53> 'int' 2
|   |-InitListExpr 0x5608c14b3d68 <line:1747:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14ad9a8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ad990 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ad960 <col:19> 'jv (jq_state *, jv)' Function 0x5608c149d858 'f_mktime' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3dd8 <col:29> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3dc0 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14ad9d0 <col:29> 'char [7]' lvalue "mktime"
|   | `-IntegerLiteral 0x5608c14ad9f0 <col:39> 'int' 1
|   |-InitListExpr 0x5608c14b3e00 <line:1748:3, col:40> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14adab0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14ada98 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14ada68 <col:19> 'jv (jq_state *, jv)' Function 0x5608c149e9a0 'f_gmtime' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3e70 <col:29> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3e58 <col:29> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14adad8 <col:29> 'char [7]' lvalue "gmtime"
|   | `-IntegerLiteral 0x5608c14adaf8 <col:39> 'int' 1
|   |-InitListExpr 0x5608c14b3e98 <line:1749:3, col:46> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14adbb8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14adba0 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14adb70 <col:19> 'jv (jq_state *, jv)' Function 0x5608c149fd00 'f_localtime' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3f08 <col:32> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3ef0 <col:32> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14adbe0 <col:32> 'char [10]' lvalue "localtime"
|   | `-IntegerLiteral 0x5608c14adc08 <col:45> 'int' 1
|   |-InitListExpr 0x5608c14b3f30 <line:1750:3, col:34> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14adcc8 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14adcb0 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14adc80 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14a44a0 'f_now' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b3fa0 <col:26> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b3f88 <col:26> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14adcf0 <col:26> 'char [4]' lvalue "now"
|   | `-IntegerLiteral 0x5608c14add10 <col:33> 'int' 1
|   |-InitListExpr 0x5608c14b3fc8 <line:1751:3, col:58> 'struct cfunction':'struct cfunction'
|   | |-CStyleCastExpr 0x5608c14addd0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|   | | `-ImplicitCastExpr 0x5608c14addb8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|   | |   `-DeclRefExpr 0x5608c14add88 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14a4d78 'f_current_filename' 'jv (jq_state *, jv)'
|   | |-ImplicitCastExpr 0x5608c14b4038 <col:39> 'const char *' <NoOp>
|   | | `-ImplicitCastExpr 0x5608c14b4020 <col:39> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x5608c14addf8 <col:39> 'char [15]' lvalue "input_filename"
|   | `-IntegerLiteral 0x5608c14ade20 <col:57> 'int' 1
|   `-InitListExpr 0x5608c14b4060 <line:1752:3, col:57> 'struct cfunction':'struct cfunction'
|     |-CStyleCastExpr 0x5608c14adee0 <col:4, col:19> 'cfunction_ptr':'void (*)()' <BitCast>
|     | `-ImplicitCastExpr 0x5608c14adec8 <col:19> 'jv (*)(jq_state *, jv)' <FunctionToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x5608c14ade98 <col:19> 'jv (jq_state *, jv)' Function 0x5608c14a55c8 'f_current_line' 'jv (jq_state *, jv)'
|     |-ImplicitCastExpr 0x5608c14b40d0 <col:35> 'const char *' <NoOp>
|     | `-ImplicitCastExpr 0x5608c14b40b8 <col:35> 'char *' <ArrayToPointerDecay>
|     |   `-StringLiteral 0x5608c14adf08 <col:35> 'char [18]' lvalue "input_line_number"
|     `-IntegerLiteral 0x5608c14adf38 <col:56> 'int' 1
|-RecordDecl 0x5608c14b4968 <line:1761:1, col:58> col:8 struct bytecoded_builtin definition
| |-FieldDecl 0x5608c14b4a28 <col:28, col:40> col:40 referenced name 'const char *'
| `-FieldDecl 0x5608c14b4a88 <col:46, col:52> col:52 referenced code 'block':'struct block'
|-FunctionDecl 0x5608c14b4b78 <line:1762:1, line:1805:1> line:1762:14 used bind_bytecoded_builtins 'block (block)' static
| |-ParmVarDecl 0x5608c14b4ae8 <col:38, col:44> col:44 used b 'block':'struct block'
| `-CompoundStmt 0x5608c14b8098 <col:47, line:1805:1>
|   |-DeclStmt 0x5608c14b4d50 <line:1763:3, col:30>
|   | `-VarDecl 0x5608c14b4c30 <col:3, col:29> col:9 used builtins 'block':'struct block' cinit
|   |   `-CallExpr 0x5608c14b4d30 <col:20, col:29> 'block':'struct block'
|   |     `-ImplicitCastExpr 0x5608c14b4d18 <col:20> 'block (*)()' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x5608c14b4c98 <col:20> 'block ()' Function 0x5608c1405828 'gen_noop' 'block ()'
|   |-CompoundStmt 0x5608c14b5dc8 <line:1764:3, line:1774:3>
|   | |-DeclStmt 0x5608c14b5588 <line:1765:5, line:1769:6>
|   | | `-VarDecl 0x5608c14b4e28 <line:1765:5, line:1769:5> line:1765:30 used builtin_defs 'struct bytecoded_builtin [2]' cinit
|   | |   `-InitListExpr 0x5608c14b5360 <col:47, line:1769:5> 'struct bytecoded_builtin [2]'
|   | |     |-InitListExpr 0x5608c14b53b0 <line:1766:7, col:41> 'struct bytecoded_builtin':'struct bytecoded_builtin'
|   | |     | |-ImplicitCastExpr 0x5608c14b5418 <col:8> 'const char *' <NoOp>
|   | |     | | `-ImplicitCastExpr 0x5608c14b5400 <col:8> 'char *' <ArrayToPointerDecay>
|   | |     | |   `-StringLiteral 0x5608c14b4e90 <col:8> 'char [6]' lvalue "empty"
|   | |     | `-CallExpr 0x5608c14b4f60 <col:17, col:40> 'block':'struct block'
|   | |     |   |-ImplicitCastExpr 0x5608c14b4f48 <col:17> 'block (*)(opcode)' <FunctionToPointerDecay>
|   | |     |   | `-DeclRefExpr 0x5608c14b4eb0 <col:17> 'block (opcode)' Function 0x5608c1405b78 'gen_op_simple' 'block (opcode)'
|   | |     |   `-ImplicitCastExpr 0x5608c14b4f88 <col:31> 'opcode':'opcode' <IntegralCast>
|   | |     |     `-DeclRefExpr 0x5608c14b4ed0 <col:31> 'int' EnumConstant 0x5608c13fd9d0 'BACKTRACK' 'int'
|   | |     `-InitListExpr 0x5608c14b5480 <line:1767:7, line:1768:51> 'struct bytecoded_builtin':'struct bytecoded_builtin'
|   | |       |-ImplicitCastExpr 0x5608c14b54e8 <line:1767:8> 'const char *' <NoOp>
|   | |       | `-ImplicitCastExpr 0x5608c14b54d0 <col:8> 'char *' <ArrayToPointerDecay>
|   | |       |   `-StringLiteral 0x5608c14b4ff0 <col:8> 'char [4]' lvalue "not"
|   | |       `-CallExpr 0x5608c14b5270 <col:15, line:1768:50> 'block':'struct block'
|   | |         |-ImplicitCastExpr 0x5608c14b5258 <line:1767:15> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x5608c14b5010 <col:15> 'block (block, block)' Function 0x5608c140a1d0 'gen_condbranch' 'block (block, block)'
|   | |         |-CallExpr 0x5608c14b5120 <col:30, col:50> 'block':'struct block'
|   | |         | |-ImplicitCastExpr 0x5608c14b5108 <col:30> 'block (*)(jv)' <FunctionToPointerDecay>
|   | |         | | `-DeclRefExpr 0x5608c14b5030 <col:30> 'block (jv)' Function 0x5608c1405d28 'gen_const' 'block (jv)'
|   | |         | `-CallExpr 0x5608c14b5088 <col:40, col:49> 'jv':'jv'
|   | |         |   `-ImplicitCastExpr 0x5608c14b5070 <col:40> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |         |     `-DeclRefExpr 0x5608c14b5050 <col:40> 'jv (void)' Function 0x5608c13db300 'jv_false' 'jv (void)'
|   | |         `-CallExpr 0x5608c14b51d8 <line:1768:30, col:49> 'block':'struct block'
|   | |           |-ImplicitCastExpr 0x5608c14b51c0 <col:30> 'block (*)(jv)' <FunctionToPointerDecay>
|   | |           | `-DeclRefExpr 0x5608c14b5148 <col:30> 'block (jv)' Function 0x5608c1405d28 'gen_const' 'block (jv)'
|   | |           `-CallExpr 0x5608c14b51a0 <col:40, col:48> 'jv':'jv'
|   | |             `-ImplicitCastExpr 0x5608c14b5188 <col:40> 'jv (*)(void)' <FunctionToPointerDecay>
|   | |               `-DeclRefExpr 0x5608c14b5168 <col:40> 'jv (void)' Function 0x5608c13db1c8 'jv_true' 'jv (void)'
|   | `-ForStmt 0x5608c14b5d90 <line:1770:5, line:1773:5>
|   |   |-DeclStmt 0x5608c14b5658 <line:1770:10, col:22>
|   |   | `-VarDecl 0x5608c14b55b8 <col:10, col:21> col:19 used i 'unsigned int' cinit
|   |   |   `-ImplicitCastExpr 0x5608c14b5640 <col:21> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x5608c14b5620 <col:21> 'int' 0
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x5608c14b5910 <col:24, col:69> 'int' '<'
|   |   | |-ImplicitCastExpr 0x5608c14b58f8 <col:24> 'unsigned long' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x5608c14b58e0 <col:24> 'unsigned int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5608c14b5670 <col:24> 'unsigned int' lvalue Var 0x5608c14b55b8 'i' 'unsigned int'
|   |   | `-BinaryOperator 0x5608c14b58c0 <col:26, col:69> 'unsigned long' '/'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x5608c14b56d0 <col:26, col:45> 'unsigned long' sizeof
|   |   |   | `-ParenExpr 0x5608c14b56b0 <col:32, col:45> 'struct bytecoded_builtin [2]' lvalue
|   |   |   |   `-DeclRefExpr 0x5608c14b5690 <col:33> 'struct bytecoded_builtin [2]' lvalue Var 0x5608c14b4e28 'builtin_defs' 'struct bytecoded_builtin [2]' non_odr_use_unevaluated
|   |   |   `-UnaryExprOrTypeTraitExpr 0x5608c14b57e0 <col:47, col:69> 'unsigned long' sizeof
|   |   |     `-ParenExpr 0x5608c14b57c0 <col:53, col:69> 'struct bytecoded_builtin':'struct bytecoded_builtin' lvalue
|   |   |       `-ArraySubscriptExpr 0x5608c14b57a0 <col:54, col:68> 'struct bytecoded_builtin':'struct bytecoded_builtin' lvalue
|   |   |         |-ImplicitCastExpr 0x5608c14b5788 <col:54> 'struct bytecoded_builtin *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x5608c14b56f0 <col:54> 'struct bytecoded_builtin [2]' lvalue Var 0x5608c14b4e28 'builtin_defs' 'struct bytecoded_builtin [2]' non_odr_use_unevaluated
|   |   |         `-IntegerLiteral 0x5608c14b5710 <col:67> 'int' 0
|   |   |-UnaryOperator 0x5608c14b5950 <col:72, col:73> 'unsigned int' postfix '++'
|   |   | `-DeclRefExpr 0x5608c14b5930 <col:72> 'unsigned int' lvalue Var 0x5608c14b55b8 'i' 'unsigned int'
|   |   `-CompoundStmt 0x5608c14b5d78 <col:77, line:1773:5>
|   |     `-BinaryOperator 0x5608c14b5d58 <line:1771:7, ./src/compile.h:93:46> 'block':'struct block' '='
|   |       |-DeclRefExpr 0x5608c14b5968 <src/builtin.c:1771:7> 'block':'struct block' lvalue Var 0x5608c14b4c30 'builtins' 'block':'struct block'
|   |       `-ParenExpr 0x5608c14b5d38 <./src/compile.h:93:24, col:46> 'block':'struct block'
|   |         `-CallExpr 0x5608c14b5cf0 <col:25, col:45> 'block':'struct block'
|   |           |-ImplicitCastExpr 0x5608c14b5cd8 <col:25> 'block (*)(block, block)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c14b5988 <col:25> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   |           |-ImplicitCastExpr 0x5608c14b5d20 <col:36, col:39> 'block':'struct block' <LValueToRValue>
|   |           | `-ParenExpr 0x5608c14b59c8 <col:36, col:39> 'block':'struct block' lvalue
|   |           |   `-DeclRefExpr 0x5608c14b59a8 <src/builtin.c:1771:24> 'block':'struct block' lvalue Var 0x5608c14b4c30 'builtins' 'block':'struct block'
|   |           `-ParenExpr 0x5608c14b5cb8 <./src/compile.h:93:41, col:44> 'block':'struct block'
|   |             `-CallExpr 0x5608c14b5c50 <src/builtin.c:1771:34, line:1772:67> 'block':'struct block'
|   |               |-ImplicitCastExpr 0x5608c14b5c38 <line:1771:34> 'block (*)(const char *, block, block)' <FunctionToPointerDecay>
|   |               | `-DeclRefExpr 0x5608c14b59e8 <col:34> 'block (const char *, block, block)' Function 0x5608c1407a48 'gen_function' 'block (const char *, block, block)'
|   |               |-ImplicitCastExpr 0x5608c14b5c88 <col:47, col:63> 'const char *' <LValueToRValue>
|   |               | `-MemberExpr 0x5608c14b5a98 <col:47, col:63> 'const char *' lvalue .name 0x5608c14b4a28
|   |               |   `-ArraySubscriptExpr 0x5608c14b5a78 <col:47, col:61> 'struct bytecoded_builtin':'struct bytecoded_builtin' lvalue
|   |               |     |-ImplicitCastExpr 0x5608c14b5a48 <col:47> 'struct bytecoded_builtin *' <ArrayToPointerDecay>
|   |               |     | `-DeclRefExpr 0x5608c14b5a08 <col:47> 'struct bytecoded_builtin [2]' lvalue Var 0x5608c14b4e28 'builtin_defs' 'struct bytecoded_builtin [2]'
|   |               |     `-ImplicitCastExpr 0x5608c14b5a60 <col:60> 'unsigned int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x5608c14b5a28 <col:60> 'unsigned int' lvalue Var 0x5608c14b55b8 'i' 'unsigned int'
|   |               |-CallExpr 0x5608c14b5b00 <col:69, col:78> 'block':'struct block'
|   |               | `-ImplicitCastExpr 0x5608c14b5ae8 <col:69> 'block (*)()' <FunctionToPointerDecay>
|   |               |   `-DeclRefExpr 0x5608c14b5ac8 <col:69> 'block ()' Function 0x5608c1405828 'gen_noop' 'block ()'
|   |               `-ImplicitCastExpr 0x5608c14b5ca0 <line:1772:47, col:63> 'block':'struct block' <LValueToRValue>
|   |                 `-MemberExpr 0x5608c14b5bb0 <col:47, col:63> 'block':'struct block' lvalue .code 0x5608c14b4a88
|   |                   `-ArraySubscriptExpr 0x5608c14b5b90 <col:47, col:61> 'struct bytecoded_builtin':'struct bytecoded_builtin' lvalue
|   |                     |-ImplicitCastExpr 0x5608c14b5b60 <col:47> 'struct bytecoded_builtin *' <ArrayToPointerDecay>
|   |                     | `-DeclRefExpr 0x5608c14b5b20 <col:47> 'struct bytecoded_builtin [2]' lvalue Var 0x5608c14b4e28 'builtin_defs' 'struct bytecoded_builtin [2]'
|   |                     `-ImplicitCastExpr 0x5608c14b5b78 <col:60> 'unsigned int' <LValueToRValue>
|   |                       `-DeclRefExpr 0x5608c14b5b40 <col:60> 'unsigned int' lvalue Var 0x5608c14b55b8 'i' 'unsigned int'
|   |-CompoundStmt 0x5608c14b6c28 <line:1775:3, line:1786:3>
|   | |-DeclStmt 0x5608c14b64a8 <line:1776:5, line:1780:6>
|   | | `-VarDecl 0x5608c14b5e18 <line:1776:5, line:1780:5> line:1776:30 used builtin_def_1arg 'struct bytecoded_builtin [1]' cinit
|   | |   `-InitListExpr 0x5608c14b6350 <col:51, line:1780:5> 'struct bytecoded_builtin [1]'
|   | |     `-InitListExpr 0x5608c14b63a0 <line:1777:7, line:1779:46> 'struct bytecoded_builtin':'struct bytecoded_builtin'
|   | |       |-ImplicitCastExpr 0x5608c14b6408 <line:1777:8> 'const char *' <NoOp>
|   | |       | `-ImplicitCastExpr 0x5608c14b63f0 <col:8> 'char *' <ArrayToPointerDecay>
|   | |       |   `-StringLiteral 0x5608c14b5e80 <col:8> 'char [5]' lvalue "path"
|   | |       `-ParenExpr 0x5608c14b6288 <./src/compile.h:94:27, col:59> 'block':'struct block'
|   | |         `-CallExpr 0x5608c14b6258 <col:28, col:58> 'block':'struct block'
|   | |           |-ImplicitCastExpr 0x5608c14b6240 <col:28> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |           | `-DeclRefExpr 0x5608c14b5ea0 <col:28> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |           |-ParenExpr 0x5608c14b6168 <line:93:24, col:46> 'block':'struct block'
|   | |           | `-CallExpr 0x5608c14b6138 <col:25, col:45> 'block':'struct block'
|   | |           |   |-ImplicitCastExpr 0x5608c14b6120 <col:25> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |           |   | `-DeclRefExpr 0x5608c14b5ec0 <col:25> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |           |   |-ParenExpr 0x5608c14b5f78 <col:36, col:39> 'block':'struct block'
|   | |           |   | `-CallExpr 0x5608c14b5f38 <src/builtin.c:1777:22, col:46> 'block':'struct block'
|   | |           |   |   |-ImplicitCastExpr 0x5608c14b5f20 <col:22> 'block (*)(opcode)' <FunctionToPointerDecay>
|   | |           |   |   | `-DeclRefExpr 0x5608c14b5ee0 <col:22> 'block (opcode)' Function 0x5608c1405b78 'gen_op_simple' 'block (opcode)'
|   | |           |   |   `-ImplicitCastExpr 0x5608c14b5f60 <col:36> 'opcode':'opcode' <IntegralCast>
|   | |           |   |     `-DeclRefExpr 0x5608c14b5f00 <col:36> 'int' EnumConstant 0x5608c13fdbb0 'PATH_BEGIN' 'int'
|   | |           |   `-ParenExpr 0x5608c14b6100 <./src/compile.h:93:41, col:44> 'block':'struct block'
|   | |           |     `-CallExpr 0x5608c14b60a0 <src/builtin.c:1778:22, col:48> 'block':'struct block'
|   | |           |       |-ImplicitCastExpr 0x5608c14b6088 <col:22> 'block (*)(const char *, block)' <FunctionToPointerDecay>
|   | |           |       | `-DeclRefExpr 0x5608c14b5f98 <col:22> 'block (const char *, block)' Function 0x5608c1409108 'gen_call' 'block (const char *, block)'
|   | |           |       |-ImplicitCastExpr 0x5608c14b60e8 <col:31> 'const char *' <NoOp>
|   | |           |       | `-ImplicitCastExpr 0x5608c14b60d0 <col:31> 'char *' <ArrayToPointerDecay>
|   | |           |       |   `-StringLiteral 0x5608c14b5fb8 <col:31> 'char [4]' lvalue "arg"
|   | |           |       `-CallExpr 0x5608c14b6010 <col:38, col:47> 'block':'struct block'
|   | |           |         `-ImplicitCastExpr 0x5608c14b5ff8 <col:38> 'block (*)()' <FunctionToPointerDecay>
|   | |           |           `-DeclRefExpr 0x5608c14b5fd8 <col:38> 'block ()' Function 0x5608c1405828 'gen_noop' 'block ()'
|   | |           `-ParenExpr 0x5608c14b6220 <./src/compile.h:94:54, col:57> 'block':'struct block'
|   | |             `-CallExpr 0x5608c14b61e0 <src/builtin.c:1779:22, col:44> 'block':'struct block'
|   | |               |-ImplicitCastExpr 0x5608c14b61c8 <col:22> 'block (*)(opcode)' <FunctionToPointerDecay>
|   | |               | `-DeclRefExpr 0x5608c14b6188 <col:22> 'block (opcode)' Function 0x5608c1405b78 'gen_op_simple' 'block (opcode)'
|   | |               `-ImplicitCastExpr 0x5608c14b6208 <col:36> 'opcode':'opcode' <IntegralCast>
|   | |                 `-DeclRefExpr 0x5608c14b61a8 <col:36> 'int' EnumConstant 0x5608c13fdc00 'PATH_END' 'int'
|   | `-ForStmt 0x5608c14b6bf0 <line:1781:5, line:1785:5>
|   |   |-DeclStmt 0x5608c14b6578 <line:1781:10, col:22>
|   |   | `-VarDecl 0x5608c14b64d8 <col:10, col:21> col:19 used i 'unsigned int' cinit
|   |   |   `-ImplicitCastExpr 0x5608c14b6560 <col:21> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x5608c14b6540 <col:21> 'int' 0
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x5608c14b6718 <col:24, col:77> 'int' '<'
|   |   | |-ImplicitCastExpr 0x5608c14b6700 <col:24> 'unsigned long' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x5608c14b66e8 <col:24> 'unsigned int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x5608c14b6590 <col:24> 'unsigned int' lvalue Var 0x5608c14b64d8 'i' 'unsigned int'
|   |   | `-BinaryOperator 0x5608c14b66c8 <col:26, col:77> 'unsigned long' '/'
|   |   |   |-UnaryExprOrTypeTraitExpr 0x5608c14b65f0 <col:26, col:49> 'unsigned long' sizeof
|   |   |   | `-ParenExpr 0x5608c14b65d0 <col:32, col:49> 'struct bytecoded_builtin [1]' lvalue
|   |   |   |   `-DeclRefExpr 0x5608c14b65b0 <col:33> 'struct bytecoded_builtin [1]' lvalue Var 0x5608c14b5e18 'builtin_def_1arg' 'struct bytecoded_builtin [1]' non_odr_use_unevaluated
|   |   |   `-UnaryExprOrTypeTraitExpr 0x5608c14b66a8 <col:51, col:77> 'unsigned long' sizeof
|   |   |     `-ParenExpr 0x5608c14b6688 <col:57, col:77> 'struct bytecoded_builtin':'struct bytecoded_builtin' lvalue
|   |   |       `-ArraySubscriptExpr 0x5608c14b6668 <col:58, col:76> 'struct bytecoded_builtin':'struct bytecoded_builtin' lvalue
|   |   |         |-ImplicitCastExpr 0x5608c14b6650 <col:58> 'struct bytecoded_builtin *' <ArrayToPointerDecay>
|   |   |         | `-DeclRefExpr 0x5608c14b6610 <col:58> 'struct bytecoded_builtin [1]' lvalue Var 0x5608c14b5e18 'builtin_def_1arg' 'struct bytecoded_builtin [1]' non_odr_use_unevaluated
|   |   |         `-IntegerLiteral 0x5608c14b6630 <col:75> 'int' 0
|   |   |-UnaryOperator 0x5608c14b6758 <col:80, col:81> 'unsigned int' postfix '++'
|   |   | `-DeclRefExpr 0x5608c14b6738 <col:80> 'unsigned int' lvalue Var 0x5608c14b64d8 'i' 'unsigned int'
|   |   `-CompoundStmt 0x5608c14b6bd8 <col:85, line:1785:5>
|   |     `-BinaryOperator 0x5608c14b6bb8 <line:1782:7, ./src/compile.h:93:46> 'block':'struct block' '='
|   |       |-DeclRefExpr 0x5608c14b6770 <src/builtin.c:1782:7> 'block':'struct block' lvalue Var 0x5608c14b4c30 'builtins' 'block':'struct block'
|   |       `-ParenExpr 0x5608c14b6b98 <./src/compile.h:93:24, col:46> 'block':'struct block'
|   |         `-CallExpr 0x5608c14b6b50 <col:25, col:45> 'block':'struct block'
|   |           |-ImplicitCastExpr 0x5608c14b6b38 <col:25> 'block (*)(block, block)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c14b6790 <col:25> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   |           |-ImplicitCastExpr 0x5608c14b6b80 <col:36, col:39> 'block':'struct block' <LValueToRValue>
|   |           | `-ParenExpr 0x5608c14b67d0 <col:36, col:39> 'block':'struct block' lvalue
|   |           |   `-DeclRefExpr 0x5608c14b67b0 <src/builtin.c:1782:24> 'block':'struct block' lvalue Var 0x5608c14b4c30 'builtins' 'block':'struct block'
|   |           `-ParenExpr 0x5608c14b6b18 <./src/compile.h:93:41, col:44> 'block':'struct block'
|   |             `-CallExpr 0x5608c14b6ab0 <src/builtin.c:1782:34, line:1784:71> 'block':'struct block'
|   |               |-ImplicitCastExpr 0x5608c14b6a98 <line:1782:34> 'block (*)(const char *, block, block)' <FunctionToPointerDecay>
|   |               | `-DeclRefExpr 0x5608c14b67f0 <col:34> 'block (const char *, block, block)' Function 0x5608c1407a48 'gen_function' 'block (const char *, block, block)'
|   |               |-ImplicitCastExpr 0x5608c14b6ae8 <col:47, col:67> 'const char *' <LValueToRValue>
|   |               | `-MemberExpr 0x5608c14b68a0 <col:47, col:67> 'const char *' lvalue .name 0x5608c14b4a28
|   |               |   `-ArraySubscriptExpr 0x5608c14b6880 <col:47, col:65> 'struct bytecoded_builtin':'struct bytecoded_builtin' lvalue
|   |               |     |-ImplicitCastExpr 0x5608c14b6850 <col:47> 'struct bytecoded_builtin *' <ArrayToPointerDecay>
|   |               |     | `-DeclRefExpr 0x5608c14b6810 <col:47> 'struct bytecoded_builtin [1]' lvalue Var 0x5608c14b5e18 'builtin_def_1arg' 'struct bytecoded_builtin [1]'
|   |               |     `-ImplicitCastExpr 0x5608c14b6868 <col:64> 'unsigned int' <LValueToRValue>
|   |               |       `-DeclRefExpr 0x5608c14b6830 <col:64> 'unsigned int' lvalue Var 0x5608c14b64d8 'i' 'unsigned int'
|   |               |-CallExpr 0x5608c14b6980 <line:1783:47, col:62> 'block':'struct block'
|   |               | |-ImplicitCastExpr 0x5608c14b6968 <col:47> 'block (*)(const char *)' <FunctionToPointerDecay>
|   |               | | `-DeclRefExpr 0x5608c14b68d0 <col:47> 'block (const char *)' Function 0x5608c1407d58 'gen_param' 'block (const char *)'
|   |               | `-ImplicitCastExpr 0x5608c14b69c0 <col:57> 'const char *' <NoOp>
|   |               |   `-ImplicitCastExpr 0x5608c14b69a8 <col:57> 'char *' <ArrayToPointerDecay>
|   |               |     `-StringLiteral 0x5608c14b68f0 <col:57> 'char [4]' lvalue "arg"
|   |               `-ImplicitCastExpr 0x5608c14b6b00 <line:1784:47, col:67> 'block':'struct block' <LValueToRValue>
|   |                 `-MemberExpr 0x5608c14b6a68 <col:47, col:67> 'block':'struct block' lvalue .code 0x5608c14b4a88
|   |                   `-ArraySubscriptExpr 0x5608c14b6a48 <col:47, col:65> 'struct bytecoded_builtin':'struct bytecoded_builtin' lvalue
|   |                     |-ImplicitCastExpr 0x5608c14b6a18 <col:47> 'struct bytecoded_builtin *' <ArrayToPointerDecay>
|   |                     | `-DeclRefExpr 0x5608c14b69d8 <col:47> 'struct bytecoded_builtin [1]' lvalue Var 0x5608c14b5e18 'builtin_def_1arg' 'struct bytecoded_builtin [1]'
|   |                     `-ImplicitCastExpr 0x5608c14b6a30 <col:64> 'unsigned int' <LValueToRValue>
|   |                       `-DeclRefExpr 0x5608c14b69f8 <col:64> 'unsigned int' lvalue Var 0x5608c14b64d8 'i' 'unsigned int'
|   |-CompoundStmt 0x5608c14b7f20 <line:1787:3, line:1803:3>
|   | |-DeclStmt 0x5608c14b6e08 <line:1789:5, col:58>
|   | | `-VarDecl 0x5608c14b6c58 <col:5, col:57> col:11 used rangevar 'block':'struct block' cinit
|   | |   `-CallExpr 0x5608c14b6d90 <col:22, col:57> 'block':'struct block'
|   | |     |-ImplicitCastExpr 0x5608c14b6d78 <col:22> 'block (*)(opcode, const char *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x5608c14b6cc0 <col:22> 'block (opcode, const char *)' Function 0x5608c1406df0 'gen_op_var_fresh' 'block (opcode, const char *)'
|   | |     |-ImplicitCastExpr 0x5608c14b6dc0 <col:39> 'opcode':'opcode' <IntegralCast>
|   | |     | `-DeclRefExpr 0x5608c14b6ce0 <col:39> 'int' EnumConstant 0x5608c13fd6b0 'STOREV' 'int'
|   | |     `-ImplicitCastExpr 0x5608c14b6df0 <col:47> 'const char *' <NoOp>
|   | |       `-ImplicitCastExpr 0x5608c14b6dd8 <col:47> 'char *' <ArrayToPointerDecay>
|   | |         `-StringLiteral 0x5608c14b6d00 <col:47> 'char [9]' lvalue "rangevar"
|   | |-DeclStmt 0x5608c14b6f90 <line:1790:5, col:62>
|   | | `-VarDecl 0x5608c14b6e30 <col:5, col:61> col:11 used rangestart 'block':'struct block' cinit
|   | |   `-CallExpr 0x5608c14b6f18 <col:24, col:61> 'block':'struct block'
|   | |     |-ImplicitCastExpr 0x5608c14b6f00 <col:24> 'block (*)(opcode, const char *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x5608c14b6e98 <col:24> 'block (opcode, const char *)' Function 0x5608c1406df0 'gen_op_var_fresh' 'block (opcode, const char *)'
|   | |     |-ImplicitCastExpr 0x5608c14b6f48 <col:41> 'opcode':'opcode' <IntegralCast>
|   | |     | `-DeclRefExpr 0x5608c14b6eb8 <col:41> 'int' EnumConstant 0x5608c13fd6b0 'STOREV' 'int'
|   | |     `-ImplicitCastExpr 0x5608c14b6f78 <col:49> 'const char *' <NoOp>
|   | |       `-ImplicitCastExpr 0x5608c14b6f60 <col:49> 'char *' <ArrayToPointerDecay>
|   | |         `-StringLiteral 0x5608c14b6ed8 <col:49> 'char [11]' lvalue "rangestart"
|   | |-DeclStmt 0x5608c14b7aa8 <line:1791:5, line:1799:55>
|   | | `-VarDecl 0x5608c14b6fb8 <line:1791:5, ./src/compile.h:99:89> src/builtin.c:1791:11 used range 'block':'struct block' cinit
|   | |   `-ParenExpr 0x5608c14b7a88 <./src/compile.h:99:42, col:89> 'block':'struct block'
|   | |     `-CallExpr 0x5608c14b7a58 <col:43, col:88> 'block':'struct block'
|   | |       |-ImplicitCastExpr 0x5608c14b7a40 <col:43> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5608c14b7020 <col:43> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |       |-ParenExpr 0x5608c14b7928 <line:98:39, col:83> 'block':'struct block'
|   | |       | `-CallExpr 0x5608c14b78e0 <col:40, col:82> 'block':'struct block'
|   | |       |   |-ImplicitCastExpr 0x5608c14b78c8 <col:40> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |       |   | `-DeclRefExpr 0x5608c14b7040 <col:40> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |       |   |-ParenExpr 0x5608c14b7868 <line:97:36, col:77> 'block':'struct block'
|   | |       |   | `-CallExpr 0x5608c14b7838 <col:37, col:76> 'block':'struct block'
|   | |       |   |   |-ImplicitCastExpr 0x5608c14b7820 <col:37> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |       |   |   | `-DeclRefExpr 0x5608c14b7060 <col:37> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |       |   |   |-ParenExpr 0x5608c14b76a8 <line:96:33, col:71> 'block':'struct block'
|   | |       |   |   | `-CallExpr 0x5608c14b7678 <col:34, col:70> 'block':'struct block'
|   | |       |   |   |   |-ImplicitCastExpr 0x5608c14b7660 <col:34> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |       |   |   |   | `-DeclRefExpr 0x5608c14b7080 <col:34> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |       |   |   |   |-ParenExpr 0x5608c14b7588 <line:95:30, col:65> 'block':'struct block'
|   | |       |   |   |   | `-CallExpr 0x5608c14b7558 <col:31, col:64> 'block':'struct block'
|   | |       |   |   |   |   |-ImplicitCastExpr 0x5608c14b7540 <col:31> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |       |   |   |   |   | `-DeclRefExpr 0x5608c14b70a0 <col:31> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |       |   |   |   |   |-ParenExpr 0x5608c14b73f0 <line:94:27, col:59> 'block':'struct block'
|   | |       |   |   |   |   | `-CallExpr 0x5608c14b73a8 <col:28, col:58> 'block':'struct block'
|   | |       |   |   |   |   |   |-ImplicitCastExpr 0x5608c14b7390 <col:28> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |       |   |   |   |   |   | `-DeclRefExpr 0x5608c14b70c0 <col:28> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |       |   |   |   |   |   |-ParenExpr 0x5608c14b7330 <line:93:24, col:46> 'block':'struct block'
|   | |       |   |   |   |   |   | `-CallExpr 0x5608c14b7300 <col:25, col:45> 'block':'struct block'
|   | |       |   |   |   |   |   |   |-ImplicitCastExpr 0x5608c14b72e8 <col:25> 'block (*)(block, block)' <FunctionToPointerDecay>
|   | |       |   |   |   |   |   |   | `-DeclRefExpr 0x5608c14b70e0 <col:25> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   | |       |   |   |   |   |   |   |-ParenExpr 0x5608c14b7198 <col:36, col:39> 'block':'struct block'
|   | |       |   |   |   |   |   |   | `-CallExpr 0x5608c14b7158 <src/builtin.c:1791:25, col:42> 'block':'struct block'
|   | |       |   |   |   |   |   |   |   |-ImplicitCastExpr 0x5608c14b7140 <col:25> 'block (*)(opcode)' <FunctionToPointerDecay>
|   | |       |   |   |   |   |   |   |   | `-DeclRefExpr 0x5608c14b7100 <col:25> 'block (opcode)' Function 0x5608c1405b78 'gen_op_simple' 'block (opcode)'
|   | |       |   |   |   |   |   |   |   `-ImplicitCastExpr 0x5608c14b7180 <col:39> 'opcode':'opcode' <IntegralCast>
|   | |       |   |   |   |   |   |   |     `-DeclRefExpr 0x5608c14b7120 <col:39> 'int' EnumConstant 0x5608c13fd480 'DUP' 'int'
|   | |       |   |   |   |   |   |   `-ParenExpr 0x5608c14b72c8 <./src/compile.h:93:41, col:44> 'block':'struct block'
|   | |       |   |   |   |   |   |     `-CallExpr 0x5608c14b7268 <src/builtin.c:1792:25, col:53> 'block':'struct block'
|   | |       |   |   |   |   |   |       |-ImplicitCastExpr 0x5608c14b7250 <col:25> 'block (*)(const char *, block)' <FunctionToPointerDecay>
|   | |       |   |   |   |   |   |       | `-DeclRefExpr 0x5608c14b71b8 <col:25> 'block (const char *, block)' Function 0x5608c1409108 'gen_call' 'block (const char *, block)'
|   | |       |   |   |   |   |   |       |-ImplicitCastExpr 0x5608c14b72b0 <col:34> 'const char *' <NoOp>
|   | |       |   |   |   |   |   |       | `-ImplicitCastExpr 0x5608c14b7298 <col:34> 'char *' <ArrayToPointerDecay>
|   | |       |   |   |   |   |   |       |   `-StringLiteral 0x5608c14b71d8 <col:34> 'char [6]' lvalue "start"
|   | |       |   |   |   |   |   |       `-CallExpr 0x5608c14b7230 <col:43, col:52> 'block':'struct block'
|   | |       |   |   |   |   |   |         `-ImplicitCastExpr 0x5608c14b7218 <col:43> 'block (*)()' <FunctionToPointerDecay>
|   | |       |   |   |   |   |   |           `-DeclRefExpr 0x5608c14b71f8 <col:43> 'block ()' Function 0x5608c1405828 'gen_noop' 'block ()'
|   | |       |   |   |   |   |   `-ImplicitCastExpr 0x5608c14b73d8 <./src/compile.h:94:54, col:57> 'block':'struct block' <LValueToRValue>
|   | |       |   |   |   |   |     `-ParenExpr 0x5608c14b7370 <col:54, col:57> 'block':'struct block' lvalue
|   | |       |   |   |   |   |       `-DeclRefExpr 0x5608c14b7350 <src/builtin.c:1793:25> 'block':'struct block' lvalue Var 0x5608c14b6e30 'rangestart' 'block':'struct block'
|   | |       |   |   |   |   `-ParenExpr 0x5608c14b7520 <./src/compile.h:95:60, col:63> 'block':'struct block'
|   | |       |   |   |   |     `-CallExpr 0x5608c14b74c0 <src/builtin.c:1794:25, col:51> 'block':'struct block'
|   | |       |   |   |   |       |-ImplicitCastExpr 0x5608c14b74a8 <col:25> 'block (*)(const char *, block)' <FunctionToPointerDecay>
|   | |       |   |   |   |       | `-DeclRefExpr 0x5608c14b7410 <col:25> 'block (const char *, block)' Function 0x5608c1409108 'gen_call' 'block (const char *, block)'
|   | |       |   |   |   |       |-ImplicitCastExpr 0x5608c14b7508 <col:34> 'const char *' <NoOp>
|   | |       |   |   |   |       | `-ImplicitCastExpr 0x5608c14b74f0 <col:34> 'char *' <ArrayToPointerDecay>
|   | |       |   |   |   |       |   `-StringLiteral 0x5608c14b7430 <col:34> 'char [4]' lvalue "end"
|   | |       |   |   |   |       `-CallExpr 0x5608c14b7488 <col:41, col:50> 'block':'struct block'
|   | |       |   |   |   |         `-ImplicitCastExpr 0x5608c14b7470 <col:41> 'block (*)()' <FunctionToPointerDecay>
|   | |       |   |   |   |           `-DeclRefExpr 0x5608c14b7450 <col:41> 'block ()' Function 0x5608c1405828 'gen_noop' 'block ()'
|   | |       |   |   |   `-ParenExpr 0x5608c14b7640 <./src/compile.h:96:66, col:69> 'block':'struct block'
|   | |       |   |   |     `-CallExpr 0x5608c14b7600 <src/builtin.c:1795:25, col:42> 'block':'struct block'
|   | |       |   |   |       |-ImplicitCastExpr 0x5608c14b75e8 <col:25> 'block (*)(opcode)' <FunctionToPointerDecay>
|   | |       |   |   |       | `-DeclRefExpr 0x5608c14b75a8 <col:25> 'block (opcode)' Function 0x5608c1405b78 'gen_op_simple' 'block (opcode)'
|   | |       |   |   |       `-ImplicitCastExpr 0x5608c14b7628 <col:39> 'opcode':'opcode' <IntegralCast>
|   | |       |   |   |         `-DeclRefExpr 0x5608c14b75c8 <col:39> 'int' EnumConstant 0x5608c13fd480 'DUP' 'int'
|   | |       |   |   `-ParenExpr 0x5608c14b7800 <./src/compile.h:97:72, col:75> 'block':'struct block'
|   | |       |   |     `-CallExpr 0x5608c14b77a0 <src/builtin.c:1796:25, col:55> 'block':'struct block'
|   | |       |   |       |-ImplicitCastExpr 0x5608c14b7788 <col:25> 'block (*)(opcode, block)' <FunctionToPointerDecay>
|   | |       |   |       | `-DeclRefExpr 0x5608c14b76c8 <col:25> 'block (opcode, block)' Function 0x5608c1406c18 'gen_op_bound' 'block (opcode, block)'
|   | |       |   |       |-ImplicitCastExpr 0x5608c14b77d0 <col:38> 'opcode':'opcode' <IntegralCast>
|   | |       |   |       | `-DeclRefExpr 0x5608c14b76e8 <col:38> 'int' EnumConstant 0x5608c13fd610 'LOADV' 'int'
|   | |       |   |       `-ImplicitCastExpr 0x5608c14b77e8 <col:45> 'block':'struct block' <LValueToRValue>
|   | |       |   |         `-DeclRefExpr 0x5608c14b7708 <col:45> 'block':'struct block' lvalue Var 0x5608c14b6e30 'rangestart' 'block':'struct block'
|   | |       |   `-ImplicitCastExpr 0x5608c14b7910 <./src/compile.h:98:78, col:81> 'block':'struct block' <LValueToRValue>
|   | |       |     `-ParenExpr 0x5608c14b78a8 <col:78, col:81> 'block':'struct block' lvalue
|   | |       |       `-DeclRefExpr 0x5608c14b7888 <src/builtin.c:1798:25> 'block':'struct block' lvalue Var 0x5608c14b6c58 'rangevar' 'block':'struct block'
|   | |       `-ParenExpr 0x5608c14b7a20 <./src/compile.h:99:84, col:87> 'block':'struct block'
|   | |         `-CallExpr 0x5608c14b79c0 <src/builtin.c:1799:25, col:53> 'block':'struct block'
|   | |           |-ImplicitCastExpr 0x5608c14b79a8 <col:25> 'block (*)(opcode, block)' <FunctionToPointerDecay>
|   | |           | `-DeclRefExpr 0x5608c14b7948 <col:25> 'block (opcode, block)' Function 0x5608c1406c18 'gen_op_bound' 'block (opcode, block)'
|   | |           |-ImplicitCastExpr 0x5608c14b79f0 <col:38> 'opcode':'opcode' <IntegralCast>
|   | |           | `-DeclRefExpr 0x5608c14b7968 <col:38> 'int' EnumConstant 0x5608c13fdac0 'RANGE' 'int'
|   | |           `-ImplicitCastExpr 0x5608c14b7a08 <col:45> 'block':'struct block' <LValueToRValue>
|   | |             `-DeclRefExpr 0x5608c14b7988 <col:45> 'block':'struct block' lvalue Var 0x5608c14b6c58 'rangevar' 'block':'struct block'
|   | `-BinaryOperator 0x5608c14b7f00 <line:1800:5, ./src/compile.h:93:46> 'block':'struct block' '='
|   |   |-DeclRefExpr 0x5608c14b7ac0 <src/builtin.c:1800:5> 'block':'struct block' lvalue Var 0x5608c14b4c30 'builtins' 'block':'struct block'
|   |   `-ParenExpr 0x5608c14b7ee0 <./src/compile.h:93:24, col:46> 'block':'struct block'
|   |     `-CallExpr 0x5608c14b7e98 <col:25, col:45> 'block':'struct block'
|   |       |-ImplicitCastExpr 0x5608c14b7e80 <col:25> 'block (*)(block, block)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14b7ae0 <col:25> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   |       |-ImplicitCastExpr 0x5608c14b7ec8 <col:36, col:39> 'block':'struct block' <LValueToRValue>
|   |       | `-ParenExpr 0x5608c14b7b20 <col:36, col:39> 'block':'struct block' lvalue
|   |       |   `-DeclRefExpr 0x5608c14b7b00 <src/builtin.c:1800:22> 'block':'struct block' lvalue Var 0x5608c14b4c30 'builtins' 'block':'struct block'
|   |       `-ParenExpr 0x5608c14b7e60 <./src/compile.h:93:41, col:44> 'block':'struct block'
|   |         `-CallExpr 0x5608c14b7de0 <src/builtin.c:1800:32, line:1802:50> 'block':'struct block'
|   |           |-ImplicitCastExpr 0x5608c14b7dc8 <line:1800:32> 'block (*)(const char *, block, block)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5608c14b7b40 <col:32> 'block (const char *, block, block)' Function 0x5608c1407a48 'gen_function' 'block (const char *, block, block)'
|   |           |-ImplicitCastExpr 0x5608c14b7e30 <col:45> 'const char *' <NoOp>
|   |           | `-ImplicitCastExpr 0x5608c14b7e18 <col:45> 'char *' <ArrayToPointerDecay>
|   |           |   `-StringLiteral 0x5608c14b7b60 <col:45> 'char [6]' lvalue "range"
|   |           |-ParenExpr 0x5608c14b7d88 <./src/compile.h:93:24, col:46> 'block':'struct block'
|   |           | `-CallExpr 0x5608c14b7d58 <col:25, col:45> 'block':'struct block'
|   |           |   |-ImplicitCastExpr 0x5608c14b7d40 <col:25> 'block (*)(block, block)' <FunctionToPointerDecay>
|   |           |   | `-DeclRefExpr 0x5608c14b7b80 <col:25> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|   |           |   |-ParenExpr 0x5608c14b7c50 <col:36, col:39> 'block':'struct block'
|   |           |   | `-CallExpr 0x5608c14b7bf8 <src/builtin.c:1801:51, col:68> 'block':'struct block'
|   |           |   |   |-ImplicitCastExpr 0x5608c14b7be0 <col:51> 'block (*)(const char *)' <FunctionToPointerDecay>
|   |           |   |   | `-DeclRefExpr 0x5608c14b7ba0 <col:51> 'block (const char *)' Function 0x5608c1407d58 'gen_param' 'block (const char *)'
|   |           |   |   `-ImplicitCastExpr 0x5608c14b7c38 <col:61> 'const char *' <NoOp>
|   |           |   |     `-ImplicitCastExpr 0x5608c14b7c20 <col:61> 'char *' <ArrayToPointerDecay>
|   |           |   |       `-StringLiteral 0x5608c14b7bc0 <col:61> 'char [6]' lvalue "start"
|   |           |   `-ParenExpr 0x5608c14b7d20 <./src/compile.h:93:41, col:44> 'block':'struct block'
|   |           |     `-CallExpr 0x5608c14b7cc8 <src/builtin.c:1801:71, col:86> 'block':'struct block'
|   |           |       |-ImplicitCastExpr 0x5608c14b7cb0 <col:71> 'block (*)(const char *)' <FunctionToPointerDecay>
|   |           |       | `-DeclRefExpr 0x5608c14b7c70 <col:71> 'block (const char *)' Function 0x5608c1407d58 'gen_param' 'block (const char *)'
|   |           |       `-ImplicitCastExpr 0x5608c14b7d08 <col:81> 'const char *' <NoOp>
|   |           |         `-ImplicitCastExpr 0x5608c14b7cf0 <col:81> 'char *' <ArrayToPointerDecay>
|   |           |           `-StringLiteral 0x5608c14b7c90 <col:81> 'char [4]' lvalue "end"
|   |           `-ImplicitCastExpr 0x5608c14b7e48 <line:1802:45> 'block':'struct block' <LValueToRValue>
|   |             `-DeclRefExpr 0x5608c14b7da8 <col:45> 'block':'struct block' lvalue Var 0x5608c14b6fb8 'range' 'block':'struct block'
|   `-ReturnStmt 0x5608c14b8088 <line:1804:3, ./src/compile.h:93:46>
|     `-ParenExpr 0x5608c14b8068 <col:24, col:46> 'block':'struct block'
|       `-CallExpr 0x5608c14b8008 <col:25, col:45> 'block':'struct block'
|         |-ImplicitCastExpr 0x5608c14b7ff0 <col:25> 'block (*)(block, block)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c14b7f50 <col:25> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|         |-ImplicitCastExpr 0x5608c14b8038 <col:36, col:39> 'block':'struct block' <LValueToRValue>
|         | `-ParenExpr 0x5608c14b7f90 <col:36, col:39> 'block':'struct block' lvalue
|         |   `-DeclRefExpr 0x5608c14b7f70 <src/builtin.c:1804:16> 'block':'struct block' lvalue Var 0x5608c14b4c30 'builtins' 'block':'struct block'
|         `-ImplicitCastExpr 0x5608c14b8050 <./src/compile.h:93:41, col:44> 'block':'struct block' <LValueToRValue>
|           `-ParenExpr 0x5608c14b7fd0 <col:41, col:44> 'block':'struct block' lvalue
|             `-DeclRefExpr 0x5608c14b7fb0 <src/builtin.c:1804:26> 'block':'struct block' lvalue ParmVar 0x5608c14b4ae8 'b' 'block':'struct block'
|-VarDecl 0x5608c14b8148 <line:1807:1, line:1815:59> line:1807:19 used jq_builtins 'const char [11423]' static cinit
| `-StringLiteral 0x5608c14c1270 <./src/builtin.inc:1:1, src/builtin.c:1815:59> 'const char [11423]' "def halt_error: halt_error(5);\ndef error(msg): msg|error;\ndef map(f): [.[] | f];\ndef select(f): if f then . else empty end;\ndef sort_by(f): _sort_by_impl(map([f]));\ndef group_by(f): _group_by_impl(map([f]));\ndef unique: group_by(.) | map(.[0]);\ndef unique_by(f): group_by(f) | map(.[0]);\ndef max_by(f): _max_by_impl(map([f]));\ndef min_by(f): _min_by_impl(map([f]));\ndef add: reduce .[] as $x (null; . + $x);\ndef del(f): delpaths([path(f)]);\ndef _assign(paths; $value): reduce path(paths) as $p (.; setpath($p; $value));\ndef _modify(paths; update):\n    reduce path(paths) as $p (.;\n        . as $dot\n      | null\n      | label $out\n      | ($dot | getpath($p)) as $v\n      | (\n          (   $$$$v\n            | update\n            | (., break $out) as $v\n            | $$$$dot\n            | setpath($p; $v)\n          ),\n          (\n              $$$$dot\n            | delpaths([$p])\n          )\n        )\n    );\ndef map_values(f): .[] |= f;\n\n# recurse\ndef recurse(f): def r: ., (f | r); r;\ndef recurse(f; cond): def r: ., (f | select(cond) | r); r;\ndef recurse: recurse(.[]?);\ndef recurse_down: recurse;\n\ndef to_entries: [keys_unsorted[] as $k | {key: $k, value: .[$k]}];\ndef from_entries: map({(.key // .Key // .name // .Name): (if has(\"value\") then .value else .Value end)}) | add | .//={};\ndef with_entries(f): to_entries | map(f) | from_entries;\ndef reverse: [.[length - 1 - range(0;length)]];\ndef indices($i): if type == \"array\" and ($i|type) == \"array\" then .[$i]\n  elif type == \"array\" then .[[$i]]\n  elif type == \"string\" and ($i|type) == \"string\" then _strindices($i)\n  else .[$i] end;\ndef index($i):   indices($i) | .[0];       # TODO: optimize\ndef rindex($i):  indices($i) | .[-1:][0];  # TODO: optimize\ndef paths: path(recurse(if (type|. == \"array\" or . == \"object\") then .[] else empty end))|select(length > 0);\ndef paths(node_filter): . as $dot|paths|select(. as $p|$dot|getpath($p)|node_filter);\ndef isfinite: type == \"number\" and (isinfinite | not);\ndef arrays: select(type == \"array\");\ndef objects: select(type == \"object\");\ndef iterables: select(type|. == \"array\" or . == \"object\");\ndef booleans: select(type == \"boolean\");\ndef numbers: select(type == \"number\");\ndef normals: select(isnormal);\ndef finites: select(isfinite);\ndef strings: select(type == \"string\");\ndef nulls: select(. == null);\ndef values: select(. != null);\ndef scalars: select(type|. != \"array\" and . != \"object\");\ndef leaf_paths: paths(scalars);\ndef join($x): reduce .[] as $i (null;\n            (if .==null then \"\" else .+$x end) +\n            ($i | if type==\"boolean\" or type==\"number\" then tostring else .//\"\" end)\n        ) // \"\";\ndef _flatten($x): reduce .[] as $i ([]; if $i | type == \"array\" and $x != 0 then . + ($i | _flatten($x-1)) else . + [$i] end);\ndef flatten($x): if $x < 0 then error(\"flatten depth must not be negative\") else _flatten($x) end;\ndef flatten: _flatten(-1);\ndef range($x): range(0;$x);\ndef fromdateiso8601: strptime(\"%Y-%m-%dT%H:%M:%SZ\")|mktime;\ndef todateiso8601: strftime(\"%Y-%m-%dT%H:%M:%SZ\");\ndef fromdate: fromdateiso8601;\ndef todate: todateiso8601;\ndef match(re; mode): _match_impl(re; mode; false)|.[];\ndef match($val): ($val|type) as $vt | if $vt == \"string\" then match($val; null)\n   elif $vt == \"array\" and ($val | length) > 1 then match($val[0]; $val[1])\n   elif $vt == \"array\" and ($val | length) > 0 then match($val[0]; null)\n   else error( $vt + \" not a string or array\") end;\ndef test(re; mode): _match_impl(re; mode; true);\ndef test($val): ($val|type) as $vt | if $vt == \"string\" then test($val; null)\n   elif $vt == \"array\" and ($val | length) > 1 then test($val[0]; $val[1])\n   elif $vt == \"array\" and ($val | length) > 0 then test($val[0]; null)\n   else error( $vt + \" not a string or array\") end;\ndef capture(re; mods): match(re; mods) | reduce ( .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair ({}; . + $pair);\ndef capture($val): ($val|type) as $vt | if $vt == \"string\" then capture($val; null)\n   elif $vt == \"array\" and ($val | length) > 1 then capture($val[0]; $val[1])\n   elif $vt == \"array\" and ($val | length) > 0 then capture($val[0]; null)\n   else error( $vt + \" not a string or array\") end;\ndef scan(re):\n  match(re; \"g\")\n  |  if (.captures|length > 0)\n      then [ .captures | .[] | .string ]\n      else .string\n      end ;\n#\n# If input is an array, then emit a stream of successive subarrays of length n (or less),\n# and similarly for strings.\ndef _nwise(a; $n): if a|length <= $n then a else a[0:$n] , _nwise(a[$n:]; $n) end;\ndef _nwise($n): _nwise(.; $n);\n#\n# splits/1 produces a stream; split/1 is retained for backward compatibility.\ndef splits($re; flags): . as $s\n#  # multiple occurrences of \"g\" are acceptable\n  | [ match($re; \"g\" + flags) | (.offset, .offset + .length) ]\n  | [0] + . +[$s|length]\n  | _nwise(2)\n  | $s[.[0]:.[1] ] ;\ndef splits($re): splits($re; null);\n#\n# split emits an array for backward compatibility\ndef split($re; flags): [ splits($re; flags) ];\n#\n# If s contains capture variables, then create a capture object and pipe it to s\ndef sub($re; s):\n  . as $in\n  | [match($re)]\n  | if length == 0 then $in\n    else .[0]\n    | . as $r\n#  # create the \"capture\" object:\n    | reduce ( $r | .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair\n        ({}; . + $pair)\n    | $in[0:$r.offset] + s + $in[$r.offset+$r.length:]\n    end ;\n#\n# If s contains capture variables, then create a capture object and pipe it to s\ndef sub($re; s; flags):\n  def subg: [explode[] | select(. != 103)] | implode;\n  # \"fla\" should be flags with all occurrences of g removed; gs should be non-nil if flags has a g\n  def sub1(fla; gs):\n    def mysub:\n      . as $in\n      | [match($re; fla)]\n      | if length == 0 then $in\n        else .[0] as $edit\n        | ($edit | .offset + .length) as $len\n        # create the \"capture\" object:\n        | reduce ( $edit | .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair\n            ({}; . + $pair)\n        | $in[0:$edit.offset]\n          + s\n          + ($in[$len:] | if length > 0 and gs then mysub else . end)\n        end ;\n    mysub ;\n    (flags | index(\"g\")) as $gs\n    | (flags | if $gs then subg else . end) as $fla\n    | sub1($fla; $gs);\n#\ndef sub($re; s): sub($re; s; \"\");\n# repeated substitution of re (which may contain named captures)\ndef gsub($re; s; flags): sub($re; s; flags + \"g\");\ndef gsub($re; s): sub($re; s; \"g\");\n\n########################################################################\n# generic iterator/generator\ndef while(cond; update):\n     def _while:\n         if cond then ., (update | _while) else empty end;\n     _while;\ndef until(cond; next):\n     def _until:\n         if cond then . else (next|_until) end;\n     _until;\ndef limit($n; exp):\n    if $n > 0 then label $out | foreach exp as $item ($n; .-1; $item, if . <= 0 then break $out else empty end)\n    elif $n == 0 then empty\n    else exp end;\n# range/3, with a `by` expression argument\ndef range($init; $upto; $by):\n    if $by > 0 then $init|while(. < $upto; . + $by)\n  elif $by < 0 then $init|while(. > $upto; . + $by)\n  else empty end;\ndef first(g): label $out | g | ., break $out;\ndef isempty(g): first((g|false), true);\ndef all(generator; condition): isempty(generator|condition and empty);\ndef any(generator; condition): isempty(generator|condition or empty)|not;\ndef all(condition): all(.[]; condition);\ndef any(condition): any(.[]; condition);\ndef all: all(.[]; .);\ndef any: any(.[]; .);\ndef last(g): reduce g as $item (null; $item);\ndef nth($n; g): if $n < 0 then error(\"nth doesn't support negative indices\") else last(limit($n + 1; g)) end;\ndef first: .[0];\ndef last: .[-1];\ndef nth($n): .[$n];\ndef combinations:\n    if length == 0 then [] else\n        .[0][] as $x\n          | (.[1:] | combinations) as $y\n          | [$x] + $y\n    end;\ndef combinations(n):\n    . as $dot\n      | [range(n) | $dot]\n      | combinations;\n# transpose a possibly jagged matrix, quickly;\n# rows are padded with nulls so the result is always rectangular.\ndef transpose:\n  if . == [] then []\n  else . as $in\n  | (map(length) | max) as $max\n  | length as $length\n  | reduce range(0; $max) as $j\n      ([]; . + [reduce range(0;$length) as $i ([]; . + [ $in[$i][$j] ] )] )\n\t        end;\ndef in(xs): . as $x | xs | has($x);\ndef inside(xs): . as $x | xs | contains($x);\ndef repeat(exp):\n     def _repeat:\n         exp, _repeat;\n     _repeat;\ndef inputs: try repeat(input) catch if .==\"break\" then empty else error end;\n# like ruby's downcase - only characters A to Z are affected\ndef ascii_downcase:\n  explode | map( if 65 <= . and . <= 90 then . + 32  else . end) | implode;\n# like ruby's upcase - only characters a to z are affected\ndef ascii_upcase:\n  explode | map( if 97 <= . and . <= 122 then . - 32  else . end) | implode;\n\n# Streaming utilities\ndef truncate_stream(stream):\n  . as $n | null | stream | . as $input | if (.[0]|length) > $n then setpath([0];$input[0][$n:]) else empty end;\ndef fromstream(i): {x: null, e: false} as $init |\n  # .x = object being built; .e = emit and reset state\n  foreach i as $i ($init\n  ; if .e then $init else . end\n  | if $i|length == 2\n    then setpath([\"e\"]; $i[0]|length==0) | setpath([\"x\"]+$i[0]; $i[1])\n    else setpath([\"e\"]; $i[0]|length==1) end\n  ; if .e then .x else empty end);\ndef tostream:\n  path(def r: (.[]?|r), .; r) as $p |\n  getpath($p) |\n  reduce path(.[]?) as $q ([$p, .]; [$p+$q]);\n\n\n# Assuming the input array is sorted, bsearch/1 returns\n# the index of the target if the target is in the input array; and otherwise\n#  (-1 - ix), where ix is the insertion point that would leave the array sorted.\n# If the input is not sorted, bsearch will terminate but with irrelevant results.\ndef bsearch($target):\n  if length == 0 then -1\n  elif length == 1 then\n     if $target == .[0] then 0 elif $target < .[0] then -1 else -2 end\n  else . as $in\n    # state variable: [start, end, answer]\n    # where start and end are the upper and lower offsets to use.\n    | [0, length-1, null]\n    | until( .[0] > .[1] ;\n             if .[2] != null then (.[1] = -1)               # i.e. break\n             else\n               ( ( (.[1] + .[0]) / 2 ) | floor ) as $mid\n               | $in[$mid] as $monkey\n               | if $monkey == $target  then (.[2] = $mid)   # success\n                 elif .[0] == .[1]     then (.[1] = -1)     # failure\n                 elif $monkey < $target then (.[0] = ($mid + 1))\n                 else (.[1] = ($mid - 1))\n                 end\n             end )\n    | if .[2] == null then          # compute the insertion point\n         if $in[ .[0] ] < $target then (-2 -.[0])\n         else (-1 -.[0])\n         end\n      else .[2]\n      end\n  end;\n\n# Apply f to composite entities recursively, and to atoms\ndef walk(f):\n  . as $in\n  | if type == \"object\" then\n      reduce keys_unsorted[] as $key\n        ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f\n  elif type == \"array\" then map( walk(f) ) | f\n  else f\n  end;\n\n# SQL-ish operators here:\ndef INDEX(stream; idx_expr):\n  reduce stream as $row ({}; .[$row|idx_expr|tostring] = $row);\ndef INDEX(idx_expr): INDEX(.[]; idx_expr);\ndef JOIN($idx; idx_expr):\n  [.[] | [., $idx[idx_expr]]];\ndef JOIN($idx; stream; idx_expr):\n  stream | [., $idx[idx_expr]];\ndef JOIN($idx; stream; idx_expr; join_expr):\n  stream | [., $idx[idx_expr]] | join_expr;\ndef IN(s): any(s == .; .);\ndef IN(src; s): any(src == s; .);\ndef pow10: \"Error: pow10/0 not found at build time\"|error;"
|-FunctionDecl 0x5608c14b82c8 <line:1838:1, line:1841:1> line:1838:14 used gen_builtin_list 'block (block)' static
| |-ParmVarDecl 0x5608c14b8238 <col:31, col:37> col:37 used builtins 'block':'struct block'
| `-CompoundStmt 0x5608c14b8900 <col:47, line:1841:1>
|   |-DeclStmt 0x5608c14b8628 <line:1839:3, col:84>
|   | `-VarDecl 0x5608c14b8380 <col:3, col:83> col:6 used list 'jv':'jv' cinit
|   |   `-CallExpr 0x5608c14b85f8 <col:13, col:83> 'jv':'jv'
|   |     |-ImplicitCastExpr 0x5608c14b85e0 <col:13> 'jv (*)(jv, jv)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5608c14b83e8 <col:13> 'jv (jv, jv)' Function 0x5608c13dd998 'jv_array_append' 'jv (jv, jv)'
|   |     |-CallExpr 0x5608c14b84e0 <col:29, col:57> 'jv':'jv'
|   |     | |-ImplicitCastExpr 0x5608c14b84c8 <col:29> 'jv (*)(block, int)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x5608c14b8408 <col:29> 'jv (block, int)' Function 0x5608c140dfc8 'block_list_funcs' 'jv (block, int)'
|   |     | |-ImplicitCastExpr 0x5608c14b8510 <col:46> 'block':'struct block' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x5608c14b8428 <col:46> 'block':'struct block' lvalue ParmVar 0x5608c14b8238 'builtins' 'block':'struct block'
|   |     | `-IntegerLiteral 0x5608c14b8448 <col:56> 'int' 1
|   |     `-CallExpr 0x5608c14b8588 <col:60, col:82> 'jv':'jv'
|   |       |-ImplicitCastExpr 0x5608c14b8570 <col:60> 'jv (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x5608c14b8528 <col:60> 'jv (const char *)' Function 0x5608c13de178 'jv_string' 'jv (const char *)'
|   |       `-ImplicitCastExpr 0x5608c14b85c8 <col:70> 'const char *' <NoOp>
|   |         `-ImplicitCastExpr 0x5608c14b85b0 <col:70> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x5608c14b8548 <col:70> 'char [11]' lvalue "builtins/0"
|   `-ReturnStmt 0x5608c14b88f0 <line:1840:3, ./src/compile.h:93:46>
|     `-ParenExpr 0x5608c14b88d0 <col:24, col:46> 'block':'struct block'
|       `-CallExpr 0x5608c14b8888 <col:25, col:45> 'block':'struct block'
|         |-ImplicitCastExpr 0x5608c14b8870 <col:25> 'block (*)(block, block)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5608c14b8640 <col:25> 'block (block, block)' Function 0x5608c140c148 'block_join' 'block (block, block)'
|         |-ImplicitCastExpr 0x5608c14b88b8 <col:36, col:39> 'block':'struct block' <LValueToRValue>
|         | `-ParenExpr 0x5608c14b8680 <col:36, col:39> 'block':'struct block' lvalue
|         |   `-DeclRefExpr 0x5608c14b8660 <src/builtin.c:1840:16> 'block':'struct block' lvalue ParmVar 0x5608c14b8238 'builtins' 'block':'struct block'
|         `-ParenExpr 0x5608c14b8850 <./src/compile.h:93:41, col:44> 'block':'struct block'
|           `-CallExpr 0x5608c14b87e8 <src/builtin.c:1840:26, col:78> 'block':'struct block'
|             |-ImplicitCastExpr 0x5608c14b87d0 <col:26> 'block (*)(const char *, block, block)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5608c14b86a0 <col:26> 'block (const char *, block, block)' Function 0x5608c1407a48 'gen_function' 'block (const char *, block, block)'
|             |-ImplicitCastExpr 0x5608c14b8838 <col:39> 'const char *' <NoOp>
|             | `-ImplicitCastExpr 0x5608c14b8820 <col:39> 'char *' <ArrayToPointerDecay>
|             |   `-StringLiteral 0x5608c14b86c0 <col:39> 'char [9]' lvalue "builtins"
|             |-CallExpr 0x5608c14b8718 <col:51, col:60> 'block':'struct block'
|             | `-ImplicitCastExpr 0x5608c14b8700 <col:51> 'block (*)()' <FunctionToPointerDecay>
|             |   `-DeclRefExpr 0x5608c14b86e0 <col:51> 'block ()' Function 0x5608c1405828 'gen_noop' 'block ()'
|             `-CallExpr 0x5608c14b8790 <col:63, col:77> 'block':'struct block'
|               |-ImplicitCastExpr 0x5608c14b8778 <col:63> 'block (*)(jv)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5608c14b8738 <col:63> 'block (jv)' Function 0x5608c1405d28 'gen_const' 'block (jv)'
|               `-ImplicitCastExpr 0x5608c14b87b8 <col:73> 'jv':'jv' <LValueToRValue>
|                 `-DeclRefExpr 0x5608c14b8758 <col:73> 'jv':'jv' lvalue Var 0x5608c14b8380 'list' 'jv':'jv'
`-FunctionDecl 0x5608c14b8a48 prev 0x5608c140e780 <line:1843:1, line:1856:1> line:1843:5 builtins_bind 'int (jq_state *, block *)'
  |-ParmVarDecl 0x5608c14b8930 <col:19, col:29> col:29 used jq 'jq_state *'
  |-ParmVarDecl 0x5608c14b89a8 <col:33, col:40> col:40 used bb 'block *'
  `-CompoundStmt 0x5608c14c4d70 <col:44, line:1856:1>
    |-DeclStmt 0x5608c14b8b70 <line:1844:3, col:17>
    | `-VarDecl 0x5608c14b8b08 <col:3, col:9> col:9 used builtins 'block':'struct block'
    |-DeclStmt 0x5608c14b8e88 <line:1845:3, col:90>
    | `-VarDecl 0x5608c14b8bb0 <col:3, col:89> col:19 used src 'struct locfile *' cinit
    |   `-CallExpr 0x5608c14b8dd0 <col:25, col:89> 'struct locfile *'
    |     |-ImplicitCastExpr 0x5608c14b8db8 <col:25> 'struct locfile *(*)(jq_state *, const char *, const char *, int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x5608c14b8c18 <col:25> 'struct locfile *(jq_state *, const char *, const char *, int)' Function 0x5608c14046b0 'locfile_init' 'struct locfile *(jq_state *, const char *, const char *, int)'
    |     |-ImplicitCastExpr 0x5608c14b8e10 <col:38> 'jq_state *' <LValueToRValue>
    |     | `-DeclRefExpr 0x5608c14b8c38 <col:38> 'jq_state *' lvalue ParmVar 0x5608c14b8930 'jq' 'jq_state *'
    |     |-ImplicitCastExpr 0x5608c14b8e40 <col:42> 'const char *' <NoOp>
    |     | `-ImplicitCastExpr 0x5608c14b8e28 <col:42> 'char *' <ArrayToPointerDecay>
    |     |   `-StringLiteral 0x5608c14b8c58 <col:42> 'char [10]' lvalue "<builtin>"
    |     |-ImplicitCastExpr 0x5608c14b8e58 <col:55> 'const char *' <ArrayToPointerDecay>
    |     | `-DeclRefExpr 0x5608c14b8c80 <col:55> 'const char [11423]' lvalue Var 0x5608c14b8148 'jq_builtins' 'const char [11423]'
    |     `-ImplicitCastExpr 0x5608c14b8e70 <col:68, col:88> 'int' <IntegralCast>
    |       `-BinaryOperator 0x5608c14b8d38 <col:68, col:88> 'unsigned long' '-'
    |         |-UnaryExprOrTypeTraitExpr 0x5608c14b8ce0 <col:68, col:86> 'unsigned long' sizeof
    |         | `-ParenExpr 0x5608c14b8cc0 <col:74, col:86> 'const char [11423]' lvalue
    |         |   `-DeclRefExpr 0x5608c14b8ca0 <col:75> 'const char [11423]' lvalue Var 0x5608c14b8148 'jq_builtins' 'const char [11423]' non_odr_use_unevaluated
    |         `-ImplicitCastExpr 0x5608c14b8d20 <col:88> 'unsigned long' <IntegralCast>
    |           `-IntegerLiteral 0x5608c14b8d00 <col:88> 'int' 1
    |-DeclStmt 0x5608c14b90e8 <line:1846:3, col:49>
    | `-VarDecl 0x5608c14b8eb8 <col:3, col:48> col:7 used nerrors 'int' cinit
    |   `-CallExpr 0x5608c14b9010 <col:17, col:48> 'int'
    |     |-ImplicitCastExpr 0x5608c14b8ff8 <col:17> 'int (*)(struct locfile *, block *)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x5608c14b8f20 <col:17> 'int (struct locfile *, block *)' Function 0x5608c140ebe0 'jq_parse_library' 'int (struct locfile *, block *)'
    |     |-ImplicitCastExpr 0x5608c14b9040 <col:34> 'struct locfile *' <LValueToRValue>
    |     | `-DeclRefExpr 0x5608c14b8f40 <col:34> 'struct locfile *' lvalue Var 0x5608c14b8bb0 'src' 'struct locfile *'
    |     `-UnaryOperator 0x5608c14b8f80 <col:39, col:40> 'block *' prefix '&' cannot overflow
    |       `-DeclRefExpr 0x5608c14b8f60 <col:40> 'block':'struct block' lvalue Var 0x5608c14b8b08 'builtins' 'block':'struct block'
    |-ParenExpr 0x5608c14c44e0 </usr/include/assert.h:105:3, line:110:7> 'void'
    | `-BinaryOperator 0x5608c14c44c0 <line:105:4, line:110:6> 'void' ','
    |   |-CStyleCastExpr 0x5608c14b9230 <line:105:4, col:33> 'void' <ToVoid>
    |   | `-UnaryExprOrTypeTraitExpr 0x5608c14b9200 <col:11, col:33> 'unsigned long' sizeof
    |   |   `-ParenExpr 0x5608c14b91e0 <col:18, col:33> 'int'
    |   |     `-ConditionalOperator 0x5608c14b91b0 <col:19, col:32> 'int'
    |   |       |-ParenExpr 0x5608c14b9150 <col:19, col:24> 'int'
    |   |       | `-UnaryOperator 0x5608c14b9138 <src/builtin.c:1847:10, col:11> 'int' prefix '!' cannot overflow
    |   |       |   `-ImplicitCastExpr 0x5608c14b9120 <col:11> 'int' <LValueToRValue>
    |   |       |     `-DeclRefExpr 0x5608c14b9100 <col:11> 'int' lvalue Var 0x5608c14b8eb8 'nerrors' 'int' non_odr_use_unevaluated
    |   |       |-IntegerLiteral 0x5608c14b9170 </usr/include/assert.h:105:28> 'int' 1
    |   |       `-IntegerLiteral 0x5608c14b9190 <col:32> 'int' 0
    |   `-UnaryOperator 0x5608c14c44a8 <col:36, line:110:6> 'void' prefix '__extension__' cannot overflow
    |     `-StmtExpr 0x5608c14c4488 <line:105:50, line:110:6> 'void'
    |       `-CompoundStmt 0x5608c14c4470 <line:105:51, line:110:5>
    |         `-IfStmt 0x5608c14c4440 <line:106:7, line:109:68> has_else
    |           |-UnaryOperator 0x5608c14b9290 <src/builtin.c:1847:10, col:11> 'int' prefix '!' cannot overflow
    |           | `-ImplicitCastExpr 0x5608c14b9278 <col:11> 'int' <LValueToRValue>
    |           |   `-DeclRefExpr 0x5608c14b9258 <col:11> 'int' lvalue Var 0x5608c14b8eb8 'nerrors' 'int'
    |           |-NullStmt 0x5608c14b92a8 </usr/include/assert.h:107:9>
    |           `-CallExpr 0x5608c14b9400 <line:109:9, col:68> 'void'
    |             |-ImplicitCastExpr 0x5608c14b93e8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
    |             | `-DeclRefExpr 0x5608c14b92b0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x5608c11c5d98 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
    |             |-ImplicitCastExpr 0x5608c14b9458 <<scratch space>:2:1> 'const char *' <NoOp>
    |             | `-ImplicitCastExpr 0x5608c14b9440 <col:1> 'char *' <ArrayToPointerDecay>
    |             |   `-StringLiteral 0x5608c14b92d0 <col:1> 'char [9]' lvalue "!nerrors"
    |             |-ImplicitCastExpr 0x5608c14c43f8 <line:3:1> 'const char *' <NoOp>
    |             | `-ImplicitCastExpr 0x5608c14c43e0 <col:1> 'char *' <ArrayToPointerDecay>
    |             |   `-StringLiteral 0x5608c14b92f0 <col:1> 'char [14]' lvalue "src/builtin.c"
    |             |-ImplicitCastExpr 0x5608c14c4410 <line:4:1> 'unsigned int' <IntegralCast>
    |             | `-IntegerLiteral 0x5608c14b9318 <col:1> 'int' 1847
    |             `-ImplicitCastExpr 0x5608c14c4428 </usr/include/assert.h:126:30, col:44> 'const char *' <ArrayToPointerDecay>
    |               `-UnaryOperator 0x5608c14b93d0 <col:30, col:44> 'const char [39]' lvalue prefix '__extension__' cannot overflow
    |                 `-PredefinedExpr 0x5608c14b93b8 <col:44> 'const char [39]' lvalue __PRETTY_FUNCTION__
    |                   `-StringLiteral 0x5608c14b9378 <col:44> 'const char [39]' lvalue "int builtins_bind(jq_state *, block *)"
    |-CallExpr 0x5608c14c45b0 <src/builtin.c:1848:3, col:19> 'void'
    | |-ImplicitCastExpr 0x5608c14c4598 <col:3> 'void (*)(struct locfile *)' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x5608c14c4500 <col:3> 'void (struct locfile *)' Function 0x5608c1404cd8 'locfile_free' 'void (struct locfile *)'
    | `-ImplicitCastExpr 0x5608c14c45d8 <col:16> 'struct locfile *' <LValueToRValue>
    |   `-DeclRefExpr 0x5608c14c4520 <col:16> 'struct locfile *' lvalue Var 0x5608c14b8bb0 'src' 'struct locfile *'
    |-BinaryOperator 0x5608c14c4700 <line:1850:3, col:46> 'block':'struct block' '='
    | |-DeclRefExpr 0x5608c14c45f0 <col:3> 'block':'struct block' lvalue Var 0x5608c14b8b08 'builtins' 'block':'struct block'
    | `-CallExpr 0x5608c14c46c0 <col:14, col:46> 'block':'struct block'
    |   |-ImplicitCastExpr 0x5608c14c46a8 <col:14> 'block (*)(block)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x5608c14c4610 <col:14> 'block (block)' Function 0x5608c14b4b78 'bind_bytecoded_builtins' 'block (block)'
    |   `-ImplicitCastExpr 0x5608c14c46e8 <col:38> 'block':'struct block' <LValueToRValue>
    |     `-DeclRefExpr 0x5608c14c4630 <col:38> 'block':'struct block' lvalue Var 0x5608c14b8b08 'builtins' 'block':'struct block'
    |-BinaryOperator 0x5608c14c4a30 <line:1851:3, col:98> 'block':'struct block' '='
    | |-DeclRefExpr 0x5608c14c4720 <col:3> 'block':'struct block' lvalue Var 0x5608c14b8b08 'builtins' 'block':'struct block'
    | `-CallExpr 0x5608c14c49b0 <col:14, col:98> 'block':'struct block'
    |   |-ImplicitCastExpr 0x5608c14c4998 <col:14> 'block (*)(const struct cfunction *, int, block)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x5608c14c4740 <col:14> 'block (const struct cfunction *, int, block)' Function 0x5608c140bcc8 'gen_cbinding' 'block (const struct cfunction *, int, block)'
    |   |-ImplicitCastExpr 0x5608c14c49e8 <col:27> 'const struct cfunction *' <ArrayToPointerDecay>
    |   | `-DeclRefExpr 0x5608c14c4760 <col:27> 'const struct cfunction [129]' lvalue Var 0x5608c14a5868 'function_list' 'const struct cfunction [129]'
    |   |-ImplicitCastExpr 0x5608c14c4a00 <col:42, col:87> 'int' <IntegralCast>
    |   | `-BinaryOperator 0x5608c14c4900 <col:42, col:87> 'unsigned long' '/'
    |   |   |-UnaryExprOrTypeTraitExpr 0x5608c14c47c0 <col:42, col:62> 'unsigned long' sizeof
    |   |   | `-ParenExpr 0x5608c14c47a0 <col:48, col:62> 'const struct cfunction [129]' lvalue
    |   |   |   `-DeclRefExpr 0x5608c14c4780 <col:49> 'const struct cfunction [129]' lvalue Var 0x5608c14a5868 'function_list' 'const struct cfunction [129]' non_odr_use_unevaluated
    |   |   `-UnaryExprOrTypeTraitExpr 0x5608c14c4878 <col:64, col:87> 'unsigned long' sizeof
    |   |     `-ParenExpr 0x5608c14c4858 <col:70, col:87> 'const struct cfunction':'const struct cfunction' lvalue
    |   |       `-ArraySubscriptExpr 0x5608c14c4838 <col:71, col:86> 'const struct cfunction':'const struct cfunction' lvalue
    |   |         |-ImplicitCastExpr 0x5608c14c4820 <col:71> 'const struct cfunction *' <ArrayToPointerDecay>
    |   |         | `-DeclRefExpr 0x5608c14c47e0 <col:71> 'const struct cfunction [129]' lvalue Var 0x5608c14a5868 'function_list' 'const struct cfunction [129]' non_odr_use_unevaluated
    |   |         `-IntegerLiteral 0x5608c14c4800 <col:85> 'int' 0
    |   `-ImplicitCastExpr 0x5608c14c4a18 <col:90> 'block':'struct block' <LValueToRValue>
    |     `-DeclRefExpr 0x5608c14c4920 <col:90> 'block':'struct block' lvalue Var 0x5608c14b8b08 'builtins' 'block':'struct block'
    |-BinaryOperator 0x5608c14c4b08 <line:1852:3, col:39> 'block':'struct block' '='
    | |-DeclRefExpr 0x5608c14c4a50 <col:3> 'block':'struct block' lvalue Var 0x5608c14b8b08 'builtins' 'block':'struct block'
    | `-CallExpr 0x5608c14c4ac8 <col:14, col:39> 'block':'struct block'
    |   |-ImplicitCastExpr 0x5608c14c4ab0 <col:14> 'block (*)(block)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x5608c14c4a70 <col:14> 'block (block)' Function 0x5608c14b82c8 'gen_builtin_list' 'block (block)'
    |   `-ImplicitCastExpr 0x5608c14c4af0 <col:31> 'block':'struct block' <LValueToRValue>
    |     `-DeclRefExpr 0x5608c14c4a90 <col:31> 'block':'struct block' lvalue Var 0x5608c14b8b08 'builtins' 'block':'struct block'
    |-BinaryOperator 0x5608c14c4d08 <line:1854:3, col:63> 'block':'struct block' '='
    | |-UnaryOperator 0x5608c14c4b60 <col:3, col:4> 'block':'struct block' lvalue prefix '*' cannot overflow
    | | `-ImplicitCastExpr 0x5608c14c4b48 <col:4> 'block *' <LValueToRValue>
    | |   `-DeclRefExpr 0x5608c14c4b28 <col:4> 'block *' lvalue ParmVar 0x5608c14b89a8 'bb' 'block *'
    | `-CallExpr 0x5608c14c4ca0 <col:9, col:63> 'block':'struct block'
    |   |-ImplicitCastExpr 0x5608c14c4c88 <col:9> 'block (*)(block, block, int)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x5608c14c4b78 <col:9> 'block (block, block, int)' Function 0x5608c140d818 'block_bind_referenced' 'block (block, block, int)'
    |   |-ImplicitCastExpr 0x5608c14c4cd8 <col:31> 'block':'struct block' <LValueToRValue>
    |   | `-DeclRefExpr 0x5608c14c4b98 <col:31> 'block':'struct block' lvalue Var 0x5608c14b8b08 'builtins' 'block':'struct block'
    |   |-ImplicitCastExpr 0x5608c14c4cf0 <col:41, col:42> 'block':'struct block' <LValueToRValue>
    |   | `-UnaryOperator 0x5608c14c4bf0 <col:41, col:42> 'block':'struct block' lvalue prefix '*' cannot overflow
    |   |   `-ImplicitCastExpr 0x5608c14c4bd8 <col:42> 'block *' <LValueToRValue>
    |   |     `-DeclRefExpr 0x5608c14c4bb8 <col:42> 'block *' lvalue ParmVar 0x5608c14b89a8 'bb' 'block *'
    |   `-DeclRefExpr 0x5608c14c4c08 <col:46> 'int' EnumConstant 0x5608c1400d70 'OP_IS_CALL_PSEUDO' 'int'
    `-ReturnStmt 0x5608c14c4d60 <line:1855:3, col:10>
      `-ImplicitCastExpr 0x5608c14c4d48 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x5608c14c4d28 <col:10> 'int' lvalue Var 0x5608c14b8eb8 'nerrors' 'int'
